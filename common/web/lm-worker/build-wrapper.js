import fs from 'fs';

import convertSourcemap from 'convert-source-map'; // Transforms sourcemaps among various common formats.
                                                   // Base64, stringified-JSON, end-of-file comment...

let DEBUG = false;
let MINIFY = false;

if(process.argv.length > 2) {
  for(let i = 2; i < process.argv.length; i++) {
    const arg = process.argv[i];

    switch(arg) {
      case '--debug':
        DEBUG = true;
        break;
      case '--minify':
        MINIFY = true;
        break;
      // May add other options if desired in the future.
      default:
        console.error("Invalid command-line option set for script; only --debug and --minify are permitted.");
        process.exit(1);
    }
  }
}

const sourceFile = `build/lib/worker-main.polyfilled${MINIFY ? '.min' : ''}.js`;
const destFile = `build/lib/worker-main.wrapped${MINIFY ? '.min' : ''}.js`;

const script = fs.readFileSync(sourceFile);

// While it IS possible to do partial sourcemaps (without the sources, but with everything else) within the worker...
// the resulting sourcemaps are -surprisingly- large - larger than the code itself!
//
// So... we don't use that strategy here.

console.log();
console.log(`Wrapping + generating final output: ${MINIFY ? 'minified' : 'unminified'} + ${DEBUG ? 'full sourcemaps' : 'reduced sourcemaps'}`);

// Now, to build the wrapper...

// First, let's build the encoded sourcemap.

// Wrapped in a function so we can leverage `const` with the result.
function buildSrcMapString() {
  const sourcemapJSON = convertSourcemap.fromJSON(fs.readFileSync(`${sourceFile}.map`)).toObject();
  const encodedSrcMap = convertSourcemap.fromObject(sourcemapJSON).toBase64();
  return `//# sourceMappingURL=data:application/json;charset=utf-8;base64,${encodedSrcMap}`;
}

const srcMapString = DEBUG ? buildSrcMapString() : "";

/*
 * It'd be nice to do a 'partial' encodeURIComponent that only gets the important bits...
 * but my attempts to do so end up triggering errors when loading.
 */

let rawScript = script.toString();
// Two layers of encoding:  one for the raw source (parsed by the JS engine),
// one to 'unwrap' it from a string _within_ that source.
let jsonEncoded = JSON.stringify(rawScript);

let wrapper = `
// Autogenerated code.  Do not modify!
// --START:LMLayerWorkerCode--

export var LMLayerWorkerCode = ${jsonEncoded};

${MINIFY && "// Sourcemaps have been omitted for this release build." || ''}
export var LMLayerWorkerSourcemapComment = "${srcMapString}";

// --END:LMLayerWorkerCode
`;

fs.writeFileSync(destFile, wrapper);