{"version":3,"file":"index.js","sourceRoot":"/keyman/","sources":["text/kmwstring.ts","text/codes.ts","text/engineDeviceSpec.ts","text/deadkeys.ts","text/outputTarget.ts","text/keyEvent.ts","text/ruleBehavior.ts","text/defaultOutput.ts","environment.inc.ts","utils/version.ts","utils/deepCopy.ts","keyboards/defaultLayouts.ts","keyboards/activeLayout.ts","text/systemStores.ts","text/kbdInterface.ts","keyboards/keyboard.ts","text/keyMapping.ts","utils/globalObject.ts","text/keyboardProcessor.ts"],"names":[],"mappings":"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BAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAEhB,EAAE,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;gBACjB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACf,EAAE,CAAC,MAAM,CAAC,GAA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","sourcesContent":["/***\n   KeymanWeb 11.0\n   Copyright 2019 SIL International\n***/\n\ninterface StringConstructor {\n  kmwFromCharCode(cp0: number): string,\n  _kmwFromCharCode(cp0: number): string,\n  kmwEnableSupplementaryPlane(bEnable: boolean)\n}\n\ninterface String {\n  kmwCharCodeAt(codePointIndex: number): number,\n  kmwCharAt(codePointIndex: number) : string,\n  kmwIndexOf(searchValue: string, fromIndex?: number) : number,\n  kmwLastIndexOf(searchValue: string, fromIndex?: number) : number,\n  kmwSlice(beginSlice: number, endSlice: number) : string,\n  kmwSubstring(start: number, length: number) : string,\n  kmwSubstr(start: number, length?: number) : string,\n  kmwBMPSubstr(start: number, length?: number) : string,\n  kmwLength(): number,\n  kmwBMPLength(): number,\n  kmwNextChar(codeUnitIndex: number): number,\n  kmwBMPNextChar(codeUnitIndex: number): number,\n  kmwPrevChar(codeUnitIndex: number): number,\n  kmwBMPPrevChar(codeUnitIndex: number): number,\n  kmwCodePointToCodeUnit(codePointIndex: number) : number,\n  kmwBMPCodePointToCodeUnit(codePointIndex: number) : number,\n  kmwCodeUnitToCodePoint(codeUnitIndex: number) : number,\n  kmwBMPCodeUnitToCodePoint(codeUnitIndex: number) : number,\n  _kmwCharCodeAt(codePointIndex: number): number,\n  _kmwCharAt(codePointIndex: number) : string,\n  _kmwIndexOf(searchValue: string, fromIndex?: number) : number,\n  _kmwLastIndexOf(searchValue: string, fromIndex?: number) : number,\n  _kmwSlice(beginSlice: number, endSlice: number) : string,\n  _kmwSubstring(start: number, length?: number) : string,\n  _kmwSubstr(start: number, length?: number) : string,\n  _kmwLength(): number,\n  _kmwNextChar(codeUnitIndex: number): number,\n  _kmwPrevChar(codeUnitIndex: number): number,\n  _kmwCodePointToCodeUnit(codePointIndex: number) : number,\n  _kmwCodeUnitToCodePoint(codeUnitIndex: number) : number,\n}\n\n/**\n * Constructs a string from one or more Unicode character codepoint values \n * passed as integer parameters.\n * \n * @param  {number} cp0,...   1 or more Unicode codepoints, e.g. 0x0065, 0x10000\n * @return {string|null}      The new String object.\n */\nString.kmwFromCharCode = function(cp0) {\n  var chars = [], i;\n  for (i = 0; i < arguments.length; i++) {\n    var c = Number(arguments[i]);\n    if (!isFinite(c) || c < 0 || c > 0x10FFFF || Math.floor(c) !== c) {\n      throw new RangeError(\"Invalid code point \" + c);\n    }\n    if (c < 0x10000) {\n      chars.push(c);\n    } else {\n      c -= 0x10000;\n      chars.push((c >> 10) + 0xD800);\n      chars.push((c % 0x400) + 0xDC00);\n    }\n  }\n  return String.fromCharCode.apply(undefined, chars);\n}\n\n/**\n * Returns a number indicating the Unicode value of the character at the given \n * code point index, with support for supplementary plane characters.\n * \n * @param  {number}  codePointIndex  The code point index into the string (not \n                                     the code unit index) to return\n * @return {number}                  The Unicode character value\n */\nString.prototype.kmwCharCodeAt = function(codePointIndex) {\n  var str = String(this);\n  var codeUnitIndex = 0;\n  \n  if (codePointIndex < 0 || codePointIndex  >= str.length) {\n    return NaN;\n  }\n\n  for(var i = 0; i < codePointIndex; i++) {\n    codeUnitIndex = str.kmwNextChar(codeUnitIndex);\n    if(codeUnitIndex === null) return NaN;\n  }\n  \n  var first = str.charCodeAt(codeUnitIndex);\n  if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {\n    var second = str.charCodeAt(codeUnitIndex + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;\n    }\n  }\n  return first;  \n}\n\n/**\n * Returns the code point index within the calling String object of the first occurrence\n * of the specified value, or -1 if not found.\n * \n * @param  {string}  searchValue    The value to search for\n * @param  {number}  [fromIndex]    Optional code point index to start searching from\n * @return {number}                 The code point index of the specified search value\n */\nString.prototype.kmwIndexOf = function(searchValue, fromIndex) {\n  var str = String(this);\n  var codeUnitIndex = str.indexOf(searchValue, fromIndex);\n  \n  if(codeUnitIndex < 0) {\n    return codeUnitIndex;\n  }\n  \n  var codePointIndex = 0;\n  for(var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i)) codePointIndex++;\n  return codePointIndex;\n}\n\n/**\n * Returns the code point index within the calling String object of the last occurrence \n * of the specified value, or -1 if not found.\n * \n * @param  {string}  searchValue    The value to search for\n * @param  {number}  fromIndex      Optional code point index to start searching from\n * @return {number}                 The code point index of the specified search value\n */\nString.prototype.kmwLastIndexOf = function(searchValue, fromIndex)\n{\n  var str = String(this);\n  var codeUnitIndex = str.lastIndexOf(searchValue, fromIndex);\n  \n  if(codeUnitIndex < 0) {\n    return codeUnitIndex;\n  }\n  \n  var codePointIndex = 0;\n  for(var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i)) codePointIndex++;\n  return codePointIndex;\n}\n\n/**\n * Returns the length of the string in code points, as opposed to code units.\n * \n * @return {number}                 The length of the string in code points\n */\nString.prototype.kmwLength = function() {\n  var str = String(this);\n  \n  if(str.length == 0) return 0;\n  \n  for(var i = 0, codeUnitIndex = 0; codeUnitIndex !== null; i++) \n    codeUnitIndex = str.kmwNextChar(codeUnitIndex);\n  return i;\n}\n\n/**\n * Extracts a section of a string and returns a new string.\n * \n * @param  {number}  beginSlice    The start code point index in the string to \n *                                 extract from\n * @param  {number}  endSlice      Optional end code point index in the string\n *                                 to extract to\n * @return {string}                The substring as selected by beginSlice and\n *                                 endSlice\n */\nString.prototype.kmwSlice = function(beginSlice, endSlice) {\n  var str = String(this);\n  var beginSliceCodeUnit = str.kmwCodePointToCodeUnit(beginSlice);\n  var endSliceCodeUnit = str.kmwCodePointToCodeUnit(endSlice);\n  if(beginSliceCodeUnit === null || endSliceCodeUnit === null) \n    return '';\n  else\n    return str.slice(beginSliceCodeUnit, endSliceCodeUnit);\n}\n\n/**\n * Returns the characters in a string beginning at the specified location through\n * the specified number of characters.\n * \n * @param  {number}  start         The start code point index in the string to \n *                                 extract from\n * @param  {number=}  length        Optional length to extract\n * @return {string}                The substring as selected by start and length\n */\nString.prototype.kmwSubstr = function(start, length?)\n{\n  var str = String(this);\n  if(start < 0) \n  {\n    start = str.kmwLength() + start;\n  }\n\tif(start < 0) start = 0;\n  var startCodeUnit = str.kmwCodePointToCodeUnit(start);\n  var endCodeUnit = startCodeUnit;\n  \n  if(startCodeUnit === null) return '';\n  \n  if(arguments.length < 2) {\n    endCodeUnit = str.length;\n  } else {\n    for(var i = 0; i < length; i++) endCodeUnit = str.kmwNextChar(endCodeUnit);\n  }\n  if(endCodeUnit === null)\n    return str.substring(startCodeUnit);\n  else\n    return str.substring(startCodeUnit, endCodeUnit);\n}\n\n/**\n * Returns the characters in a string between two indexes into the string.\n * \n * @param  {number}  indexA        The start code point index in the string to \n *                                 extract from\n * @param  {number}  indexB        The end code point index in the string to \n *                                 extract to\n * @return {string}                The substring as selected by indexA and indexB\n */\nString.prototype.kmwSubstring = function(indexA, indexB)\n{\n  var str = String(this),indexACodeUnit,indexBCodeUnit;\n  \n  if(typeof(indexB) == 'undefined') \n  {\n    indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);\n    indexBCodeUnit =  str.length;    \n  } \n  else\n  {\n    if(indexA > indexB) { var c = indexA; indexA = indexB; indexB = c; }\n  \n    indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);\n    indexBCodeUnit = str.kmwCodePointToCodeUnit(indexB);\n  }\n  if(isNaN(indexACodeUnit) || indexACodeUnit === null) indexACodeUnit = 0;\n  if(isNaN(indexBCodeUnit) || indexBCodeUnit === null) indexBCodeUnit = str.length;\n\n  return str.substring(indexACodeUnit, indexBCodeUnit);\n}\n\n/*\n  Helper functions\n*/\n\n/**\n * Returns the code unit index for the next code point in the string, accounting for\n * supplementary pairs \n *\n * @param  {number|null}  codeUnitIndex  The code unit position to increment\n * @return {number|null}                 The index of the next code point in the string,\n *                                       in code units\n */\nString.prototype.kmwNextChar = function(codeUnitIndex) {\n  var str = String(this);\n\n  if(codeUnitIndex === null || codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {\n    return null;\n  }\n  \n  var first = str.charCodeAt(codeUnitIndex);\n  if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {\n    var second = str.charCodeAt(codeUnitIndex + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      if(codeUnitIndex == str.length - 2) {\n        return null;\n      }\n      return codeUnitIndex + 2;\n    }\n  }\n  return codeUnitIndex + 1;\n}\n\n/**\n * Returns the code unit index for the previous code point in the string, accounting\n * for supplementary pairs \n *\n * @param  {number|null}  codeUnitIndex  The code unit position to decrement\n * @return {number|null}                 The index of the previous code point in the\n *                                       string, in code units\n*/\nString.prototype.kmwPrevChar = function(codeUnitIndex) {\n  var str = String(this);\n\n  if(codeUnitIndex == null || codeUnitIndex <= 0 || codeUnitIndex > str.length) {\n    return null;\n  }\n  \n  var second = str.charCodeAt(codeUnitIndex - 1);\n  if (second >= 0xDC00 && second <= 0xDFFF && codeUnitIndex > 1) {\n    var first = str.charCodeAt(codeUnitIndex - 2);\n    if(first >= 0xD800 && first <= 0xDBFF) {\n      return codeUnitIndex - 2;\n    }\n  }\n  return codeUnitIndex - 1;\n}\n\n/**\n * Returns the corresponding code unit index to the code point index passed\n *\n * @param  {number|null} codePointIndex  A code point index in the string\n * @return {number|null}                 The corresponding code unit index\n */\nString.prototype.kmwCodePointToCodeUnit = function(codePointIndex) {\n  \n  if(codePointIndex === null) return null;\n  \n  var str = String(this);\n  var codeUnitIndex = 0;\n  \n  if(codePointIndex < 0) {\n    codeUnitIndex = str.length;\n    for(var i = 0; i > codePointIndex; i--) \n      codeUnitIndex = str.kmwPrevChar(codeUnitIndex);\t\n    return codeUnitIndex;\n  }\n  \n  if(codePointIndex == str.kmwLength()) return str.length;\n  \n  for(var i = 0; i < codePointIndex; i++)\n    codeUnitIndex = str.kmwNextChar(codeUnitIndex);\n  return codeUnitIndex;\n}\n\n/**\n * Returns the corresponding code point index to the code unit index passed\n *\n * @param  {number|null}  codeUnitIndex  A code unit index in the string\n * @return {number|null}                 The corresponding code point index\n */\nString.prototype.kmwCodeUnitToCodePoint = function(codeUnitIndex) {\n  var str = String(this);\n  \n  if(codeUnitIndex === null)\n    return null;\n  else if(codeUnitIndex == 0)\n    return 0;\n  else if(codeUnitIndex < 0)     \n    return str.substr(codeUnitIndex).kmwLength();\n  else\n    return str.substr(0,codeUnitIndex).kmwLength();\n}\n\n/**\n * Returns the character at a the code point index passed\n *\n * @param  {number}  codePointIndex  A code point index in the string\n * @return {string}                  The corresponding character\n */\nString.prototype.kmwCharAt = function(codePointIndex) {\n  var str = String(this);\n  \n  if(codePointIndex >= 0) return str.kmwSubstr(codePointIndex,1); else return '';\n}\n\n/**\n * String prototype library extensions for basic plane characters, \n * to simplify enabling or disabling supplementary plane functionality (I3319)\n */\n \n/**\n * Returns the code unit index for the next code point in the string\n *\n * @param  {number}  codeUnitIndex    A code point index in the string\n * @return {number|null}                   The corresponding character\n */ \nString.prototype.kmwBMPNextChar = function(codeUnitIndex)\n{\n  var str = String(this);\n  if(codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {\n    return null;\n  }\n  return codeUnitIndex + 1;\n}  \n\n/**\n * Returns the code unit index for the previous code point in the string\n *\n * @param  {number}  codeUnitIndex    A code unit index in the string\n * @return {number|null}                   The corresponding character\n */ \nString.prototype.kmwBMPPrevChar = function(codeUnitIndex)\n{\n  var str = String(this);\n\n  if(codeUnitIndex <= 0 || codeUnitIndex > str.length) {\n    return null;\n  }\n  return codeUnitIndex - 1;\n}  \n\n/**\n * Returns the code unit index for a code point index\n *\n * @param  {number}  codePointIndex   A code point index in the string\n * @return {number}                   The corresponding character\n */ \nString.prototype.kmwBMPCodePointToCodeUnit = function(codePointIndex)\n{\n  return codePointIndex;\n}\n\n/**\n * Returns the code point index for a code unit index\n *\n * @param  {number}  codeUnitIndex    A code point index in the string\n * @return {number}                   The corresponding character\n */ \nString.prototype.kmwBMPCodeUnitToCodePoint = function(codeUnitIndex)\n{\n  return codeUnitIndex;\n}\n\n/**\n * Returns the length of a BMP string\n *\n * @return {number}                   The length in code points\n */ \nString.prototype.kmwBMPLength = function()\n{\n  var str = String(this);\n  return str.length;\n}\n\n\n/**\n * Returns a substring \n *\n * @param  {number}  n\n * @param  {number=}  ln\n * @return {string}                   \n */ \nString.prototype.kmwBMPSubstr = function(n,ln?)\n{\n  var str=String(this);\n  if(n > -1) \n    return str.substr(n,ln);\n  else\n    return str.substr(str.length+n,-n);  \n}\n\n/**\n * Enable or disable supplementary plane string handling\n *\n * @param  {boolean}  bEnable\n */ \nString.kmwEnableSupplementaryPlane = function(bEnable)\n{\n  var p=String.prototype;\n  String._kmwFromCharCode = bEnable ? String.kmwFromCharCode : String.fromCharCode;\n  p._kmwCharAt = bEnable ? p.kmwCharAt : p.charAt;\n  p._kmwCharCodeAt = bEnable ? p.kmwCharCodeAt : p.charCodeAt;\n  p._kmwIndexOf = bEnable ? p.kmwIndexOf :p.indexOf;\n  p._kmwLastIndexOf = bEnable ? p.kmwLastIndexOf : p.lastIndexOf ;\n  p._kmwSlice = bEnable ? p.kmwSlice : p.slice;\n  p._kmwSubstring = bEnable ? p.kmwSubstring : p.substring;\n  p._kmwSubstr = bEnable ? p.kmwSubstr : p.kmwBMPSubstr;\n  p._kmwLength = bEnable ? p.kmwLength : p.kmwBMPLength;\n  p._kmwNextChar = bEnable ? p.kmwNextChar : p.kmwBMPNextChar;\n  p._kmwPrevChar = bEnable ? p.kmwPrevChar : p.kmwBMPPrevChar;\n  p._kmwCodePointToCodeUnit = bEnable ? p.kmwCodePointToCodeUnit : p.kmwBMPCodePointToCodeUnit;\n  p._kmwCodeUnitToCodePoint = bEnable ? p.kmwCodeUnitToCodePoint : p.kmwBMPCodeUnitToCodePoint;\n}\n\n","namespace com.keyman.text {\n  export var Codes = {\n    // Define Keyman Developer modifier bit-flags (exposed for use by other modules)\n    modifierCodes: {\n      \"LCTRL\":0x0001,\n      \"RCTRL\":0x0002,\n      \"LALT\":0x0004,\n      \"RALT\":0x0008,\n      \"SHIFT\":0x0010,\n      \"CTRL\":0x0020,\n      \"ALT\":0x0040,\n      \"CAPS\":0x0100,\n      \"NO_CAPS\":0x0200,\n      \"NUM_LOCK\":0x0400,\n      \"NO_NUM_LOCK\":0x0800,\n      \"SCROLL_LOCK\":0x1000,\n      \"NO_SCROLL_LOCK\":0x2000,\n      \"VIRTUAL_KEY\":0x4000\n    },\n\n    modifierBitmasks: {\n      \"ALL\":0x007F,\n      \"ALT_GR_SIM\": (0x0001 | 0x0004),\n      \"CHIRAL\":0x001F,    // The base bitmask for chiral keyboards.  Includes SHIFT, which is non-chiral.\n      \"IS_CHIRAL\":0x000F, // Used to test if a bitmask uses a chiral modifier.\n      \"NON_CHIRAL\":0x0070 // The default bitmask, for non-chiral keyboards\n    },\n\n    stateBitmasks: {\n      \"ALL\":0x3F00,\n      \"CAPS\":0x0300,\n      \"NUM_LOCK\":0x0C00,\n      \"SCROLL_LOCK\":0x3000\n    },\n\n    // Define standard keycode numbers (exposed for use by other modules)\n    keyCodes: {\n      \"K_BKSP\":8,\"K_TAB\":9,\"K_ENTER\":13,\n      \"K_SHIFT\":16,\"K_CONTROL\":17,\"K_ALT\":18,\"K_PAUSE\":19,\"K_CAPS\":20,\n      \"K_ESC\":27,\"K_SPACE\":32,\"K_PGUP\":33,\n      \"K_PGDN\":34,\"K_END\":35,\"K_HOME\":36,\"K_LEFT\":37,\"K_UP\":38,\n      \"K_RIGHT\":39,\"K_DOWN\":40,\"K_SEL\":41,\"K_PRINT\":42,\"K_EXEC\":43,\n      \"K_INS\":45,\"K_DEL\":46,\"K_HELP\":47,\"K_0\":48,\n      \"K_1\":49,\"K_2\":50,\"K_3\":51,\"K_4\":52,\"K_5\":53,\"K_6\":54,\"K_7\":55,\n      \"K_8\":56,\"K_9\":57,\"K_A\":65,\"K_B\":66,\"K_C\":67,\"K_D\":68,\"K_E\":69,\n      \"K_F\":70,\"K_G\":71,\"K_H\":72,\"K_I\":73,\"K_J\":74,\"K_K\":75,\"K_L\":76,\n      \"K_M\":77,\"K_N\":78,\"K_O\":79,\"K_P\":80,\"K_Q\":81,\"K_R\":82,\"K_S\":83,\n      \"K_T\":84,\"K_U\":85,\"K_V\":86,\"K_W\":87,\"K_X\":88,\"K_Y\":89,\"K_Z\":90,\n      \"K_NP0\":96,\"K_NP1\":97,\"K_NP2\":98,\n      \"K_NP3\":99,\"K_NP4\":100,\"K_NP5\":101,\"K_NP6\":102,\n      \"K_NP7\":103,\"K_NP8\":104,\"K_NP9\":105,\"K_NPSTAR\":106,\n      \"K_NPPLUS\":107,\"K_SEPARATOR\":108,\"K_NPMINUS\":109,\"K_NPDOT\":110,\n      \"K_NPSLASH\":111,\"K_F1\":112,\"K_F2\":113,\"K_F3\":114,\"K_F4\":115,\n      \"K_F5\":116,\"K_F6\":117,\"K_F7\":118,\"K_F8\":119,\"K_F9\":120,\n      \"K_F10\":121,\"K_F11\":122,\"K_F12\":123,\"K_NUMLOCK\":144,\"K_SCROLL\":145,\n      \"K_LSHIFT\":160,\"K_RSHIFT\":161,\"K_LCONTROL\":162,\"K_RCONTROL\":163,\n      \"K_LALT\":164,\"K_RALT\":165,\n      \"K_COLON\":186,\"K_EQUAL\":187,\"K_COMMA\":188,\"K_HYPHEN\":189,\n      \"K_PERIOD\":190,\"K_SLASH\":191,\"K_BKQUOTE\":192,\n      \"K_LBRKT\":219,\"K_BKSLASH\":220,\"K_RBRKT\":221,\n      \"K_QUOTE\":222,\"K_oE2\":226,\"K_OE2\":226,\n      \"K_LOPT\":50001,\"K_ROPT\":50002,\n      \"K_NUMERALS\":50003,\"K_SYMBOLS\":50004,\"K_CURRENCIES\":50005,\n      \"K_UPPER\":50006,\"K_LOWER\":50007,\"K_ALPHA\":50008,\n      \"K_SHIFTED\":50009,\"K_ALTGR\":50010,\n      \"K_TABBACK\":50011,\"K_TABFWD\":50012\n    },\n\n    codesUS: [\n      ['0123456789',';=,-./`', '[\\\\]\\''],\n      [')!@#$%^&*(',':+<_>?~', '{|}\"']\n    ]\n  }\n}","namespace com.keyman.text {\n  export enum Browser {\n    Chrome = 'chrome',\n    Edge = 'edge',\n    Firefox = 'firefox',\n    Native = 'native', // Used by embedded mode\n    Opera = 'opera',\n    Safari = 'safari',\n    Other = 'other'\n  }\n\n  export enum OperatingSystem {\n    Windows = 'windows',\n    macOS = 'macosx',\n    Linux = 'linux',\n    Android = 'android',\n    iOS = 'ios',\n    Other = 'other'\n  }\n\n  export enum FormFactor {\n    Desktop = 'desktop',\n    Phone = 'phone',\n    Tablet = 'tablet'\n  }\n\n  /**\n   * This class provides an abstract version of com.keyman.Device that is core-friendly, \n   * containing only the information needed by web-core for text processing use, devoid\n   * of any direct references to the DOM.\n   */\n  export class EngineDeviceSpec {\n    readonly browser: Browser;\n    readonly formFactor: FormFactor;\n    readonly OS: OperatingSystem;\n    readonly touchable: boolean;\n\n    constructor(browser: string, formFactor: string, OS: string, touchable: boolean) {\n      switch(browser.toLowerCase() as Browser) {\n        case Browser.Chrome:\n        case Browser.Edge:\n        case Browser.Firefox:\n        case Browser.Native:\n        case Browser.Opera:\n        case Browser.Safari:\n          this.browser = browser.toLowerCase() as Browser;\n          break;\n        default:\n          this.browser = Browser.Other;\n      }\n\n      switch(formFactor.toLowerCase() as FormFactor) {\n        case FormFactor.Desktop:\n        case FormFactor.Phone:\n        case FormFactor.Tablet:\n          this.formFactor = formFactor.toLowerCase() as FormFactor;\n          break;\n        default:\n          throw (\"Invalid form factor specified for device: \" + formFactor);\n      }\n\n      switch(OS.toLowerCase() as OperatingSystem) {\n        case OperatingSystem.Windows.toLowerCase():\n        case OperatingSystem.macOS.toLowerCase():\n        case OperatingSystem.Linux.toLowerCase():\n        case OperatingSystem.Android.toLowerCase():\n        case OperatingSystem.iOS.toLowerCase():\n          this.OS = OS.toLowerCase() as OperatingSystem;\n          break;\n        default:\n          this.OS = OperatingSystem.Other;\n      }\n      \n      this.touchable = touchable;\n    }\n  }\n}","namespace com.keyman.text {\n  // Defines the base Deadkey-tracking object.\n  \n  export class Deadkey {\n    p: number;  // Position of deadkey\n    d: number;  // Numerical id of the deadkey\n    o: number;  // Ordinal value of the deadkey (resolves same-place conflicts)\n    matched: number;\n\n    static ordinalSeed: number = 0;\n\n    constructor(pos: number, id: number) {\n      this.p = pos;\n      this.d = id;\n      this.o = Deadkey.ordinalSeed++;\n    }\n\n    match(p: number, d: number): boolean {\n      var result:boolean = (this.p == p && this.d == d);\n\n      return result;\n    }\n\n    set(): void {\n      this.matched = 1;\n    }\n\n    reset(): void {\n      this.matched = 0;\n    }\n\n    before(other: Deadkey): boolean {\n      return this.o < other.o;\n    }\n\n    clone(): Deadkey {\n      let dk = new Deadkey(this.p, this.d);\n      dk.o = this.o;\n\n      return dk;\n    }\n\n    /**\n     * Sorts the deadkeys in reverse order.\n     */\n    static sortFunc = function(a: Deadkey, b: Deadkey) {\n      // We want descending order, so we want 'later' deadkeys first.\n      if(a.p != b.p) {\n        return b.p - a.p;\n      } else {\n        return b.o - a.o;\n      }\n    };\n  }\n\n  // Object-orients deadkey management.\n  export class DeadkeyTracker {\n    dks: Deadkey[] = [];\n\n    toSortedArray(): Deadkey[] {\n      this.dks = this.dks.sort(Deadkey.sortFunc);\n      return [].concat(this.dks);\n    }\n\n    clone(): DeadkeyTracker {\n      let dkt = new DeadkeyTracker();\n      let dks = this.toSortedArray();\n\n      // Make sure to clone the deadkeys themselves - the Deadkey object is mutable.\n      dkt.dks = [];\n      dks.forEach(function(value: Deadkey) {\n        dkt.dks.push(value.clone());\n      });\n\n      return dkt;\n    }\n  \n    /**\n     * Function     isMatch      \n     * Scope        Public\n     * @param       {number}      caretPos  current cursor position\n     * @param       {number}      n         expected offset of deadkey from cursor\n     * @param       {number}      d         deadkey\n     * @return      {boolean}               True if deadkey found selected context matches val\n     * Description  Match deadkey at current cursor position\n     */\n    isMatch(caretPos: number, n: number, d: number): boolean {\n      if(this.dks.length == 0) {\n        return false; // I3318\n      }\n\n      var sp=caretPos;\n      n = sp - n;\n      for(var i = 0; i < this.dks.length; i++) {\n        // Don't re-match an already-matched deadkey.  It's possible to have two identical \n        // entries, and they should be kept separately.\n        if(this.dks[i].match(n, d) && !this.dks[i].matched) {\n          this.dks[i].set();\n          // Assumption:  since we match the first possible entry in the array, we\n          // match the entry with the lower ordinal - the 'first' deadkey in the position.\n          return true; // I3318\n        }\n      }\n\n      this.resetMatched(); // I3318\n\n      return false;\n    }\n\n    add(dk: Deadkey) {\n      this.dks = this.dks.concat(dk);\n    }\n\n    remove(dk: Deadkey) {\n      var index = this.dks.indexOf(dk);\n      this.dks.splice(index, 1);\n    }\n\n    clear() {\n      this.dks = [];\n    }\n\n    resetMatched() {\n      for(let dk of this.dks) {\n        dk.reset();\n      }\n    }\n    \n    deleteMatched(): void {\n      for(var Li = 0; Li < this.dks.length; Li++) {\n        if(this.dks[Li].matched) {\n          this.dks.splice(Li--, 1); // Don't forget to decrement!\n        }\n      }\n    }\n\n    /**\n     * Function     adjustPositions (formerly _DeadkeyAdjustPos)\n     * Scope        Private\n     * @param       {number}      Lstart      start position in context\n     * @param       {number}      Ldelta      characters to adjust by   \n     * Description  Adjust saved positions of deadkeys in context\n     */\n    adjustPositions(Lstart: number, Ldelta: number): void {\n      if(Ldelta == 0) {\n        return;\n      }\n      \n      for(let dk of this.dks) {\n        if(dk.p > Lstart) {\n          dk.p += Ldelta;\n        }\n      }\n    }\n\n    count(): number {\n      return this.dks.length;\n    }\n  }\n}","// Defines KMW's string extension functions.\n///<reference path=\"../text/kmwstring.ts\" />\n// Defines deadkey management in a manner attachable to each element interface.\n///<reference path=\"../text/deadkeys.ts\" />\n// Defines the KeyEvent type.\n///<reference path=\"keyEvent.ts\" />\n\nnamespace com.keyman.text {\n  export class TextTransform implements Transform {\n    readonly insert: string;\n    readonly deleteLeft: number;\n    readonly deleteRight?: number;\n\n    constructor(insert: string, deleteLeft: number, deleteRight?: number) {\n      this.insert = insert;\n      this.deleteLeft = deleteLeft;\n      this.deleteRight = deleteRight || 0;\n    }\n\n    public static readonly nil = new TextTransform('', 0, 0);\n  }\n\n  export class Transcription {\n    readonly token: number;\n    readonly keystroke: KeyEvent;\n    readonly transform: Transform;\n    alternates: Alternate[]; // constructed after the rest of the transcription.\n    readonly preInput: Mock;\n\n    private static tokenSeed: number = 0;\n\n    constructor(keystroke: KeyEvent, transform: Transform, preInput: Mock, alternates?: Alternate[]/*, removedDks: Deadkey[], insertedDks: Deadkey[]*/) {\n      let token = this.token = Transcription.tokenSeed++;\n\n      this.keystroke = keystroke;\n      this.transform = transform;\n      this.alternates = alternates;\n      this.preInput = preInput;\n\n      this.transform.id = this.token;\n\n      // Assign the ID to each alternate, as well.\n      if(alternates) {\n        alternates.forEach(function(alt) {\n          alt.sample.id = token;\n        });\n      }\n    }\n  }\n\n  export type Alternate = ProbabilityMass<Transform>;\n\n  export abstract class OutputTarget {\n    private _dks: text.DeadkeyTracker;\n\n    constructor() {\n      this._dks = new text.DeadkeyTracker();\n    }\n\n    /**\n     * Signifies that this OutputTarget has no default key processing behaviors.  This should be false\n     * for OutputTargets backed by web elements like HTMLInputElement or HTMLTextAreaElement.\n     */\n    get isSynthetic(): boolean {\n      return true;\n    }\n\n    resetContext(): void {\n      this.deadkeys().clear();\n    }\n\n    deadkeys(): text.DeadkeyTracker {\n      return this._dks;\n    }\n\n    hasDeadkeyMatch(n: number, d: number): boolean {\n      return this.deadkeys().isMatch(this.getDeadkeyCaret(), n, d);\n    }\n\n    insertDeadkeyBeforeCaret(d: number) {\n      var dk: Deadkey = new Deadkey(this.getDeadkeyCaret(), d);\n      this.deadkeys().add(dk);\n    }\n\n    /**\n     * Should be called by each output target immediately before text mutation operations occur.\n     * \n     * Maintains solutions to old issues:  I3318,I3319\n     * @param {number} delta  Use negative values if characters were deleted, positive if characters were added.\n     */\n    protected adjustDeadkeys(delta: number) {\n      this.deadkeys().adjustPositions(this.getDeadkeyCaret(), delta); \n    }\n\n    /**\n     * Needed to properly clone deadkeys for use with Mock element interfaces toward predictive text purposes.\n     * @param {object}  dks   An existing set of deadkeys to deep-copy for use by this element interface.\n     */\n    protected setDeadkeys(dks: text.DeadkeyTracker) {\n      this._dks = dks.clone();\n    }\n\n    /**\n     * Determines the basic operations needed to reconstruct the current OutputTarget's text from the prior state specified\n     * by another OutputTarget based on their text and caret positions.\n     * \n     * This is designed for use as a \"before and after\" comparison to determine the effect of a single keyboard rule at a time.\n     * As such, it assumes that the caret is immediately after any inserted text.\n     * @param from An output target (preferably a Mock) representing the prior state of the input/output system.\n     */\n    buildTransformFrom(original: OutputTarget): Transform {\n      let to = this.getText();\n      let from = original.getText();\n\n      let fromCaret = original.getDeadkeyCaret();\n      let toCaret = this.getDeadkeyCaret();\n\n      // Step 1:  Determine the number of left-deletions.\n      for(var newCaret=0; newCaret < fromCaret; newCaret++) {\n        if(from._kmwCharAt(newCaret) != to._kmwCharAt(newCaret)) {\n          break;\n        }\n      }\n\n      let deletedLeft = fromCaret - newCaret;\n\n      // Step 2:  Determine the other properties.\n      // Since the 'after' OutputTarget's caret indicates the end of any inserted text, we\n      // can easily calculate the rest.\n      let insertedLength = toCaret - newCaret;\n      let delta = to._kmwSubstr(newCaret, insertedLength);\n\n      let undeletedRight = to._kmwLength() - toCaret;\n      let originalRight = from._kmwLength() - fromCaret;\n\n      return new TextTransform(delta, deletedLeft, originalRight - undeletedRight);\n    }\n\n    buildTranscriptionFrom(original: OutputTarget, keyEvent: KeyEvent, alternates?: Alternate[]): Transcription {\n      let transform = this.buildTransformFrom(original);\n\n      // If we ever decide to re-add deadkey tracking, this is the place for it.\n\n      return new Transcription(keyEvent, transform, Mock.from(original), alternates);\n    }\n\n    /**\n     * Restores the `OutputTarget` to the indicated state.  Designed for use with `Transcription.preInput`.\n     * @param original An `OutputTarget` (usually a `Mock`).\n     */\n    restoreTo(original: OutputTarget) {\n      //\n      this.setTextBeforeCaret(original.getTextBeforeCaret());\n      this.setTextAfterCaret(original.getTextAfterCaret());\n\n      // Also, restore the deadkeys!\n      this._dks = original._dks.clone();\n    }\n\n    apply(transform: Transform) {\n      if(transform.deleteRight) {\n        this.setTextAfterCaret(this.getTextAfterCaret()._kmwSubstr(transform.deleteRight));\n      }\n\n      if(transform.deleteLeft) {\n        this.deleteCharsBeforeCaret(transform.deleteLeft);\n      }\n\n      if(transform.insert) {\n        this.insertTextBeforeCaret(transform.insert);\n      }\n\n      // We assume that all deadkeys are invalidated after applying a Transform, since\n      // prediction implies we'll be completing a word, post-deadkeys.\n      this._dks.clear();\n    }\n\n    /**\n     * Helper to `restoreTo` - allows directly setting the 'before' context to that of another\n     * `OutputTarget`.\n     * @param s \n     */\n    protected setTextBeforeCaret(s: string): void {\n      // This one's easy enough to provide a default implementation for.\n      this.deleteCharsBeforeCaret(this.getTextBeforeCaret()._kmwLength());\n      this.insertTextBeforeCaret(s);\n    }\n\n    /**\n     * Helper to `restoreTo` - allows directly setting the 'after' context to that of another\n     * `OutputTarget`.\n     * @param s \n     */\n    protected abstract setTextAfterCaret(s: string): void;\n\n    /**\n     * Clears any selected text within the wrapper's element(s).\n     * Silently does nothing if no such text exists.\n     */\n    abstract clearSelection(): void;\n\n    /**\n     * Clears any cached selection-related state values.\n     */\n    abstract invalidateSelection(): void;\n    \n    /**\n     * Indicates whether or not the underlying element has its own selection (input, textarea)\n     * or is part of (or possesses) the DOM's active selection.\n     */\n    abstract hasSelection(): boolean;\n\n    /**\n     * Returns an index corresponding to the caret's position for use with deadkeys.\n     */\n    abstract getDeadkeyCaret(): number;\n    \n    /**\n     * Relative to the caret, gets the current context within the wrapper's element.\n     */\n    abstract getTextBeforeCaret(): string;\n\n    /**\n     * Relative to the caret (and/or active selection), gets the element's text after the caret,\n     * excluding any actively selected text that would be immediately replaced upon text entry.\n     */\n    abstract getTextAfterCaret(): string;\n\n    /**\n     * Gets the element's full text, including any text that is actively selected.\n     */\n    abstract getText(): string;\n\n    /**\n     * Performs context deletions (from the left of the caret) as needed by the KeymanWeb engine and\n     * corrects the location of any affected deadkeys.\n     * \n     * Does not delete deadkeys (b/c KMW 1 & 2 behavior maintenance).\n     * @param dn The number of characters to delete.  If negative, context will be left unchanged.\n     */\n    abstract deleteCharsBeforeCaret(dn: number): void;\n\n    /**\n     * Inserts text immediately before the caret's current position, moving the caret after the\n     * newly inserted text in the process along with any affected deadkeys.\n     * \n     * @param s Text to insert before the caret's current position.\n     */\n    abstract insertTextBeforeCaret(s: string): void;\n\n    /**\n     * Allows element-specific handling for ENTER key inputs.  Conceptually, this should usually\n     * correspond to `insertTextBeforeCaret('\\n'), but actual implementation will vary greatly among\n     * elements.\n     */\n    abstract handleNewlineAtCaret(): void;\n\n    /**\n     * Saves element-specific state properties prone to mutation, enabling restoration after\n     * text-output operations.\n     */\n    saveProperties() {\n      // Most element interfaces won't need anything here.\n    }\n\n    /**\n     * Restores previously-saved element-specific state properties.  Designed for use after text-output\n     * ops to facilitate more-seamless web-dev and user interactions.\n     */\n    restoreProperties(){\n      // Most element interfaces won't need anything here. \n    }\n\n    /**\n     * Generates a synthetic event on the underlying element, signalling that its value has changed.\n     */\n    abstract doInputEvent(): void;\n  }\n\n  // Due to some interesting requirements on compile ordering in TS,\n  // this needs to be in the same file as OutputTarget now.\n  export class Mock extends OutputTarget {\n    text: string;\n    caretIndex: number;\n\n    constructor(text?: string, caretPos?: number) {\n      super();\n\n      this.text = text ? text : \"\";\n      var defaultLength = this.text._kmwLength();\n      this.caretIndex = caretPos ? caretPos : defaultLength;\n    }\n\n    // Clones the state of an existing EditableElement, creating a Mock version of its state.\n    static from(outputTarget: OutputTarget) {\n      let preText = outputTarget.getTextBeforeCaret();\n      let caretIndex = preText._kmwLength();\n\n      // We choose to ignore (rather, pre-emptively remove) any actively-selected text,\n      // as since it's always removed instantly during any text mutation operations.\n      let clone = new Mock(preText + outputTarget.getTextAfterCaret(), caretIndex);\n\n      clone.setDeadkeys(outputTarget.deadkeys());\n\n      return clone;\n    }\n    \n    clearSelection(): void {\n      return;\n    }\n\n    invalidateSelection(): void {\n      return;\n    }\n\n    hasSelection(): boolean {\n      return true;\n    }\n\n    getDeadkeyCaret(): number {\n      return this.caretIndex;\n    }\n\n    setDeadkeyCaret(index: number) {\n      if(index < 0 || index > this.text._kmwLength()) {\n        throw new Error(\"Provided caret index is out of range.\");\n      }\n      this.caretIndex = index;\n    }\n\n    getTextBeforeCaret(): string {\n      return this.text.kmwSubstr(0, this.caretIndex);\n    }\n\n    getTextAfterCaret(): string {\n      return this.text.kmwSubstr(this.caretIndex);\n    }\n\n    getText(): string {\n      return this.text;\n    }\n\n    deleteCharsBeforeCaret(dn: number): void {\n      if(dn >= 0) {\n        if(dn > this.caretIndex) {\n          dn = this.caretIndex;\n        }\n        this.text = this.text.kmwSubstr(0, this.caretIndex - dn) + this.getTextAfterCaret();\n        this.caretIndex -= dn;\n      }\n    }\n\n    insertTextBeforeCaret(s: string): void {\n      this.text = this.getTextBeforeCaret() + s + this.getTextAfterCaret();\n      this.caretIndex += s.kmwLength();\n    }\n\n    handleNewlineAtCaret(): void {\n      this.insertTextBeforeCaret('\\n');\n    }\n\n    protected setTextAfterCaret(s: string): void {\n      this.text = this.getTextBeforeCaret() + s;\n    }\n\n    doInputEvent() {\n      // Mock isn't backed by an element, so it won't have any event listeners.\n    }\n  }\n}","/// <reference path=\"engineDeviceSpec.ts\" />\n/// <reference path=\"outputTarget.ts\" />\n\nnamespace com.keyman.text {\n  // Represents a probability distribution over a keyboard's keys.\n  // Defined here to avoid compilation issues.\n  export type KeyDistribution = {keyId: string, p: number}[];\n\n  /**\n   * This class is defined within its own file so that it can be loaded by code outside of KMW without\n   * having to actually load the entirety of KMW.\n   */\n  export class KeyEvent {\n    Ltarg: OutputTarget;\n    Lcode: number;\n    Lstates: number;\n    LmodifierChange?: boolean;\n    Lmodifiers: number;\n    LisVirtualKey: boolean;\n    vkCode: number;\n    kName: string;\n    kLayer?: string;   // The key's layer property\n    kbdLayer?: string; // The virtual keyboard's active layer\n    kNextLayer?: string;\n    \n    // Holds relevant event properties leading to construction of this KeyEvent.\n    source?: any; // Technically, KeyEvent|MouseEvent|Touch - but those are DOM types that must be kept out of headless mode.\n    // Holds a generated fat-finger distribution (when appropriate)\n    keyDistribution?: KeyDistribution;\n    \n    /**\n     * The device model for web-core to follow when processing the keystroke.\n     */\n    device: EngineDeviceSpec;\n\n    /**\n     * `true` if this event was produced by sources other than a DOM-based KeyboardEvent.\n     */\n    isSynthetic: boolean = true;\n  };\n}","namespace com.keyman.text {\n  /**\n   * Represents the commands and state changes that result from a matched keyboard rule.\n   */\n  export class RuleBehavior {\n    /**\n     * The before-and-after Transform from matching a keyboard rule.\n     */\n    transcription: Transcription;\n\n    /**\n     * Indicates whether or not a BEEP command was issued by the matched keyboard rule.\n     */\n    beep?: boolean;\n\n    /**\n     * A set of changed store values triggered by the matched keyboard rule.\n     */\n    setStore: {[id: number]: string} = {};\n\n    /**\n     * A set of variable stores with save requests triggered by the matched keyboard rule\n     */\n    saveStore: {[name: string]: VariableStore} = {};\n\n    /**\n     * Denotes a non-output default behavior; this should be evaluated later, against the true keystroke.\n     */\n    triggersDefaultCommand?: boolean;\n\n    /**\n     * Denotes error log messages generated when attempting to generate this behavior.\n     */\n    errorLog?: string;\n\n    /**\n     * Denotes warning log messages generated when attempting to generate this behavior.\n     */\n    warningLog?: string;\n\n    /**\n     * If predictive text is active, contains a Promise returning predictive Suggestions.\n     */\n    predictionPromise?: Promise<Suggestion[]>;\n\n    finalize(processor: KeyboardProcessor) {\n      let outputTarget = this.transcription.keystroke.Ltarg;\n\n      if(processor.beepHandler && this.beep) {\n        processor.beepHandler(outputTarget);\n      }\n\n      for(let storeID in this.setStore) {\n        let sysStore = processor.keyboardInterface.systemStores[storeID];\n        if(sysStore) {\n          try {\n            sysStore.set(this.setStore[storeID]);\n          } catch (error) {\n            if(processor.errorLogger) {\n              processor.errorLogger(\"Rule attempted to perform illegal operation - 'platform' may not be changed.\");\n            }\n          }\n        } else if(processor.warningLogger) {\n          processor.warningLogger(\"Unknown store affected by keyboard rule: \" + storeID);\n        }\n      }\n\n      if(processor.keyboardInterface.variableStoreSerializer) {\n        for(let storeID in this.saveStore) {\n          processor.keyboardInterface.variableStoreSerializer.saveStore(processor.activeKeyboard.id, storeID, this.saveStore[storeID]);\n        }\n      }\n\n      if(this.triggersDefaultCommand) {\n        let keyEvent = this.transcription.keystroke;\n        DefaultOutput.applyCommand(keyEvent);\n      }\n\n      if(processor.warningLogger && this.warningLog) {\n        processor.warningLogger(this.warningLog);\n      } else if(processor.errorLogger && this.errorLog) {\n        processor.errorLogger(this.errorLog);\n      }\n    }\n  }\n}","// Establishes key-code definitions.\n/// <reference path=\"codes.ts\" />\n// Defines our generalized \"KeyEvent\" class.\n/// <reference path=\"keyEvent.ts\" />\n\nnamespace com.keyman.text {\n  export enum EmulationKeystrokes {\n    Space = ' ',\n    Enter = '\\n',\n    Backspace = '\\b'\n  }\n\n  /**\n   * Defines a collection of static library functions that define KeymanWeb's default (implied) keyboard rule behaviors.\n   */\n  export class DefaultOutput {\n    private constructor() {\n    }\n\n    static codeForEvent(Lkc: KeyEvent) {\n      return Codes.keyCodes[Lkc.kName] || Lkc.Lcode;;\n    }\n\n    /**\n     * Serves as a default keycode lookup table.  This may be referenced safely by mnemonic handling without fear of side-effects.\n     * Also used by Processor.defaultRuleBehavior to generate output after filtering for special cases.\n     */\n    public static forAny(Lkc: KeyEvent, isMnemonic: boolean) {\n      var char = '';\n\n      // A pretty simple table of lookups, corresponding VERY closely to the original defaultKeyOutput.\n      if((char = DefaultOutput.forSpecialEmulation(Lkc)) != null) {\n        return char;\n      } else if(!isMnemonic && ((char = DefaultOutput.forNumpadKeys(Lkc)) != null)) {\n        return char;\n      } else if((char = DefaultOutput.forUnicodeKeynames(Lkc)) != null) {\n        return char;\n      } else if((char = DefaultOutput.forBaseKeys(Lkc)) != null) {\n        return char;\n      } else {\n        // // For headless and embeddded, we may well allow '\\t'.  It's DOM mode that has other uses.\n        // // Not originally defined for text output within defaultKeyOutput.\n        // // We can't enable it yet, as it'll cause hardware keystrokes in the DOM to output '\\t' rather\n        // // than rely on the browser-default handling.\n        let code = DefaultOutput.codeForEvent(Lkc);\n        switch(code) {\n        //   case Codes.keyCodes['K_TAB']:\n        //   case Codes.keyCodes['K_TABBACK']:\n        //   case Codes.keyCodes['K_TABFWD']:\n        //     return '\\t';\n          default:\n           return '';\n        }\n      }\n    }\n\n    /**\n     * isCommand - returns a boolean indicating if a non-text event should be triggered by the keystroke.\n     */\n    public static isCommand(Lkc: KeyEvent): boolean {\n      let code = DefaultOutput.codeForEvent(Lkc);\n\n      switch(code) {\n        // Should we ever implement them:\n        // case Codes.keyCodes['K_LEFT']:  // would not output text, but would alter the caret's position in the context.\n        // case Codes.keyCodes['K_RIGHT']:\n        //   return true;\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Used when a RuleBehavior represents a non-text \"command\" within the Engine.  This will generally \n     * trigger events that require context reset - often by moving the caret or by moving what OutputTarget\n     * the caret is in.  However, we let those events perform the actual context reset.\n     * \n     * Note:  is extended by DOM-aware KeymanWeb code.\n     */\n    public static applyCommand(Lkc: KeyEvent): void {\n      // Notes for potential default-handling extensions:\n      // \n      // switch(code) {\n        // // Problem:  clusters, and doing them right.\n        // // The commented-out code below should be a decent starting point, but clusters make it complex.\n        // // Mostly based on pre-12.0 code, but the general idea should be relatively clear.\n        //\n        // case Codes.keyCodes['K_LEFT']:\n        //   if(touchAlias) {\n        //     var caretPos = keymanweb.getTextCaret(Lelem);\n        //     keymanweb.setTextCaret(Lelem, caretPos - 1 >= 0 ? caretPos - 1 : 0);\n        //   }\n        //   break;\n        // case Codes.keyCodes['K_RIGHT']:\n        //   if(touchAlias) {\n        //     var caretPos = keymanweb.getTextCaret(Lelem);\n        //     keymanweb.setTextCaret(Lelem, caretPos + 1);\n        //   }\n        //   if(code == VisualKeyboard.keyCodes['K_RIGHT']) {\n        //     break;\n        //   }\n      // }\n      //\n      // Note that these would be useful even outside of a DOM context.\n    }\n\n    /**\n     * Codes matched here generally have default implementations when in a browser but require emulation\n     * for 'synthetic' `OutputTarget`s like `Mock`s, which have no default text handling.\n     */\n    public static forSpecialEmulation(Lkc: KeyEvent): EmulationKeystrokes {\n      let code = DefaultOutput.codeForEvent(Lkc);\n\n      switch(code) {\n        case Codes.keyCodes['K_BKSP']:\n          return EmulationKeystrokes.Backspace;\n        case Codes.keyCodes['K_ENTER']:\n          return EmulationKeystrokes.Enter;\n        // (Probably) only here for legacy reasons; it's always been handled alongside the other two.\n        case Codes.keyCodes['K_SPACE']:\n          return EmulationKeystrokes.Space;\n        // case Codes.keyCodes['K_DEL']:\n        //   return '\\u007f'; // 127, ASCII / Unicode control code for DEL.\n        default:\n          return null;\n      }\n    }\n\n    // Should not be used for mnenomic keyboards.  forAny()'s use of this method checks first.\n    public static forNumpadKeys(Lkc: KeyEvent) {\n      // Translate numpad keystrokes into their non-numpad equivalents\n      if(Lkc.Lcode >= Codes.keyCodes[\"K_NP0\"]  &&  Lkc.Lcode <= Codes.keyCodes[\"K_NPSLASH\"]) {\n        // Number pad, numlock on\n        if(Lkc.Lcode < 106) {\n          var Lch = Lkc.Lcode-48;\n        } else {\n          Lch = Lkc.Lcode-64;\n        }\n        let ch = String._kmwFromCharCode(Lch); //I3319\n        return ch;\n      } else {\n        return null;\n      }\n    }\n\n    // Test for fall back to U_xxxxxx key id\n    // For this first test, we ignore the keyCode and use the keyName\n    public static forUnicodeKeynames(Lkc: KeyEvent, ruleBehavior?: RuleBehavior) {\n      let keyName = Lkc.kName;\n\n      // Test for fall back to U_xxxxxx key id\n      // For this first test, we ignore the keyCode and use the keyName\n      if(!keyName || keyName.substr(0,2) != 'U_') {\n        return null;\n      }\n    \n      var codePoint = parseInt(keyName.substr(2,6), 16);\n      if (((0x0 <= codePoint) && (codePoint <= 0x1F)) || ((0x80 <= codePoint) && (codePoint <= 0x9F))) {\n        // Code points [U_0000 - U_001F] and [U_0080 - U_009F] refer to Unicode C0 and C1 control codes.\n        // Check the codePoint number and do not allow output of these codes via U_xxxxxx shortcuts.\n        if(ruleBehavior) {\n          ruleBehavior.errorLog = (\"Suppressing Unicode control code: U_00\" + codePoint.toString(16));\n        }\n        return null;\n      } else {\n        // String.fromCharCode() is inadequate to handle the entire range of Unicode\n        // Someday after upgrading to ES2015, can use String.fromCodePoint()\n        return String.kmwFromCharCode(codePoint);\n      }\n    }\n\n    // Test for otherwise unimplemented keys on the the base default & shift layers.\n    // Those keys must be blocked by keyboard rules if intentionally unimplemented; otherwise, this function will trigger.\n    public static forBaseKeys(Lkc: KeyEvent, ruleBehavior?: RuleBehavior) {\n      let n = Lkc.Lcode;\n      let keyShiftState = Lkc.Lmodifiers;\n\n      // check if exact match to SHIFT's code.  Only the 'default' and 'shift' layers should have default key outputs.\n      // TODO:  Extend to allow AltGr as well - better mnemonic support.\n      if(keyShiftState == Codes.modifierCodes['SHIFT']) {\n        keyShiftState = 1;\n      } else if(keyShiftState != 0) {\n        if(ruleBehavior) {\n          ruleBehavior.warningLog = \"KMW only defines default key output for the 'default' and 'shift' layers!\";\n        }\n        return null;\n      }\n\n      // Now that keyShiftState is either 0 or 1, we can use the following structure to determine the default output.\n      try {\n        if(n >= Codes.keyCodes['K_0'] && n <= Codes.keyCodes['K_9']) { // The number keys.\n          return Codes.codesUS[keyShiftState][0][n-Codes.keyCodes['K_0']];\n        } else if(n >= Codes.keyCodes['K_A'] && n <= Codes.keyCodes['K_Z']) { // The base letter keys\n          return String.fromCharCode(n+(keyShiftState?0:32));  // 32 is the offset from uppercase to lowercase.\n        } else if(n >= Codes.keyCodes['K_COLON'] && n <= Codes.keyCodes['K_BKQUOTE']) {\n          return Codes.codesUS[keyShiftState][1][n-Codes.keyCodes['K_COLON']];\n        } else if(n >= Codes.keyCodes['K_LBRKT'] && n <= Codes.keyCodes['K_QUOTE']) {\n          return Codes.codesUS[keyShiftState][2][n-Codes.keyCodes['K_LBRKT']];\n        }\n      } catch (e) {\n        if(ruleBehavior) {\n          ruleBehavior.errorLog = \"Error detected with default mapping for key:  code = \" + n + \", shift state = \" + (keyShiftState == 1 ? 'shift' : 'default');\n        }\n      }\n\n      return null;\n    }\n  }\n}\n","//Autogenerated file - do not modify!\nnamespace com.keyman.environment {\n  export var VERSION = \"14.0\";\n  export var BUILD = 52;\n}  \n\n","// Defines build-environment variables, as used for versioning.\n/// <reference path=\"../environment.inc.ts\" />\n\n// Ensure that this class contains no reference into core KMW code - it is referenced\n// by components intended to be modular and possible to separate from core KMW.\n\nnamespace com.keyman.utils {\n  // Dotted-decimal version\n  export class Version {\n    public static readonly CURRENT = new Version(com.keyman.environment.VERSION);\n\n    // Represents a default version value for keyboards compiled before this was compiled into keyboards.\n    // The exact version is unknown at this point, but the value is \"good enough\" for what we need.\n    public static readonly DEVELOPER_VERSION_FALLBACK = new Version([9, 0, 0]);\n\n    // For 12.0, the old default behavior of adding missing keycaps to the default layers was removed,\n    // as it results in unexpected, bug-like behavior for keyboard designers when it is unwanted.\n    public static readonly NO_DEFAULT_KEYCAPS = new Version([12, 0]);\n\n    public static readonly MAC_POSSIBLE_IPAD_ALIAS = new Version([10, 15]);\n\n    private readonly components: number[]\n\n    /**\n     * Parses version information, preparing it for use in comparisons.\n     * @param text Either a string representing a version number (ex: \"9.0.0\") or an array representing\n     *             its components (ex: [9, 0, 0]).\n     */\n    constructor(text: String | number[]) {\n      // If a keyboard doesn't specify a version, use the DEVELOPER_VERSION_FALLBACK values.\n      if(text === undefined || text === null) {\n        this.components = [].concat(Version.DEVELOPER_VERSION_FALLBACK.components);\n        return;\n      }\n\n      if(Array.isArray(text)) {\n        let components = text as number[];\n        if(components.length < 2) {\n          throw new Error(\"Version string must have at least a major and minor component!\");\n        } else {\n          this.components = [].concat(components);\n          return;\n        }\n      }\n\n      // else, standard constructor path.\n      let parts = text.split('.');\n      let componentArray: number[] = [];\n\n      if(parts.length < 2) {\n        throw new Error(\"Version string must have at least a major and minor component!\");\n      }\n\n      for(let i=0; i < parts.length; i++) {\n        let value = parseInt(parts[i], 10);\n        if(isNaN(value)) {\n          throw new Error(\"Version string components must be numerical!\");\n        }\n\n        componentArray.push(value);\n      }\n\n      this.components = componentArray;\n    }\n\n    get major(): number {\n      return this.components[0];\n    }\n\n    get minor(): number {\n      return this.components[1];\n    }\n\n    toString(): string {\n      return this.components.join('.');\n    }\n\n    toJSON(): string {\n      return this.toString();\n    }\n\n    equals(other: Version): boolean {\n      return this.compareTo(other) == 0;\n    }\n\n    precedes(other: Version): boolean {\n      return this.compareTo(other) < 0;\n    }\n\n    compareTo(other: Version): number {\n      // If the version info depth differs, we need a flag to indicate which instance is shorter.\n      var isShorter: boolean = this.components.length < other.components.length;\n      var maxDepth: number = (this.components.length < other.components.length) ? this.components.length : other.components.length;\n\n      var i: number;\n      for(i = 0; i < maxDepth; i++) {\n        let delta = this.components[i] - other.components[i];\n        if(delta != 0) {\n          return delta;\n        }\n      }\n\n      var longList = isShorter ? other.components : this.components;\n      do {\n        if(longList[i] > 0) {\n          return isShorter ? -1 : 1;\n        }\n        i++;\n      } while (i < longList.length);\n\n      // Equal.\n      return 0;\n    }\n  }\n}","namespace com.keyman.utils {\n  /**\n   * Function     deepCopy\n   * Scope        Private\n   * @param       {Object}      p           object to copy\n   * @param       {Array=}      c0          array member being copied\n   * @return      {Object}                  clone ('deep copy') of object\n   * Description  Makes an actual copy (not a reference) of an object, copying simple members,\n   *              arrays and member objects but not functions, so use with care!\n   */\n  export function deepCopy<T>(p:T, c0?): T {\n    var c = c0 || {};\n    for (var i in p) {\n      if(typeof p[i] === 'object' && p[i] != null) {\n        c[i] = (p[i].constructor === Array ) ? [] : {};\n        deepCopy(p[i],c[i]);\n      }\n      else {\n        c[i] = p[i];\n      }\n    }\n\n    return c;\n  }\n}","/***\n   KeymanWeb 10.0\n   Copyright 2017 SIL International\n***/\n\n///<reference path=\"../utils/version.ts\"/>\n///<reference path=\"../utils/deepCopy.ts\"/>\n\nnamespace com.keyman.keyboards {\n  let Codes = com.keyman.text.Codes;\n\n  export type KLS = {[layerName: string]: string[]};\n\n  // The following types provide type definitions for the full JSON format we use for visual keyboard definitions.\n  export type ButtonClass = number|\"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"|\"10\"\n\n  export type LayoutKey = {\n    \"id\"?: string,\n    \"text\"?: string,\n    \"sp\"?: ButtonClass,\n    \"width\"?: string,\n    \"layer\"?: string, // Key derives any modifiers from the value set here if specified, not the actual display layer.\n    \"nextlayer\"?: string,\n    \"pad\"?: string,\n    \"sk\"?: LayoutKey[]\n  }\n  \n  export type LayoutRow = {\n    \"id\": string, // represents a number, though...\n    \"key\": LayoutKey[]\n  };\n\n  export type LayoutLayer = {\n    \"id\": string,\n    \"row\": LayoutRow[],\n\n    // Post-processing elements.\n    shiftKey?: LayoutKey,\n    capsKey?: LayoutKey,\n    numKey?: LayoutKey,\n    scrollKey?: LayoutKey\n    aligned?: boolean\n  }\n\n  export type LayoutFormFactor = {\n    \"font\": string,\n    \"layer\": LayoutLayer[],\n    keyLabels?: boolean,\n    isDefault?: boolean;\n  }\n\n  export type LayoutSpec = {\n    \"desktop\"?: LayoutFormFactor,\n    \"phone\"?: LayoutFormFactor,\n    \"tablet\"?: LayoutFormFactor\n  }\n  \n  // This class manages default layout construction for consumption by OSKs without a specified layout.\n  export class Layouts {\n    static dfltCodes=[\n      \"K_BKQUOTE\",\"K_1\",\"K_2\",\"K_3\",\"K_4\",\"K_5\",\"K_6\",\"K_7\",\"K_8\",\"K_9\",\"K_0\",\n      \"K_HYPHEN\",\"K_EQUAL\",\"K_*\",\"K_*\",\"K_*\",\"K_Q\",\"K_W\",\"K_E\",\"K_R\",\"K_T\",\n      \"K_Y\",\"K_U\",\"K_I\",\"K_O\",\"K_P\",\"K_LBRKT\",\"K_RBRKT\",\"K_BKSLASH\",\"K_*\",\n      \"K_*\",\"K_*\",\"K_A\",\"K_S\",\"K_D\",\"K_F\",\"K_G\",\"K_H\",\"K_J\",\"K_K\",\"K_L\",\n      \"K_COLON\",\"K_QUOTE\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_oE2\",\n      \"K_Z\",\"K_X\",\"K_C\",\"K_V\",\"K_B\",\"K_N\",\"K_M\",\"K_COMMA\",\"K_PERIOD\",\n      \"K_SLASH\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_SPACE\"\n    ];\n\n    static dfltText='`1234567890-=\\xA7~~qwertyuiop[]\\\\~~~asdfghjkl;\\'~~~~~?zxcvbnm,./~~~~~ '\n      +'~!@#$%^&*()_+\\xA7~~QWERTYUIOP{}\\\\~~~ASDFGHJKL:\"~~~~~?ZXCVBNM<>?~~~~~ ';\n\n    static readonly DEFAULT_RAW_SPEC = {'F':'Tahoma', 'BK': Layouts.dfltText};\n\n    // Cross-reference with the ids in osk.setButtonClass.\n    static buttonClasses: {[name: string]: ButtonClass} = {\n      'DEFAULT':'0',\n      'SHIFT':'1',\n      'SHIFT-ON':'2',\n      'SPECIAL':'3',\n      'SPECIAL-ON':'4',\n      'DEADKEY':'8',\n      'BLANK':'9',\n      'HIDDEN':'10'\n    };\n\n    static modifierSpecials = {\n      'leftalt': '*LAlt*',\n      'rightalt': '*RAlt*',\n      'alt': '*Alt*',\n      'leftctrl': '*LCtrl*',\n      'rightctrl': '*RCtrl*',\n      'ctrl': '*Ctrl*',\n      'ctrl-alt': '*AltGr*',\n      'leftctrl-leftalt': '*LAltCtrl*',\n      'rightctrl-rightalt': '*RAltCtrl*',\n      'leftctrl-leftalt-shift': '*LAltCtrlShift*',\n      'rightctrl-rightalt-shift': '*RAltCtrlShift*',\n      'shift': '*Shift*',\n      'shift-alt': '*AltShift*',\n      'shift-ctrl': '*CtrlShift*',\n      'shift-ctrl-alt': '*AltCtrlShift*',\n      'leftalt-shift': '*LAltShift*',\n      'rightalt-shift': '*RAltShift*',\n      'leftctrl-shift': '*LCtrlShift*',\n      'rightctrl-shift': '*RCtrlShift*'\n    };\n    \n    /**\n    * Build a default layout for keyboards with no explicit layout\n    *\n    * @param   {Object}  PVK             keyboard object (as loaded)\n    * @param   {Object}  kbdDevVersion   object representing the version of Developer that compiled the keyboard\n    * @param   {number}  kbdBitmask      keyboard modifier bitmask\n    * @param   {string}  formFactor\n    * @return  {Object}\n    */\n    static buildDefaultLayout(PVK, keyboard: Keyboard, formFactor: string): LayoutFormFactor {\n      // Build a layout using the default for the device\n      var layoutType=formFactor;\n\n      if(typeof Layouts.dfltLayout[layoutType] != 'object') {\n        layoutType = 'desktop';\n      }\n\n      let kbdBitmask = Codes.modifierBitmasks['NON_CHIRAL'];\n      // An unfortunate dependency there.  Should probably also set a version within web-core for use.\n      let kbdDevVersion = utils.Version.CURRENT;\n      if(keyboard) {\n        kbdBitmask = keyboard.modifierBitmask;\n        kbdDevVersion = keyboard.compilerVersion;\n      }\n\n      if(!PVK) {\n        PVK = this.DEFAULT_RAW_SPEC;\n      }\n\n      // Clone the default layout object for this device\n      var layout: LayoutFormFactor = utils.deepCopy(Layouts.dfltLayout[layoutType]);\n\n      var n,layers=layout['layer'], keyLabels: KLS=PVK['KLS'], key102=PVK['K102'];\n      var i, j, k, m, row, rows: LayoutRow[], key: LayoutKey, keys: LayoutKey[];\n      var chiral: boolean = (kbdBitmask & Codes.modifierBitmasks.IS_CHIRAL) != 0;\n\n      var kmw10Plus = !(typeof keyLabels == 'undefined' || !keyLabels);\n      if(!kmw10Plus) {\n        // Save the processed key label information to the keyboard's general data.\n        // Makes things more efficient elsewhere and for reloading after keyboard swaps.\n        keyLabels = PVK['KLS'] = Layouts.processLegacyDefinitions(PVK['BK']);\n      }\n\n      // Identify key labels (e.g. *Shift*) that require the special OSK font\n      var specialLabel=/\\*\\w+\\*/;\n\n      // *** Step 1:  instantiate the layer objects. ***\n\n      // Get the list of valid layers, enforcing that the 'default' layer must be the first one processed.\n      var validIdList = Object.getOwnPropertyNames(keyLabels), invalidIdList = [];\n      validIdList.splice(validIdList.indexOf('default'), 1);\n      validIdList = [ 'default' ].concat(validIdList);\n\n      // Automatic AltGr emulation if the 'leftctrl-leftalt' layer is otherwise undefined.\n      if(keyboard && keyboard.emulatesAltGr) {\n        // We insert only the layers that need to be emulated.\n        if((validIdList.indexOf('leftctrl-leftalt') == -1) && validIdList.indexOf('rightalt') != -1) {\n          validIdList.push('leftctrl-leftalt');\n          keyLabels['leftctrl-leftalt'] = keyLabels['rightalt'];\n        }\n\n        if((validIdList.indexOf('leftctrl-leftalt-shift') == -1) && validIdList.indexOf('rightalt-shift') != -1) {\n          validIdList.push('leftctrl-leftalt-shift');\n          keyLabels['leftctrl-leftalt-shift'] = keyLabels['rightalt-shift'];\n        }\n      }\n\n      // For desktop devices, we must create all layers, even if invalid.\n      if(formFactor == 'desktop') {\n        invalidIdList = Layouts.generateLayerIds(chiral);\n\n        // Filter out all ids considered valid.  (We also don't want duplicates in the following list...)\n        for(n=0; n<invalidIdList.length; n++) {\n          if(validIdList.indexOf(invalidIdList[n]) != -1) {\n            invalidIdList.splice(n--, 1);\n          }\n        }\n      }\n\n      // This ensures all 'valid' layers are at the front of the layer array and managed by the main loop below.\n      // 'invalid' layers aren't handled by the loop and thus remain blank after it.\n      var idList = validIdList.concat(invalidIdList);\n\n      if(kmw10Plus && formFactor != 'desktop') { // KLS exists, so we know the exact layer set.\n        // Find the SHIFT key...\n        var shiftKey: LayoutKey = null;\n\n        rows = layers[0]['row'];\n        for(var r=0; r < rows.length; r++) {\n          keys = rows[r]['key'];\n          for(var c=0; c < keys.length; c++) {\n            key = keys[c];\n            if(key['id'] == 'K_SHIFT') {\n              shiftKey = key;\n            }\n          }\n        }\n\n        if(shiftKey) {\n          // Erase the legacy shifted subkey array.\n          shiftKey['sk'] = [];\n\n          for(var layerID in keyLabels) {            \n            if(layerID == 'default' || layerID == 'shift') {\n              // These two are accessible from the layer without subkeys.\n              continue;\n            }\n\n            // Create a new subkey for the specified layer so that it will be accessible via OSK.\n            var specialChar = Layouts.modifierSpecials[layerID]; \n            let subkey: LayoutKey = {\n              id: \"K_\" + specialChar,\n              text: specialChar,\n              sp: \"1\",\n              nextlayer: layerID\n            }\n            shiftKey['sk'].push(subkey);\n          }\n        } else {\n          // Seriously, this should never happen.  It's here for the debugging log only.\n          console.warn(\"Error in default layout - cannot find default Shift key!\");\n        }\n      }\n\n      for(n=0; n<idList.length; n++) {\n        // Populate non-default (shifted) keygroups\n        if(n > 0) {\n          layers[n]=utils.deepCopy(layers[0]);\n        }\n        layers[n]['id']=idList[n];\n        layers[n]['nextlayer']=idList[n]; // This would only be different for a dynamic keyboard\n\n        // Extraced into a helper method to improve readability.\n        Layouts.formatDefaultLayer(layers[n], chiral, formFactor, !!key102);\n      }\n\n      // *** Step 2: Layer objects now exist; time to fill them with the appropriate key labels and key styles ***\n      for(n=0; n<layers.length; n++) {\n        var layer=layers[n], kx, shiftKey: LayoutKey = null, nextKey=null, allText='';\n        var capsKey: LayoutKey = null, numKey: LayoutKey = null, scrollKey: LayoutKey = null;  // null if not in the OSK layout.\n        var layerSpec = keyLabels[layer['id']];\n        var isShift = layer['id'] == 'shift' ? 1 : 0;\n        var isDefault = layer['id'] == 'default' || isShift ? 1 : 0;\n\n        rows=layer['row'];\n        for(i=0; i<rows.length; i++) {\n          keys=rows[i]['key'];\n          for(j=0; j<keys.length; j++) {\n            key=keys[j];\n            kx=Layouts.dfltCodes.indexOf(key['id']);\n\n            // Only create keys for defined layers.  ('default' and 'shift' are always defined.)\n            if(layerSpec || isDefault) {\n              // Get keycap text from visual keyboard array, if defined in keyboard\n              if(layerSpec) {\n                if(kx >= 0 && kx < layerSpec.length) key['text']=layerSpec[kx];\n              }\n\n              // Legacy (pre 12.0) behavior:  fall back to US English keycap text as default for the base two layers\n              // if a key cap is not otherwise defined. (Any intentional 'ghost' keys must be explicitly defined.)\n              if(isDefault && kbdDevVersion.precedes(utils.Version.NO_DEFAULT_KEYCAPS)) {\n                if(key['id'] != 'K_SPACE' && kx+65 * isShift < Layouts.dfltText.length && key['text'] !== null) {\n                  key['text'] = key['text'] || Layouts.dfltText[kx+65*isShift];\n                }\n              }\n            }\n\n            // Leave any unmarked key caps as null strings\n            if(key['text'] !== null) {\n              key['text'] = key['text'] || '';\n            }\n\n            // Detect important tracking keys.\n            switch(key['id']) {\n              case \"K_SHIFT\":\n                shiftKey=key;\n                break;\n              case \"K_TAB\":\n                nextKey=key;\n                break;\n              case \"K_CAPS\":\n                capsKey=key;\n                break;\n              case \"K_NUMLOCK\":\n                numKey=key;\n                break;\n              case \"K_SCROLL\":\n                scrollKey=key;\n                break;\n            }\n\n            // Remove pop-up shift keys referencing invalid layers (Build 349)\n            if(key['sk'] != null) {\n              for(k=0; k<key['sk'].length; k++) {\n                if(validIdList.indexOf(key['sk'][k]['nextlayer']) == -1) {\n                  key['sk'].splice(k--, 1);\n                }\n              }\n\n              if(key['sk'].length == 0) {\n                key['sk']=null;\n              }\n            }\n          }\n        }\n\n        // We're done with the layer keys initialization pass.  Time to do post-analysis layer-level init where necessary.\n        layer.shiftKey=shiftKey;\n        layer.capsKey=capsKey;\n        layer.numKey=numKey;\n        layer.scrollKey=scrollKey;\n\n        // Set modifier key appearance and behaviour for non-desktop devices using the default layout\n        if(formFactor != 'desktop') {\n          if(n > 0 && shiftKey != null) {\n            shiftKey['sp']=Layouts.buttonClasses['SHIFT-ON'];\n            shiftKey['sk']=null;\n            shiftKey['text'] = Layouts.modifierSpecials[layers[n].id] ? Layouts.modifierSpecials[layers[n].id] : \"*Shift*\";\n          }\n        }\n      }\n\n      return layout;\n    }\n\n        /**\n     * Function     getLayerId\n     * Scope        Private\n     * @param       {number}      m     shift modifier code\n     * @return      {string}            layer string from shift modifier code (desktop keyboards)\n     * Description  Get name of layer from code, where the modifer order is determined by ascending bit-flag value.\n     */\n    static getLayerId(m: number): string {\n      let modifierCodes = Codes.modifierCodes;\n\n      var s='';\n      if(m == 0) {\n        return 'default';\n      } else {\n        if(m & modifierCodes['LCTRL']) {\n          s = (s.length > 0 ? s + '-' : '') + 'leftctrl';\n        }\n        if(m & modifierCodes['RCTRL']) {\n          s = (s.length > 0 ? s + '-' : '') + 'rightctrl';\n        }\n        if(m & modifierCodes['LALT']) {\n          s = (s.length > 0 ? s + '-' : '') + 'leftalt';\n        }\n        if(m & modifierCodes['RALT']) {\n          s = (s.length > 0 ? s + '-' : '') + 'rightalt';\n        }\n        if(m & modifierCodes['SHIFT']) {\n          s = (s.length > 0 ? s + '-' : '') + 'shift';\n        }\n        if(m & modifierCodes['CTRL']) {\n          s = (s.length > 0 ? s + '-' : '') + 'ctrl';\n        }\n        if(m & modifierCodes['ALT']) {\n          s = (s.length > 0 ? s + '-' : '') + 'alt';\n        }\n        return s;\n      }\n    }\n\n    /**\n     * Generates a list of potential layer ids for the specified chirality mode.\n     * \n     * @param   {boolean}   chiral    // Does the keyboard use chiral modifiers or not?\n     */\n    static generateLayerIds(chiral: boolean): string[] {\n      var layerCnt, offset;\n\n      if(chiral) {\n        layerCnt=32;\n        offset=0x01;\n      } else {\n        layerCnt=8;\n        offset=0x10;\n      }\n\n      var layerIds = [];\n\n      for(var i=0; i < layerCnt; i++) {\n        layerIds.push(Layouts.getLayerId(i * offset));\n      }\n\n      return layerIds;\n    }\n\n    /**\n     * Sets a formatting property for the modifier keys when constructing a default layout for a keyboard.\n     * \n     * @param   {Object}    layer   // One layer specification\n     * @param   {boolean}   chiral  // Whether or not the keyboard uses chiral modifier information.\n     * @param   {string}    formFactor  // The form factor of the device the layout is being constructed for.\n     * @param   {boolean}   key102      // Whether or not the extended key 102 should be hidden.\n     */\n    static formatDefaultLayer(layer: LayoutLayer, chiral: boolean, formFactor: string, key102: boolean) {\n      var layerId = layer['id'];\n      let buttonClasses = Layouts.buttonClasses;\n\n      // Correct appearance of state-dependent modifier keys according to group\n      for(var i=0; i<layer['row'].length; i++) {\n        var row=layer['row'][i];\n        var keys=row['key'];\n        for(var j=0; j<keys.length; j++) {\n          var key=keys[j];\n          switch(key['id']) {\n            case 'K_SHIFT':\n            case 'K_LSHIFT':\n            case 'K_RSHIFT':\n              if(layerId.indexOf('shift') != -1) {\n                key['sp'] = buttonClasses['SHIFT-ON'];\n              } \n              if((formFactor != 'desktop') && (layerId != 'default')) {\n                key['nextlayer']='default';\n              }\n              break;\n            case 'K_LCTRL':\n            case 'K_LCONTROL':\n              if(chiral) {\n                if(layerId.indexOf('leftctrl') != -1) {\n                  key['sp'] = buttonClasses['SHIFT-ON'];\n                }\n                break;\n              } \n            case 'K_RCTRL':\n            case 'K_RCONTROL':\n              if(chiral) {\n                if(layerId.indexOf('rightctrl') != -1) {\n                  key['sp'] = buttonClasses['SHIFT-ON'];\n                }\n                break;\n              }\n            case 'K_CONTROL':\n              if(layerId.indexOf('ctrl') != -1) {\n                if(!chiral || (layerId.indexOf('leftctrl') != -1 && layerId.indexOf('rightctrl') != -1)) {\n                  key['sp'] = buttonClasses['SHIFT-ON'];              \n                }\n              }\n              break;\n            case 'K_LALT':\n              if(chiral) {\n                if(layerId.indexOf('leftalt') != -1) {\n                  key['sp'] = buttonClasses['SHIFT-ON'];\n                }\n                break;\n              } \n            case 'K_RALT':\n              if(chiral) {\n                if(layerId.indexOf('rightalt') != -1) {\n                  key['sp'] = buttonClasses['SHIFT-ON'];\n                }\n                break;\n              } \n            case 'K_ALT':\n              if(layerId.indexOf('alt') != -1) {\n                if(!chiral || (layerId.indexOf('leftalt') != -1 && layerId.indexOf('rightalt') != -1)) {\n                  key['sp'] = buttonClasses['SHIFT-ON'];              \n                }\n              }\n              break;\n            case 'K_oE2':\n              if(typeof key102 == 'undefined' || !key102) {\n                if(formFactor == 'desktop') {\n                  keys.splice(j--, 1);\n                  keys[0]['width']='200';\n                } else {\n                  keys[j]['sp']=buttonClasses['HIDDEN'];\n                }\n              }\n              break;\n          }\n        }\n      }\n    }\n\n    /**\n     * Converts the legacy BK property from pre 10.0 into the KLS keyboard layer spec format,\n     * sparsifying it as possible to pre-emptively check invalid layers.\n     * \n     * @param   {Array}   BK      keyboard object (as loaded)\n     * @return  {Object}\n     */\n    static processLegacyDefinitions(BK: string[]): KLS {\n      //['default','shift','ctrl','shiftctrl','alt','shiftalt','ctrlalt','shiftctrlalt'];\n      var idList=Layouts.generateLayerIds(false); // Non-chiral.\n\n      var KLS: KLS = {};\n\n      // The old default:  eight auto-managed layers...\n      for(var n=0; n<idList.length; n++) {\n        var id = idList[n], arr = [], valid = false;\n\n        // ... with keycode mappings in blocks of 65.\n        for(var k=0; k < 65; k++) {\n          var index = k + 65 * n;\n          arr.push(BK[index]);\n\n          // The entry for K_SPACE's keycode tends to hold ' ' instead of '', which causes\n          // the whole layer to be treated as 'valid' if not included in the conditional.\n          if(index < BK.length && BK[index] != '' && k != Layouts.dfltCodes.indexOf('K_SPACE')) {\n            valid = true;\n          }\n        }\n\n        if(valid) {\n          KLS[id] = arr;\n        }\n      }\n\n      // There must always be at least a plain 'default' layer.  Array(65).fill('') would be preferable but isn't supported on IE, \n      // but buildDefaultLayer will set the defaults for these layers if no entry exists for them in the array due to length.\n      if(typeof KLS['default'] == 'undefined' || ! KLS['default']) {\n        KLS['default'] = [''];\n      }\n\n      // There must always be at least a plain 'shift' layer.\n      if(typeof KLS['shift'] == 'undefined' || ! KLS['shift']) {\n        KLS['shift'] = [''];\n      }\n\n      return KLS;\n    }\n\n    // Defines the default visual layout for a keyboard.\n    static dfltLayout: LayoutSpec = {\n        \"desktop\":\n        {\n            \"font\": \"Tahoma,Helvetica\",\n            \"layer\": [\n                {\n                    \"id\": \"default\",\n                    \"row\": [\n                        {\n                            \"id\": \"1\",\n                            \"key\": [\n                                { \"id\": \"K_BKQUOTE\" },\n                                { \"id\": \"K_1\" },\n                                { \"id\": \"K_2\" },\n                                { \"id\": \"K_3\" },\n                                { \"id\": \"K_4\" },\n                                { \"id\": \"K_5\" },\n                                { \"id\": \"K_6\" },\n                                { \"id\": \"K_7\" },\n                                { \"id\": \"K_8\" },\n                                { \"id\": \"K_9\" },\n                                { \"id\": \"K_0\" },\n                                { \"id\": \"K_HYPHEN\" },\n                                { \"id\": \"K_EQUAL\" },\n                                { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"sp\": \"1\", \"width\": \"130\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"2\",\n                            \"key\": [\n                                { \"id\": \"K_TAB\", \"text\": \"*Tab*\", \"sp\": \"1\", \"width\": \"130\" },\n                                { \"id\": \"K_Q\" },\n                                { \"id\": \"K_W\" },\n                                { \"id\": \"K_E\" },\n                                { \"id\": \"K_R\" },\n                                { \"id\": \"K_T\" },\n                                { \"id\": \"K_Y\" },\n                                { \"id\": \"K_U\" },\n                                { \"id\": \"K_I\" },\n                                { \"id\": \"K_O\" },\n                                { \"id\": \"K_P\" },\n                                { \"id\": \"K_LBRKT\" },\n                                { \"id\": \"K_RBRKT\" },\n                                { \"id\": \"K_BKSLASH\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"3\",\n                            \"key\": [\n                                { \"id\": \"K_CAPS\", \"text\": \"*Caps*\", \"sp\": \"1\", \"width\": \"165\" },\n                                { \"id\": \"K_A\" },\n                                { \"id\": \"K_S\" },\n                                { \"id\": \"K_D\" },\n                                { \"id\": \"K_F\" },\n                                { \"id\": \"K_G\" },\n                                { \"id\": \"K_H\" },\n                                { \"id\": \"K_J\" },\n                                { \"id\": \"K_K\" },\n                                { \"id\": \"K_L\" },\n                                { \"id\": \"K_COLON\" },\n                                { \"id\": \"K_QUOTE\" },\n                                { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"sp\": \"1\", \"width\": \"165\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"4\",\n                            \"key\": [\n                                { \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": \"1\", \"width\": \"130\" },\n                                { \"id\": \"K_oE2\" },\n                                { \"id\": \"K_Z\" },\n                                { \"id\": \"K_X\" },\n                                { \"id\": \"K_C\" },\n                                { \"id\": \"K_V\" },\n                                { \"id\": \"K_B\" },\n                                { \"id\": \"K_N\" },\n                                { \"id\": \"K_M\" },\n                                { \"id\": \"K_COMMA\" },\n                                { \"id\": \"K_PERIOD\" },\n                                { \"id\": \"K_SLASH\" },\n                                { \"id\": \"K_RSHIFT\", \"text\": \"*Shift*\", \"sp\": \"1\", \"width\": \"130\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"5\",\n                            \"key\": [\n                                { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": \"1\", \"width\": \"170\" },\n                                { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": \"1\", \"width\": \"160\" },\n                                { \"id\": \"K_SPACE\", \"text\": \"\", \"width\": \"770\" },\n                                { \"id\": \"K_RALT\", \"text\": \"*Alt*\", \"sp\": \"1\", \"width\": \"160\" },\n                                { \"id\": \"K_RCONTROL\", \"text\": \"*Ctrl*\", \"sp\": \"1\", \"width\": \"170\" }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        \"tablet\":\n        {\n            \"font\": \"Tahoma,Helvetica\",\n            \"layer\": [\n                {\n                    \"id\": \"default\",\n                    \"row\": [\n                        {\n                            \"id\": \"0\",\n                            \"key\": [\n                                { \"id\": \"K_1\" },\n                                { \"id\": \"K_2\" },\n                                { \"id\": \"K_3\" },\n                                { \"id\": \"K_4\" },\n                                { \"id\": \"K_5\" },\n                                { \"id\": \"K_6\" },\n                                { \"id\": \"K_7\" },\n                                { \"id\": \"K_8\" },\n                                { \"id\": \"K_9\" },\n                                { \"id\": \"K_0\" },\n                                { \"id\": \"K_HYPHEN\" },\n                                { \"id\": \"K_EQUAL\" },\n                                { \"sp\": \"10\", \"width\": \"1\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"1\",\n                            \"key\": [\n                                { \"id\": \"K_Q\", \"pad\": \"25\" },\n                                { \"id\": \"K_W\" },\n                                { \"id\": \"K_E\" },\n                                { \"id\": \"K_R\" },\n                                { \"id\": \"K_T\" },\n                                { \"id\": \"K_Y\" },\n                                { \"id\": \"K_U\" },\n                                { \"id\": \"K_I\" },\n                                { \"id\": \"K_O\" },\n                                { \"id\": \"K_P\" },\n                                { \"id\": \"K_LBRKT\" },\n                                { \"id\": \"K_RBRKT\" },\n                                { \"sp\": \"10\", \"width\": \"1\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"2\",\n                            \"key\": [\n                                { \"id\": \"K_A\", \"pad\": \"50\" },\n                                { \"id\": \"K_S\" },\n                                { \"id\": \"K_D\" },\n                                { \"id\": \"K_F\" },\n                                { \"id\": \"K_G\" },\n                                { \"id\": \"K_H\" },\n                                { \"id\": \"K_J\" },\n                                { \"id\": \"K_K\" },\n                                { \"id\": \"K_L\" },\n                                { \"id\": \"K_COLON\" },\n                                { \"id\": \"K_QUOTE\" },\n                                { \"id\": \"K_BKSLASH\", \"width\": \"90\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"3\",\n                            \"key\": [\n                                { \"id\": \"K_oE2\", \"width\": \"90\" },\n                                { \"id\": \"K_Z\" },\n                                { \"id\": \"K_X\" },\n                                { \"id\": \"K_C\" },\n                                { \"id\": \"K_V\" },\n                                { \"id\": \"K_B\" },\n                                { \"id\": \"K_N\" },\n                                { \"id\": \"K_M\" },\n                                { \"id\": \"K_COMMA\" },\n                                { \"id\": \"K_PERIOD\" },\n                                { \"id\": \"K_SLASH\" },\n                                { \"id\": \"K_BKQUOTE\" },\n                                { \"sp\": \"10\", \"width\": \"1\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"4\",\n                            \"key\": [\n                                {\n                                    \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": \"1\", \"width\": \"200\", \"sk\": [\n                                        { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"ctrl\" },\n                                        { \"id\": \"K_LCONTROL\", \"text\": \"*LCtrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"leftctrl\" },\n                                        { \"id\": \"K_RCONTROL\", \"text\": \"*RCtrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"rightctrl\" },\n                                        { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"alt\" },\n                                        { \"id\": \"K_LALT\", \"text\": \"*LAlt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"leftalt\" },\n                                        { \"id\": \"K_RALT\", \"text\": \"*RAlt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"rightalt\" },\n                                        { \"id\": \"K_ALTGR\", \"text\": \"*AltGr*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"ctrl-alt\" }]\n                                },\n                                { \"id\": \"K_LOPT\", \"text\": \"*Menu*\", \"sp\": \"1\", \"width\": \"150\" },\n                                { \"id\": \"K_SPACE\", \"text\": \"\", \"width\": \"570\" },\n                                { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"sp\": \"1\", \"width\": \"150\" },\n                                { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"sp\": \"1\", \"width\": \"200\" }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        \"phone\":\n        {\n            \"font\": \"Tahoma,Helvetica\",\n            \"layer\": [\n                {\n                    \"id\": \"default\",\n                    \"row\": [\n                        {\n                            \"id\": \"0\",\n                            \"key\": [\n                                { \"id\": \"K_1\" },\n                                { \"id\": \"K_2\" },\n                                { \"id\": \"K_3\" },\n                                { \"id\": \"K_4\" },\n                                { \"id\": \"K_5\" },\n                                { \"id\": \"K_6\" },\n                                { \"id\": \"K_7\" },\n                                { \"id\": \"K_8\" },\n                                { \"id\": \"K_9\" },\n                                { \"id\": \"K_0\" },\n                                { \"id\": \"K_HYPHEN\" },\n                                { \"id\": \"K_EQUAL\" },\n                                { \"sp\": \"10\", \"width\": \"1\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"1\",\n                            \"key\": [\n                                { \"id\": \"K_Q\", \"pad\": \"25\" },\n                                { \"id\": \"K_W\" },\n                                { \"id\": \"K_E\" },\n                                { \"id\": \"K_R\" },\n                                { \"id\": \"K_T\" },\n                                { \"id\": \"K_Y\" },\n                                { \"id\": \"K_U\" },\n                                { \"id\": \"K_I\" },\n                                { \"id\": \"K_O\" },\n                                { \"id\": \"K_P\" },\n                                { \"id\": \"K_LBRKT\" },\n                                { \"id\": \"K_RBRKT\" },\n                                { \"sp\": \"10\", \"width\": \"1\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"2\",\n                            \"key\": [\n                                { \"id\": \"K_A\", \"pad\": \"50\" },\n                                { \"id\": \"K_S\" },\n                                { \"id\": \"K_D\" },\n                                { \"id\": \"K_F\" },\n                                { \"id\": \"K_G\" },\n                                { \"id\": \"K_H\" },\n                                { \"id\": \"K_J\" },\n                                { \"id\": \"K_K\" },\n                                { \"id\": \"K_L\" },\n                                { \"id\": \"K_COLON\" },\n                                { \"id\": \"K_QUOTE\" },\n                                { \"id\": \"K_BKSLASH\", \"width\": \"90\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"3\",\n                            \"key\": [\n                                { \"id\": \"K_oE2\", \"width\": \"90\" },\n                                { \"id\": \"K_Z\" },\n                                { \"id\": \"K_X\" },\n                                { \"id\": \"K_C\" },\n                                { \"id\": \"K_V\" },\n                                { \"id\": \"K_B\" },\n                                { \"id\": \"K_N\" },\n                                { \"id\": \"K_M\" },\n                                { \"id\": \"K_COMMA\" },\n                                { \"id\": \"K_PERIOD\" },\n                                { \"id\": \"K_SLASH\" },\n                                { \"id\": \"K_BKQUOTE\" },\n                                { \"sp\": \"10\", \"width\": \"1\" }\n                            ]\n                        },\n                        {\n                            \"id\": \"4\",\n                            \"key\": [\n                                {\n                                    \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": \"1\", \"width\": \"200\", \"sk\": [\n                                        { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"ctrl\" },\n                                        { \"id\": \"K_LCONTROL\", \"text\": \"*LCtrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"leftctrl\" },\n                                        { \"id\": \"K_RCONTROL\", \"text\": \"*RCtrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"rightctrl\" },\n                                        { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"alt\" },\n                                        { \"id\": \"K_LALT\", \"text\": \"*LAlt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"leftalt\" },\n                                        { \"id\": \"K_RALT\", \"text\": \"*RAlt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"rightalt\" },\n                                        { \"id\": \"K_ALTGR\", \"text\": \"*AltGr*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"ctrl-alt\" }]\n                                },\n                                { \"id\": \"K_LOPT\", \"text\": \"*Menu*\", \"width\": \"150\", \"sp\": \"1\" },\n                                { \"id\": \"K_SPACE\", \"width\": \"570\", \"text\": \"\" },\n                                { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"width\": \"150\", \"sp\": \"1\" },\n                                { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"width\": \"200\", \"sp\": \"1\" }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    };\n  }\n}","namespace com.keyman.keyboards {\n  type KeyDistribution = text.KeyDistribution;\n\n\n  export class ActiveKey implements LayoutKey {\n\n    static readonly DEFAULT_PAD=15;          // Padding to left of key, in virtual units\n    static readonly DEFAULT_RIGHT_MARGIN=15; // Padding to right of right-most key, in virtual units\n    static readonly DEFAULT_KEY_WIDTH=100;   // Width of a key, if not specified, in virtual units\n\n    // Defines key defaults\n    static readonly DEFAULT_KEY = {\n      text: '',\n      width: ActiveKey.DEFAULT_KEY_WIDTH.toString(),\n      sp: '0',\n      pad: ActiveKey.DEFAULT_PAD.toString()\n    };\n\n    id?: string;\n    width?: string;\n    pad?: string;\n    layer: string;\n    displayLayer: string;\n    nextlayer: string;\n\n    private baseKeyEvent: text.KeyEvent;\n    isMnemonic: boolean = false;\n\n    proportionalX: number;\n    proportionalWidth: number;\n\n    static polyfill(key: LayoutKey, layout: ActiveLayout, displayLayer: string) {\n      // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.\n      let dummy = new ActiveKey();\n      for(let prop in dummy) {\n        if(!key.hasOwnProperty(prop)) {\n          key[prop] = dummy[prop];\n        }\n      }\n\n      // Ensure subkeys are also properly extended.\n      if(key.sk) {\n        for(let subkey of key.sk) {\n          ActiveKey.polyfill(subkey, layout, displayLayer);\n        }\n      }\n\n      let aKey = key as ActiveKey;\n      aKey.displayLayer = displayLayer;\n      aKey.layer = aKey.layer || displayLayer;\n\n      // Compute the key's base KeyEvent properties for use in future event generation\n      aKey.constructBaseKeyEvent(layout, displayLayer);\n    }\n\n    private constructBaseKeyEvent(layout: ActiveLayout, displayLayer: string) {\n      // Get key name and keyboard shift state (needed only for default layouts and physical keyboard handling)\n      // Note - virtual keys should be treated case-insensitive, so we force uppercasing here.\n      let layer = this.layer || displayLayer || '';\n      let keyName= this.id ? this.id.toUpperCase() : null;\n\n      // Start:  mirrors _GetKeyEventProperties\n\n      // Override key shift state if specified for key in layout (corrected for popup keys KMEW-93)\n      let keyShiftState = text.KeyboardProcessor.getModifierState(layer);\n\n      // First check the virtual key, and process shift, control, alt or function keys\n      var Lkc: text.KeyEvent = {\n        Ltarg: null, // set later, in constructKeyEvent.\n        Lmodifiers: keyShiftState,\n        Lstates: 0,\n        Lcode: keyName ? text.Codes.keyCodes[keyName] : 0,\n        LisVirtualKey: true,\n        vkCode: 0,\n        kName: keyName,\n        kLayer: layer,\n        kbdLayer: displayLayer,\n        kNextLayer: this.nextlayer,\n        device: null,\n        isSynthetic: true\n      };\n\n      if(layout.keyboard) {\n        let keyboard = layout.keyboard;\n\n        // Include *limited* support for mnemonic keyboards (Sept 2012)\n        // If a touch layout has been defined for a mnemonic keyout, do not perform mnemonic mapping for rules on touch devices.\n        if(keyboard.isMnemonic && !(layout.isDefault && layout.formFactor != 'desktop')) {\n          if(Lkc.Lcode != text.Codes.keyCodes['K_SPACE']) { // exception required, March 2013\n            // Jan 2019 - interesting that 'K_SPACE' also affects the caps-state check...\n            Lkc.vkCode = Lkc.Lcode;\n            this.isMnemonic = true;\n          }\n        } else {\n          Lkc.vkCode=Lkc.Lcode;\n        }\n\n        // Support version 1.0 KeymanWeb keyboards that do not define positional vs mnemonic\n        if(!keyboard.definesPositionalOrMnemonic) {\n          // Not the best pattern, but currently safe - we don't look up any properties of any of the\n          // arguments in this use case, and the object's scope is extremely limited.\n          Lkc.Lcode = KeyMapping._USKeyCodeToCharCode(this.constructKeyEvent(null, null, null));\n          Lkc.LisVirtualKey=false;\n        }\n      }\n\n      this.baseKeyEvent = Lkc;\n    }\n\n    constructKeyEvent(keyboardProcessor: text.KeyboardProcessor, target: text.OutputTarget, device: text.EngineDeviceSpec): text.KeyEvent {\n      // Make a deep copy of our preconstructed key event, filling it out from there.\n      let Lkc = utils.deepCopy(this.baseKeyEvent);\n      Lkc.Ltarg = target;\n      Lkc.device = device;\n\n      if(this.isMnemonic) {\n        text.KeyboardProcessor.setMnemonicCode(Lkc, this.layer.indexOf('shift') != -1, keyboardProcessor ? keyboardProcessor.stateKeys['K_CAPS'] : false);\n      }\n\n      // Performs common pre-analysis for both 'native' and 'embedded' OSK key & subkey input events.\n      // This part depends on the keyboard processor's active state.\n      if(keyboardProcessor) {\n        keyboardProcessor.setSyntheticEventDefaults(Lkc);\n      }\n\n      return Lkc;\n    }\n  }\n\n  class ActiveRow implements LayoutRow {\n    // Identify key labels (e.g. *Shift*) that require the special OSK font\n    static readonly SPECIAL_LABEL=/\\*\\w+\\*/;\n\n    id: string;\n    key: ActiveKey[];\n\n    /**\n     * Used for calculating fat-fingering offsets.\n     */\n    proportionalY: number;\n\n    private constructor() {\n\n    }\n\n    static polyfill(row: LayoutRow, layout: ActiveLayout, displayLayer: string, totalWidth: number, proportionalY: number) {\n      // Apply defaults, setting the width and other undefined properties for each key\n      let keys=row['key'];\n      for(let j=0; j<keys.length; j++) {\n        let key=keys[j];\n        for(var tp in ActiveKey.DEFAULT_KEY) {\n          if(typeof key[tp] != 'string') {\n            key[tp]=ActiveKey.DEFAULT_KEY[tp];\n          }\n        }\n\n        // Modify the key type for special keys with non-standard labels\n        // to allow the keyboard font to ovveride the SpecialOSK font.\n        // Blank keys are no longer reclassed - can use before/after CSS to add text\n        switch(key['sp']) {\n          case '1':\n            if(!ActiveRow.SPECIAL_LABEL.test(key['text']) && key['text'] != '') {\n              key['sp']='3';\n            }\n            break;\n          case '2':\n            if(!ActiveRow.SPECIAL_LABEL.test(key['text']) && key['text'] != '') {\n              key['sp']='4';\n            }\n            break;\n        }\n\n        ActiveKey.polyfill(key, layout, displayLayer);\n      }\n\n      /* The calculations here are effectively 'virtualized'.  When used with the OSK, the VisualKeyboard\n       * will overwrite these values with their true runtime geometry.\n       *\n       * These calculations approximate those of the actual OSK (without fitting to a specific resolution)\n       * and are intended for use with layout testing (while headless) in the future.\n       */\n\n      // Calculate percentage-based scalings by summing defined widths and scaling each key to %.\n      // Save each percentage key width as a separate member (do *not* overwrite layout specified width!)\n      var keyPercent: number, padPercent: number, totalPercent=0;\n      for(let j=0; j<keys.length-1; j++) {\n        keyPercent=parseInt(keys[j]['width'],10)/totalWidth;\n        keys[j]['widthpc']=keyPercent;\n        padPercent=parseInt(keys[j]['pad'],10)/totalWidth;\n        keys[j]['padpc']=padPercent;\n\n        // compute center's default x-coord (used in headless modes)\n        (<ActiveKey> keys[j]).proportionalX = (totalPercent + padPercent + (keyPercent/2));\n        (<ActiveKey> keys[j]).proportionalWidth = keyPercent;\n\n        totalPercent += padPercent+keyPercent;\n      }\n\n      // Allow for right OSK margin (15 layout units)\n      let rightMargin = ActiveKey.DEFAULT_RIGHT_MARGIN/totalWidth;\n      totalPercent += rightMargin;\n\n      // If a single key, and padding is negative, add padding to right align the key\n      if(keys.length == 1 && parseInt(keys[0]['pad'],10) < 0) {\n        keyPercent=parseInt(keys[0]['width'],10)/totalWidth;\n        keys[0]['widthpc']=keyPercent;\n        totalPercent += keyPercent;\n        keys[0]['padpc']=1-totalPercent;\n\n        // compute center's default x-coord (used in headless modes)\n        (<ActiveKey> keys[0]).proportionalX = ((totalPercent - rightMargin) -  keyPercent/2);\n        (<ActiveKey> keys[0]).proportionalWidth = keyPercent;\n\n      } else if(keys.length > 0) {\n        let j=keys.length-1;\n        padPercent=parseInt(keys[j]['pad'],10)/totalWidth;\n        keys[j]['padpc']=padPercent;\n        totalPercent += padPercent;\n        keys[j]['widthpc'] = keyPercent = 1-totalPercent;\n\n        // compute center's default x-coord (used in headless modes)\n        (<ActiveKey> keys[j]).proportionalX = (1 - rightMargin) - keyPercent/2;\n        (<ActiveKey> keys[j]).proportionalWidth = keyPercent;\n      }\n\n      // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.\n      let dummy = new ActiveRow();\n      for(let key in dummy) {\n        if(!row.hasOwnProperty(key)) {\n          row[key] = dummy[key];\n        }\n      }\n\n      let aRow = row as ActiveRow;\n      aRow.proportionalY = proportionalY;\n    }\n\n    populateKeyMap(map: {[keyId: string]: ActiveKey}) {\n      this.key.forEach(function(key: ActiveKey) {\n        if(key.id) {\n          map[key.id] = key;\n        }\n      });\n    }\n  }\n\n  export class ActiveLayer implements LayoutLayer {\n    row: ActiveRow[];\n    id: string;\n\n    totalWidth: number;\n\n    defaultKeyProportionalWidth: number;\n    rowProportionalHeight: number;\n\n    /**\n     * Facilitates mapping key id strings to their specification objects.\n     */\n    keyMap: {[keyId: string]: ActiveKey};\n\n    constructor() {\n\n    }\n\n    static polyfill(layer: LayoutLayer, layout: ActiveLayout) {\n      layer.aligned=false;\n\n      // Create a DIV for each row of the group\n      let rows=layer['row'];\n\n      // Calculate the maximum row width (in layout units)\n      var totalWidth=0;\n      for(let i=0; i<layer['row'].length; i++) {\n        var width=0;\n        let row=rows[i];\n        let keys=row['key'];\n        for(let j=0; j<keys.length; j++) {\n          let key=keys[j];\n\n          // Test for a trailing comma included in spec, added as null object by IE\n          if(key == null) {\n            keys.length = keys.length-1;\n          } else {\n            var kw, kp;\n            kw = (typeof key['width'] == 'string' && key['width'] != '') ? parseInt(key['width'],10) : ActiveKey.DEFAULT_KEY_WIDTH;\n            if(isNaN(kw) || kw == 0) kw = ActiveKey.DEFAULT_KEY_WIDTH;\n            key['width'] = kw.toString();\n            kp = (typeof key['pad'] == 'string' && key['pad'] != '') ? parseInt(key['pad'],10) : ActiveKey.DEFAULT_PAD;\n            if(isNaN(kp) || kp == 0) kp = ActiveKey.DEFAULT_PAD;  // KMEW-119\n            key['pad'] = kp.toString();\n            width += kw + kp;\n            //if(typeof key['width'] == 'string' && key['width'] != '') width += parseInt(key['width'],10); else width += DEFAULT_KEY_WIDTH;\n            //if(typeof key['pad'] == 'string' && key['pad'] != '') width += parseInt(key['pad'],10); else width += 5;\n          }\n        }\n        if(width > totalWidth) {\n          totalWidth = width;\n        }\n      }\n\n      // Add default right margin\n      if(layout.formFactor == 'desktop') {\n        totalWidth += 5; // TODO: resolve difference between touch and desktop; why don't we use ActiveKey.DEFAULT_RIGHT_MARGIN?\n      } else {\n        totalWidth += ActiveKey.DEFAULT_RIGHT_MARGIN;\n      }\n\n      let rowCount = layer.row.length;\n      for(let i=0; i<rowCount; i++) {\n        // Calculate proportional y-coord of row.  0 is at top with highest y-coord.\n        let rowProportionalY = (i + 0.5) / rowCount;\n        ActiveRow.polyfill(layer.row[i], layout, layer.id, totalWidth, rowProportionalY);\n      }\n\n      // Add class functions and properties to the existing layout object, allowing it to act as an ActiveLayout.\n      let dummy = new ActiveLayer();\n      for(let key in dummy) {\n        if(!layer.hasOwnProperty(key)) {\n          layer[key] = dummy[key];\n        }\n      }\n\n      let aLayer = layer as ActiveLayer;\n      aLayer.totalWidth = totalWidth;\n      aLayer.defaultKeyProportionalWidth = parseInt(ActiveKey.DEFAULT_KEY.width, 10) / totalWidth;\n      aLayer.rowProportionalHeight = 1.0 / rowCount;\n      aLayer.keyMap = aLayer.constructKeyMap();\n    }\n\n    private constructKeyMap(): {[keyId: string]: ActiveKey} {\n      let map: {[keyId: string]: ActiveKey} = {};\n      this.row.forEach(function(row: ActiveRow) {\n        row.populateKeyMap(map);\n      });\n\n      return map;\n    }\n\n    /**\n     * Builds a sorted-order array of most likely keys to be intended for a given touch.\n     * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.\n     *                           Should be within [0, 0] to [1, 1].\n     * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.\n     *                           For a 400 x 200 keyboard, should be 2.\n     */\n    getTouchProbabilities(touchCoords: {x: number, y: number}, kbdScaleRatio: number): KeyDistribution {\n      let distribution = this.simpleTouchDistribution(touchCoords, kbdScaleRatio);\n      let list: {keyId: string, p: number}[] = [];\n\n      for(let key in distribution) {\n        list.push({keyId: key, p: distribution[key]});\n      }\n\n      return list.sort(function(a, b) {\n        return b.p - a.p; // Largest probability keys should be listed first.\n      })\n    }\n\n    /**\n     * Computes a probability distribution regarding the likelihood of a touch command being intended\n     * for each of the layout's keys.\n     * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.\n     *                           Should be within [0, 0] to [1, 1].\n     * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.\n     *                           For a 400 x 200 keyboard, should be 2.\n     */\n    simpleTouchDistribution(touchCoords: {x: number, y: number}, kbdScaleRatio: number): {[keyId: string]: number} {\n      let keyDists = this.keyTouchDistances(touchCoords, kbdScaleRatio);\n      let keyProbs: {[keyId: string]: number} = {};\n\n      let totalMass = 0;\n\n      // Should we wish to allow multiple different transforms for distance -> probability, use a function parameter in place\n      // of the formula in the loop below.\n      for(let key in keyDists) {\n        totalMass += keyProbs[key] = 1 / (keyDists[key] + 1e-6); // Prevent div-by-0 errors.\n      }\n\n      for(let key in keyProbs) {\n        keyProbs[key] /= totalMass;\n      }\n\n      return keyProbs;\n    }\n\n    /**\n     * Computes a squared 'pseudo-distance' for the touch from each key.  (Not a proper metric.)\n     * Intended for use in generating a probability distribution over the keys based on the touch input.\n     * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.\n     *                           Should be within [0, 0] to [1, 1].\n     * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.\n     *                           For a 400 x 200 keyboard, should be 2.\n     */\n    private keyTouchDistances(touchCoords: {x: number, y: number}, kbdScaleRatio: number): {[keyId: string]: number} {\n      let layer = this;\n\n      let keyDists: {[keyId: string]: number} = {};\n\n      // This double-nested loop computes a pseudo-distance for the touch from each key.  Quite useful for\n      // generating a probability distribution.\n      this.row.forEach(function(row: ActiveRow): void {\n        row.key.forEach(function(key: ActiveKey): void {\n          // If the key lacks an ID, just skip it.  Sometimes used for padding.\n          if(!key.id) {\n            return;\n          }\n          // These represent the within-key distance of the touch from the key's center.\n          // Both should be on the interval [0, 0.5].\n          let dx = Math.abs(touchCoords.x - key.proportionalX);\n          let dy = Math.abs(touchCoords.y - row.proportionalY);\n\n          // If the touch isn't within the key, these store the out-of-key distance\n          // from the closest point on the key being checked.\n          let distX: number, distY: number;\n\n          if(dx > 0.5 * key.proportionalWidth) {\n            distX = (dx - 0.5 * key.proportionalWidth);\n            dx = 0.5;\n          } else {\n            distX = 0;\n            dx /= key.proportionalWidth;\n          }\n\n          if(dy > 0.5 * layer.rowProportionalHeight) {\n            distY = (dy - 0.5 * layer.rowProportionalHeight);\n            dy = 0.5;\n          } else {\n            distY = 0;\n            dy /= layer.rowProportionalHeight;\n          }\n\n          // Now that the differentials are computed, it's time to do distance scaling.\n          //\n          // For out-of-key distance, we scale the X component by the keyboard's aspect ratio\n          // to get the actual out-of-key distance rather than proportional.\n          distX *= kbdScaleRatio;\n\n          // While the keys are rarely perfect squares, we map all within-key distance\n          // to a square shape.  (ALT/CMD should seem as close to SPACE as a 'B'.)\n          //\n          // For that square, we take the rowHeight as its edge lengths.\n          distX += dx * layer.rowProportionalHeight;\n          distY += dy * layer.rowProportionalHeight;\n\n          let distance = distX * distX + distY * distY;\n          keyDists[key.id] = distance;\n        });\n      });\n\n      return keyDists;\n    }\n\n    getKey(keyId: string) {\n      // Keys usually are specified in a \"long form\" prefixed with their layer's ID.\n      if(keyId.indexOf(this.id + '-') == 0) {\n        keyId = keyId.replace(this.id + '-', '');\n      }\n\n      return this.keyMap[keyId];\n    }\n  }\n\n  export class ActiveLayout implements LayoutFormFactor{\n    layer: ActiveLayer[];\n    font: string;\n    keyLabels: boolean;\n    isDefault?: boolean;\n    keyboard: Keyboard;\n    formFactor: text.FormFactor;\n\n    /**\n     * Facilitates mapping layer id strings to their specification objects.\n     */\n    layerMap: {[layerId: string]: ActiveLayer};\n\n    private constructor() {\n\n    }\n\n    getLayer(layerId: string): ActiveLayer {\n      return this.layerMap[layerId];\n    }\n\n    /**\n     *\n     * @param layout\n     * @param formFactor\n     */\n    static polyfill(layout: LayoutFormFactor, keyboard: Keyboard, formFactor: text.FormFactor): ActiveLayout {\n      if(layout == null) {\n        throw new Error(\"Cannot build an ActiveLayout for a null specification.\");\n      }\n\n      // Create a separate OSK div for each OSK layer, only one of which will ever be visible\n      var n: number, i: number;\n      var layers: LayoutLayer[], layer: LayoutLayer;\n      let layerMap: {[layerId: string]: ActiveLayer} = {};\n      var rows: LayoutRow[];\n\n      layers=layout['layer'];\n\n      // ***Delete any empty rows at the end added by compiler bug...\n      for(n=0; n<layers.length; n++) {\n        layer=layers[n]; rows=layer['row'];\n        for(i=rows.length; i>0; i--) {\n          if(rows[i-1]['key'].length > 0) {\n            break;\n          }\n        }\n\n        if(i < rows.length) {\n          rows.splice(i-rows.length,rows.length-i);\n        }\n      }\n      // ...remove to here when compiler bug fixed ***\n\n      // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.\n      let dummy = new ActiveLayout();\n      for(let key in dummy) {\n        if(!layout.hasOwnProperty(key)) {\n          layout[key] = dummy[key];\n        }\n      }\n\n      let aLayout = layout as ActiveLayout;\n      aLayout.keyboard = keyboard;\n      aLayout.formFactor = formFactor;\n\n      for(n=0; n<layers.length; n++) {\n        ActiveLayer.polyfill(layers[n], aLayout);\n        layerMap[layers[n].id] = layers[n] as ActiveLayer;\n      }\n\n      aLayout.layerMap = layerMap;\n\n      return aLayout;\n    }\n  }\n}","/// <reference path=\"engineDeviceSpec.ts\" />\n\nnamespace com.keyman.text {\n  /**\n   * Defines common behaviors associated with system stores.\n   */\n  export abstract class SystemStore {\n    public readonly id: number;\n\n    constructor(id: number) {\n      this.id = id;\n    }\n\n    abstract matches(value: string): boolean;\n\n    set(value: string): void {\n      throw new Error(\"System store with ID \" + this.id + \" may not be directly set.\");\n    }\n  }\n\n  /**\n   * A handler designed to receive feedback whenever a system store's value is changed.\n   * @param source    The system store being mutated, before the value change occurs.\n   * @param newValue  The new value being set\n   * @returns         `false` / `undefined` to allow the change, `true` to block the change.\n   */\n  export type SystemStoreMutationHandler = (source: MutableSystemStore, newValue: string) => boolean;\n\n  export class MutableSystemStore extends SystemStore {\n    private _value: string;\n    handler?: SystemStoreMutationHandler = null;\n\n    constructor(id: number, defaultValue: string) {\n      super(id);\n      this._value = defaultValue;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    matches(value: string) {\n      return this._value == value;\n    }\n\n    set(value: string) {\n      if(this.handler) {\n        if(this.handler(this, value)) {\n          return;\n        }\n      }\n\n      this._value = value;\n    }\n  }\n\n  /**\n   * Handles checks against the current platform.\n   */\n  export class PlatformSystemStore extends SystemStore {\n    private readonly kbdInterface: KeyboardInterface;\n\n    constructor(keyboardInterface: KeyboardInterface) {\n      super(KeyboardInterface.TSS_PLATFORM);\n\n      this.kbdInterface = keyboardInterface;\n    }\n\n    matches(value: string) {\n      var i,constraint,constraints=value.split(' ');\n      let device = this.kbdInterface.activeDevice;\n\n      for(i=0; i<constraints.length; i++) {\n        constraint=constraints[i].toLowerCase();\n        switch(constraint) {\n          case 'touch':\n          case 'hardware':\n            if(device.touchable != (constraint == 'touch')) {\n              return false;\n            }\n            break;\n\n          case 'macos':\n          case 'mac':\n            constraint = 'macosx';\n            // fall through\n          case 'macosx':\n          case 'windows':\n          case 'android':\n          case 'ios':\n          case 'linux':\n            if(device.OS != constraint) {\n              return false;\n            }\n            break;\n\n          case 'tablet':\n          case 'phone':\n          case 'desktop':\n            if(device.formFactor != constraint) {\n              return false;\n            }\n            break;\n\n          case 'web':\n            if(device.browser == 'native') {\n              return false; // web matches anything other than 'native'\n            }\n            break;\n            \n          case 'native':\n            // This will return true for embedded KeymanWeb\n          case 'ie':\n          case 'chrome':\n          case 'firefox':\n          case 'safari':\n          case 'edge':\n          case 'opera':\n            if(device.browser != constraint) {\n              return false;\n            }\n            break;\n            \n          default:\n            return false;\n        }\n      }\n\n      // Everything we checked against was valid and had matches - it's a match!\n      return true;\n    }\n  }\n}","/// <reference path=\"deadkeys.ts\" />\n/// <reference path=\"ruleBehavior.ts\" />\n\n// Defines classes for handling system stores\n/// <reference path=\"systemStores.ts\" />\n\n/***\n   KeymanWeb 11.0\n   Copyright 2019 SIL International\n***/\n\nnamespace com.keyman.text {\n  //#region Helper type definitions\n\n  export class KeyInformation {\n    vk: boolean;\n    code: number;\n    modifiers: number;\n  }\n\n  /*\n  * Type alias definitions to reflect the parameters of the fullContextMatch() callback (KMW 10+).\n  * No constructors or methods since keyboards will not utilize the same backing prototype, and\n  * property names are shorthanded to promote minification.\n  */\n  type PlainKeyboardStore = string;\n\n  export type KeyboardStoreElement = (string|StoreNonCharEntry);\n  export type ComplexKeyboardStore = KeyboardStoreElement[]; \n\n  type KeyboardStore = PlainKeyboardStore | ComplexKeyboardStore;\n\n  export type VariableStore = {[name: string]: string};\n\n  type RuleChar = string;\n\n  class RuleDeadkey {\n    /** Discriminant field - 'd' for Deadkey.\n     */\n    ['t']: 'd';\n\n    /**\n     * Value:  the deadkey's ID.\n     */\n    ['d']: number; // For 'd'eadkey; also reflects the Deadkey class's 'd' property.\n  }\n\n  class ContextAny {\n    /** Discriminant field - 'a' for `any()`.\n     */\n    ['t']: 'a';\n\n    /**\n     * Value:  the store to search.\n     */\n    ['a']: KeyboardStore; // For 'a'ny statement.\n\n    /**\n     * If set to true, negates the 'any'.\n     */\n    ['n']: boolean|0|1;\n  }\n\n  class RuleIndex {\n    /** Discriminant field - 'i' for `index()`.\n     */\n    ['t']: 'i';\n    \n    /**\n     * Value: the Store from which to output\n     */\n    ['i']: KeyboardStore;\n    \n    /**\n     * Offset: the offset in context for the corresponding `any()`.\n     */\n    ['o']: number;\n  }\n\n  class ContextEx {\n    /** Discriminant field - 'c' for `context()`.\n     */\n    ['t']: 'c';\n    \n    /**\n     * Value:  The offset into the current rule's context to be matched.\n     */\n    ['c']: number; // For 'c'ontext statement.\n  }\n\n  class ContextNul {\n    /** Discriminant field - 'n' for `nul`\n     */\n    ['t']: 'n';\n  }\n\n  class StoreBeep {\n    /** Discriminant field - 'b' for `beep`\n     */\n    ['t']: 'b';\n  }\n\n  type ContextNonCharEntry = RuleDeadkey | ContextAny | RuleIndex | ContextEx | ContextNul;\n  type ContextEntry = RuleChar | ContextNonCharEntry;\n\n  type StoreNonCharEntry = RuleDeadkey | StoreBeep;\n\n  /**\n   * Cache of context storing and retrieving return values from KC\n   * Must be reset prior to each keystroke and after any text changes\n   * MCD 3/1/14   \n   **/         \n  class CachedContext {\n    _cache: string[][];\n    \n    reset(): void { \n      this._cache = []; \n    }\n\n    get(n: number, ln: number): string { \n      // return null; // uncomment this line to disable context caching\n      if(typeof this._cache[n] == 'undefined') {\n        return null;\n      } else if(typeof this._cache[n][ln] == 'undefined') {\n        return null;\n      }\n      return this._cache[n][ln];\n    }\n\n    set(n: number, ln: number, val: string): void { \n      if(typeof this._cache[n] == 'undefined') { \n        this._cache[n] = []; \n      } \n      this._cache[n][ln] = val; \n    }\n  };\n\n  type CachedExEntry = {valContext: (string|number)[], deadContext: text.Deadkey[]};\n  /** \n   * An extended version of cached context storing designed to work with \n   * `fullContextMatch` and its helper functions.\n   */\n  class CachedContextEx {\n    _cache: CachedExEntry[][];\n    \n    reset(): void {\n      this._cache = [];\n    }\n\n    get(n: number, ln: number): CachedExEntry {\n      // return null; // uncomment this line to disable context caching\n      if(typeof this._cache[n] == 'undefined') {\n        return null;\n      } else if(typeof this._cache[n][ln] == 'undefined') {\n        return null;\n      }\n      return this._cache[n][ln];\n    }\n\n    set(n: number, ln: number, val: CachedExEntry): void { \n      if(typeof this._cache[n] == 'undefined') { \n        this._cache[n] = []; \n      } \n      this._cache[n][ln] = val; \n    }\n  };\n\n  //#endregion\n\n  export class KeyboardInterface {\n    static readonly GLOBAL_NAME = 'KeymanWeb';\n\n    cachedContext: CachedContext = new CachedContext();\n    cachedContextEx: CachedContextEx = new CachedContextEx();\n\n    activeTargetOutput: OutputTarget;\n    ruleBehavior: RuleBehavior;\n\n    static readonly TSS_LAYER:    number = 33;\n    static readonly TSS_PLATFORM: number = 31;\n\n    systemStores: {[storeID: number]: SystemStore};\n\n    _AnyIndices:  number[] = [];    // AnyIndex - array of any/index match indices\n\n    // Must be accessible to some of the keyboard API methods.\n    activeKeyboard: any;\n    activeDevice: EngineDeviceSpec;\n\n    variableStoreSerializer?: VariableStoreSerializer;\n\n    constructor(variableStoreSerializer: VariableStoreSerializer = null) {\n      this.systemStores = {};\n      \n      this.systemStores[KeyboardInterface.TSS_PLATFORM] = new PlatformSystemStore(this);\n      this.systemStores[KeyboardInterface.TSS_LAYER] = new MutableSystemStore(KeyboardInterface.TSS_LAYER, 'default');\n\n      this.variableStoreSerializer = variableStoreSerializer;\n    }\n\n    /**\n     * Function     KSF\n     * Scope        Public\n     * \n     * Saves the document's current focus settings on behalf of the keyboard.  Often paired with insertText.\n     */    \n    saveFocus(): void { }\n\n    /**\n     * A text-insertion method used by custom OSKs for helpHTML interaction, like with sil_euro_latin.\n     * \n     * This function currently bypasses web-core's standard text handling control path and all predictive text processing.\n     * It also has DOM-dependencies that help ensure KMW's active OutputTarget retains focus during use.\n     */\n    insertText?: (Ptext: string, PdeadKey: number) => boolean;\n    \n    /**\n     * Function     registerKeyboard  KR                    \n     * Scope        Public\n     * @param       {Object}      Pk      Keyboard  object\n     * Description  Registers a keyboard with KeymanWeb once its script has fully loaded.\n     * \n     *              In web-core, this also activates the keyboard; in other modules, this method\n     *              may be replaced with other implementations.\n     */    \n    registerKeyboard(Pk): void {\n      // NOTE:  This implementation is web-core specific and is intentionally replaced, whole-sale, \n      //        by DOM-aware code.\n      let keyboard = new keyboards.Keyboard(Pk);\n      this.activeKeyboard = keyboard;\n    }\n\n    /**\n     * Used by DOM-aware KeymanWeb to add keyboard stubs, used by the `KeyboardManager` type \n     * to optimize resource use.\n     */    \n    registerStub?: (Pstub) => number;\n\n    /**\n     * Get *cached or uncached* keyboard context for a specified range, relative to caret\n     * \n     * @param       {number}      n       Number of characters to move back from caret\n     * @param       {number}      ln      Number of characters to return\n     * @param       {Object}      Pelem   Element to work with (must be currently focused element)\n     * @return      {string}              Context string \n     * \n     * Example     [abcdef|ghi] as INPUT, with the caret position marked by |:\n     *             KC(2,1,Pelem) == \"e\"\n     *             KC(3,3,Pelem) == \"def\"\n     *             KC(10,10,Pelem) == \"abcdef\"  i.e. return as much as possible of the requested string\n     */    \n    \n    context(n: number, ln: number, outputTarget: OutputTarget): string {\n      var v = this.cachedContext.get(n, ln);\n      if(v !== null) {\n        return v;\n      }\n      \n      var r = this.KC_(n, ln, outputTarget);\n      this.cachedContext.set(n, ln, r);\n      return r;\n    }\n\n    /**\n     * Get (uncached) keyboard context for a specified range, relative to caret\n     * \n     * @param       {number}      n       Number of characters to move back from caret\n     * @param       {number}      ln      Number of characters to return\n     * @param       {Object}      Pelem   Element to work with (must be currently focused element)\n     * @return      {string}              Context string \n     * \n     * Example     [abcdef|ghi] as INPUT, with the caret position marked by |:\n     *             KC(2,1,Pelem) == \"e\"\n     *             KC(3,3,Pelem) == \"def\"\n     *             KC(10,10,Pelem) == \"XXXXabcdef\"  i.e. return as much as possible of the requested string, where X = \\uFFFE\n     */    \n    private KC_(n: number, ln: number, outputTarget: OutputTarget): string {\n      var tempContext = '';\n\n      tempContext = outputTarget.getTextBeforeCaret();\n\n      if(tempContext._kmwLength() < n) {\n        tempContext = Array(n-tempContext._kmwLength()+1).join(\"\\uFFFE\") + tempContext;\n      }\n\n      return tempContext._kmwSubstr(-n)._kmwSubstr(0,ln);\n    }\n    \n    /**\n     * Function     nul           KN    \n     * Scope        Public\n     * @param       {number}      n       Length of context to check\n     * @param       {Object}      Ptarg   Element to work with (must be currently focused element)\n     * @return      {boolean}             True if length of context is less than or equal to n\n     * Description  Test length of context, return true if the length of the context is less than or equal to n\n     * \n     * Example     [abc|def] as INPUT, with the caret position marked by |:\n     *             KN(3,Pelem) == TRUE\n     *             KN(2,Pelem) == FALSE\n     *             KN(4,Pelem) == TRUE\n     */    \n    nul(n: number, outputTarget: OutputTarget): boolean {\n      var cx=this.context(n+1, 1, outputTarget);\n      \n      // With #31, the result will be a replacement character if context is empty.\n      return cx === \"\\uFFFE\";\n    }\n\n    /**\n     * Function     contextMatch  KCM   \n     * Scope        Public\n     * @param       {number}      n       Number of characters to move back from caret\n     * @param       {Object}      Ptarg   Focused element\n     * @param       {string}      val     String to match\n     * @param       {number}      ln      Number of characters to return\n     * @return      {boolean}             True if selected context matches val\n     * Description  Test keyboard context for match\n     */    \n    contextMatch(n: number, outputTarget: OutputTarget, val: string, ln: number): boolean {\n      var cx=this.context(n, ln, outputTarget);\n      if(cx === val) {\n        return true; // I3318\n      }\n      outputTarget.deadkeys().resetMatched(); // I3318\n      return false;\n    }\n\n    /**\n     * Builds the *cached or uncached* keyboard context for a specified range, relative to caret\n     * \n     * @param       {number}      n       Number of characters to move back from caret\n     * @param       {number}      ln      Number of characters to return\n     * @param       {Object}      Pelem   Element to work with (must be currently focused element)\n     * @return      {Array}               Context array (of strings and numbers) \n     */\n    private _BuildExtendedContext(n: number, ln: number, outputTarget: OutputTarget): CachedExEntry {\n      var cache: CachedExEntry = this.cachedContextEx.get(n, ln); \n      if(cache !== null) {\n        return cache;\n      } else {\n        // By far the easiest way to correctly build what we want is to start from the right and work to what we need.\n        // We may have done it for a similar cursor position before.\n        cache = this.cachedContextEx.get(n, n);\n        if(cache === null) {\n          // First, let's make sure we have a cloned, sorted copy of the deadkey array.\n          let unmatchedDeadkeys = outputTarget.deadkeys().toSortedArray(); // Is reverse-order sorted for us already.\n\n          // Time to build from scratch!\n          var index = 0;\n          cache = { valContext: [], deadContext: []};\n          while(cache.valContext.length < n) {\n            // As adapted from `deadkeyMatch`.\n            var sp = outputTarget.getDeadkeyCaret();\n            var deadPos = sp - index;\n            if(unmatchedDeadkeys.length > 0 && unmatchedDeadkeys[0].p > deadPos) {\n              // We have deadkeys at the right-hand side of the caret!  They don't belong in the context, so pop 'em off.\n              unmatchedDeadkeys.splice(0, 1);\n              continue;\n            } else if(unmatchedDeadkeys.length > 0 && unmatchedDeadkeys[0].p == deadPos) {\n              // Take the deadkey.\n              cache.deadContext[n-cache.valContext.length-1] = unmatchedDeadkeys[0];\n              cache.valContext = ([unmatchedDeadkeys[0].d] as (string|number)[]).concat(cache.valContext);\n              unmatchedDeadkeys.splice(0, 1);\n            } else {\n              // Take the character.  We get \"\\ufffe\" if it doesn't exist.\n              var kc = this.context(++index, 1, outputTarget);\n              cache.valContext = ([kc] as (string|number)[]).concat(cache.valContext);\n            }\n          }\n          this.cachedContextEx.set(n, n, cache);\n        }\n\n        // Now that we have the cache...\n        var subCache = cache;\n        subCache.valContext = subCache.valContext.slice(0, ln);\n        for(var i=0; i < subCache.valContext.length; i++) {\n          if(subCache[i] == '\\ufffe') {\n            subCache.valContext.splice(0, 1);\n            subCache.deadContext.splice(0, 1);\n          }\n        }\n\n        if(subCache.valContext.length == 0) {\n          subCache.valContext = ['\\ufffe'];\n          subCache.deadContext = [];\n        }\n\n        this.cachedContextEx.set(n, ln, subCache);\n\n        return subCache;\n      }\n    }\n\n    /**\n     * Function       fullContextMatch    KFCM\n     * Scope          Private\n     * @param         {number}    n       Number of characters to move back from caret\n     * @param         {Object}    Ptarg   Focused element\n     * @param         {Array}     rule    An array of ContextEntries to match.\n     * @return        {boolean}           True if the fully-specified rule context matches the current KMW state.\n     * \n     * A KMW 10+ function designed to bring KMW closer to Keyman Desktop functionality,\n     * near-directly modeling (externally) the compiled form of Desktop rules' context section.\n     */\n    fullContextMatch(n: number, outputTarget: OutputTarget, rule: ContextEntry[]): boolean {\n      // Stage one:  build the context index map.\n      var fullContext = this._BuildExtendedContext(n, rule.length, outputTarget);\n      var context = fullContext.valContext;\n      var deadContext = fullContext.deadContext;\n\n      var mismatch = false;\n\n      // This symbol internally indicates lack of context in a position.  (See KC_)\n      const NUL_CONTEXT = \"\\uFFFE\";\n\n      var assertNever = function(x: never): never {\n        // Could be accessed by improperly handwritten calls to `fullContextMatch`.\n        throw new Error(\"Unexpected object in fullContextMatch specification: \" + x);\n      }\n\n      // Stage two:  time to match against the rule specified.\n      for(var i=0; i < rule.length; i++) {\n        if(typeof rule[i] == 'string') {\n          var str = rule[i] as string;\n          if(str !== context[i]) {\n            mismatch = true;\n            break;\n          }\n        } else {\n          // TypeScript needs a cast to this intermediate type to do its discriminated union magic.\n          var r = rule[i] as ContextNonCharEntry;\n          switch(r.t) {\n            case 'd':\n              // We still need to set a flag here; \n              if(r['d'] !== context[i]) {\n                mismatch = true;\n              } else {\n                deadContext[i].set();\n              }\n              break;\n            case 'a':\n              var lookup: KeyboardStoreElement;\n\n              if(typeof context[i] == 'string') {\n                lookup = context[i] as string;\n              } else {\n                lookup = {'t': 'd', 'd': context[i] as number};\n              }\n\n              var result = this.any(i, lookup, r.a);\n\n              if(!r.n) { // If it's a standard 'any'...\n                if(!result) {\n                  mismatch = true;\n                } else if(deadContext[i] !== undefined) {\n                  // It's a deadkey match, so indicate that.\n                  deadContext[i].set();\n                }\n                // 'n' for 'notany'.  If we actually match or if we have nul context (\\uFFFE), notany fails.\n              } else if(r.n && (result || context[i] !== NUL_CONTEXT)) {\n                mismatch = true;\n              }\n              break;\n            case 'i':\n              // The context will never hold a 'beep.'\n              var ch = this._Index(r.i, r.o) as string | RuleDeadkey;\n\n              if(ch !== undefined && (typeof(ch) == 'string' ? ch : ch.d) !== context[i]) {\n                mismatch = true;\n              } else if(deadContext[i] !== undefined) {\n                deadContext[i].set();\n              }\n              break;\n            case 'c':            \n              if(context[r.c - 1] !== context[i]) {\n                mismatch = true;\n              } else if(deadContext[i] !== undefined) {\n                deadContext[i].set();\n              }\n              break;\n            case 'n':\n              // \\uFFFE is the internal 'no context here sentinel'.\n              if(context[i] != NUL_CONTEXT) {\n                mismatch = true;\n              }\n              break;\n            default:\n              assertNever(r);\n          }\n        }\n      }\n\n      if(mismatch) {\n        // Reset the matched 'any' indices, if any.\n        outputTarget.deadkeys().resetMatched();\n        this._AnyIndices = [];\n      }\n\n      return !mismatch;\n    }\n\n    /**\n     * Function     KIK      \n     * Scope        Public\n     * @param       {Object}  e   keystroke event\n     * @return      {boolean}     true if keypress event\n     * Description  Test if event as a keypress event\n     */    \n    isKeypress(e: KeyEvent): boolean {\n      if(this.activeKeyboard.isMnemonic) {   // I1380 - support KIK for positional layouts\n        return !e.LisVirtualKey;             // will now return true for U_xxxx keys, but not for T_xxxx keys\n      } else {\n        return KeyMapping._USKeyCodeToCharCode(e) ? true : false; // I1380 - support KIK for positional layouts\n      }\n    }\n    \n    /**\n     * Function     keyMatch      KKM      \n     * Scope        Public\n     * @param       {Object}      e           keystroke event\n     * @param       {number}      Lruleshift\n     * @param       {number}      Lrulekey\n     * @return      {boolean}                 True if key matches rule\n     * Description  Test keystroke with modifiers against rule\n     */    \n    keyMatch(e: KeyEvent, Lruleshift:number, Lrulekey:number): boolean {\n      var retVal = false; // I3318\n      var keyCode = (e.Lcode == 173 ? 189 : e.Lcode);  //I3555 (Firefox hyphen issue)\n\n      let bitmask = this.activeKeyboard.modifierBitmask;\n      let Codes = com.keyman.text.Codes;\n      var modifierBitmask = bitmask & Codes.modifierBitmasks[\"ALL\"];\n      var stateBitmask = bitmask & Codes.stateBitmasks[\"ALL\"];\n\n      if(e.vkCode > 255) {\n        keyCode = e.vkCode; // added to support extended (touch-hold) keys for mnemonic layouts\n      }\n        \n      if(e.LisVirtualKey || keyCode > 255) {\n        if((Lruleshift & 0x4000) == 0x4000 || (keyCode > 255)) { // added keyCode test to support extended keys\n          retVal = ((Lrulekey == keyCode) && ((Lruleshift & modifierBitmask) == e.Lmodifiers)); //I3318, I3555\n          retVal = retVal && this.stateMatch(e, Lruleshift & stateBitmask);\n        }\n      } else if((Lruleshift & 0x4000) == 0) {\n        retVal = (keyCode == Lrulekey); // I3318, I3555\n      }\n      if(!retVal) {\n        this.activeTargetOutput.deadkeys().resetMatched();  // I3318\n      }\n      return retVal; // I3318\n    };\n\n    /**\n     * Function     stateMatch    KSM\n     * Scope        Public\n     * @param       {Object}      e       keystroke event\n     * @param       {number}      Lstate  \n     * Description  Test keystroke against state key rules\n     */\n    stateMatch(e: KeyEvent, Lstate: number) {\n      return ((Lstate & e.Lstates) == Lstate);\n    }\n\n    /**\n     * Function     keyInformation  KKI\n     * Scope        Public\n     * @param       {Object}      e\n     * @return      {Object}              Object with event's virtual key flag, key code, and modifiers\n     * Description  Get object with extended key event information\n     */    \n    keyInformation(e: KeyEvent): KeyInformation {\n      var ei = new KeyInformation();\n      ei['vk'] = e.LisVirtualKey;\n      ei['code'] = e.Lcode;\n      ei['modifiers'] = e.Lmodifiers;\n      return ei;\n    };\n\n    /**\n     * Function     deadkeyMatch  KDM      \n     * Scope        Public\n     * @param       {number}      n       offset from current cursor position\n     * @param       {Object}      Ptarg   target element\n     * @param       {number}      d       deadkey\n     * @return      {boolean}             True if deadkey found selected context matches val\n     * Description  Match deadkey at current cursor position\n     */    \n    deadkeyMatch(n: number, outputTarget: OutputTarget, d: number): boolean {\n      return outputTarget.hasDeadkeyMatch(n, d);\n    }\n      \n    /**\n     * Function     beep          KB      \n     * Scope        Public\n     * @param       {Object}      Pelem     element to flash\n     * Description  Flash body as substitute for audible beep; notify embedded device to vibrate\n     */    \n    beep(outputTarget: OutputTarget): void {\n      this.resetContextCache();\n\n      // Denote as part of the matched rule's behavior.\n      this.ruleBehavior.beep = true;\n    }\n\n    _ExplodeStore(store: KeyboardStore): ComplexKeyboardStore {\n      if(typeof(store) == 'string') {\n        let cachedStores = this.activeKeyboard.explodedStores;\n\n        // Is the result cached?\n        if(cachedStores[store]) {\n          return cachedStores[store];\n        }\n\n        // Nope, so let's build its cache.\n        var result: ComplexKeyboardStore = [];\n        for(var i=0; i < store._kmwLength(); i++) {\n          result.push(store._kmwCharAt(i));\n        }\n\n        // Cache the result for later!\n        cachedStores[store] = result;\n        return result;\n      } else {\n        return store;\n      }\n    }\n    \n    /**\n     * Function     any           KA      \n     * Scope        Public\n     * @param       {number}      n     character position (index) \n     * @param       {string}      ch    character to find in string\n     * @param       {string}      s     'any' string   \n     * @return      {boolean}           True if character found in 'any' string, sets index accordingly\n     * Description  Test for character matching\n     */    \n    any(n: number, ch: KeyboardStoreElement, s: KeyboardStore): boolean {\n      if(ch == '') {\n        return false;\n      }\n      \n      s = this._ExplodeStore(s);\n      var Lix = -1;\n      for(var i=0; i < s.length; i++) {\n        if(typeof(s[i]) == 'string') {\n          if(s[i] == ch) {\n            Lix = i;\n            break;\n          }\n        } else if(s[i]['d'] === ch['d']) {\n          Lix = i;\n          break;\n        }\n      }\n      this._AnyIndices[n] = Lix;\n      return Lix >= 0;\n    }\n\n    /**\n     * Function     _Index\n     * Scope        Public \n     * @param       {string}      Ps      string\n     * @param       {number}      Pn      index\n     * Description  Returns the character from a store string according to the offset in the index array\n     */\n    _Index(Ps: KeyboardStore, Pn: number): KeyboardStoreElement {        \n      Ps = this._ExplodeStore(Ps);\n\n      if(this._AnyIndices[Pn-1] < Ps.length) {   //I3319\n        return Ps[this._AnyIndices[Pn-1]];\n      } else {\n        /* Should not be possible for a compiled keyboard, but may arise \n        * during the development of handwritten keyboards.\n        */\n        console.warn(\"Unmatched contextual index() statement detected in rule with index \" + Pn + \"!\");\n        return \"\";\n      }\n    }\n\n    /**\n     * Function     indexOutput   KIO\n     * Scope        Public\n     * @param       {number}      Pdn     no of character to overwrite (delete)\n     * @param       {string}      Ps      string\n     * @param       {number}      Pn      index\n     * @param       {Object}      Pelem   element to output to\n     * Description  Output a character selected from the string according to the offset in the index array\n     */\n    indexOutput(Pdn: number, Ps: KeyboardStore, Pn: number, outputTarget: OutputTarget): void {\n      this.resetContextCache();\n\n      var assertNever = function(x: never): never {\n        // Could be accessed by improperly handwritten calls to `fullContextMatch`.\n        throw new Error(\"Unexpected object in fullContextMatch specification: \" + x);\n      }\n\n      var indexChar = this._Index(Ps, Pn);\n      if(indexChar !== \"\") {\n        if(typeof indexChar == 'string' ) {\n          this.output(Pdn, outputTarget, indexChar);  //I3319\n        } else if(indexChar['t']) {\n          var storeEntry = indexChar as StoreNonCharEntry;\n\n          switch(storeEntry.t) {\n            case 'b': // Beep commands may appear within stores.\n              this.beep(outputTarget);\n              break;\n            case 'd':\n              this.deadkeyOutput(Pdn, outputTarget, indexChar['d']);\n              break;\n            default:\n              assertNever(storeEntry);\n          }\n        } else { // For keyboards developed during 10.0's alpha phase - t:'d' was assumed.\n          this.deadkeyOutput(Pdn, outputTarget, indexChar['d']);\n        }\n      } \n    }\n    \n    \n    /**\n     * Function     deleteContext KDC  \n     * Scope        Public\n     * @param       {number}      dn      number of context entries to overwrite\n     * @param       {Object}      Pelem   element to output to \n     * @param       {string}      s       string to output   \n     * Description  Keyboard output\n     */\n    deleteContext(dn: number, outputTarget: OutputTarget): void {\n      var context: CachedExEntry;\n\n      // We want to control exactly which deadkeys get removed.\n      if(dn > 0) {\n        context = this._BuildExtendedContext(dn, dn, outputTarget);\n        let nulCount = 0;\n\n        for(var i=0; i < context.valContext.length; i++) {\n          var dk = context.deadContext[i];\n\n          if(dk) {\n            // Remove deadkey in context.\n            outputTarget.deadkeys().remove(dk);\n\n            // Reduce our reported context size.\n            dn--;\n          } else if(context.valContext[i] == \"\\uFFFE\") {\n            // Count any `nul` sentinels that would contribute to our deletion count.\n            nulCount++;\n          }\n        }\n\n        // Prevent attempts to delete nul sentinels, as they don't exist in the actual context.\n        // (Addresses regression from KMW v 12.0 paired with Developer bug through same version)\n        let contextLength = context.valContext.length - nulCount;\n        if(dn > contextLength) {\n          dn = contextLength;\n        }\n      }\n\n      // If a matched deadkey hasn't been deleted, we don't WANT to delete it.\n      outputTarget.deadkeys().resetMatched();\n\n      // Why reinvent the wheel?  Delete the remaining characters by 'inserting a blank string'.\n      this.output(dn, outputTarget, '');\n    }\n\n    /**\n     * Function     output        KO  \n     * Scope        Public\n     * @param       {number}      dn      number of characters to overwrite\n     * @param       {Object}      Pelem   element to output to \n     * @param       {string}      s       string to output   \n     * Description  Keyboard output\n     */\n    output(dn: number, outputTarget: OutputTarget, s:string): void {\n      this.resetContextCache();\n\n      outputTarget.saveProperties();\n      outputTarget.clearSelection();\n      outputTarget.deadkeys().deleteMatched(); // I3318\n      if(dn >= 0) {\n        // Automatically manages affected deadkey positions.  Does not delete deadkeys b/c legacy behavior support.\n        outputTarget.deleteCharsBeforeCaret(dn);\n      }\n      // Automatically manages affected deadkey positions.\n      outputTarget.insertTextBeforeCaret(s);\n      outputTarget.restoreProperties();\n    }\n  \n    \n    /**\n     * Function     deadkeyOutput KDO      \n     * Scope        Public\n     * @param       {number}      Pdn     no of character to overwrite (delete) \n     * @param       {Object}      Pelem   element to output to \n     * @param       {number}      Pd      deadkey id\n     * Description  Record a deadkey at current cursor position, deleting Pdn characters first\n     */    \n    deadkeyOutput(Pdn: number, outputTarget: OutputTarget, Pd: number): void {\n      this.resetContextCache();\n\n      if(Pdn >= 0) {\n        this.output(Pdn, outputTarget,\"\");  //I3318 corrected to >=\n      }\n\n      outputTarget.insertDeadkeyBeforeCaret(Pd);\n      //    _DebugDeadKeys(Pelem, 'KDeadKeyOutput: dn='+Pdn+'; deadKey='+Pd);\n    }\n    \n    /**\n     * KIFS compares the content of a system store with a string value \n     * \n     * @param       {number}      systemId    ID of the system store to test (only TSS_LAYER currently supported)\n     * @param       {string}      strValue    String value to compare to\n     * @param       {Object}      Pelem       Currently active element (may be needed by future tests)     \n     * @return      {boolean}                 True if the test succeeds \n     */       \n    ifStore(systemId: number, strValue: string, outputTarget: OutputTarget): boolean {\n      var result=true;\n      let store = this.systemStores[systemId];\n      if(store) {\n        result = store.matches(strValue);\n      }\n      return result; //Moved from previous line, now supports layer selection, Build 350 \n    }\n\n    /**\n     * KSETS sets the value of a system store to a string  \n     * \n     * @param       {number}      systemId    ID of the system store to set (only TSS_LAYER currently supported)\n     * @param       {string}      strValue    String to set as the system store content \n     * @param       {Object}      Pelem       Currently active element (may be needed in future tests)     \n     * @return      {boolean}                 True if command succeeds\n     *                                        (i.e. for TSS_LAYER, if the layer is successfully selected)\n     * \n     * Note that option/variable stores are instead set within keyboard script code, as they only\n     * affect keyboard behavior.\n     */    \n    setStore(systemId: number, strValue: string, outputTarget: OutputTarget): boolean {\n      this.resetContextCache();\n      if(systemId == KeyboardInterface.TSS_LAYER) {\n        // Denote the changed store as part of the matched rule's behavior.\n        this.ruleBehavior.setStore[systemId] = strValue;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Load an option store value from a cookie or default value\n     * \n     * @param       {string}      kbdName     keyboard internal name\n     * @param       {string}      storeName   store (option) name, embedded in cookie name\n     * @param       {string}      dfltValue   default value\n     * @return      {string}                  current or default option value   \n     * \n     * This will only ever be called when the keyboard is loaded, as it is used by keyboards\n     * to initialize a store value on the keyboard's script object.\n     */    \n    loadStore(kbdName: string, storeName:string, dfltValue:string): string {\n      this.resetContextCache();\n      if(this.variableStoreSerializer) {\n        let cValue = this.variableStoreSerializer.loadStore(kbdName, storeName);\n        return cValue[storeName] || dfltValue;\n      } else {\n        return dfltValue;\n      }\n    }\n\n    /**\n     * Save an option store value to a cookie \n     * \n     * @param       {string}      storeName   store (option) name, embedded in cookie name\n     * @param       {string}      optValue    option value to save\n     * @return      {boolean}                 true if save successful\n     * \n     * Note that a keyboard will freely manipulate the value of its variable stores on the\n     * script object within its own code.  This function's use is merely to _persist_ that\n     * value across sessions, providing a custom user default for later uses of the keyboard.\n     */    \n    saveStore(storeName:string, optValue:string): boolean {\n      this.resetContextCache();\n      var kbd=this.activeKeyboard;\n      if(!kbd || typeof kbd.id == 'undefined' || kbd.id == '') {\n        return false;\n      }\n\n      // And the lookup under that entry looks for the value under the store name, again.\n      let valueObj: VariableStore = {};\n      valueObj[storeName] = optValue;\n\n      // Null-check in case of invocation during unit-test\n      if(this.ruleBehavior) {\n        this.ruleBehavior.saveStore[storeName] = valueObj;\n      } else {\n        // We're in a unit-test environment, directly invoking this method from outside of a keyboard.\n        // In this case, we should immediately commit the change.\n        this.variableStoreSerializer.saveStore(this.activeKeyboard.id, storeName, valueObj);\n      }\n      return true;\n    }\n\n    resetContextCache(): void {\n      this.cachedContext.reset();\n      this.cachedContextEx.reset();\n    }\n\n    defaultBackspace(outputTarget: OutputTarget) {\n      this.output(1, outputTarget, \"\");\n    }\n\n    /**\n     * Function     processKeystroke\n     * Scope        Private\n     * @param       {Object}        element     The page element receiving input\n     * @param       {Object}        keystroke   The input keystroke (with its properties) to be mapped by the keyboard.\n     * Description  Encapsulates calls to keyboard input processing.\n     * @returns     {number}        0 if no match is made, otherwise 1.\n     */\n    processKeystroke(outputTarget: OutputTarget, keystroke: KeyEvent): RuleBehavior {\n      // Clear internal state tracking data from prior keystrokes.\n      if(!outputTarget) {\n        throw \"No target specified for keyboard output!\";\n      } else if(!this.activeKeyboard) {\n        throw \"No active keyboard for keystroke processing!\";\n      }\n\n      outputTarget.invalidateSelection();\n\n      outputTarget.deadkeys().resetMatched();       // I3318    \n      this.resetContextCache();\n\n      // Capture the initial state of the OutputTarget before any rules are matched.\n      let preInput = Mock.from(outputTarget);\n      \n      // Establishes the results object, allowing corresponding commands to set values here as appropriate.\n      this.ruleBehavior = new RuleBehavior();\n\n      // Ensure the settings are in place so that KIFS/ifState activates and deactivates\n      // the appropriate rule(s) for the modeled device.\n      this.activeDevice = keystroke.device;\n\n      // Calls the start-group of the active keyboard.\n      this.activeTargetOutput = outputTarget;\n      var matched = this.activeKeyboard.process(outputTarget, keystroke);\n      this.activeTargetOutput = null;\n\n      if(!matched) {\n        return null;\n      }\n\n      // Finalize the rule's results.\n      this.ruleBehavior.transcription = outputTarget.buildTranscriptionFrom(preInput, keystroke);\n\n      // Clear our result-tracking variable to prevent any possible pollution for future processing.\n      let behavior = this.ruleBehavior;\n      this.ruleBehavior = null;\n\n      return behavior;\n    }\n\n    // Publishes the KeyboardInterface's shorthand API names.\n    // Note that this may need to be called multiple times; a keyboard-processor consumer\n    // may extend or overwrite some of the callbacks after this method's initial call.\n    static __publishShorthandAPI() {\n      // Keyboard callbacks\n      let prototype = this.prototype;\n\n      var exportKBCallback = function(miniName: string, longName: string) {\n        prototype[miniName] = prototype[longName];\n      }\n\n      exportKBCallback('KSF', 'saveFocus');\n      exportKBCallback('KBR', 'beepReset');\n      exportKBCallback('KT', 'insertText');\n      exportKBCallback('KR', 'registerKeyboard');\n      exportKBCallback('KRS', 'registerStub');\n      exportKBCallback('KC', 'context');\n      exportKBCallback('KN', 'nul');\n      exportKBCallback('KCM', 'contextMatch');\n      exportKBCallback('KFCM', 'fullContextMatch');\n      exportKBCallback('KIK', 'isKeypress');\n      exportKBCallback('KKM', 'keyMatch');\n      exportKBCallback('KSM', 'stateMatch');\n      exportKBCallback('KKI', 'keyInformation');\n      exportKBCallback('KDM', 'deadkeyMatch');\n      exportKBCallback('KB', 'beep');\n      exportKBCallback('KA', 'any');\n      exportKBCallback('KDC', 'deleteContext');\n      exportKBCallback('KO', 'output');\n      exportKBCallback('KDO', 'deadkeyOutput');\n      exportKBCallback('KIO', 'indexOutput');\n      exportKBCallback('KIFS', 'ifStore');\n      exportKBCallback('KSETS', 'setStore');\n      exportKBCallback('KLOAD', 'loadStore');\n      exportKBCallback('KSAVE', 'saveStore');\n    }\n  }\n\n  (function() {\n    // This will be the only call within the keyboard-processor module.\n    KeyboardInterface.__publishShorthandAPI();\n  }());\n}","/// <reference path=\"defaultLayouts.ts\" />\n/// <reference path=\"activeLayout.ts\" />\n/// <reference path=\"../text/kbdInterface.ts\" />\n\nnamespace com.keyman.keyboards {\n  /**\n   * Stores preprocessed properties of a keyboard for quick retrieval later.\n   */\n  class CacheTag {\n    stores: {[storeName: string]: text.ComplexKeyboardStore};\n\n    constructor() {\n      this.stores = {};\n    }\n  }\n\n  export enum LayoutState {\n    NOT_LOADED = undefined,\n    POLYFILLED = 1,\n    CALIBRATED = 2\n  }\n\n  /**\n   * Acts as a wrapper class for Keyman keyboards compiled to JS, providing type information\n   * and keyboard-centered functionality in an object-oriented way without modifying the \n   * wrapped keyboard itself.\n   */\n  export class Keyboard {\n    public static DEFAULT_SCRIPT_OBJECT = {\n      'gs': function(outputTarget, keystroke) { return false; }, // no matching rules; rely on defaultRuleOutput entirely\n      'KI': '', // The currently-existing default keyboard ID; we already have checks that focus against this.\n      'KN': '',\n      'KV': Layouts.DEFAULT_RAW_SPEC,\n      'KM': 0 // May not be the best default, but this matches current behavior when there is no activeKeyboard.\n    }\n\n    /**\n     * This is the object provided to KeyboardInterface.registerKeyboard - that is, the keyboard\n     * being wrapped.\n     * \n     * TODO:  Make this private instead.  But there are a LOT of references that must be rooted out first.\n     */\n    public readonly scriptObject: any;\n    private layoutStates: {[layout: string]: LayoutState};\n\n    constructor(keyboardScript: any) {\n      if(keyboardScript) {\n        this.scriptObject = keyboardScript;\n      } else {\n        this.scriptObject = Keyboard.DEFAULT_SCRIPT_OBJECT;\n      }\n      this.layoutStates = {};\n    }\n\n    /**\n     * Calls the keyboard's `gs` function, which represents the keyboard source's group(main).\n     */\n    process(outputTarget: text.OutputTarget, keystroke: text.KeyEvent): boolean {\n      return this.scriptObject['gs'](outputTarget, keystroke);\n    }\n\n    get isHollow(): boolean {\n      return this.scriptObject == Keyboard.DEFAULT_SCRIPT_OBJECT;\n    }\n\n    get id(): string {\n      return this.scriptObject['KI'];\n    }\n\n    get name(): string {\n      return this.scriptObject['KN'];\n    }\n\n    get displaysUnderlyingKeys(): boolean {\n      // Returns false if undefined or false-like (including 0), true otherwise.\n      return !!this.scriptObject['KDU'];\n    }\n\n    // TODO:  Better typing.\n    private get _legacyLayoutSpec(): any {\n      return this.scriptObject['KV'];  // used with buildDefaultLayout; layout must be constructed at runtime.\n    }\n\n    // May return null if no layouts exist or have been initialized.\n    private get _layouts(): {[formFactor: string]: LayoutFormFactor} {\n      return this.scriptObject['KVKL'];  // This one is compiled by Developer's visual keyboard layout editor.\n    }\n\n    private set _layouts(value) {\n      this.scriptObject['KVKL'] = value;\n    }\n\n    get compilerVersion(): utils.Version {\n      return new utils.Version(this.scriptObject['KVER']);\n    }\n\n    get isMnemonic(): boolean {\n      return !!this.scriptObject['KM'];\n    }\n\n    get definesPositionalOrMnemonic(): boolean {\n      return typeof this.scriptObject['KM'] != 'undefined';\n    }\n\n    /**\n     * HTML help text which is a one liner intended for the status bar of the desktop OSK originally.\n     * \n     * Reference: https://help.keyman.com/developer/language/reference/kmw_helptext\n     */\n    get helpText(): string {\n      return this.scriptObject['KH'];\n    }\n\n    get hasHelpHTML(): boolean {\n      return !!this.scriptObject['KHF'];\n    }\n\n    /**\n     * Replaces the OSK with custom HTML, which may be interactive (like with sil_euro_latin).\n     * \n     * Reference: https://help.keyman.com/developer/language/reference/kmw_helpfile\n     */\n    insertHelpHTML(e: any) {\n      // e:  Expects the OSKManager's _Box element.  We don't add type info here b/c it would\n      //     reference the DOM.\n      this.scriptObject['KHF'](e);\n    }\n\n    get oskStyling(): string {\n      return this.scriptObject['KCSS'];\n    }\n\n    /**\n     * true if this keyboard uses a (legacy) pick list (Chinese, Japanese, Korean, etc.)\n     * \n     * TODO:  Make a property on keyboards (say, `isPickList` / `KPL`) to signal this when we\n     *        get around to better, generalized picker-list support.\n     */    \n    get isCJK(): boolean { // I3363 (Build 301)\n      var lg: string;\n      if(typeof(this.scriptObject['KLC']) != 'undefined') {\n        lg = this.scriptObject['KLC'];\n      } else if(typeof(this.scriptObject['LanguageCode']) != 'undefined') {\n        lg = this.scriptObject['LanguageCode'];\n      }\n      \n      // While some of these aren't proper BCP-47 language codes, the CJK keyboards predate our use of BCP-47.\n      // So, we preserve the old ISO 639-3 codes, as that's what the keyboards are matching against.\n      return ((lg == 'cmn') || (lg == 'jpn') || (lg == 'kor'));\n    }\n\n    get isRTL(): boolean {\n      return !!this.scriptObject['KRTL'];\n    }\n\n    /**\n     * Obtains the currently-active modifier bitmask for the active keyboard.\n     */\n    get modifierBitmask(): number {\n      // NON_CHIRAL is the default bitmask if KMBM is not defined.\n      // We always need a bitmask to compare against, as seen in `isChiral`.\n      return this.scriptObject['KMBM'] || text.Codes.modifierBitmasks['NON_CHIRAL'];\n    }\n\n    get isChiral(): boolean {\n      return !!(this.modifierBitmask & text.Codes.modifierBitmasks['IS_CHIRAL']);\n    }\n\n    get desktopFont(): string {\n      if(this.scriptObject['KV']) {\n        return this.scriptObject['KV']['F'];\n      } else {\n        return null;\n      }\n    }\n\n    private get cacheTag(): CacheTag {\n      let tag = this.scriptObject['_kmw'];\n\n      if(!tag) {\n        tag = new CacheTag();\n        this.scriptObject['_kmw'] = tag;\n      }\n\n      return tag; \n    }\n\n    get explodedStores(): {[storeName: string]: text.ComplexKeyboardStore} {\n      return this.cacheTag.stores;\n    }\n\n    /**\n     * Signifies whether or not a layout or OSK should include AltGr / Right-alt emulation for this keyboard.\n     * @param   {Object=}   keyLabels\n     * @return  {boolean}\n     */\n    get emulatesAltGr(): boolean {\n      let modifierCodes = text.Codes.modifierCodes;\n\n      // If we're not chiral, we're not emulating.\n      if(!this.isChiral) {\n        return false;\n      }\n\n      if(this._legacyLayoutSpec == null) {\n        return false;\n      }\n      \n      // Only exists in KMW 10.0+, but before that Web had no chirality support, so... return false.\n      let layers = this._legacyLayoutSpec['KLS'];\n      if(!layers) {\n        return false;\n      }\n\n      var emulationMask = modifierCodes['LCTRL'] | modifierCodes['LALT'];\n      var unshiftedEmulationLayer = layers[Layouts.getLayerId(emulationMask)];\n      var shiftedEmulationLayer = layers[Layouts.getLayerId(modifierCodes['SHIFT'] | emulationMask)];\n      \n      // buildDefaultLayout ensures that these are aliased to the original modifier set being emulated.\n      // As a result, we can directly test for reference equality.\n      //\n      // This allows us to still return `true` after creating the layers for emulation; during keyboard\n      // construction, the two layers should be null for AltGr emulation to succeed.\n      if(unshiftedEmulationLayer != null && \n          unshiftedEmulationLayer != layers[Layouts.getLayerId(modifierCodes['RALT'])]) {\n        return false;\n      }\n\n      if(shiftedEmulationLayer != null && \n          shiftedEmulationLayer != layers[Layouts.getLayerId(modifierCodes['RALT'] | modifierCodes['SHIFT'])]) {\n        return false;\n      }\n\n      // It's technically possible for the OSK to not specify anything while allowing chiral input.  A last-ditch catch:\n      var bitmask = this.modifierBitmask;\n      if((bitmask & emulationMask) != emulationMask) {\n        // At least one of the emulation modifiers is never used by the keyboard!  We can confirm everything's safe.\n        return true;\n      }\n\n      if(unshiftedEmulationLayer == null && shiftedEmulationLayer == null) {\n        // We've run out of things to go on; we can't detect if chiral AltGr emulation is intended or not.\n        // TODO:  handle this again!\n        // if(!osk.altGrWarning) {\n        //   console.warn(\"Could not detect if AltGr emulation is safe, but defaulting to active emulation!\")\n        //   // Avoid spamming the console with warnings on every call of the method.\n        //   osk.altGrWarning = true;\n        // }\n        return true;\n      }\n      return true;\n    }\n\n    usesDesktopLayoutOnDevice(device: text.EngineDeviceSpec) {\n      if(this.scriptObject['KVKL']) {\n        // A custom mobile layout is defined... but are we using it?\n        return device.formFactor == text.FormFactor.Desktop;\n      } else {\n        return true;\n      }\n    }\n\n    /**\n     * @param       {number}    _PCommand     event code (16,17,18) or 0\n     * @param       {Object}    _PTarget      target element\n     * @param       {number}    _PData        1 or 0    \n     * Notifies keyboard of keystroke or other event\n     */    \n    notify(_PCommand: number, _PTarget: text.OutputTarget, _PData: number) { // I2187\n      // Good example use case - the Japanese CJK-picker keyboard\n      if(typeof(this.scriptObject['KNS']) == 'function') {\n        this.scriptObject['KNS'](_PCommand, _PTarget, _PData);\n      }\n    }\n\n    private findOrConstructLayout(formFactor: text.FormFactor): LayoutFormFactor {\n      if(this._layouts) {\n        // Search for viable layouts.  `null` is allowed for desktop form factors when help text is available,\n        // so we check explicitly against `undefined`.\n        if(this._layouts[formFactor] !== undefined) {\n          return this._layouts[formFactor];\n        } else if(formFactor == text.FormFactor.Phone && this._layouts[text.FormFactor.Tablet]) {\n          return this._layouts[text.FormFactor.Phone] = this._layouts[text.FormFactor.Tablet];\n        } else if(formFactor == text.FormFactor.Tablet && this._layouts[text.FormFactor.Phone]) {\n          return this._layouts[text.FormFactor.Tablet] = this._layouts[text.FormFactor.Phone];\n        }\n      }\n\n      // No pre-built layout available; time to start constructing it via defaults.\n      // First, if we have non-default keys specified by the ['BK'] array, we've got\n      // enough to work with to build a default layout.\n      let rawSpecifications: any = null;  // TODO:  better typing, same type as this._legacyLayoutSpec.\n      if(this._legacyLayoutSpec != null && this._legacyLayoutSpec['KLS']) { // KLS is only specified whenever there are non-default keys.\n        rawSpecifications = this._legacyLayoutSpec;\n      } else if(this._legacyLayoutSpec != null && this._legacyLayoutSpec['BK'] != null) {\n        var keyCaps=this._legacyLayoutSpec['BK'];\n        for(var i=0; i<keyCaps.length; i++) {\n          if(keyCaps[i].length > 0) {\n            rawSpecifications = this._legacyLayoutSpec;\n            break;\n          }\n        }\n      }\n\n      // If we don't have key definitions to use for a layout but also lack help text or are a touch-based layout,\n      // we make a default layout anyway.  We have to show display something usable.\n      if(!rawSpecifications && (this.helpText == '' || formFactor != text.FormFactor.Desktop)) {\n        rawSpecifications = {'F':'Tahoma', 'BK': Layouts.dfltText};\n      }\n\n      // Regardless of success, we'll want to initialize the field that backs the property; \n      // may as well cache the default layout we just built, or a 'null' if it shouldn't exist..\n      if(!this._layouts) {\n        this._layouts = {};\n      }\n\n      // Final check - do we construct a layout, or is this a case where helpText / insertHelpHTML should take over?\n      if(rawSpecifications) {\n        // Now to generate a layout from our raw specifications.\n        let layout = this._layouts[formFactor] = Layouts.buildDefaultLayout(rawSpecifications, this, formFactor);\n        layout.isDefault = true;\n        return layout;\n      } else {\n        // The fact that it doesn't exist will indicate that help text/HTML should be inserted instead.\n        this._layouts[formFactor] = null; // provides a cached value for the check at the top of this method.\n        return null;\n      }\n    }\n\n    /**\n     * Returns an ActiveLayout object representing the keyboard's layout for this form factor.  May return null if a custom desktop \"help\" OSK is defined, as with sil_euro_latin.\n     * \n     * In such cases, please use either `helpText` or `insertHelpHTML` instead.\n     * @param formFactor {string} The desired form factor for the layout.\n     */\n    public layout(formFactor: text.FormFactor): ActiveLayout {\n      let rawLayout = this.findOrConstructLayout(formFactor);\n\n      if(rawLayout) {\n        // Prevents accidentally reprocessing layouts; it's a simple enough check.\n        if(this.layoutStates[formFactor] == LayoutState.NOT_LOADED) {\n          rawLayout = ActiveLayout.polyfill(rawLayout, this, formFactor);\n          this.layoutStates[formFactor] = LayoutState.POLYFILLED;\n        }\n\n        return rawLayout as ActiveLayout;\n      } else {\n        return null;\n      }\n    }\n\n    public markLayoutCalibrated(formFactor: text.FormFactor) {\n      if(this.layoutStates[formFactor] != LayoutState.NOT_LOADED) {\n        this.layoutStates[formFactor] = LayoutState.CALIBRATED;\n      }\n    }\n\n    public getLayoutState(formFactor: text.FormFactor) {\n      return this.layoutStates[formFactor];\n    }\n  }\n}","/***\n   KeymanWeb 11.0\n   Copyright 2019 SIL International\n***/\nnamespace com.keyman {\n\n  class KeyMap {\n    [keycode: string]: number;\n  }\n\n  class BrowserKeyMaps {\n    FF:     KeyMap = new KeyMap();\n    Safari: KeyMap = new KeyMap();\n    Opera:  KeyMap = new KeyMap();\n\n    constructor() {\n      //ffie['k109'] = 189; // -    // These two number-pad VK rules are *not* correct for more recent FF! JMD 8/11/12\n      //ffie['k107'] = 187; // =    // FF 3.0 // I2062\n      this.FF['k61'] = 187;  // =   // FF 2.0\n      this.FF['k59'] = 186;  // ;\n    }\n  }\n\n  class LanguageKeyMaps {\n    [languageCode: string]: KeyMap;\n\n    // // Here are some old legacy definitions that were no longer referenced but are likely related:\n    // static _BaseLayoutEuro: {[code: string]: string} = {\n    //   'se': '\\u00a71234567890+´~~~QWERTYUIOP\\u00c5\\u00a8\\'~~~ASDFGHJKL\\u00d6\\u00c4~~~~~<ZXCVBNM,.-~~~~~ ',  // Swedish\n    //   'uk': '`1234567890-=~~~QWERTYUIOP[]#~~~ASDFGHJKL;\\'~~~~~\\\\ZXCVBNM,./~~~~~ ' // UK\n\n    constructor() {\n      /* I732 START - 13/03/2007 MCD: Swedish: Start mapping of keystroke to US keyboard #2 */\n      // Swedish key map\n      this['se'] = new KeyMap();\n      this['se']['k220'] =  192; // `\n      this['se']['k187'] =  189; // -\n      this['se']['k219'] =  187; // =\n      this['se']['k221'] =  219; // [\n      this['se']['k186'] =  221; // ]\n      this['se']['k191'] =  220; // \\\n      this['se']['k192'] =  186; // ;\n      this['se']['k189'] =  191; // /\n\n      this['uk'] = new KeyMap();  // I1299\n      this['uk']['k223'] =  192; // // ` U+00AC (logical not) =>  ` ~\n      this['uk']['k192'] =  222; // ' @  =>  ' \"\n      this['uk']['k222'] =  226; // # ~  => K_oE2     // I1504 - UK keyboard mixup #, \\\n      this['uk']['k220'] =  220; // \\ |  => \\ |       // I1504 - UK keyboard mixup #, \\\n    }\n  }\n\n  export class KeyMapping {\n    static readonly browserMap: BrowserKeyMaps = new BrowserKeyMaps();\n    static readonly languageMap: LanguageKeyMaps = new LanguageKeyMaps();\n\n    private static _usCharCodes: KeyMap[];\n\n    private constructor() {\n      // Do not construct this class.\n    }\n\n    private static _usCodeInit() {\n      var s0=new KeyMap(),s1=new KeyMap();\n\n      s0['k192'] = 96;\n      s0['k49'] = 49;\n      s0['k50'] = 50;\n      s0['k51'] = 51;\n      s0['k52'] = 52;\n      s0['k53'] = 53;\n      s0['k54'] = 54;\n      s0['k55'] = 55;\n      s0['k56'] = 56;\n      s0['k57'] = 57;\n      s0['k48'] = 48;\n      s0['k189'] = 45;\n      s0['k187'] = 61;\n      s0['k81'] = 113;\n      s0['k87'] = 119;\n      s0['k69'] = 101;\n      s0['k82'] = 114;\n      s0['k84'] = 116;\n      s0['k89'] = 121;\n      s0['k85'] = 117;\n      s0['k73'] = 105;\n      s0['k79'] = 111;\n      s0['k80'] = 112;\n      s0['k219'] = 91;\n      s0['k221'] = 93;\n      s0['k220'] = 92;\n      s0['k65'] = 97;\n      s0['k83'] = 115;\n      s0['k68'] = 100;\n      s0['k70'] = 102;\n      s0['k71'] = 103;\n      s0['k72'] = 104;\n      s0['k74'] = 106;\n      s0['k75'] = 107;\n      s0['k76'] = 108;\n      s0['k186'] = 59;\n      s0['k222'] = 39;\n      s0['k90'] = 122;\n      s0['k88'] = 120;\n      s0['k67'] = 99;\n      s0['k86'] = 118;\n      s0['k66'] = 98;\n      s0['k78'] = 110;\n      s0['k77'] = 109;\n      s0['k188'] = 44;\n      s0['k190'] = 46;\n      s0['k191'] = 47;\n\n      s1['k192'] = 126;\n      s1['k49'] = 33;\n      s1['k50'] = 64;\n      s1['k51'] = 35;\n      s1['k52'] = 36;\n      s1['k53'] = 37;\n      s1['k54'] = 94;\n      s1['k55'] = 38;\n      s1['k56'] = 42;\n      s1['k57'] = 40;\n      s1['k48'] = 41;\n      s1['k189'] = 95;\n      s1['k187'] = 43;\n      s1['k81'] = 81;\n      s1['k87'] = 87;\n      s1['k69'] = 69;\n      s1['k82'] = 82;\n      s1['k84'] = 84;\n      s1['k89'] = 89;\n      s1['k85'] = 85;\n      s1['k73'] = 73;\n      s1['k79'] = 79;\n      s1['k80'] = 80;\n      s1['k219'] = 123;\n      s1['k221'] = 125;\n      s1['k220'] = 124;\n      s1['k65'] = 65;\n      s1['k83'] = 83;\n      s1['k68'] = 68;\n      s1['k70'] = 70;\n      s1['k71'] = 71;\n      s1['k72'] = 72;\n      s1['k74'] = 74;\n      s1['k75'] = 75;\n      s1['k76'] = 76;\n      s1['k186'] = 58;\n      s1['k222'] = 34;\n      s1['k90'] = 90;\n      s1['k88'] = 88;\n      s1['k67'] = 67;\n      s1['k86'] = 86;\n      s1['k66'] = 66;\n      s1['k78'] = 78;\n      s1['k77'] = 77;\n      s1['k188'] = 60;\n      s1['k190'] = 62;\n      s1['k191'] = 63;\n\n      KeyMapping._usCharCodes = [s0,s1];\n    }\n\n    /**\n     * Function     _USKeyCodeToCharCode\n     * Scope        Private\n     * @param       {Event}     Levent      KMW event object\n     * @return      {number}                Character code \n     * Description Translate keyboard codes to standard US layout codes\n     */    \n    static _USKeyCodeToCharCode(Levent: com.keyman.text.KeyEvent) {\n      return KeyMapping.usCharCodes[Levent.Lmodifiers & 0x10 ? 1 : 0]['k'+Levent.Lcode];\n    };\n\n    public static get usCharCodes() {\n      if(!KeyMapping._usCharCodes) {\n        KeyMapping._usCodeInit();\n      }\n\n      return KeyMapping._usCharCodes;\n    }\n  }\n}","namespace com.keyman.utils {\n  /**\n   * Returns the base global object available to the current JS platform.\n   * - In browsers, returns `window`.\n   * - In WebWorkers, returns `self`.\n   * - In Node, returns `global`.\n   */\n  export function getGlobalObject(): typeof globalThis {\n    // Evergreen browsers have started defining 'globalThis'.  \n    // Refer to https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#type-checking-for-globalthis\n    // and its referenced polyfill.  Said polyfill is very complex, so we opt for this far leaner variant.\n    if(typeof globalThis != 'undefined') {\n      return globalThis;  // Not available in IE or older Edge versions\n      // @ts-ignore (TS will throw errors for whatever platform we're not compiling for.)\n    } else if(typeof window != 'undefined') {\n      // @ts-ignore\n      return window; // The browser-based classic\n      // @ts-ignore\n    } else if(typeof self != 'undefined') {\n      // @ts-ignore\n      return self; // WebWorker global\n    } else {\n      // Assumption - if neither of the above exist, we're in Node, for unit-testing.\n      // Node doesn't have as many methods and properties as the other two, but what \n      // matters for us is that it's the base global.\n      //\n      // Some other headless JS solutions use 'this' instead, but Node's enough for our needs.\n      // @ts-ignore\n      return (global as any) as typeof globalThis;\n    }\n  }\n}","// Includes KMW string extension declarations.\n/// <reference path=\"kmwstring.ts\" />\n// Establishes key-code definitions.\n/// <reference path=\"codes.ts\" />\n// Defines our generalized \"KeyEvent\" class.\n/// <reference path=\"keyEvent.ts\" />\n// Defines the RuleBehavior keyboard-processing return object.\n/// <reference path=\"ruleBehavior.ts\" />\n// Defines default key handling behaviors.\n/// <reference path=\"defaultOutput.ts\" />\n// Defines the keyboard wrapper object.\n/// <reference path=\"../keyboards/keyboard.ts\" />\n// Defines built-in keymapping.\n/// <reference path=\"keyMapping.ts\" />\n// Defines a core-compatible 'Device' analogue for use in keyEvent processing\n/// <reference path=\"engineDeviceSpec.ts\" />\n// Defines the getGlobalObject() utility method.\n/// <reference path=\"../utils/globalObject.ts\" />\n\nnamespace com.keyman.text {\n  export type BeepHandler = (outputTarget: OutputTarget) => void;\n  export type LogMessageHandler = (str: string) => void;\n\n  export interface VariableStoreSerializer {\n    loadStore(keyboardID: string, storeName: string): VariableStore;\n    saveStore(keyboardID: string, storeName: string, storeMap: VariableStore);\n  }\n\n  export interface ProcessorInitOptions {\n    baseLayout?: string;\n    variableStoreSerializer?: VariableStoreSerializer;\n  }\n\n  export class KeyboardProcessor {\n    public static readonly DEFAULT_OPTIONS: ProcessorInitOptions = {\n      baseLayout: 'us'\n    }\n\n    // Tracks the simulated value for supported state keys, allowing the OSK to mirror a physical keyboard for them.\n    // Using the exact keyCode name from the Codes definitions will allow for certain optimizations elsewhere in the code.\n    stateKeys = {\n      \"K_CAPS\":false,\n      \"K_NUMLOCK\":false,\n      \"K_SCROLL\":false\n    };\n\n    // Tracks the most recent modifier state information in order to quickly detect changes\n    // in keyboard state not otherwise captured by the hosting page in the browser.\n    // Needed for AltGr simulation.\n    modStateFlags: number = 0;\n\n    keyboardInterface: KeyboardInterface;\n\n    baseLayout: string;\n\n    // Callbacks for various feedback types\n    beepHandler?: BeepHandler;\n    warningLogger?: LogMessageHandler;\n    errorLogger?: LogMessageHandler;\n\n    constructor(options?: ProcessorInitOptions) {\n      if(!options) {\n        options = KeyboardProcessor.DEFAULT_OPTIONS;\n      }\n\n      this.baseLayout = options.baseLayout || KeyboardProcessor.DEFAULT_OPTIONS.baseLayout;\n      this.keyboardInterface = new KeyboardInterface(options.variableStoreSerializer);\n      this.installInterface();\n    }\n\n    private installInterface() {\n      // TODO:  replace 'window' with a (currently-unwritten) utility call that retrieves \n      //        the global object (whether browser, Node, WebWorker).\n      //\n      //        We must ensure that the keyboard can find the API functions at the expected place.\n      let globalThis = utils.getGlobalObject();\n      globalThis[KeyboardInterface.GLOBAL_NAME] = this.keyboardInterface;\n\n      // Ensure that the active keyboard is set on the keyboard interface object.\n      if(this.activeKeyboard) {\n        this.keyboardInterface.activeKeyboard = this.activeKeyboard;\n      }\n    }\n\n    public get activeKeyboard(): keyboards.Keyboard {\n      return this.keyboardInterface.activeKeyboard;\n    }\n\n    public set activeKeyboard(keyboard: keyboards.Keyboard) {\n      this.keyboardInterface.activeKeyboard = keyboard;\n\n      // All old deadkeys and keyboard-specific cache should immediately be invalidated\n      // on a keyboard change.\n      this.resetContext();\n    }\n\n    get layerStore(): MutableSystemStore {\n      return this.keyboardInterface.systemStores[KeyboardInterface.TSS_LAYER] as MutableSystemStore;\n    }\n\n    public get layerId(): string {\n      return this.layerStore.value;\n    }\n\n    // Note:  will trigger an 'event' callback designed to notify the OSK of layer changes.\n    public set layerId(value: string) {\n      this.layerStore.set(value);\n    }\n\n    /**\n     * Get the default RuleBehavior for the specified key, attempting to mimic standard browser defaults \n     * where and when appropriate.\n     *\n     * @param   {object}  Lkc  The pre-analyzed key event object\n     * @param   {boolean} usingOSK\n     * @return  {string}\n     */\n    defaultRuleBehavior(Lkc: KeyEvent): RuleBehavior {\n      let outputTarget = Lkc.Ltarg;\n      let preInput = Mock.from(outputTarget);\n      let ruleBehavior = new RuleBehavior();\n\n      let matched = false;\n      var char = '';\n      var special: EmulationKeystrokes;\n      if(Lkc.isSynthetic || outputTarget.isSynthetic) {\n        matched = true;  // All the conditions below result in matches until the final else, which restores the expected default\n                         // if no match occurs.\n\n        if(DefaultOutput.isCommand(Lkc)) {\n          // Note this in the rule behavior, return successfully.  We'll consider applying it later.\n          ruleBehavior.triggersDefaultCommand = true;\n\n          // We'd rather let the browser handle these keys, but we're using emulated keystrokes, forcing KMW\n          // to emulate default behavior here.\n        } else if((special = DefaultOutput.forSpecialEmulation(Lkc)) != null) { \n          switch(special) {\n            case EmulationKeystrokes.Backspace:\n              this.keyboardInterface.defaultBackspace(outputTarget);\n              break;\n            case EmulationKeystrokes.Enter:\n              outputTarget.handleNewlineAtCaret();\n              break;\n            case EmulationKeystrokes.Space:\n              this.keyboardInterface.output(0, outputTarget, ' ');\n              break;\n            // case '\\u007f': // K_DEL\n              // // For (possible) future implementation.\n              // // Would recommend (conceptually) equaling K_RIGHT + K_BKSP, the former of which would technically be a 'command'.\n            default:\n              // In case we extend the allowed set, but forget to implement its handling case above.\n              ruleBehavior.errorLog = \"Unexpected 'special emulation' character (\\\\u\" + (special as String).kmwCharCodeAt(0).toString(16) + \") went unhandled!\";\n          } \n        } else {\n          // Back to the standard default, pending normal matching.\n          matched = false;\n        }\n      }\n\n      let isMnemonic = this.activeKeyboard && this.activeKeyboard.isMnemonic;\n\n      if(!matched) {\n        if((char = DefaultOutput.forAny(Lkc, isMnemonic)) != null) {\n          special = DefaultOutput.forSpecialEmulation(Lkc)\n          if(special == EmulationKeystrokes.Backspace) {\n            // A browser's default backspace may fail to delete both parts of an SMP character.\n            this.keyboardInterface.defaultBackspace(Lkc.Ltarg);\n          } else if(special || DefaultOutput.isCommand(Lkc)) { // Filters out 'commands' like TAB.\n            // We only do the \"for special emulation\" cases under the condition above... aside from backspace\n            // Let the browser handle those.\n            return null;\n          } else {\n            this.keyboardInterface.output(0, outputTarget, char);\n          }\n        } else {\n          // No match, no default RuleBehavior.\n          return null;\n        }\n      }\n\n      // Shortcut things immediately if there were issues generating this rule behavior.\n      if(ruleBehavior.errorLog) {\n        return ruleBehavior;\n      }\n\n      let transcription = outputTarget.buildTranscriptionFrom(preInput, Lkc);\n      ruleBehavior.transcription = transcription;\n\n      return ruleBehavior;\n    }\n\n    setSyntheticEventDefaults(Lkc: text.KeyEvent) {\n      // Set the flags for the state keys.\n      Lkc.Lstates |= this.stateKeys['K_CAPS']    ? Codes.modifierCodes['CAPS'] : Codes.modifierCodes['NO_CAPS'];\n      Lkc.Lstates |= this.stateKeys['K_NUMLOCK'] ? Codes.modifierCodes['NUM_LOCK'] : Codes.modifierCodes['NO_NUM_LOCK'];\n      Lkc.Lstates |= this.stateKeys['K_SCROLL']  ? Codes.modifierCodes['SCROLL_LOCK'] : Codes.modifierCodes['NO_SCROLL_LOCK'];\n\n      // Set LisVirtualKey to false to ensure that nomatch rule does fire for U_xxxx keys\n      if(Lkc.kName.substr(0,2) == 'U_') {\n        Lkc.LisVirtualKey=false;\n      }\n\n      // Get code for non-physical keys (T_KOKAI, U_05AB etc)\n      if(typeof Lkc.Lcode == 'undefined') {\n        Lkc.Lcode = this.getVKDictionaryCode(Lkc.kName);// Updated for Build 347\n        if(!Lkc.Lcode) {\n          // Special case for U_xxxx keys. This vk code will never be used\n          // in a keyboard, so we use this to ensure that keystroke processing\n          // occurs for the key.\n          Lkc.Lcode = 1; \n        }\n      }\n\n      // Handles modifier states when the OSK is emulating rightalt through the leftctrl-leftalt layer.\n      if((Lkc.Lmodifiers & Codes.modifierBitmasks['ALT_GR_SIM']) == Codes.modifierBitmasks['ALT_GR_SIM'] && this.activeKeyboard.emulatesAltGr) {\n        Lkc.Lmodifiers &= ~Codes.modifierBitmasks['ALT_GR_SIM'];\n        Lkc.Lmodifiers |= Codes.modifierCodes['RALT'];\n      }\n    }\n\n    processKeystroke(keyEvent: KeyEvent, outputTarget: OutputTarget): RuleBehavior {\n      var matchBehavior: RuleBehavior;\n\n      // Pass this key code and state to the keyboard program\n      if(this.activeKeyboard && keyEvent.Lcode != 0) {\n        /*\n         * The `this.installInterface()` call is insurance against something I've seen in unit tests when things break a bit.\n         *\n         * Currently, when a KMW shutdown doesn't go through properly or completely, sometimes we end up with parallel\n         * versions of KMW running, and an old, partially-shutdown one will \"snipe\" a command meant for the most-recent \n         * one's test. So, installing here ensures that the active Processor has its matching KeyboardInterface ready, \n         * even should that occur.\n         */\n        this.installInterface();\n        matchBehavior = this.keyboardInterface.processKeystroke(outputTarget, keyEvent);\n      }\n\n      if(!matchBehavior) {\n        // Restore the virtual key code if a mnemonic keyboard is being used\n        // If no vkCode value was stored, maintain the original Lcode value.\n        keyEvent.Lcode=keyEvent.vkCode || keyEvent.Lcode;\n\n        // Handle unmapped keys, including special keys\n        // The following is physical layout dependent, so should be avoided if possible.  All keys should be mapped.\n        this.keyboardInterface.activeTargetOutput = outputTarget;\n\n        // Match against the 'default keyboard' - rules to mimic the default string output when typing in a browser.\n        // Many keyboards rely upon these 'implied rules'.\n        matchBehavior = this.defaultRuleBehavior(keyEvent);\n\n        this.keyboardInterface.activeTargetOutput = null;\n      }\n\n      return matchBehavior;\n    }\n\n    // FIXME:  makes some bad assumptions.\n    static setMnemonicCode(Lkc: KeyEvent, shifted: boolean, capsActive: boolean) {\n      // K_SPACE is not handled by defaultKeyOutput for physical keystrokes unless using touch-aliased elements.\n      // It's also a \"exception required, March 2013\" for clickKey, so at least they both have this requirement.\n      if(Lkc.Lcode != Codes.keyCodes['K_SPACE']) {\n        // So long as the key name isn't prefixed with 'U_', we'll get a default mapping based on the Lcode value.\n        // We need to determine the mnemonic base character - for example, SHIFT + K_PERIOD needs to map to '>'.\n        let mappingEvent: KeyEvent = new KeyEvent();\n        for(var key in Lkc) {\n          mappingEvent[key] = Lkc[key];\n        }\n        \n        // To facilitate storing relevant commands, we should probably reverse-lookup\n        // the actual keyname instead.\n        mappingEvent.kName = 'K_xxxx';\n        mappingEvent.Ltarg = new Mock(); // helps prevent breakage for mnemonics.\n        mappingEvent.Lmodifiers = (shifted ? 0x10 : 0);  // mnemonic lookups only exist for default & shift layers.\n        var mappedChar: string = DefaultOutput.forAny(mappingEvent, true);\n        \n        /* First, save a backup of the original code.  This one won't needlessly trigger keyboard\n         * rules, but allows us to replicate/emulate commands after rule processing if needed.\n         * (Like backspaces)\n         */\n        Lkc.vkCode = Lkc.Lcode;\n        if(mappedChar) {\n          // Will return 96 for 'a', which is a keycode corresponding to Codes.keyCodes('K_NP1') - a numpad key.\n          // That stated, we're in mnemonic mode - this keyboard's rules are based on the char codes.\n          Lkc.Lcode = mappedChar.charCodeAt(0);\n        } else {\n          // Don't let command-type keys (like K_DEL, which will output '.' otherwise!)\n          // trigger keyboard rules.\n          delete Lkc.Lcode;\n        }\n      }\n\n      if(capsActive) {\n        // TODO:  Needs fixing - does not properly mirror physical keystrokes, as Lcode range 96-111 corresponds\n        // to numpad keys!  (Physical keyboard section has its own issues here.)\n        if((Lkc.Lcode >= 65 && Lkc.Lcode <= 90) /* 'A' - 'Z' */ || (Lkc.Lcode >= 97 && Lkc.Lcode <= 122) /* 'a' - 'z' */) {\n          Lkc.Lmodifiers ^= 0x10;  // Flip the 'shifted' bit, so it'll act as the opposite key.\n          Lkc.Lcode ^= 0x20; // Flips the 'upper' vs 'lower' bit for the base 'a'-'z' ASCII alphabetics.\n        }\n      }\n    }\n\n    /**\n     * Get modifier key state from layer id\n     *\n     * @param       {string}      layerId       layer id (e.g. ctrlshift)\n     * @return      {number}                    modifier key state (desktop keyboards)\n     */\n    static getModifierState(layerId: string): number {\n      var modifier=0;\n      if(layerId.indexOf('shift') >= 0) {\n        modifier |= Codes.modifierCodes['SHIFT'];\n      }\n\n      // The chiral checks must not be directly exclusive due each other to visual OSK feedback.\n      var ctrlMatched=false;\n      if(layerId.indexOf('leftctrl') >= 0) {\n        modifier |= Codes.modifierCodes['LCTRL'];\n        ctrlMatched=true;\n      } \n      if(layerId.indexOf('rightctrl') >= 0) {\n        modifier |= Codes.modifierCodes['RCTRL'];\n        ctrlMatched=true;\n      } \n      if(layerId.indexOf('ctrl')  >= 0 && !ctrlMatched) {\n        modifier |= Codes.modifierCodes['CTRL'];\n      }\n\n      var altMatched=false;\n      if(layerId.indexOf('leftalt') >= 0) {\n        modifier |= Codes.modifierCodes['LALT'];\n        altMatched=true;\n      } \n      if(layerId.indexOf('rightalt') >= 0) {\n        modifier |= Codes.modifierCodes['RALT'];\n        altMatched=true;\n      } \n      if(layerId.indexOf('alt')  >= 0 && !altMatched) {\n        modifier |= Codes.modifierCodes['ALT'];\n      }\n\n      return modifier;\n    }\n\n    /**\n     * @summary Look up a custom virtual key code in the virtual key code dictionary KVKD.  On first run, will build the dictionary.\n     *\n     * `VKDictionary` is constructed from the keyboard's `KVKD` member. This list is constructed \n     * at compile-time and is a list of 'additional' virtual key codes, starting at 256 (i.e. \n     * outside the range of standard virtual key codes). These additional codes are both \n     * `[T_xxx]` and `[U_xxxx]` custom key codes from the Keyman keyboard language. However, \n     * `[U_xxxx]` keys only generate an entry in `KVKD` if there is a corresponding rule that \n     * is associated with them in the keyboard rules. If the `[U_xxxx]` key code is only \n     * referenced as the id of a key in the touch layout, then it does not get an entry in \n     * the `KVKD` property.\n     *\n     * @private\n     * @param       {string}      keyName   custom virtual key code to lookup in the dictionary\n     * @return      {number}                key code > 255 on success, or 0 if not found\n     */\n    getVKDictionaryCode(keyName: string) {\n      var activeKeyboard = this.activeKeyboard;\n      if(!activeKeyboard.scriptObject['VKDictionary']) {\n        var a=[];\n        if(typeof activeKeyboard.scriptObject['KVKD'] == 'string') {\n          // Build the VK dictionary\n          // TODO: Move the dictionary build into the compiler -- so compiler generates code such as following.  \n          // Makes the VKDictionary member unnecessary.\n          //       this.KVKD={\"K_ABC\":256,\"K_DEF\":257,...};\n          var s=activeKeyboard.scriptObject['KVKD'].split(' ');\n          for(var i=0; i<s.length; i++) {\n            a[s[i].toUpperCase()]=i+256; // We force upper-case since virtual keys should be case-insensitive.\n          }\n        }\n        activeKeyboard.scriptObject['VKDictionary']=a;\n      }\n\n      var res=activeKeyboard.scriptObject['VKDictionary'][keyName.toUpperCase()];\n      return res ? res : 0;\n    }\n\n    /**\n     * Function     _UpdateVKShift\n     * Scope        Private\n     * @param       {Object}            e     OSK event\n     * @param       {number}            v     keyboard shift state\n     * @param       {(boolean|number)}  d     set (1) or clear(0) shift state bits\n     * @return      {boolean}                 Always true\n     * Description  Updates the current shift state within KMW, updating the OSK's visualization thereof.\n     */\n    _UpdateVKShift(e: KeyEvent, v: number, d: boolean|number): boolean {\n      var keyShiftState=0, lockStates=0, i;\n\n      var lockNames  = ['CAPS', 'NUM_LOCK', 'SCROLL_LOCK'];\n      var lockKeys   = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'];\n\n      if(!this.activeKeyboard) {\n        return true;\n      }\n\n      if(e) {\n        // read shift states from Pevent\n        keyShiftState = e.Lmodifiers;\n        lockStates = e.Lstates;\n\n        // Are we simulating AltGr?  If it's a simulation and not real, time to un-simulate for the OSK.\n        if(this.activeKeyboard.isChiral && (this.activeKeyboard.emulatesAltGr) && \n            (this.modStateFlags & Codes.modifierBitmasks['ALT_GR_SIM']) == Codes.modifierBitmasks['ALT_GR_SIM']) {\n          keyShiftState |= Codes.modifierBitmasks['ALT_GR_SIM'];\n          keyShiftState &= ~Codes.modifierCodes['RALT'];\n        }\n\n        for(i=0; i < lockNames.length; i++) {\n          if(lockStates & Codes.stateBitmasks[lockNames[i]]) {\n            this.stateKeys[lockKeys[i]] = lockStates & Codes.modifierCodes[lockNames[i]];\n          }\n        }\n      } else if(d) {\n        keyShiftState |= v;\n\n        for(i=0; i < lockNames.length; i++) {\n          if(v & Codes.stateBitmasks[lockNames[i]]) {\n            this.stateKeys[lockKeys[i]] = true;\n          }\n        }\n      } else {\n        keyShiftState &= ~v;\n\n        for(i=0; i < lockNames.length; i++) {\n          if(v & Codes.stateBitmasks[lockNames[i]]) {\n            this.stateKeys[lockKeys[i]] = false;\n          }\n        }\n      }\n\n      this.layerId = this.getLayerId(keyShiftState);\n      return true;\n    }\n\n    getLayerId(modifier: number): string {\n      return keyboards.Layouts.getLayerId(modifier);\n    }\n\n    /**\n     * Select the OSK's next keyboard layer based upon layer switching keys as a default\n     * The next layer will be determined from the key name unless otherwise specifed\n     *\n     *  @param  {string}                    keyName     key identifier\n     *  @param  {number|string|undefined}   nextLayerIn optional next layer identifier\n     *  @return {boolean}                               return true if keyboard layer changed\n     */\n    selectLayer(keyEvent: KeyEvent, fromNameOnly: boolean = false): boolean {\n      let keyName = keyEvent.kName;\n      var nextLayer = fromNameOnly ? null : keyEvent.kNextLayer;\n      var isChiral = this.activeKeyboard && this.activeKeyboard.isChiral;\n\n      // Layer must be identified by name, not number (27/08/2015)\n      if(typeof nextLayer == 'number') {\n        nextLayer = this.getLayerId(nextLayer * 0x10);\n      }\n\n      // Identify next layer, if required by key\n      if(!nextLayer) {\n        switch(keyName) {\n          case 'K_LSHIFT':\n          case 'K_RSHIFT':\n          case 'K_SHIFT':\n            nextLayer = 'shift';\n            break;\n          case 'K_LCONTROL':\n          case 'K_LCTRL':\n            if(isChiral) {\n              nextLayer = 'leftctrl';\n              break;\n            }\n          case 'K_RCONTROL':\n          case 'K_RCTRL':\n            if(isChiral) {\n              nextLayer = 'rightctrl';\n              break;\n            }\n          case 'K_CTRL':\n            nextLayer = 'ctrl';\n            break;\n          case 'K_LMENU':\n          case 'K_LALT':\n            if(isChiral) {\n              nextLayer = 'leftalt';\n              break;\n            }\n          case 'K_RMENU':\n          case 'K_RALT':\n            if(isChiral) {\n              nextLayer = 'rightalt';\n              break;\n            }\n          case 'K_ALT':\n            nextLayer = 'alt';\n            break;\n          case 'K_ALTGR':\n            if(isChiral) {\n              nextLayer = 'leftctrl-rightalt';\n            } else {\n              nextLayer = 'ctrl-alt';\n            }\n            break;\n          case 'K_CURRENCIES':\n          case 'K_NUMERALS':\n          case 'K_SHIFTED':\n          case 'K_UPPER':\n          case 'K_LOWER':\n          case 'K_SYMBOLS':\n            nextLayer = 'default';\n            break;\n        }\n      }\n\n      // If no key corresponding to a layer transition is pressed, maintain the current layer.\n      if(!nextLayer) {\n        return false;\n      }\n\n      // Change layer and refresh OSK\n      this.updateLayer(keyEvent, nextLayer);\n\n      return true;\n    }\n\n    /**\n     * Sets the new layer id, allowing for toggling shift/ctrl/alt while preserving the remainder\n     * of the modifiers represented by the current layer id (where applicable)\n     *\n     * @param       {string}      id      layer id (e.g. ctrlshift)\n     */\n    updateLayer(keyEvent: KeyEvent, id: string) {\n      let activeLayer = this.layerId;\n      var s = activeLayer;\n\n      // Do not change layer unless needed (27/08/2015)\n      if(id == activeLayer && keyEvent.device.formFactor != FormFactor.Desktop) {\n        return false;\n      }\n\n      var idx=id;\n      var i;\n\n      if(keyEvent.device.formFactor == FormFactor.Desktop) {\n        // Need to test if target layer is a standard layer (based on the plain 'default')\n        var replacements= ['leftctrl', 'rightctrl', 'ctrl', 'leftalt', 'rightalt', 'alt', 'shift'];\n\n        for(i=0; i < replacements.length; i++) {\n          // Don't forget to remove the kebab-case hyphens!\n          idx=idx.replace(replacements[i] + '-', '');\n          idx=idx.replace(replacements[i],'');\n        }\n\n        // If we are presently on the default layer, drop the 'default' and go straight to the shifted mode.\n        // If on a common symbolic layer, drop out of symbolic mode and go straight to the shifted mode.\n        if(activeLayer == 'default' || activeLayer == 'numeric' || activeLayer == 'symbol' || activeLayer == 'currency' || idx != '') {\n          s = id;\n        }\n        // Otherwise, we are based upon a layer that accepts modifier variations.\n        // Modify the layer according to the current state and key pressed.\n        //\n        // TODO:  Consider:  should this ever be allowed for a base layer other than 'default'?  If not,\n        // if(idx == '') with accompanying if-else structural shift would be a far better test here.\n        else {\n          // Save our current modifier state.\n          var modifier=KeyboardProcessor.getModifierState(s);\n\n          // Strip down to the base modifiable layer.\n          for(i=0; i < replacements.length; i++) {\n            // Don't forget to remove the kebab-case hyphens!\n            s=s.replace(replacements[i] + '-', '');\n            s=s.replace(replacements[i],'');\n          }\n\n          // Toggle the modifier represented by our input argument.\n          switch(id) {\n            case 'shift':\n              modifier ^= Codes.modifierCodes['SHIFT'];\n              break;\n            case 'leftctrl':\n              modifier ^= Codes.modifierCodes['LCTRL'];\n              break;\n            case 'rightctrl':\n              modifier ^= Codes.modifierCodes['RCTRL'];\n              break;\n            case 'ctrl':\n              modifier ^= Codes.modifierCodes['CTRL'];\n              break;\n            case 'leftalt':\n              modifier ^= Codes.modifierCodes['LALT'];\n              break;\n            case 'rightalt':\n              modifier ^= Codes.modifierCodes['RALT'];\n              break;\n            case 'alt':\n              modifier ^= Codes.modifierCodes['ALT'];\n              break;\n            default:\n              s = id;\n          }\n\n          // Combine our base modifiable layer and attach the new modifier variation info to obtain our destination layer.\n          if(s != 'default') {\n            if(s == '') {\n              s = this.getLayerId(modifier);\n            } else {\n              s = this.getLayerId(modifier) + '-' + s;\n            }\n          }\n        }\n        \n        if(s == '') {\n          s = 'default';\n        }\n      } else {\n        // Mobile form-factor.  Either the layout is specified by a keyboard developer with direct layer name references\n        // or all layers are accessed via subkey of a single layer-shifting key - no need for modifier-combining logic.\n        s = id;\n      }\n\n      let layout = this.activeKeyboard.layout(keyEvent.device.formFactor);\n      if(layout.getLayer(s)) {\n        this.layerId = s;\n      } else {\n        this.layerId = 'default';\n      }\n    }\n\n    // Returns true if the key event is a modifier press, allowing keyPress to return selectively\n    // in those cases.\n    doModifierPress(Levent: KeyEvent, isKeyDown: boolean): boolean {\n      let outputTarget = Levent.Ltarg;\n\n      if(!this.activeKeyboard) {\n        return false;\n      }\n\n      switch(Levent.Lcode) {\n        case 8: \n          outputTarget.deadkeys().clear();\n          break; // I3318 (always clear deadkeys after backspace) \n        case 16: //\"K_SHIFT\":16,\"K_CONTROL\":17,\"K_ALT\":18\n        case 17: \n        case 18: \n        case 20: //\"K_CAPS\":20, \"K_NUMLOCK\":144,\"K_SCROLL\":145\n        case 144:\n        case 145:\n          // For eventual integration - we bypass an OSK update for physical keystrokes when in touch mode.\n          this.activeKeyboard.notify(Levent.Lcode, outputTarget, isKeyDown ? 1 : 0); \n          if(!Levent.device.touchable) {\n            return this._UpdateVKShift(Levent, Levent.Lcode-15, 1); // I2187\n          } else {\n            return true;\n          }\n      }\n\n      if(Levent.LmodifierChange) {\n        this.activeKeyboard.notify(0, outputTarget, 1); \n        this._UpdateVKShift(Levent, 0, 1);\n      }\n\n      // No modifier keypresses detected.\n      return false;\n    }\n\n    resetContext() {\n      this.layerId = 'default';\n\n      this.keyboardInterface.resetContextCache();\n      this._UpdateVKShift(null, 15, 0);\n    };\n\n    setNumericLayer(device: EngineDeviceSpec) {\n      let layout = this.activeKeyboard.layout(device.formFactor);\n      if(layout.getLayer('numeric')) {\n        this.layerId = 'numeric';\n      }\n    };\n  }\n}\n\n(function () {\n  let ns = com.keyman.text;\n\n  // Let LMLayer be available both in the browser and in Node.\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = ns.KeyboardProcessor;\n    //@ts-ignore\n    ns.KeyboardProcessor.com = com; // Export the root namespace, while we're at it - just in case.\n  }\n}());"]}