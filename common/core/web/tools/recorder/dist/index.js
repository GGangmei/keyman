//Autogenerated file - do not modify!
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var environment;
        (function (environment) {
            environment.VERSION = "15.0";
            environment.BUILD = 86;
            environment.ENVIRONMENT = "local";
            environment.SENTRY_RELEASE = "release-15.0.86-alpha-local";
        })(environment = keyman.environment || (keyman.environment = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            /**
             * Function     deepCopy
             * Scope        Private
             * @param       {Object}      p           object to copy
             * @param       {Array=}      c0          array member being copied
             * @return      {Object}                  clone ('deep copy') of object
             * Description  Makes an actual copy (not a reference) of an object, copying simple members,
             *              arrays and member objects but not functions, so use with care!
             */
            function deepCopy(p, c0) {
                var c = c0 || {};
                for (var i in p) {
                    if (typeof p[i] === 'object' && p[i] != null) {
                        c[i] = (p[i].constructor === Array) ? [] : {};
                        deepCopy(p[i], c[i]);
                    }
                    else {
                        c[i] = p[i];
                    }
                }
                return c;
            }
            utils.deepCopy = deepCopy;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            /**
             * Returns the base global object available to the current JS platform.
             * - In browsers, returns `window`.
             * - In WebWorkers, returns `self`.
             * - In Node, returns `global`.
             */
            function getGlobalObject() {
                // Evergreen browsers have started defining 'globalThis'.  
                // Refer to https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#type-checking-for-globalthis
                // and its referenced polyfill.  Said polyfill is very complex, so we opt for this far leaner variant.
                if (typeof globalThis != 'undefined') {
                    return globalThis; // Not available in IE or older Edge versions
                    // @ts-ignore (TS will throw errors for whatever platform we're not compiling for.)
                }
                else if (typeof window != 'undefined') {
                    // @ts-ignore
                    return window; // The browser-based classic
                    // @ts-ignore
                }
                else if (typeof self != 'undefined') {
                    // @ts-ignore
                    return self; // WebWorker global
                }
                else {
                    // Assumption - if neither of the above exist, we're in Node, for unit-testing.
                    // Node doesn't have as many methods and properties as the other two, but what 
                    // matters for us is that it's the base global.
                    //
                    // Some other headless JS solutions use 'this' instead, but Node's enough for our needs.
                    // @ts-ignore
                    return global;
                }
            }
            utils.getGlobalObject = getGlobalObject;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Ensure that this class contains no reference into core KMW code - it is referenced
// by components intended to be modular and possible to separate from core KMW.
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            // Dotted-decimal version
            var Version = /** @class */ (function () {
                /**
                 * Parses version information, preparing it for use in comparisons.
                 * @param text Either a string representing a version number (ex: "9.0.0") or an array representing
                 *             its components (ex: [9, 0, 0]).
                 */
                function Version(text) {
                    // If a keyboard doesn't specify a version, use the DEVELOPER_VERSION_FALLBACK values.
                    if (text === undefined || text === null) {
                        this.components = [].concat(Version.DEVELOPER_VERSION_FALLBACK.components);
                        return;
                    }
                    if (Array.isArray(text)) {
                        var components = text;
                        if (components.length < 2) {
                            throw new Error("Version string must have at least a major and minor component!");
                        }
                        else {
                            this.components = [].concat(components);
                            return;
                        }
                    }
                    // else, standard constructor path.
                    var parts = text.split('.');
                    var componentArray = [];
                    if (parts.length < 2) {
                        throw new Error("Version string must have at least a major and minor component!");
                    }
                    for (var i = 0; i < parts.length; i++) {
                        var value = parseInt(parts[i], 10);
                        if (isNaN(value)) {
                            throw new Error("Version string components must be numerical!");
                        }
                        componentArray.push(value);
                    }
                    this.components = componentArray;
                }
                Object.defineProperty(Version.prototype, "major", {
                    get: function () {
                        return this.components[0];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Version.prototype, "minor", {
                    get: function () {
                        return this.components[1];
                    },
                    enumerable: true,
                    configurable: true
                });
                Version.prototype.toString = function () {
                    return this.components.join('.');
                };
                Version.prototype.toJSON = function () {
                    return this.toString();
                };
                Version.prototype.equals = function (other) {
                    return this.compareTo(other) == 0;
                };
                Version.prototype.precedes = function (other) {
                    return this.compareTo(other) < 0;
                };
                Version.prototype.compareTo = function (other) {
                    // If the version info depth differs, we need a flag to indicate which instance is shorter.
                    var isShorter = this.components.length < other.components.length;
                    var maxDepth = (this.components.length < other.components.length) ? this.components.length : other.components.length;
                    var i;
                    for (i = 0; i < maxDepth; i++) {
                        var delta = this.components[i] - other.components[i];
                        if (delta != 0) {
                            return delta;
                        }
                    }
                    var longList = isShorter ? other.components : this.components;
                    do {
                        if (longList[i] > 0) {
                            return isShorter ? -1 : 1;
                        }
                        i++;
                    } while (i < longList.length);
                    // Equal.
                    return 0;
                };
                Version.CURRENT = new Version(com.keyman.environment.VERSION);
                // Represents a default version value for keyboards compiled before this was compiled into keyboards.
                // The exact version is unknown at this point, but the value is "good enough" for what we need.
                Version.DEVELOPER_VERSION_FALLBACK = new Version([9, 0, 0]);
                // For 12.0, the old default behavior of adding missing keycaps to the default layers was removed,
                // as it results in unexpected, bug-like behavior for keyboard designers when it is unwanted.
                Version.NO_DEFAULT_KEYCAPS = new Version([12, 0]);
                Version.MAC_POSSIBLE_IPAD_ALIAS = new Version([10, 15]);
                return Version;
            }());
            utils.Version = Version;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/***
   KeymanWeb 14.0
   Copyright 2020 SIL International
***/
/**
 * Constructs a string from one or more Unicode character codepoint values
 * passed as integer parameters.
 *
 * @param  {number} cp0,...   1 or more Unicode codepoints, e.g. 0x0065, 0x10000
 * @return {string|null}      The new String object.
 */
String.kmwFromCharCode = function (cp0) {
    var chars = [], i;
    for (i = 0; i < arguments.length; i++) {
        var c = Number(arguments[i]);
        if (!isFinite(c) || c < 0 || c > 0x10FFFF || Math.floor(c) !== c) {
            throw new RangeError("Invalid code point " + c);
        }
        if (c < 0x10000) {
            chars.push(c);
        }
        else {
            c -= 0x10000;
            chars.push((c >> 10) + 0xD800);
            chars.push((c % 0x400) + 0xDC00);
        }
    }
    return String.fromCharCode.apply(undefined, chars);
};
/**
 * Returns a number indicating the Unicode value of the character at the given
 * code point index, with support for supplementary plane characters.
 *
 * @param  {number}  codePointIndex  The code point index into the string (not
                                     the code unit index) to return
 * @return {number}                  The Unicode character value
 */
String.prototype.kmwCharCodeAt = function (codePointIndex) {
    var str = String(this);
    var codeUnitIndex = 0;
    if (codePointIndex < 0 || codePointIndex >= str.length) {
        return NaN;
    }
    for (var i = 0; i < codePointIndex; i++) {
        codeUnitIndex = str.kmwNextChar(codeUnitIndex);
        if (codeUnitIndex === null)
            return NaN;
    }
    var first = str.charCodeAt(codeUnitIndex);
    if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {
        var second = str.charCodeAt(codeUnitIndex + 1);
        if (second >= 0xDC00 && second <= 0xDFFF) {
            return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;
        }
    }
    return first;
};
/**
 * Returns the code point index within the calling String object of the first occurrence
 * of the specified value, or -1 if not found.
 *
 * @param  {string}  searchValue    The value to search for
 * @param  {number}  [fromIndex]    Optional code point index to start searching from
 * @return {number}                 The code point index of the specified search value
 */
String.prototype.kmwIndexOf = function (searchValue, fromIndex) {
    var str = String(this);
    var codeUnitIndex = str.indexOf(searchValue, fromIndex);
    if (codeUnitIndex < 0) {
        return codeUnitIndex;
    }
    var codePointIndex = 0;
    for (var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i))
        codePointIndex++;
    return codePointIndex;
};
/**
 * Returns the code point index within the calling String object of the last occurrence
 * of the specified value, or -1 if not found.
 *
 * @param  {string}  searchValue    The value to search for
 * @param  {number}  fromIndex      Optional code point index to start searching from
 * @return {number}                 The code point index of the specified search value
 */
String.prototype.kmwLastIndexOf = function (searchValue, fromIndex) {
    var str = String(this);
    var codeUnitIndex = str.lastIndexOf(searchValue, fromIndex);
    if (codeUnitIndex < 0) {
        return codeUnitIndex;
    }
    var codePointIndex = 0;
    for (var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i))
        codePointIndex++;
    return codePointIndex;
};
/**
 * Returns the length of the string in code points, as opposed to code units.
 *
 * @return {number}                 The length of the string in code points
 */
String.prototype.kmwLength = function () {
    var str = String(this);
    if (str.length == 0)
        return 0;
    for (var i = 0, codeUnitIndex = 0; codeUnitIndex !== null; i++)
        codeUnitIndex = str.kmwNextChar(codeUnitIndex);
    return i;
};
/**
 * Extracts a section of a string and returns a new string.
 *
 * @param  {number}  beginSlice    The start code point index in the string to
 *                                 extract from
 * @param  {number}  endSlice      Optional end code point index in the string
 *                                 to extract to
 * @return {string}                The substring as selected by beginSlice and
 *                                 endSlice
 */
String.prototype.kmwSlice = function (beginSlice, endSlice) {
    var str = String(this);
    var beginSliceCodeUnit = str.kmwCodePointToCodeUnit(beginSlice);
    var endSliceCodeUnit = str.kmwCodePointToCodeUnit(endSlice);
    if (beginSliceCodeUnit === null || endSliceCodeUnit === null)
        return '';
    else
        return str.slice(beginSliceCodeUnit, endSliceCodeUnit);
};
/**
 * Returns the characters in a string beginning at the specified location through
 * the specified number of characters.
 *
 * @param  {number}  start         The start code point index in the string to
 *                                 extract from
 * @param  {number=}  length        Optional length to extract
 * @return {string}                The substring as selected by start and length
 */
String.prototype.kmwSubstr = function (start, length) {
    var str = String(this);
    if (start < 0) {
        start = str.kmwLength() + start;
    }
    if (start < 0)
        start = 0;
    var startCodeUnit = str.kmwCodePointToCodeUnit(start);
    var endCodeUnit = startCodeUnit;
    if (startCodeUnit === null)
        return '';
    if (arguments.length < 2) {
        endCodeUnit = str.length;
    }
    else {
        for (var i = 0; i < length; i++)
            endCodeUnit = str.kmwNextChar(endCodeUnit);
    }
    if (endCodeUnit === null)
        return str.substring(startCodeUnit);
    else
        return str.substring(startCodeUnit, endCodeUnit);
};
/**
 * Returns the characters in a string between two indexes into the string.
 *
 * @param  {number}  indexA        The start code point index in the string to
 *                                 extract from
 * @param  {number}  indexB        The end code point index in the string to
 *                                 extract to
 * @return {string}                The substring as selected by indexA and indexB
 */
String.prototype.kmwSubstring = function (indexA, indexB) {
    var str = String(this), indexACodeUnit, indexBCodeUnit;
    if (typeof (indexB) == 'undefined') {
        indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);
        indexBCodeUnit = str.length;
    }
    else {
        if (indexA > indexB) {
            var c = indexA;
            indexA = indexB;
            indexB = c;
        }
        indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);
        indexBCodeUnit = str.kmwCodePointToCodeUnit(indexB);
    }
    if (isNaN(indexACodeUnit) || indexACodeUnit === null)
        indexACodeUnit = 0;
    if (isNaN(indexBCodeUnit) || indexBCodeUnit === null)
        indexBCodeUnit = str.length;
    return str.substring(indexACodeUnit, indexBCodeUnit);
};
/*
  Helper functions
*/
/**
 * Returns the code unit index for the next code point in the string, accounting for
 * supplementary pairs
 *
 * @param  {number|null}  codeUnitIndex  The code unit position to increment
 * @return {number|null}                 The index of the next code point in the string,
 *                                       in code units
 */
String.prototype.kmwNextChar = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex === null || codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {
        return null;
    }
    var first = str.charCodeAt(codeUnitIndex);
    if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {
        var second = str.charCodeAt(codeUnitIndex + 1);
        if (second >= 0xDC00 && second <= 0xDFFF) {
            if (codeUnitIndex == str.length - 2) {
                return null;
            }
            return codeUnitIndex + 2;
        }
    }
    return codeUnitIndex + 1;
};
/**
 * Returns the code unit index for the previous code point in the string, accounting
 * for supplementary pairs
 *
 * @param  {number|null}  codeUnitIndex  The code unit position to decrement
 * @return {number|null}                 The index of the previous code point in the
 *                                       string, in code units
*/
String.prototype.kmwPrevChar = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex == null || codeUnitIndex <= 0 || codeUnitIndex > str.length) {
        return null;
    }
    var second = str.charCodeAt(codeUnitIndex - 1);
    if (second >= 0xDC00 && second <= 0xDFFF && codeUnitIndex > 1) {
        var first = str.charCodeAt(codeUnitIndex - 2);
        if (first >= 0xD800 && first <= 0xDBFF) {
            return codeUnitIndex - 2;
        }
    }
    return codeUnitIndex - 1;
};
/**
 * Returns the corresponding code unit index to the code point index passed
 *
 * @param  {number|null} codePointIndex  A code point index in the string
 * @return {number|null}                 The corresponding code unit index
 */
String.prototype.kmwCodePointToCodeUnit = function (codePointIndex) {
    if (codePointIndex === null)
        return null;
    var str = String(this);
    var codeUnitIndex = 0;
    if (codePointIndex < 0) {
        codeUnitIndex = str.length;
        for (var i = 0; i > codePointIndex; i--)
            codeUnitIndex = str.kmwPrevChar(codeUnitIndex);
        return codeUnitIndex;
    }
    if (codePointIndex == str.kmwLength())
        return str.length;
    for (var i = 0; i < codePointIndex; i++)
        codeUnitIndex = str.kmwNextChar(codeUnitIndex);
    return codeUnitIndex;
};
/**
 * Returns the corresponding code point index to the code unit index passed
 *
 * @param  {number|null}  codeUnitIndex  A code unit index in the string
 * @return {number|null}                 The corresponding code point index
 */
String.prototype.kmwCodeUnitToCodePoint = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex === null)
        return null;
    else if (codeUnitIndex == 0)
        return 0;
    else if (codeUnitIndex < 0)
        return str.substr(codeUnitIndex).kmwLength();
    else
        return str.substr(0, codeUnitIndex).kmwLength();
};
/**
 * Returns the character at a the code point index passed
 *
 * @param  {number}  codePointIndex  A code point index in the string
 * @return {string}                  The corresponding character
 */
String.prototype.kmwCharAt = function (codePointIndex) {
    var str = String(this);
    if (codePointIndex >= 0)
        return str.kmwSubstr(codePointIndex, 1);
    else
        return '';
};
/**
 * String prototype library extensions for basic plane characters,
 * to simplify enabling or disabling supplementary plane functionality (I3319)
 */
/**
 * Returns the code unit index for the next code point in the string
 *
 * @param  {number}  codeUnitIndex    A code point index in the string
 * @return {number|null}                   The corresponding character
 */
String.prototype.kmwBMPNextChar = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {
        return null;
    }
    return codeUnitIndex + 1;
};
/**
 * Returns the code unit index for the previous code point in the string
 *
 * @param  {number}  codeUnitIndex    A code unit index in the string
 * @return {number|null}                   The corresponding character
 */
String.prototype.kmwBMPPrevChar = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex <= 0 || codeUnitIndex > str.length) {
        return null;
    }
    return codeUnitIndex - 1;
};
/**
 * Returns the code unit index for a code point index
 *
 * @param  {number}  codePointIndex   A code point index in the string
 * @return {number}                   The corresponding character
 */
String.prototype.kmwBMPCodePointToCodeUnit = function (codePointIndex) {
    return codePointIndex;
};
/**
 * Returns the code point index for a code unit index
 *
 * @param  {number}  codeUnitIndex    A code point index in the string
 * @return {number}                   The corresponding character
 */
String.prototype.kmwBMPCodeUnitToCodePoint = function (codeUnitIndex) {
    return codeUnitIndex;
};
/**
 * Returns the length of a BMP string
 *
 * @return {number}                   The length in code points
 */
String.prototype.kmwBMPLength = function () {
    var str = String(this);
    return str.length;
};
/**
 * Returns a substring
 *
 * @param  {number}  n
 * @param  {number=}  ln
 * @return {string}
 */
String.prototype.kmwBMPSubstr = function (n, ln) {
    var str = String(this);
    if (n > -1)
        return str.substr(n, ln);
    else
        return str.substr(str.length + n, -n);
};
/**
 * Enable or disable supplementary plane string handling
 *
 * @param  {boolean}  bEnable
 */
String.kmwEnableSupplementaryPlane = function (bEnable) {
    var p = String.prototype;
    String._kmwFromCharCode = bEnable ? String.kmwFromCharCode : String.fromCharCode;
    p._kmwCharAt = bEnable ? p.kmwCharAt : p.charAt;
    p._kmwCharCodeAt = bEnable ? p.kmwCharCodeAt : p.charCodeAt;
    p._kmwIndexOf = bEnable ? p.kmwIndexOf : p.indexOf;
    p._kmwLastIndexOf = bEnable ? p.kmwLastIndexOf : p.lastIndexOf;
    p._kmwSlice = bEnable ? p.kmwSlice : p.slice;
    p._kmwSubstring = bEnable ? p.kmwSubstring : p.substring;
    p._kmwSubstr = bEnable ? p.kmwSubstr : p.kmwBMPSubstr;
    p._kmwLength = bEnable ? p.kmwLength : p.kmwBMPLength;
    p._kmwNextChar = bEnable ? p.kmwNextChar : p.kmwBMPNextChar;
    p._kmwPrevChar = bEnable ? p.kmwPrevChar : p.kmwBMPPrevChar;
    p._kmwCodePointToCodeUnit = bEnable ? p.kmwCodePointToCodeUnit : p.kmwBMPCodePointToCodeUnit;
    p._kmwCodeUnitToCodePoint = bEnable ? p.kmwCodeUnitToCodePoint : p.kmwBMPCodeUnitToCodePoint;
};
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            var Browser;
            (function (Browser) {
                Browser["Chrome"] = "chrome";
                Browser["Edge"] = "edge";
                Browser["Firefox"] = "firefox";
                Browser["Native"] = "native";
                Browser["Opera"] = "opera";
                Browser["Safari"] = "safari";
                Browser["Other"] = "other";
            })(Browser = utils.Browser || (utils.Browser = {}));
            var OperatingSystem;
            (function (OperatingSystem) {
                OperatingSystem["Windows"] = "windows";
                OperatingSystem["macOS"] = "macosx";
                OperatingSystem["Linux"] = "linux";
                OperatingSystem["Android"] = "android";
                OperatingSystem["iOS"] = "ios";
                OperatingSystem["Other"] = "other";
            })(OperatingSystem = utils.OperatingSystem || (utils.OperatingSystem = {}));
            var FormFactor;
            (function (FormFactor) {
                FormFactor["Desktop"] = "desktop";
                FormFactor["Phone"] = "phone";
                FormFactor["Tablet"] = "tablet";
            })(FormFactor = utils.FormFactor || (utils.FormFactor = {}));
            /**
             * This class provides an abstract version of com.keyman.Device that is core-friendly,
             * containing only the information needed by web-core for text processing use, devoid
             * of any direct references to the DOM.
             */
            var DeviceSpec = /** @class */ (function () {
                function DeviceSpec(browser, formFactor, OS, touchable) {
                    switch (browser.toLowerCase()) {
                        case Browser.Chrome:
                        case Browser.Edge:
                        case Browser.Firefox:
                        case Browser.Native:
                        case Browser.Opera:
                        case Browser.Safari:
                            this.browser = browser.toLowerCase();
                            break;
                        default:
                            this.browser = Browser.Other;
                    }
                    switch (formFactor.toLowerCase()) {
                        case FormFactor.Desktop:
                        case FormFactor.Phone:
                        case FormFactor.Tablet:
                            this.formFactor = formFactor.toLowerCase();
                            break;
                        default:
                            throw ("Invalid form factor specified for device: " + formFactor);
                    }
                    switch (OS.toLowerCase()) {
                        case OperatingSystem.Windows.toLowerCase():
                        case OperatingSystem.macOS.toLowerCase():
                        case OperatingSystem.Linux.toLowerCase():
                        case OperatingSystem.Android.toLowerCase():
                        case OperatingSystem.iOS.toLowerCase():
                            this.OS = OS.toLowerCase();
                            break;
                        default:
                            this.OS = OperatingSystem.Other;
                    }
                    this.touchable = touchable;
                }
                return DeviceSpec;
            }());
            utils.DeviceSpec = DeviceSpec;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// References all utility includes from a single file, making import/export simple.
///<reference path="deepCopy.ts" />
///<reference path="globalObject.ts" />
///<reference path="version.ts" />
///<reference path="kmwstring.ts" />
///<reference path="deviceSpec.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            // Defines the base Deadkey-tracking object.
            var Deadkey = /** @class */ (function () {
                function Deadkey(pos, id) {
                    this.p = pos;
                    this.d = id;
                    this.o = Deadkey.ordinalSeed++;
                }
                Deadkey.prototype.match = function (p, d) {
                    var result = (this.p == p && this.d == d);
                    return result;
                };
                Deadkey.prototype.set = function () {
                    this.matched = 1;
                };
                Deadkey.prototype.reset = function () {
                    this.matched = 0;
                };
                Deadkey.prototype.before = function (other) {
                    return this.o < other.o;
                };
                Deadkey.prototype.clone = function () {
                    var dk = new Deadkey(this.p, this.d);
                    dk.o = this.o;
                    return dk;
                };
                Deadkey.ordinalSeed = 0;
                /**
                 * Sorts the deadkeys in reverse order.
                 */
                Deadkey.sortFunc = function (a, b) {
                    // We want descending order, so we want 'later' deadkeys first.
                    if (a.p != b.p) {
                        return b.p - a.p;
                    }
                    else {
                        return b.o - a.o;
                    }
                };
                return Deadkey;
            }());
            text.Deadkey = Deadkey;
            // Object-orients deadkey management.
            var DeadkeyTracker = /** @class */ (function () {
                function DeadkeyTracker() {
                    this.dks = [];
                }
                DeadkeyTracker.prototype.toSortedArray = function () {
                    this.dks = this.dks.sort(Deadkey.sortFunc);
                    return [].concat(this.dks);
                };
                DeadkeyTracker.prototype.clone = function () {
                    var dkt = new DeadkeyTracker();
                    var dks = this.toSortedArray();
                    // Make sure to clone the deadkeys themselves - the Deadkey object is mutable.
                    dkt.dks = [];
                    dks.forEach(function (value) {
                        dkt.dks.push(value.clone());
                    });
                    return dkt;
                };
                /**
                 * Function     isMatch
                 * Scope        Public
                 * @param       {number}      caretPos  current cursor position
                 * @param       {number}      n         expected offset of deadkey from cursor
                 * @param       {number}      d         deadkey
                 * @return      {boolean}               True if deadkey found selected context matches val
                 * Description  Match deadkey at current cursor position
                 */
                DeadkeyTracker.prototype.isMatch = function (caretPos, n, d) {
                    if (this.dks.length == 0) {
                        return false; // I3318
                    }
                    var sp = caretPos;
                    n = sp - n;
                    for (var i = 0; i < this.dks.length; i++) {
                        // Don't re-match an already-matched deadkey.  It's possible to have two identical 
                        // entries, and they should be kept separately.
                        if (this.dks[i].match(n, d) && !this.dks[i].matched) {
                            this.dks[i].set();
                            // Assumption:  since we match the first possible entry in the array, we
                            // match the entry with the lower ordinal - the 'first' deadkey in the position.
                            return true; // I3318
                        }
                    }
                    this.resetMatched(); // I3318
                    return false;
                };
                DeadkeyTracker.prototype.add = function (dk) {
                    this.dks = this.dks.concat(dk);
                };
                DeadkeyTracker.prototype.remove = function (dk) {
                    var index = this.dks.indexOf(dk);
                    this.dks.splice(index, 1);
                };
                DeadkeyTracker.prototype.clear = function () {
                    this.dks = [];
                };
                DeadkeyTracker.prototype.resetMatched = function () {
                    for (var _i = 0, _a = this.dks; _i < _a.length; _i++) {
                        var dk = _a[_i];
                        dk.reset();
                    }
                };
                DeadkeyTracker.prototype.deleteMatched = function () {
                    for (var Li = 0; Li < this.dks.length; Li++) {
                        if (this.dks[Li].matched) {
                            this.dks.splice(Li--, 1); // Don't forget to decrement!
                        }
                    }
                };
                /**
                 * Function     adjustPositions (formerly _DeadkeyAdjustPos)
                 * Scope        Private
                 * @param       {number}      Lstart      start position in context
                 * @param       {number}      Ldelta      characters to adjust by
                 * Description  Adjust saved positions of deadkeys in context
                 */
                DeadkeyTracker.prototype.adjustPositions = function (Lstart, Ldelta) {
                    if (Ldelta == 0) {
                        return;
                    }
                    for (var _i = 0, _a = this.dks; _i < _a.length; _i++) {
                        var dk = _a[_i];
                        if (dk.p > Lstart) {
                            dk.p += Ldelta;
                        }
                    }
                };
                DeadkeyTracker.prototype.count = function () {
                    return this.dks.length;
                };
                return DeadkeyTracker;
            }());
            text.DeadkeyTracker = DeadkeyTracker;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Defines deadkey management in a manner attachable to each element interface.
///<reference path="../text/deadkeys.ts" />
// Defines the KeyEvent type.
///<reference path="keyEvent.ts" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Also relies on string-extensions provided by the web-utils package.
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text_1) {
            var TextTransform = /** @class */ (function () {
                function TextTransform(insert, deleteLeft, deleteRight) {
                    this.insert = insert;
                    this.deleteLeft = deleteLeft;
                    this.deleteRight = deleteRight || 0;
                }
                TextTransform.nil = new TextTransform('', 0, 0);
                return TextTransform;
            }());
            text_1.TextTransform = TextTransform;
            var Transcription = /** @class */ (function () {
                function Transcription(keystroke, transform, preInput, alternates /*, removedDks: Deadkey[], insertedDks: Deadkey[]*/) {
                    var token = this.token = Transcription.tokenSeed++;
                    this.keystroke = keystroke;
                    this.transform = transform;
                    this.alternates = alternates;
                    this.preInput = preInput;
                    this.transform.id = this.token;
                    // Assign the ID to each alternate, as well.
                    if (alternates) {
                        alternates.forEach(function (alt) {
                            alt.sample.id = token;
                        });
                    }
                }
                Transcription.tokenSeed = 0;
                return Transcription;
            }());
            text_1.Transcription = Transcription;
            var OutputTarget = /** @class */ (function () {
                function OutputTarget() {
                    this._dks = new text.DeadkeyTracker();
                }
                Object.defineProperty(OutputTarget.prototype, "isSynthetic", {
                    /**
                     * Signifies that this OutputTarget has no default key processing behaviors.  This should be false
                     * for OutputTargets backed by web elements like HTMLInputElement or HTMLTextAreaElement.
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                OutputTarget.prototype.resetContext = function () {
                    this.deadkeys().clear();
                };
                OutputTarget.prototype.deadkeys = function () {
                    return this._dks;
                };
                OutputTarget.prototype.hasDeadkeyMatch = function (n, d) {
                    return this.deadkeys().isMatch(this.getDeadkeyCaret(), n, d);
                };
                OutputTarget.prototype.insertDeadkeyBeforeCaret = function (d) {
                    var dk = new text_1.Deadkey(this.getDeadkeyCaret(), d);
                    this.deadkeys().add(dk);
                };
                /**
                 * Should be called by each output target immediately before text mutation operations occur.
                 *
                 * Maintains solutions to old issues:  I3318,I3319
                 * @param {number} delta  Use negative values if characters were deleted, positive if characters were added.
                 */
                OutputTarget.prototype.adjustDeadkeys = function (delta) {
                    this.deadkeys().adjustPositions(this.getDeadkeyCaret(), delta);
                };
                /**
                 * Needed to properly clone deadkeys for use with Mock element interfaces toward predictive text purposes.
                 * @param {object}  dks   An existing set of deadkeys to deep-copy for use by this element interface.
                 */
                OutputTarget.prototype.setDeadkeys = function (dks) {
                    this._dks = dks.clone();
                };
                /**
                 * Determines the basic operations needed to reconstruct the current OutputTarget's text from the prior state specified
                 * by another OutputTarget based on their text and caret positions.
                 *
                 * This is designed for use as a "before and after" comparison to determine the effect of a single keyboard rule at a time.
                 * As such, it assumes that the caret is immediately after any inserted text.
                 * @param from An output target (preferably a Mock) representing the prior state of the input/output system.
                 */
                OutputTarget.prototype.buildTransformFrom = function (original) {
                    var to = this.getText();
                    var from = original.getText();
                    var fromCaret = original.getDeadkeyCaret();
                    var toCaret = this.getDeadkeyCaret();
                    // Step 1:  Determine the number of left-deletions.
                    var maxSMPLeftMatch = fromCaret < toCaret ? fromCaret : toCaret;
                    // We need the corresponding non-SMP caret location in order to binary-search efficiently.
                    // (Examining code units is much more computationally efficient.)
                    var maxLeftMatch = to._kmwCodePointToCodeUnit(maxSMPLeftMatch);
                    // 1.1:  use a non-SMP-aware binary search to determine the divergence point.
                    var start = 0;
                    var end = maxLeftMatch; // the index AFTER the last possible matching char.
                    // This search is O(maxLeftMatch).  1/2 + 1/4 + 1/8 + ... converges to = 1.
                    while (start < end) {
                        var mid = Math.floor((end + start + 1) / 2); // round up (compare more)
                        var fromLeft = from.substr(start, mid - start);
                        var toLeft = to.substr(start, mid - start);
                        if (fromLeft == toLeft) {
                            start = mid;
                        }
                        else {
                            end = mid - 1;
                        }
                    }
                    // At the loop's end:  `end` now holds the non-SMP-aware divergence point.
                    // The 'caret' is after the last matching code unit.
                    // 1.2:  detect a possible surrogate-pair split scenario, correcting for it
                    //       (by moving the split before the high-surrogate) if detected.
                    // If the split location is precisely on either end of the context, we can't
                    // have split a surrogate pair.
                    if (end > 0 && end < maxLeftMatch) {
                        var potentialHigh = from.charCodeAt(end - 1);
                        var potentialFromLow = from.charCodeAt(end);
                        var potentialToLow = to.charCodeAt(end);
                        // if potentialHigh is a possible high surrogate...
                        if (potentialHigh >= 0xD800 && potentialHigh <= 0xDBFF) {
                            // and at least one potential 'low' is a possible low surrogate...
                            var flag = potentialFromLow >= 0xDC00 && potentialFromLow <= 0xDFFF;
                            flag = flag || (potentialToLow >= 0XDC00 && potentialToLow <= 0xDFFF);
                            // Correct the split location, moving it 'before' the high surrogate.
                            if (flag) {
                                end = end - 1;
                            }
                        }
                    }
                    // 1.3:  take substring from start to the split point; determine SMP-aware length.
                    //       This yields the SMP-aware divergence index, which gives the number of left-deletes.
                    var newCaret = from._kmwCodeUnitToCodePoint(end);
                    var deletedLeft = fromCaret - newCaret;
                    // Step 2:  Determine the other properties.
                    // Since the 'after' OutputTarget's caret indicates the end of any inserted text, we
                    // can easily calculate the rest.
                    var insertedLength = toCaret - newCaret;
                    var delta = to._kmwSubstr(newCaret, insertedLength);
                    var undeletedRight = to._kmwLength() - toCaret;
                    var originalRight = from._kmwLength() - fromCaret;
                    var deletedRight = originalRight - undeletedRight;
                    // May occur when reverting a suggestion that had been applied mid-word.
                    if (deletedRight < 0) {
                        // Restores deleteRight characters.
                        delta = delta + to._kmwSubstr(toCaret, -deletedRight);
                        deletedRight = 0;
                    }
                    return new TextTransform(delta, deletedLeft, deletedRight);
                };
                OutputTarget.prototype.buildTranscriptionFrom = function (original, keyEvent, alternates) {
                    var transform = this.buildTransformFrom(original);
                    // If we ever decide to re-add deadkey tracking, this is the place for it.
                    return new Transcription(keyEvent, transform, Mock.from(original), alternates);
                };
                /**
                 * Restores the `OutputTarget` to the indicated state.  Designed for use with `Transcription.preInput`.
                 * @param original An `OutputTarget` (usually a `Mock`).
                 */
                OutputTarget.prototype.restoreTo = function (original) {
                    //
                    this.setTextBeforeCaret(original.getTextBeforeCaret());
                    this.setTextAfterCaret(original.getTextAfterCaret());
                    // Also, restore the deadkeys!
                    this._dks = original._dks.clone();
                };
                OutputTarget.prototype.apply = function (transform) {
                    if (transform.deleteRight) {
                        this.setTextAfterCaret(this.getTextAfterCaret()._kmwSubstr(transform.deleteRight));
                    }
                    if (transform.deleteLeft) {
                        this.deleteCharsBeforeCaret(transform.deleteLeft);
                    }
                    if (transform.insert) {
                        this.insertTextBeforeCaret(transform.insert);
                    }
                    // We assume that all deadkeys are invalidated after applying a Transform, since
                    // prediction implies we'll be completing a word, post-deadkeys.
                    this._dks.clear();
                };
                /**
                 * Helper to `restoreTo` - allows directly setting the 'before' context to that of another
                 * `OutputTarget`.
                 * @param s
                 */
                OutputTarget.prototype.setTextBeforeCaret = function (s) {
                    // This one's easy enough to provide a default implementation for.
                    this.deleteCharsBeforeCaret(this.getTextBeforeCaret()._kmwLength());
                    this.insertTextBeforeCaret(s);
                };
                /**
                 * Saves element-specific state properties prone to mutation, enabling restoration after
                 * text-output operations.
                 */
                OutputTarget.prototype.saveProperties = function () {
                    // Most element interfaces won't need anything here.
                };
                /**
                 * Restores previously-saved element-specific state properties.  Designed for use after text-output
                 * ops to facilitate more-seamless web-dev and user interactions.
                 */
                OutputTarget.prototype.restoreProperties = function () {
                    // Most element interfaces won't need anything here. 
                };
                return OutputTarget;
            }());
            text_1.OutputTarget = OutputTarget;
            // Due to some interesting requirements on compile ordering in TS,
            // this needs to be in the same file as OutputTarget now.
            var Mock = /** @class */ (function (_super) {
                __extends(Mock, _super);
                function Mock(text, caretPos) {
                    var _this = _super.call(this) || this;
                    _this.text = text ? text : "";
                    var defaultLength = _this.text._kmwLength();
                    // Ensures that `caretPos == 0` is handled correctly.
                    _this.caretIndex = typeof caretPos == "number" ? caretPos : defaultLength;
                    return _this;
                }
                // Clones the state of an existing EditableElement, creating a Mock version of its state.
                Mock.from = function (outputTarget) {
                    var clone;
                    if (outputTarget instanceof Mock) {
                        // Avoids the need to run expensive kmwstring.ts / `_kmwLength()`
                        // calculations when deep-copying Mock instances.
                        var priorMock = outputTarget;
                        clone = new Mock(priorMock.text, priorMock.caretIndex);
                    }
                    else {
                        // If we're 'cloning' a different OutputTarget type, we don't have a
                        // guaranteed way to more efficiently get these values; these are the
                        // best methods specified by the abstraction.
                        var preText = outputTarget.getTextBeforeCaret();
                        var caretIndex = preText._kmwLength();
                        // We choose to ignore (rather, pre-emptively remove) any actively-selected text,
                        // as since it's always removed instantly during any text mutation operations.
                        clone = new Mock(preText + outputTarget.getTextAfterCaret(), caretIndex);
                    }
                    // Also duplicate deadkey state!  (Needed for fat-finger ops.)
                    clone.setDeadkeys(outputTarget.deadkeys());
                    return clone;
                };
                Mock.prototype.clearSelection = function () {
                    return;
                };
                Mock.prototype.invalidateSelection = function () {
                    return;
                };
                Mock.prototype.hasSelection = function () {
                    return true;
                };
                Mock.prototype.getDeadkeyCaret = function () {
                    return this.caretIndex;
                };
                Mock.prototype.setDeadkeyCaret = function (index) {
                    if (index < 0 || index > this.text._kmwLength()) {
                        throw new Error("Provided caret index is out of range.");
                    }
                    this.caretIndex = index;
                };
                Mock.prototype.getTextBeforeCaret = function () {
                    return this.text.kmwSubstr(0, this.caretIndex);
                };
                Mock.prototype.getTextAfterCaret = function () {
                    return this.text.kmwSubstr(this.caretIndex);
                };
                Mock.prototype.getText = function () {
                    return this.text;
                };
                Mock.prototype.deleteCharsBeforeCaret = function (dn) {
                    if (dn >= 0) {
                        if (dn > this.caretIndex) {
                            dn = this.caretIndex;
                        }
                        this.text = this.text.kmwSubstr(0, this.caretIndex - dn) + this.getTextAfterCaret();
                        this.caretIndex -= dn;
                    }
                };
                Mock.prototype.insertTextBeforeCaret = function (s) {
                    this.text = this.getTextBeforeCaret() + s + this.getTextAfterCaret();
                    this.caretIndex += s.kmwLength();
                };
                Mock.prototype.handleNewlineAtCaret = function () {
                    this.insertTextBeforeCaret('\n');
                };
                Mock.prototype.setTextAfterCaret = function (s) {
                    this.text = this.getTextBeforeCaret() + s;
                };
                Mock.prototype.doInputEvent = function () {
                    // Mock isn't backed by an element, so it won't have any event listeners.
                };
                return Mock;
            }(OutputTarget));
            text_1.Mock = Mock;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="outputTarget.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            /**
             * This class is defined within its own file so that it can be loaded by code outside of KMW without
             * having to actually load the entirety of KMW.
             */
            var KeyEvent = /** @class */ (function () {
                function KeyEvent() {
                    /**
                     * `true` if this event was produced by sources other than a DOM-based KeyboardEvent.
                     */
                    this.isSynthetic = true;
                }
                return KeyEvent;
            }());
            text.KeyEvent = KeyEvent;
            ;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var KMWRecorder;
(function (KMWRecorder) {
    /**
     * Facilitates running Recorder-generated tests on various platforms.
     *
     * Note that DOM-aware KeymanWeb will implement a Browser-based version, while
     * keyboard-processor and input-processor will use a Node-based version instead.
     */
    var Proctor = /** @class */ (function () {
        function Proctor(device, assert) {
            this.device = device;
            this._assert = assert;
        }
        Proctor.prototype.assertEquals = function (s1, s2, msg) {
            if (this._assert) {
                this._assert(s1, s2, msg);
            }
        };
        return Proctor;
    }());
    KMWRecorder.Proctor = Proctor;
})(KMWRecorder || (KMWRecorder = {}));
/// <reference path="../node_modules/@keymanapp/keyboard-processor/src/text/keyEvent.ts" />
/// <reference path="proctor.ts" />
var KMWRecorder;
(function (KMWRecorder) {
    //#region Defines the InputEventSpec set, used to reconstruct DOM-based events for browser-based simulation
    var InputEventSpec = /** @class */ (function () {
        function InputEventSpec() {
        }
        InputEventSpec.fromJSONObject = function (obj) {
            if (obj && obj.type) {
                if (obj.type == "key") {
                    return new PhysicalInputEventSpec(obj);
                }
                else if (obj.type == "osk") {
                    return new OSKInputEventSpec(obj);
                }
            }
            else {
                throw new SyntaxError("Error in JSON format corresponding to an InputEventSpec!");
            }
        };
        InputEventSpec.prototype.toPrettyJSON = function () {
            // We want the default, non-spaced JSON for this class, even when otherwise adding whitespace.
            var str = JSON.stringify(this);
            return str;
        };
        return InputEventSpec;
    }());
    KMWRecorder.InputEventSpec = InputEventSpec;
    var PhysicalInputEventSpec = /** @class */ (function (_super) {
        __extends(PhysicalInputEventSpec, _super);
        function PhysicalInputEventSpec(e) {
            var _this = _super.call(this) || this;
            // KeyboardEvent properties
            _this.type = "key";
            if (e) {
                _this.key = e.key;
                _this.code = e.code;
                _this.keyCode = e.keyCode;
                _this.modifierSet = e.modifierSet;
                _this.location = e.location;
            }
            return _this;
        }
        PhysicalInputEventSpec.prototype.getModifierState = function (key) {
            return (PhysicalInputEventSpec.modifierCodes[key] & this.modifierSet) != 0;
        };
        PhysicalInputEventSpec.prototype.generateModifierString = function () {
            var list = "";
            for (var key in PhysicalInputEventSpec.modifierCodes) {
                if (this.getModifierState(key)) {
                    list += ((list != "" ? " " : "") + key);
                }
            }
            return list;
        };
        PhysicalInputEventSpec.modifierCodes = {
            "Shift": 0x0001,
            "Control": 0x0002,
            "Alt": 0x0004,
            "Meta": 0x0008,
            "CapsLock": 0x0010,
            "NumLock": 0x0020,
            "ScrollLock": 0x0040
        };
        return PhysicalInputEventSpec;
    }(InputEventSpec));
    KMWRecorder.PhysicalInputEventSpec = PhysicalInputEventSpec;
    var OSKInputEventSpec = /** @class */ (function (_super) {
        __extends(OSKInputEventSpec, _super);
        // The parameter may be used to reconstruct the item from raw JSON.
        function OSKInputEventSpec(e) {
            var _this = _super.call(this) || this;
            _this.type = "osk";
            if (e) {
                _this.keyID = e.keyID;
            }
            return _this;
        }
        return OSKInputEventSpec;
    }(InputEventSpec));
    KMWRecorder.OSKInputEventSpec = OSKInputEventSpec;
    //#endregion
    var RecordedKeystroke = /** @class */ (function () {
        function RecordedKeystroke() {
        }
        RecordedKeystroke.fromJSONObject = function (obj) {
            if (obj && obj.type) {
                if (obj.type == "key") {
                    return new RecordedPhysicalKeystroke(obj);
                }
                else if (obj && obj.type) {
                    return new RecordedSyntheticKeystroke(obj);
                }
            }
            else {
                throw new SyntaxError("Error in JSON format corresponding to a RecordedKeystroke!");
            }
        };
        RecordedKeystroke.prototype.toPrettyJSON = function () {
            // We want the default, non-spaced JSON for this class, even when otherwise adding whitespace.
            var str = JSON.stringify(this);
            return str;
        };
        return RecordedKeystroke;
    }());
    KMWRecorder.RecordedKeystroke = RecordedKeystroke;
    var RecordedPhysicalKeystroke = /** @class */ (function (_super) {
        __extends(RecordedPhysicalKeystroke, _super);
        function RecordedPhysicalKeystroke(keystroke, eventSpec) {
            var _this = _super.call(this) || this;
            // KeyboardEvent properties
            _this.type = "key";
            if (keystroke instanceof com.keyman.text.KeyEvent || typeof keystroke.type === 'undefined') {
                // Store what is necessary for headless event reconstruction.
                keystroke = keystroke;
                _this.keyCode = keystroke.Lcode;
                _this.states = keystroke.Lstates;
                _this.modifiers = keystroke.Lmodifiers;
                _this.modifierChanged = !!keystroke.LmodifierChange;
                _this.isVirtualKey = keystroke.LisVirtualKey;
                _this.vkCode = keystroke.vkCode;
                // Also store the DOM-based event spec for use in integrated testing.
                _this.eventSpec = eventSpec;
            }
            else {
                // It might be a raw object, from JSON.
                _this.keyCode = keystroke.keyCode;
                _this.states = keystroke.states;
                _this.modifiers = keystroke.modifiers;
                _this.modifierChanged = keystroke.modifierChanged;
                _this.isVirtualKey = keystroke.isVirtualKey;
                _this.vkCode = keystroke.vkCode;
                _this.eventSpec = new PhysicalInputEventSpec(keystroke.eventSpec); // must also be reconstructed.
            }
            return _this;
        }
        Object.defineProperty(RecordedPhysicalKeystroke.prototype, "inputEventSpec", {
            get: function () {
                return this.eventSpec;
            },
            enumerable: true,
            configurable: true
        });
        return RecordedPhysicalKeystroke;
    }(RecordedKeystroke));
    KMWRecorder.RecordedPhysicalKeystroke = RecordedPhysicalKeystroke;
    var RecordedSyntheticKeystroke = /** @class */ (function (_super) {
        __extends(RecordedSyntheticKeystroke, _super);
        function RecordedSyntheticKeystroke(keystroke) {
            var _this = _super.call(this) || this;
            // KeyboardEvent properties
            _this.type = "osk";
            if (keystroke instanceof com.keyman.text.KeyEvent || typeof keystroke.type === 'undefined') {
                keystroke = keystroke;
                // Store what is necessary for headless event reconstruction.
                // Also store the DOM-based event spec for use in integrated testing.
                _this.layer = keystroke.kbdLayer;
                _this.keyName = keystroke.kName;
                _this.keyDistribution = keystroke.keyDistribution;
            }
            else {
                // It might be a raw object, from JSON.
                _this.layer = keystroke.layer;
                _this.keyName = keystroke.keyName;
                _this.keyDistribution = keystroke.keyDistribution;
            }
            return _this;
        }
        Object.defineProperty(RecordedSyntheticKeystroke.prototype, "inputEventSpec", {
            get: function () {
                var eventSpec = new OSKInputEventSpec();
                eventSpec.keyID = this.layer + '-' + this.keyName;
                return eventSpec;
            },
            enumerable: true,
            configurable: true
        });
        return RecordedSyntheticKeystroke;
    }(RecordedKeystroke));
    KMWRecorder.RecordedSyntheticKeystroke = RecordedSyntheticKeystroke;
    var TestSequence = /** @class */ (function () {
        function TestSequence() {
        }
        TestSequence.prototype.test = function (proctor, target) {
            // Start with an empty OutputTarget and a fresh KeyboardProcessor.
            if (!target) {
                target = new com.keyman.text.Mock();
            }
            proctor.before();
            var result = proctor.simulateSequence(this, target);
            proctor.assertEquals(result, this.output, this.msg);
            return { success: (result == this.output), result: result };
        };
        TestSequence.prototype.toPrettyJSON = function () {
            var str = "{ ";
            if (this.output) {
                str += "\"output\": \"" + this.output + "\", ";
            }
            str += "\"inputs\": [\n";
            for (var i = 0; i < this.inputs.length; i++) {
                str += "  " + this.inputs[i].toPrettyJSON() + ((i == this.inputs.length - 1) ? "\n" : ",\n");
            }
            if (this.msg) {
                str += "], \"message\": \"" + this.msg + "\" }";
            }
            else {
                str += "]}";
            }
            return str;
        };
        return TestSequence;
    }());
    KMWRecorder.TestSequence = TestSequence;
    var InputEventSpecSequence = /** @class */ (function (_super) {
        __extends(InputEventSpecSequence, _super);
        function InputEventSpecSequence(ins, outs, msg) {
            var _this = _super.call(this) || this;
            if (ins) {
                if (ins instanceof Array) {
                    _this.inputs = [].concat(ins);
                }
                else {
                    // We're constructing from existing JSON.
                    _this.inputs = [];
                    for (var ie = 0; ie < ins.inputs.length; ie++) {
                        _this.inputs.push(InputEventSpec.fromJSONObject(ins.inputs[ie]));
                    }
                    _this.output = ins.output;
                    _this.msg = ins.msg;
                    return _this;
                }
            }
            else {
                _this.inputs = [];
            }
            if (outs) {
                _this.output = outs;
            }
            if (msg) {
                _this.msg = msg;
            }
            return _this;
        }
        InputEventSpecSequence.prototype.addInput = function (event, output) {
            this.inputs.push(event);
            this.output = output;
        };
        InputEventSpecSequence.prototype.hasOSKInteraction = function () {
            for (var i = 0; i < this.inputs.length; i++) {
                if (this.inputs[i] instanceof OSKInputEventSpec) {
                    return true;
                }
            }
            return false;
        };
        return InputEventSpecSequence;
    }(TestSequence));
    KMWRecorder.InputEventSpecSequence = InputEventSpecSequence;
    var RecordedKeystrokeSequence = /** @class */ (function (_super) {
        __extends(RecordedKeystrokeSequence, _super);
        function RecordedKeystrokeSequence(ins, outs, msg) {
            var _this = _super.call(this) || this;
            if (ins) {
                if (ins instanceof Array) {
                    _this.inputs = [].concat(ins);
                }
                else {
                    // We're constructing from existing JSON.
                    _this.inputs = [];
                    for (var ie = 0; ie < ins.inputs.length; ie++) {
                        _this.inputs.push(RecordedKeystroke.fromJSONObject(ins.inputs[ie]));
                    }
                    _this.output = ins.output;
                    _this.msg = ins.msg;
                    return _this;
                }
            }
            else {
                _this.inputs = [];
            }
            if (outs) {
                _this.output = outs;
            }
            if (msg) {
                _this.msg = msg;
            }
            return _this;
        }
        RecordedKeystrokeSequence.prototype.addInput = function (event, output) {
            this.inputs.push(event);
            this.output = output;
        };
        RecordedKeystrokeSequence.prototype.hasOSKInteraction = function () {
            for (var i = 0; i < this.inputs.length; i++) {
                if (this.inputs[i] instanceof RecordedSyntheticKeystroke) {
                    return true;
                }
            }
            return false;
        };
        return RecordedKeystrokeSequence;
    }(TestSequence));
    KMWRecorder.RecordedKeystrokeSequence = RecordedKeystrokeSequence;
    var FontStubForLanguage = /** @class */ (function () {
        function FontStubForLanguage(activeStubEntry) {
            this.family = activeStubEntry.family;
            var src = activeStubEntry.files;
            if (!(src instanceof Array)) {
                src = [src];
            }
            this.source = [];
            for (var i = 0; i < src.length; i++) {
                this.source.push(activeStubEntry.path + src[i]);
            }
        }
        return FontStubForLanguage;
    }());
    var LanguageStubForKeyboard = /** @class */ (function () {
        function LanguageStubForKeyboard(activeStub) {
            if (activeStub.KLC) {
                this.id = activeStub.KLC;
                this.name = activeStub.KL;
                this.region = activeStub.KR;
                // Fonts.
                if (activeStub.KFont) {
                    this.font = new FontStubForLanguage(activeStub.KFont);
                }
                if (activeStub.KOskFont) {
                    this.oskFont = new FontStubForLanguage(activeStub.KOskFont);
                }
            }
            else {
                this.id = activeStub.id;
                this.name = activeStub.name;
                this.region = activeStub.region;
                // If we end up adding functionality to FontStubForLanguage, we'll need to properly reconstruct these.
                this.font = activeStub.font;
                this.oskFont = activeStub.oskFont;
            }
        }
        return LanguageStubForKeyboard;
    }());
    KMWRecorder.LanguageStubForKeyboard = LanguageStubForKeyboard;
    var KeyboardStub = /** @class */ (function () {
        // Constructs a stub usable with KeymanWeb's addKeyboards() API function from
        // the internally-tracked ActiveStub value for that keyboard.
        function KeyboardStub(json) {
            if (json) {
                this.id = json.id;
                this.name = json.name;
                this.filename = json.filename;
                if (!Array.isArray(json.languages)) {
                    this.languages = new LanguageStubForKeyboard(json.languages);
                }
                else {
                    this.languages = [];
                    for (var i = 0; i < json.languages.length; i++) {
                        this.languages.push(new LanguageStubForKeyboard(json.languages[i]));
                    }
                }
            }
        }
        KeyboardStub.prototype.getFirstLanguage = function () {
            if (this.languages instanceof LanguageStubForKeyboard) {
                return this.languages.id;
            }
            else {
                return this.languages[0].id;
            }
        };
        return KeyboardStub;
    }());
    KMWRecorder.KeyboardStub = KeyboardStub;
    var Constraint = /** @class */ (function () {
        function Constraint(target, validOSList, validBrowsers) {
            if (typeof (target) == 'string') {
                this.target = target;
                this.validOSList = validOSList;
                this.validBrowsers = validBrowsers;
            }
            else {
                var json = target;
                this.target = json.target;
                this.validOSList = json.validOSList;
                this.validBrowsers = json.validBrowsers;
            }
        }
        Constraint.prototype.matchesClient = function (device, usingOSK) {
            // #1:  Platform check.
            if (usingOSK === true) {
                if (this.target != device.formFactor) {
                    return false;
                }
            }
            else if (usingOSK === false) {
                if (this.target != 'hardware') {
                    return false;
                }
            }
            else if (this.target != device.formFactor && this.target != 'hardware') {
                return false;
            }
            if (this.validOSList) {
                if (this.validOSList.indexOf(device.OS) == -1) {
                    return false;
                }
            }
            if (this.validBrowsers) {
                if (this.validBrowsers.indexOf(device.browser) == -1) {
                    return false;
                }
            }
            return true;
        };
        // Checks if another Constraint instance is functionally identical to this one.
        Constraint.prototype.equals = function (other) {
            if (this.target != other.target) {
                return false;
            }
            var list1 = this.validOSList ? this.validOSList : ['any'];
            var list2 = other.validOSList ? other.validOSList : ['any'];
            if (list1.sort().join(',') != list2.sort().join(',')) {
                return false;
            }
            list1 = this.validBrowsers ? this.validBrowsers : ['web'];
            list2 = other.validBrowsers ? other.validBrowsers : ['web'];
            if (list1.sort().join(',') != list2.sort().join(',')) {
                return false;
            }
            return true;
        };
        return Constraint;
    }());
    KMWRecorder.Constraint = Constraint;
    var TestFailure = /** @class */ (function () {
        function TestFailure(constraint, test, output) {
            this.constraint = constraint;
            this.test = test;
            this.result = output;
        }
        return TestFailure;
    }());
    KMWRecorder.TestFailure = TestFailure;
    /**
     * The core constraint-specific test set definition used for testing versions 10.0 to 13.0.
     */
    var EventSpecTestSet = /** @class */ (function () {
        function EventSpecTestSet(constraint) {
            if ("target" in constraint) {
                this.constraint = constraint;
                this.testSet = [];
            }
            else {
                var json = constraint;
                this.constraint = new Constraint(json.constraint);
                this.testSet = [];
                // Clone each test sequence / reconstruct from methodless JSON object.
                for (var i = 0; i < json.testSet.length; i++) {
                    this.testSet.push(new InputEventSpecSequence(json.testSet[i]));
                }
            }
        }
        EventSpecTestSet.prototype.addTest = function (seq) {
            this.testSet.push(seq);
        };
        // Used to determine if the current EventSpecTestSet is applicable to be run on a device.
        EventSpecTestSet.prototype.isValidForDevice = function (device, usingOSK) {
            return this.constraint.matchesClient(device, usingOSK);
        };
        // Validity should be checked before calling this method.
        EventSpecTestSet.prototype.test = function (proctor) {
            var failures = [];
            var testSet = this.testSet;
            for (var i = 0; i < testSet.length; i++) {
                var testSeq = this[i];
                var simResult = testSet[i].test(proctor);
                if (!simResult.success) {
                    // Failed test!
                    failures.push(new TestFailure(this.constraint, testSeq, simResult.result));
                }
            }
            return failures.length > 0 ? failures : null;
        };
        return EventSpecTestSet;
    }());
    KMWRecorder.EventSpecTestSet = EventSpecTestSet;
    /**
     * The core constraint-specific test set definition used for testing versions 10.0 to 13.0.
     */
    var RecordedSequenceTestSet = /** @class */ (function () {
        function RecordedSequenceTestSet(constraint) {
            if ("target" in constraint) {
                this.constraint = constraint;
                this.testSet = [];
            }
            else {
                var json = constraint;
                this.constraint = new Constraint(json.constraint);
                this.testSet = [];
                // Clone each test sequence / reconstruct from methodless JSON object.
                for (var i = 0; i < json.testSet.length; i++) {
                    this.testSet.push(new RecordedKeystrokeSequence(json.testSet[i]));
                }
            }
        }
        RecordedSequenceTestSet.prototype.addTest = function (seq) {
            this.testSet.push(seq);
        };
        // Used to determine if the current EventSpecTestSet is applicable to be run on a device.
        RecordedSequenceTestSet.prototype.isValidForDevice = function (device, usingOSK) {
            return this.constraint.matchesClient(device, usingOSK);
        };
        // Validity should be checked before calling this method.
        RecordedSequenceTestSet.prototype.test = function (proctor) {
            var failures = [];
            var testSet = this.testSet;
            for (var i = 0; i < testSet.length; i++) {
                var testSeq = this[i];
                var simResult = testSet[i].test(proctor);
                if (!simResult.success) {
                    // Failed test!
                    failures.push(new TestFailure(this.constraint, testSeq, simResult.result));
                }
            }
            return failures.length > 0 ? failures : null;
        };
        RecordedSequenceTestSet.prototype.toTestName = function () {
            var name = "constraint: for " + this.constraint.target;
            if (this.constraint.target == 'hardware') {
                name += " keyboard";
            }
            else {
                name += " OSK";
            }
            if (this.constraint.validOSList) {
                name += " on OS of " + JSON.stringify(this.constraint.validOSList);
            }
            if (this.constraint.validBrowsers) {
                name += " in browser of " + JSON.stringify(this.constraint.validBrowsers);
            }
            return name;
        };
        return RecordedSequenceTestSet;
    }());
    KMWRecorder.RecordedSequenceTestSet = RecordedSequenceTestSet;
    var KeyboardTest = /** @class */ (function () {
        /**
         * Reconstructs a KeyboardTest object from its JSON representation, restoring its methods.
         * @param fromJSON
         */
        function KeyboardTest(fromJSON) {
            /**
             * Indicates what version of KMW's recorder the spec conforms to.
             */
            this.specVersion = KeyboardTest.CURRENT_VERSION;
            if (!fromJSON) {
                this.keyboard = null;
                this.inputTestSets = [];
                return;
            }
            else if (typeof (fromJSON) == 'string') {
                fromJSON = JSON.parse(fromJSON);
            }
            else if (fromJSON instanceof KeyboardStub) {
                this.keyboard = fromJSON;
                this.inputTestSets = [];
                return;
            }
            if (!fromJSON.specVersion) {
                fromJSON.specVersion = KeyboardTest.FALLBACK_VERSION;
            }
            else {
                // Is serialized to a String when saved.
                fromJSON.specVersion = new com.keyman.utils.Version(fromJSON.specVersion);
            }
            this.keyboard = new KeyboardStub(fromJSON.keyboard);
            this.inputTestSets = [];
            this.specVersion = fromJSON.specVersion;
            if (this.specVersion.equals(KeyboardTest.FALLBACK_VERSION)) {
                // Top-level test spec:  EventSpecTestSet, based entirely on browser events.
                for (var i = 0; i < fromJSON.inputTestSets.length; i++) {
                    this.inputTestSets[i] = new EventSpecTestSet(fromJSON.inputTestSets[i]);
                }
            }
            else {
                for (var i = 0; i < fromJSON.inputTestSets.length; i++) {
                    this.inputTestSets[i] = new RecordedSequenceTestSet(fromJSON.inputTestSets[i]);
                }
            }
        }
        KeyboardTest.prototype.addTest = function (constraint, seq) {
            if (!this.specVersion.equals(KeyboardTest.CURRENT_VERSION)) {
                throw new Error("The currently-loaded test was built to an outdated specification and may not be altered.");
            }
            for (var i = 0; i < this.inputTestSets.length; i++) {
                if (this.inputTestSets[i].constraint.equals(constraint)) {
                    this.inputTestSets[i].addTest(seq);
                    return;
                }
            }
            var newSet = new RecordedSequenceTestSet(new Constraint(constraint));
            this.inputTestSets.push(newSet);
            newSet.addTest(seq);
        };
        KeyboardTest.prototype.test = function (proctor) {
            var setHasRun = false;
            var failures = [];
            proctor.beforeAll();
            // The original test spec requires a browser environment and thus requires its own `.run` implementation.
            if (!(proctor.compatibleWithSuite(this))) {
                throw Error("Cannot perform version " + KeyboardTest.FALLBACK_VERSION + "-based testing outside of browser-based environments.");
            }
            // Otherwise, the test spec instances will know how to run in any currently-supported environment.
            for (var i = 0; i < this.inputTestSets.length; i++) {
                var testSet = this.inputTestSets[i];
                if (proctor.matchesTestSet(testSet)) {
                    var testFailures = testSet.test(proctor);
                    if (testFailures) {
                        failures = failures.concat(testFailures);
                    }
                    setHasRun = true;
                }
            }
            if (!setHasRun) {
                // The sets CAN be empty, allowing silent failure if/when we actually want that.
                console.warn("No test sets for this keyboard were applicable for this device!");
            }
            // Allow the method's caller to trigger a 'fail'.
            if (failures.length > 0) {
                return failures;
            }
            else {
                return null;
            }
        };
        KeyboardTest.prototype.isEmpty = function () {
            return this.inputTestSets.length == 0;
        };
        KeyboardTest.prototype.toPrettyJSON = function () {
            return JSON.stringify(this, null, '  ');
        };
        Object.defineProperty(KeyboardTest.prototype, "isLegacy", {
            get: function () {
                return !this.specVersion.equals(KeyboardTest.CURRENT_VERSION);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * The version of KMW in which the Recorder was first written.  Worked from 10.0 to 13.0 with
         * only backward-compatible changes and minor tweaks to conform to internal API shifts.
         */
        KeyboardTest.FALLBACK_VERSION = new com.keyman.utils.Version("10.0");
        KeyboardTest.CURRENT_VERSION = new com.keyman.utils.Version("14.0");
        return KeyboardTest;
    }());
    KMWRecorder.KeyboardTest = KeyboardTest;
})(KMWRecorder || (KMWRecorder = {}));
//# sourceMappingURL=data:application/json;base64,