'use strict';
//Autogenerated file - do not modify!
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var environment;
        (function (environment) {
            environment.VERSION = "15.0";
            environment.BUILD = 163;
            environment.ENVIRONMENT = "local";
            environment.SENTRY_RELEASE = "release-15.0.163-alpha-local";
        })(environment = keyman.environment || (keyman.environment = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            /**
             * Function     deepCopy
             * Scope        Private
             * @param       {Object}      p           object to copy
             * @param       {Array=}      c0          array member being copied
             * @return      {Object}                  clone ('deep copy') of object
             * Description  Makes an actual copy (not a reference) of an object, copying simple members,
             *              arrays and member objects but not functions, so use with care!
             */
            function deepCopy(p, c0) {
                var c = c0 || {};
                for (var i in p) {
                    if (typeof p[i] === 'object' && p[i] != null) {
                        c[i] = (p[i].constructor === Array) ? [] : {};
                        deepCopy(p[i], c[i]);
                    }
                    else {
                        c[i] = p[i];
                    }
                }
                return c;
            }
            utils.deepCopy = deepCopy;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            /**
             * Returns the base global object available to the current JS platform.
             * - In browsers, returns `window`.
             * - In WebWorkers, returns `self`.
             * - In Node, returns `global`.
             */
            function getGlobalObject() {
                // Evergreen browsers have started defining 'globalThis'.  
                // Refer to https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#type-checking-for-globalthis
                // and its referenced polyfill.  Said polyfill is very complex, so we opt for this far leaner variant.
                if (typeof globalThis != 'undefined') {
                    return globalThis; // Not available in IE or older Edge versions
                    // @ts-ignore (TS will throw errors for whatever platform we're not compiling for.)
                }
                else if (typeof window != 'undefined') {
                    // @ts-ignore
                    return window; // The browser-based classic
                    // @ts-ignore
                }
                else if (typeof self != 'undefined') {
                    // @ts-ignore
                    return self; // WebWorker global
                }
                else {
                    // Assumption - if neither of the above exist, we're in Node, for unit-testing.
                    // Node doesn't have as many methods and properties as the other two, but what 
                    // matters for us is that it's the base global.
                    //
                    // Some other headless JS solutions use 'this' instead, but Node's enough for our needs.
                    // @ts-ignore
                    return global;
                }
            }
            utils.getGlobalObject = getGlobalObject;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Ensure that this class contains no reference into core KMW code - it is referenced
// by components intended to be modular and possible to separate from core KMW.
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            // Dotted-decimal version
            var Version = /** @class */ (function () {
                /**
                 * Parses version information, preparing it for use in comparisons.
                 * @param text Either a string representing a version number (ex: "9.0.0") or an array representing
                 *             its components (ex: [9, 0, 0]).
                 */
                function Version(text) {
                    // If a keyboard doesn't specify a version, use the DEVELOPER_VERSION_FALLBACK values.
                    if (text === undefined || text === null) {
                        this.components = [].concat(Version.DEVELOPER_VERSION_FALLBACK.components);
                        return;
                    }
                    if (Array.isArray(text)) {
                        var components = text;
                        if (components.length < 2) {
                            throw new Error("Version string must have at least a major and minor component!");
                        }
                        else {
                            this.components = [].concat(components);
                            return;
                        }
                    }
                    // else, standard constructor path.
                    var parts = text.split('.');
                    var componentArray = [];
                    if (parts.length < 2) {
                        throw new Error("Version string must have at least a major and minor component!");
                    }
                    for (var i = 0; i < parts.length; i++) {
                        var value = parseInt(parts[i], 10);
                        if (isNaN(value)) {
                            throw new Error("Version string components must be numerical!");
                        }
                        componentArray.push(value);
                    }
                    this.components = componentArray;
                }
                Object.defineProperty(Version.prototype, "major", {
                    get: function () {
                        return this.components[0];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Version.prototype, "minor", {
                    get: function () {
                        return this.components[1];
                    },
                    enumerable: true,
                    configurable: true
                });
                Version.prototype.toString = function () {
                    return this.components.join('.');
                };
                Version.prototype.toJSON = function () {
                    return this.toString();
                };
                Version.prototype.equals = function (other) {
                    return this.compareTo(other) == 0;
                };
                Version.prototype.precedes = function (other) {
                    return this.compareTo(other) < 0;
                };
                Version.prototype.compareTo = function (other) {
                    // If the version info depth differs, we need a flag to indicate which instance is shorter.
                    var isShorter = this.components.length < other.components.length;
                    var maxDepth = (this.components.length < other.components.length) ? this.components.length : other.components.length;
                    var i;
                    for (i = 0; i < maxDepth; i++) {
                        var delta = this.components[i] - other.components[i];
                        if (delta != 0) {
                            return delta;
                        }
                    }
                    var longList = isShorter ? other.components : this.components;
                    do {
                        if (longList[i] > 0) {
                            return isShorter ? -1 : 1;
                        }
                        i++;
                    } while (i < longList.length);
                    // Equal.
                    return 0;
                };
                Version.CURRENT = new Version(com.keyman.environment.VERSION);
                // Represents a default version value for keyboards compiled before this was compiled into keyboards.
                // The exact version is unknown at this point, but the value is "good enough" for what we need.
                Version.DEVELOPER_VERSION_FALLBACK = new Version([9, 0, 0]);
                // For 12.0, the old default behavior of adding missing keycaps to the default layers was removed,
                // as it results in unexpected, bug-like behavior for keyboard designers when it is unwanted.
                Version.NO_DEFAULT_KEYCAPS = new Version([12, 0]);
                Version.MAC_POSSIBLE_IPAD_ALIAS = new Version([10, 15]);
                return Version;
            }());
            utils.Version = Version;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/***
   KeymanWeb 14.0
   Copyright 2020 SIL International
***/
/**
 * Constructs a string from one or more Unicode character codepoint values
 * passed as integer parameters.
 *
 * @param  {number} cp0,...   1 or more Unicode codepoints, e.g. 0x0065, 0x10000
 * @return {string|null}      The new String object.
 */
String.kmwFromCharCode = function (cp0) {
    var chars = [], i;
    for (i = 0; i < arguments.length; i++) {
        var c = Number(arguments[i]);
        if (!isFinite(c) || c < 0 || c > 0x10FFFF || Math.floor(c) !== c) {
            throw new RangeError("Invalid code point " + c);
        }
        if (c < 0x10000) {
            chars.push(c);
        }
        else {
            c -= 0x10000;
            chars.push((c >> 10) + 0xD800);
            chars.push((c % 0x400) + 0xDC00);
        }
    }
    return String.fromCharCode.apply(undefined, chars);
};
/**
 * Returns a number indicating the Unicode value of the character at the given
 * code point index, with support for supplementary plane characters.
 *
 * @param  {number}  codePointIndex  The code point index into the string (not
                                     the code unit index) to return
 * @return {number}                  The Unicode character value
 */
String.prototype.kmwCharCodeAt = function (codePointIndex) {
    var str = String(this);
    var codeUnitIndex = 0;
    if (codePointIndex < 0 || codePointIndex >= str.length) {
        return NaN;
    }
    for (var i = 0; i < codePointIndex; i++) {
        codeUnitIndex = str.kmwNextChar(codeUnitIndex);
        if (codeUnitIndex === null)
            return NaN;
    }
    var first = str.charCodeAt(codeUnitIndex);
    if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {
        var second = str.charCodeAt(codeUnitIndex + 1);
        if (second >= 0xDC00 && second <= 0xDFFF) {
            return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;
        }
    }
    return first;
};
/**
 * Returns the code point index within the calling String object of the first occurrence
 * of the specified value, or -1 if not found.
 *
 * @param  {string}  searchValue    The value to search for
 * @param  {number}  [fromIndex]    Optional code point index to start searching from
 * @return {number}                 The code point index of the specified search value
 */
String.prototype.kmwIndexOf = function (searchValue, fromIndex) {
    var str = String(this);
    var codeUnitIndex = str.indexOf(searchValue, fromIndex);
    if (codeUnitIndex < 0) {
        return codeUnitIndex;
    }
    var codePointIndex = 0;
    for (var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i))
        codePointIndex++;
    return codePointIndex;
};
/**
 * Returns the code point index within the calling String object of the last occurrence
 * of the specified value, or -1 if not found.
 *
 * @param  {string}  searchValue    The value to search for
 * @param  {number}  fromIndex      Optional code point index to start searching from
 * @return {number}                 The code point index of the specified search value
 */
String.prototype.kmwLastIndexOf = function (searchValue, fromIndex) {
    var str = String(this);
    var codeUnitIndex = str.lastIndexOf(searchValue, fromIndex);
    if (codeUnitIndex < 0) {
        return codeUnitIndex;
    }
    var codePointIndex = 0;
    for (var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i))
        codePointIndex++;
    return codePointIndex;
};
/**
 * Returns the length of the string in code points, as opposed to code units.
 *
 * @return {number}                 The length of the string in code points
 */
String.prototype.kmwLength = function () {
    var str = String(this);
    if (str.length == 0)
        return 0;
    for (var i = 0, codeUnitIndex = 0; codeUnitIndex !== null; i++)
        codeUnitIndex = str.kmwNextChar(codeUnitIndex);
    return i;
};
/**
 * Extracts a section of a string and returns a new string.
 *
 * @param  {number}  beginSlice    The start code point index in the string to
 *                                 extract from
 * @param  {number}  endSlice      Optional end code point index in the string
 *                                 to extract to
 * @return {string}                The substring as selected by beginSlice and
 *                                 endSlice
 */
String.prototype.kmwSlice = function (beginSlice, endSlice) {
    var str = String(this);
    var beginSliceCodeUnit = str.kmwCodePointToCodeUnit(beginSlice);
    var endSliceCodeUnit = str.kmwCodePointToCodeUnit(endSlice);
    if (beginSliceCodeUnit === null || endSliceCodeUnit === null)
        return '';
    else
        return str.slice(beginSliceCodeUnit, endSliceCodeUnit);
};
/**
 * Returns the characters in a string beginning at the specified location through
 * the specified number of characters.
 *
 * @param  {number}  start         The start code point index in the string to
 *                                 extract from
 * @param  {number=}  length        Optional length to extract
 * @return {string}                The substring as selected by start and length
 */
String.prototype.kmwSubstr = function (start, length) {
    var str = String(this);
    if (start < 0) {
        start = str.kmwLength() + start;
    }
    if (start < 0)
        start = 0;
    var startCodeUnit = str.kmwCodePointToCodeUnit(start);
    var endCodeUnit = startCodeUnit;
    if (startCodeUnit === null)
        return '';
    if (arguments.length < 2) {
        endCodeUnit = str.length;
    }
    else {
        for (var i = 0; i < length; i++)
            endCodeUnit = str.kmwNextChar(endCodeUnit);
    }
    if (endCodeUnit === null)
        return str.substring(startCodeUnit);
    else
        return str.substring(startCodeUnit, endCodeUnit);
};
/**
 * Returns the characters in a string between two indexes into the string.
 *
 * @param  {number}  indexA        The start code point index in the string to
 *                                 extract from
 * @param  {number}  indexB        The end code point index in the string to
 *                                 extract to
 * @return {string}                The substring as selected by indexA and indexB
 */
String.prototype.kmwSubstring = function (indexA, indexB) {
    var str = String(this), indexACodeUnit, indexBCodeUnit;
    if (typeof (indexB) == 'undefined') {
        indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);
        indexBCodeUnit = str.length;
    }
    else {
        if (indexA > indexB) {
            var c = indexA;
            indexA = indexB;
            indexB = c;
        }
        indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);
        indexBCodeUnit = str.kmwCodePointToCodeUnit(indexB);
    }
    if (isNaN(indexACodeUnit) || indexACodeUnit === null)
        indexACodeUnit = 0;
    if (isNaN(indexBCodeUnit) || indexBCodeUnit === null)
        indexBCodeUnit = str.length;
    return str.substring(indexACodeUnit, indexBCodeUnit);
};
/*
  Helper functions
*/
/**
 * Returns the code unit index for the next code point in the string, accounting for
 * supplementary pairs
 *
 * @param  {number|null}  codeUnitIndex  The code unit position to increment
 * @return {number|null}                 The index of the next code point in the string,
 *                                       in code units
 */
String.prototype.kmwNextChar = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex === null || codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {
        return null;
    }
    var first = str.charCodeAt(codeUnitIndex);
    if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {
        var second = str.charCodeAt(codeUnitIndex + 1);
        if (second >= 0xDC00 && second <= 0xDFFF) {
            if (codeUnitIndex == str.length - 2) {
                return null;
            }
            return codeUnitIndex + 2;
        }
    }
    return codeUnitIndex + 1;
};
/**
 * Returns the code unit index for the previous code point in the string, accounting
 * for supplementary pairs
 *
 * @param  {number|null}  codeUnitIndex  The code unit position to decrement
 * @return {number|null}                 The index of the previous code point in the
 *                                       string, in code units
*/
String.prototype.kmwPrevChar = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex == null || codeUnitIndex <= 0 || codeUnitIndex > str.length) {
        return null;
    }
    var second = str.charCodeAt(codeUnitIndex - 1);
    if (second >= 0xDC00 && second <= 0xDFFF && codeUnitIndex > 1) {
        var first = str.charCodeAt(codeUnitIndex - 2);
        if (first >= 0xD800 && first <= 0xDBFF) {
            return codeUnitIndex - 2;
        }
    }
    return codeUnitIndex - 1;
};
/**
 * Returns the corresponding code unit index to the code point index passed
 *
 * @param  {number|null} codePointIndex  A code point index in the string
 * @return {number|null}                 The corresponding code unit index
 */
String.prototype.kmwCodePointToCodeUnit = function (codePointIndex) {
    if (codePointIndex === null)
        return null;
    var str = String(this);
    var codeUnitIndex = 0;
    if (codePointIndex < 0) {
        codeUnitIndex = str.length;
        for (var i = 0; i > codePointIndex; i--)
            codeUnitIndex = str.kmwPrevChar(codeUnitIndex);
        return codeUnitIndex;
    }
    if (codePointIndex == str.kmwLength())
        return str.length;
    for (var i = 0; i < codePointIndex; i++)
        codeUnitIndex = str.kmwNextChar(codeUnitIndex);
    return codeUnitIndex;
};
/**
 * Returns the corresponding code point index to the code unit index passed
 *
 * @param  {number|null}  codeUnitIndex  A code unit index in the string
 * @return {number|null}                 The corresponding code point index
 */
String.prototype.kmwCodeUnitToCodePoint = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex === null)
        return null;
    else if (codeUnitIndex == 0)
        return 0;
    else if (codeUnitIndex < 0)
        return str.substr(codeUnitIndex).kmwLength();
    else
        return str.substr(0, codeUnitIndex).kmwLength();
};
/**
 * Returns the character at a the code point index passed
 *
 * @param  {number}  codePointIndex  A code point index in the string
 * @return {string}                  The corresponding character
 */
String.prototype.kmwCharAt = function (codePointIndex) {
    var str = String(this);
    if (codePointIndex >= 0)
        return str.kmwSubstr(codePointIndex, 1);
    else
        return '';
};
/**
 * String prototype library extensions for basic plane characters,
 * to simplify enabling or disabling supplementary plane functionality (I3319)
 */
/**
 * Returns the code unit index for the next code point in the string
 *
 * @param  {number}  codeUnitIndex    A code point index in the string
 * @return {number|null}                   The corresponding character
 */
String.prototype.kmwBMPNextChar = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {
        return null;
    }
    return codeUnitIndex + 1;
};
/**
 * Returns the code unit index for the previous code point in the string
 *
 * @param  {number}  codeUnitIndex    A code unit index in the string
 * @return {number|null}                   The corresponding character
 */
String.prototype.kmwBMPPrevChar = function (codeUnitIndex) {
    var str = String(this);
    if (codeUnitIndex <= 0 || codeUnitIndex > str.length) {
        return null;
    }
    return codeUnitIndex - 1;
};
/**
 * Returns the code unit index for a code point index
 *
 * @param  {number}  codePointIndex   A code point index in the string
 * @return {number}                   The corresponding character
 */
String.prototype.kmwBMPCodePointToCodeUnit = function (codePointIndex) {
    return codePointIndex;
};
/**
 * Returns the code point index for a code unit index
 *
 * @param  {number}  codeUnitIndex    A code point index in the string
 * @return {number}                   The corresponding character
 */
String.prototype.kmwBMPCodeUnitToCodePoint = function (codeUnitIndex) {
    return codeUnitIndex;
};
/**
 * Returns the length of a BMP string
 *
 * @return {number}                   The length in code points
 */
String.prototype.kmwBMPLength = function () {
    var str = String(this);
    return str.length;
};
/**
 * Returns a substring
 *
 * @param  {number}  n
 * @param  {number=}  ln
 * @return {string}
 */
String.prototype.kmwBMPSubstr = function (n, ln) {
    var str = String(this);
    if (n > -1)
        return str.substr(n, ln);
    else
        return str.substr(str.length + n, -n);
};
/**
 * Enable or disable supplementary plane string handling
 *
 * @param  {boolean}  bEnable
 */
String.kmwEnableSupplementaryPlane = function (bEnable) {
    var p = String.prototype;
    String._kmwFromCharCode = bEnable ? String.kmwFromCharCode : String.fromCharCode;
    p._kmwCharAt = bEnable ? p.kmwCharAt : p.charAt;
    p._kmwCharCodeAt = bEnable ? p.kmwCharCodeAt : p.charCodeAt;
    p._kmwIndexOf = bEnable ? p.kmwIndexOf : p.indexOf;
    p._kmwLastIndexOf = bEnable ? p.kmwLastIndexOf : p.lastIndexOf;
    p._kmwSlice = bEnable ? p.kmwSlice : p.slice;
    p._kmwSubstring = bEnable ? p.kmwSubstring : p.substring;
    p._kmwSubstr = bEnable ? p.kmwSubstr : p.kmwBMPSubstr;
    p._kmwLength = bEnable ? p.kmwLength : p.kmwBMPLength;
    p._kmwNextChar = bEnable ? p.kmwNextChar : p.kmwBMPNextChar;
    p._kmwPrevChar = bEnable ? p.kmwPrevChar : p.kmwBMPPrevChar;
    p._kmwCodePointToCodeUnit = bEnable ? p.kmwCodePointToCodeUnit : p.kmwBMPCodePointToCodeUnit;
    p._kmwCodeUnitToCodePoint = bEnable ? p.kmwCodeUnitToCodePoint : p.kmwBMPCodeUnitToCodePoint;
};
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            var Browser;
            (function (Browser) {
                Browser["Chrome"] = "chrome";
                Browser["Edge"] = "edge";
                Browser["Firefox"] = "firefox";
                Browser["Native"] = "native";
                Browser["Opera"] = "opera";
                Browser["Safari"] = "safari";
                Browser["Other"] = "other";
            })(Browser = utils.Browser || (utils.Browser = {}));
            var OperatingSystem;
            (function (OperatingSystem) {
                OperatingSystem["Windows"] = "windows";
                OperatingSystem["macOS"] = "macosx";
                OperatingSystem["Linux"] = "linux";
                OperatingSystem["Android"] = "android";
                OperatingSystem["iOS"] = "ios";
                OperatingSystem["Other"] = "other";
            })(OperatingSystem = utils.OperatingSystem || (utils.OperatingSystem = {}));
            var FormFactor;
            (function (FormFactor) {
                FormFactor["Desktop"] = "desktop";
                FormFactor["Phone"] = "phone";
                FormFactor["Tablet"] = "tablet";
            })(FormFactor = utils.FormFactor || (utils.FormFactor = {}));
            /**
             * This class provides an abstract version of com.keyman.Device that is core-friendly,
             * containing only the information needed by web-core for text processing use, devoid
             * of any direct references to the DOM.
             */
            var DeviceSpec = /** @class */ (function () {
                function DeviceSpec(browser, formFactor, OS, touchable) {
                    switch (browser.toLowerCase()) {
                        case Browser.Chrome:
                        case Browser.Edge:
                        case Browser.Firefox:
                        case Browser.Native:
                        case Browser.Opera:
                        case Browser.Safari:
                            this.browser = browser.toLowerCase();
                            break;
                        default:
                            this.browser = Browser.Other;
                    }
                    switch (formFactor.toLowerCase()) {
                        case FormFactor.Desktop:
                        case FormFactor.Phone:
                        case FormFactor.Tablet:
                            this.formFactor = formFactor.toLowerCase();
                            break;
                        default:
                            throw ("Invalid form factor specified for device: " + formFactor);
                    }
                    switch (OS.toLowerCase()) {
                        case OperatingSystem.Windows.toLowerCase():
                        case OperatingSystem.macOS.toLowerCase():
                        case OperatingSystem.Linux.toLowerCase():
                        case OperatingSystem.Android.toLowerCase():
                        case OperatingSystem.iOS.toLowerCase():
                            this.OS = OS.toLowerCase();
                            break;
                        default:
                            this.OS = OperatingSystem.Other;
                    }
                    this.touchable = touchable;
                }
                return DeviceSpec;
            }());
            utils.DeviceSpec = DeviceSpec;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// References all utility includes from a single file, making import/export simple.
///<reference path="deepCopy.ts" />
///<reference path="globalObject.ts" />
///<reference path="version.ts" />
///<reference path="kmwstring.ts" />
///<reference path="deviceSpec.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            var prediction;
            (function (prediction) {
                var DefaultWorker = /** @class */ (function () {
                    function DefaultWorker() {
                    }
                    DefaultWorker.constructInstance = function () {
                        return new Worker(this.asBlobURI(LMLayerWorkerCode));
                    };
                    /**
                     * Converts the INSIDE of a function into a blob URI that can
                     * be passed as a valid URI for a Worker.
                     * @param fn Function whose body will be referenced by a URI.
                     *
                     * This function makes the following possible:
                     *
                     *    let worker = new Worker(LMLayer.asBlobURI(function myWorkerCode () {
                     *      postMessage('inside Web Worker')
                     *      function onmessage(event) {
                     *        // handle message inside Web Worker.
                     *      }
                     *    }));
                     */
                    DefaultWorker.asBlobURI = function (fn) {
                        var code = prediction.LMLayer.unwrap(fn);
                        var blob = new Blob([code], { type: 'text/javascript' });
                        return URL.createObjectURL(blob);
                    };
                    return DefaultWorker;
                }());
                prediction.DefaultWorker = DefaultWorker;
            })(prediction = text.prediction || (text.prediction = {}));
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var AttachmentInfo = /** @class */ (function () {
            function AttachmentInfo(eleInterface, kbd, touch) {
                this.interface = eleInterface;
                this.keyboard = kbd;
                this.touchEnabled = touch || false;
            }
            return AttachmentInfo;
        }());
        keyman.AttachmentInfo = AttachmentInfo;
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Defines a number of KMW objects.
/// <reference path="kmwtypedefs.ts"/>
/*!
 * https://github.com/paulmillr/es6-shim
 * @license es6-shim Copyright 2013-2016 by Paul Miller (http://paulmillr.com)
 *   and contributors,  MIT License
 * es6-shim: v0.35.4
 * see https://github.com/paulmillr/es6-shim/blob/0.35.3/LICENSE
 * Details and documentation:
 * https://github.com/paulmillr/es6-shim/
 */
(function (e, t) { if (typeof define === "function" && define.amd) {
    define(t);
}
else if (typeof exports === "object") {
    module.exports = t();
}
else {
    e.returnExports = t();
} })(this, function () {
    "use strict";
    var e = Function.call.bind(Function.apply);
    var t = Function.call.bind(Function.call);
    var r = Array.isArray;
    var n = Object.keys;
    var o = function notThunker(t) { return function notThunk() { return !e(t, this, arguments); }; };
    var i = function (e) { try {
        e();
        return false;
    }
    catch (t) {
        return true;
    } };
    var a = function valueOrFalseIfThrows(e) { try {
        return e();
    }
    catch (t) {
        return false;
    } };
    var u = o(i);
    var f = function () { return !i(function () { return Object.defineProperty({}, "x", { get: function () { } }); }); };
    var s = !!Object.defineProperty && f();
    var c = function foo() { }.name === "foo";
    var l = Function.call.bind(Array.prototype.forEach);
    var p = Function.call.bind(Array.prototype.reduce);
    var v = Function.call.bind(Array.prototype.filter);
    var y = Function.call.bind(Array.prototype.some);
    var h = function (e, t, r, n) { if (!n && t in e) {
        return;
    } if (s) {
        Object.defineProperty(e, t, { configurable: true, enumerable: false, writable: true, value: r });
    }
    else {
        e[t] = r;
    } };
    var b = function (e, t, r) { l(n(t), function (n) { var o = t[n]; h(e, n, o, !!r); }); };
    var g = Function.call.bind(Object.prototype.toString);
    var d = typeof /abc/ === "function" ? function IsCallableSlow(e) { return typeof e === "function" && g(e) === "[object Function]"; } : function IsCallableFast(e) { return typeof e === "function"; };
    var m = { getter: function (e, t, r) { if (!s) {
            throw new TypeError("getters require true ES5 support");
        } Object.defineProperty(e, t, { configurable: true, enumerable: false, get: r }); }, proxy: function (e, t, r) { if (!s) {
            throw new TypeError("getters require true ES5 support");
        } var n = Object.getOwnPropertyDescriptor(e, t); Object.defineProperty(r, t, { configurable: n.configurable, enumerable: n.enumerable, get: function getKey() { return e[t]; }, set: function setKey(r) { e[t] = r; } }); }, redefine: function (e, t, r) { if (s) {
            var n = Object.getOwnPropertyDescriptor(e, t);
            n.value = r;
            Object.defineProperty(e, t, n);
        }
        else {
            e[t] = r;
        } }, defineByDescriptor: function (e, t, r) { if (s) {
            Object.defineProperty(e, t, r);
        }
        else if ("value" in r) {
            e[t] = r.value;
        } }, preserveToString: function (e, t) { if (t && d(t.toString)) {
            h(e, "toString", t.toString.bind(t), true);
        } } };
    var O = Object.create || function (e, t) { var r = function Prototype() { }; r.prototype = e; var o = new r; if (typeof t !== "undefined") {
        n(t).forEach(function (e) { m.defineByDescriptor(o, e, t[e]); });
    } return o; };
    var w = function (e, t) { if (!Object.setPrototypeOf) {
        return false;
    } return a(function () { var r = function Subclass(t) { var r = new e(t); Object.setPrototypeOf(r, Subclass.prototype); return r; }; Object.setPrototypeOf(r, e); r.prototype = O(e.prototype, { constructor: { value: r } }); return t(r); }); };
    var j = function () { if (typeof self !== "undefined") {
        return self;
    } if (typeof window !== "undefined") {
        return window;
    } if (typeof global !== "undefined") {
        return global;
    } throw new Error("unable to locate global object"); };
    var S = j();
    var T = S.isFinite;
    var I = Function.call.bind(String.prototype.indexOf);
    var E = Function.apply.bind(Array.prototype.indexOf);
    var P = Function.call.bind(Array.prototype.concat);
    var C = Function.call.bind(String.prototype.slice);
    var M = Function.call.bind(Array.prototype.push);
    var x = Function.apply.bind(Array.prototype.push);
    var N = Function.call.bind(Array.prototype.shift);
    var A = Math.max;
    var R = Math.min;
    var _ = Math.floor;
    var k = Math.abs;
    var L = Math.exp;
    var F = Math.log;
    var D = Math.sqrt;
    var z = Function.call.bind(Object.prototype.hasOwnProperty);
    var q;
    var W = function () { };
    var G = S.Map;
    var H = G && G.prototype["delete"];
    var V = G && G.prototype.get;
    var B = G && G.prototype.has;
    var U = G && G.prototype.set;
    var $ = S.Symbol || {};
    var J = $.species || "@@species";
    var X = Number.isNaN || function isNaN(e) { return e !== e; };
    var K = Number.isFinite || function isFinite(e) { return typeof e === "number" && T(e); };
    var Z = d(Math.sign) ? Math.sign : function sign(e) { var t = Number(e); if (t === 0) {
        return t;
    } if (X(t)) {
        return t;
    } return t < 0 ? -1 : 1; };
    var Y = function log1p(e) { var t = Number(e); if (t < -1 || X(t)) {
        return NaN;
    } if (t === 0 || t === Infinity) {
        return t;
    } if (t === -1) {
        return -Infinity;
    } return 1 + t - 1 === 0 ? t : t * (F(1 + t) / (1 + t - 1)); };
    var Q = function isArguments(e) { return g(e) === "[object Arguments]"; };
    var ee = function isArguments(e) { return e !== null && typeof e === "object" && typeof e.length === "number" && e.length >= 0 && g(e) !== "[object Array]" && g(e.callee) === "[object Function]"; };
    var te = Q(arguments) ? Q : ee;
    var re = { primitive: function (e) { return e === null || typeof e !== "function" && typeof e !== "object"; }, string: function (e) { return g(e) === "[object String]"; }, regex: function (e) { return g(e) === "[object RegExp]"; }, symbol: function (e) { return typeof S.Symbol === "function" && typeof e === "symbol"; } };
    var ne = function overrideNative(e, t, r) { var n = e[t]; h(e, t, r, true); m.preserveToString(e[t], n); };
    var oe = typeof $ === "function" && typeof $["for"] === "function" && re.symbol($());
    var ie = re.symbol($.iterator) ? $.iterator : "_es6-shim iterator_";
    if (S.Set && typeof (new S.Set)["@@iterator"] === "function") {
        ie = "@@iterator";
    }
    if (!S.Reflect) {
        h(S, "Reflect", {}, true);
    }
    var ae = S.Reflect;
    var ue = String;
    var fe = typeof document === "undefined" || !document ? null : document.all;
    var se = fe == null ? function isNullOrUndefined(e) { return e == null; } : function isNullOrUndefinedAndNotDocumentAll(e) { return e == null && e !== fe; };
    var ce = { Call: function Call(t, r) { var n = arguments.length > 2 ? arguments[2] : []; if (!ce.IsCallable(t)) {
            throw new TypeError(t + " is not a function");
        } return e(t, r, n); }, RequireObjectCoercible: function (e, t) { if (se(e)) {
            throw new TypeError(t || "Cannot call method on " + e);
        } return e; }, TypeIsObject: function (e) { if (e === void 0 || e === null || e === true || e === false) {
            return false;
        } return typeof e === "function" || typeof e === "object" || e === fe; }, ToObject: function (e, t) { return Object(ce.RequireObjectCoercible(e, t)); }, IsCallable: d, IsConstructor: function (e) { return ce.IsCallable(e); }, ToInt32: function (e) { return ce.ToNumber(e) >> 0; }, ToUint32: function (e) { return ce.ToNumber(e) >>> 0; }, ToNumber: function (e) { if (g(e) === "[object Symbol]") {
            throw new TypeError("Cannot convert a Symbol value to a number");
        } return +e; }, ToInteger: function (e) { var t = ce.ToNumber(e); if (X(t)) {
            return 0;
        } if (t === 0 || !K(t)) {
            return t;
        } return (t > 0 ? 1 : -1) * _(k(t)); }, ToLength: function (e) { var t = ce.ToInteger(e); if (t <= 0) {
            return 0;
        } if (t > Number.MAX_SAFE_INTEGER) {
            return Number.MAX_SAFE_INTEGER;
        } return t; }, SameValue: function (e, t) { if (e === t) {
            if (e === 0) {
                return 1 / e === 1 / t;
            }
            return true;
        } return X(e) && X(t); }, SameValueZero: function (e, t) { return e === t || X(e) && X(t); }, IsIterable: function (e) { return ce.TypeIsObject(e) && (typeof e[ie] !== "undefined" || te(e)); }, GetIterator: function (e) { if (te(e)) {
            return new q(e, "value");
        } var t = ce.GetMethod(e, ie); if (!ce.IsCallable(t)) {
            throw new TypeError("value is not an iterable");
        } var r = ce.Call(t, e); if (!ce.TypeIsObject(r)) {
            throw new TypeError("bad iterator");
        } return r; }, GetMethod: function (e, t) { var r = ce.ToObject(e)[t]; if (se(r)) {
            return void 0;
        } if (!ce.IsCallable(r)) {
            throw new TypeError("Method not callable: " + t);
        } return r; }, IteratorComplete: function (e) { return !!e.done; }, IteratorClose: function (e, t) { var r = ce.GetMethod(e, "return"); if (r === void 0) {
            return;
        } var n, o; try {
            n = ce.Call(r, e);
        }
        catch (i) {
            o = i;
        } if (t) {
            return;
        } if (o) {
            throw o;
        } if (!ce.TypeIsObject(n)) {
            throw new TypeError("Iterator's return method returned a non-object.");
        } }, IteratorNext: function (e) { var t = arguments.length > 1 ? e.next(arguments[1]) : e.next(); if (!ce.TypeIsObject(t)) {
            throw new TypeError("bad iterator");
        } return t; }, IteratorStep: function (e) { var t = ce.IteratorNext(e); var r = ce.IteratorComplete(t); return r ? false : t; }, Construct: function (e, t, r, n) { var o = typeof r === "undefined" ? e : r; if (!n && ae.construct) {
            return ae.construct(e, t, o);
        } var i = o.prototype; if (!ce.TypeIsObject(i)) {
            i = Object.prototype;
        } var a = O(i); var u = ce.Call(e, a, t); return ce.TypeIsObject(u) ? u : a; }, SpeciesConstructor: function (e, t) { var r = e.constructor; if (r === void 0) {
            return t;
        } if (!ce.TypeIsObject(r)) {
            throw new TypeError("Bad constructor");
        } var n = r[J]; if (se(n)) {
            return t;
        } if (!ce.IsConstructor(n)) {
            throw new TypeError("Bad @@species");
        } return n; }, CreateHTML: function (e, t, r, n) { var o = ce.ToString(e); var i = "<" + t; if (r !== "") {
            var a = ce.ToString(n);
            var u = a.replace(/"/g, "&quot;");
            i += " " + r + '="' + u + '"';
        } var f = i + ">"; var s = f + o; return s + "</" + t + ">"; }, IsRegExp: function IsRegExp(e) { if (!ce.TypeIsObject(e)) {
            return false;
        } var t = e[$.match]; if (typeof t !== "undefined") {
            return !!t;
        } return re.regex(e); }, ToString: function ToString(e) { return ue(e); } };
    if (s && oe) {
        var le = function defineWellKnownSymbol(e) { if (re.symbol($[e])) {
            return $[e];
        } var t = $["for"]("Symbol." + e); Object.defineProperty($, e, { configurable: false, enumerable: false, writable: false, value: t }); return t; };
        if (!re.symbol($.search)) {
            var pe = le("search");
            var ve = String.prototype.search;
            h(RegExp.prototype, pe, function search(e) { return ce.Call(ve, e, [this]); });
            var ye = function search(e) { var t = ce.RequireObjectCoercible(this); if (!se(e)) {
                var r = ce.GetMethod(e, pe);
                if (typeof r !== "undefined") {
                    return ce.Call(r, e, [t]);
                }
            } return ce.Call(ve, t, [ce.ToString(e)]); };
            ne(String.prototype, "search", ye);
        }
        if (!re.symbol($.replace)) {
            var he = le("replace");
            var be = String.prototype.replace;
            h(RegExp.prototype, he, function replace(e, t) { return ce.Call(be, e, [this, t]); });
            var ge = function replace(e, t) { var r = ce.RequireObjectCoercible(this); if (!se(e)) {
                var n = ce.GetMethod(e, he);
                if (typeof n !== "undefined") {
                    return ce.Call(n, e, [r, t]);
                }
            } return ce.Call(be, r, [ce.ToString(e), t]); };
            ne(String.prototype, "replace", ge);
        }
        if (!re.symbol($.split)) {
            var de = le("split");
            var me = String.prototype.split;
            h(RegExp.prototype, de, function split(e, t) { return ce.Call(me, e, [this, t]); });
            var Oe = function split(e, t) { var r = ce.RequireObjectCoercible(this); if (!se(e)) {
                var n = ce.GetMethod(e, de);
                if (typeof n !== "undefined") {
                    return ce.Call(n, e, [r, t]);
                }
            } return ce.Call(me, r, [ce.ToString(e), t]); };
            ne(String.prototype, "split", Oe);
        }
        var we = re.symbol($.match);
        var je = we && function () { var e = {}; e[$.match] = function () { return 42; }; return "a".match(e) !== 42; }();
        if (!we || je) {
            var Se = le("match");
            var Te = String.prototype.match;
            h(RegExp.prototype, Se, function match(e) { return ce.Call(Te, e, [this]); });
            var Ie = function match(e) { var t = ce.RequireObjectCoercible(this); if (!se(e)) {
                var r = ce.GetMethod(e, Se);
                if (typeof r !== "undefined") {
                    return ce.Call(r, e, [t]);
                }
            } return ce.Call(Te, t, [ce.ToString(e)]); };
            ne(String.prototype, "match", Ie);
        }
    }
    var Ee = function wrapConstructor(e, t, r) { m.preserveToString(t, e); if (Object.setPrototypeOf) {
        Object.setPrototypeOf(e, t);
    } if (s) {
        l(Object.getOwnPropertyNames(e), function (n) { if (n in W || r[n]) {
            return;
        } m.proxy(e, n, t); });
    }
    else {
        l(Object.keys(e), function (n) { if (n in W || r[n]) {
            return;
        } t[n] = e[n]; });
    } t.prototype = e.prototype; m.redefine(e.prototype, "constructor", t); };
    var Pe = function () { return this; };
    var Ce = function (e) { if (s && !z(e, J)) {
        m.getter(e, J, Pe);
    } };
    var Me = function (e, t) { var r = t || function iterator() { return this; }; h(e, ie, r); if (!e[ie] && re.symbol(ie)) {
        e[ie] = r;
    } };
    var xe = function createDataProperty(e, t, r) { if (s) {
        Object.defineProperty(e, t, { configurable: true, enumerable: true, writable: true, value: r });
    }
    else {
        e[t] = r;
    } };
    var Ne = function createDataPropertyOrThrow(e, t, r) { xe(e, t, r); if (!ce.SameValue(e[t], r)) {
        throw new TypeError("property is nonconfigurable");
    } };
    var Ae = function (e, t, r, n) { if (!ce.TypeIsObject(e)) {
        throw new TypeError("Constructor requires `new`: " + t.name);
    } var o = t.prototype; if (!ce.TypeIsObject(o)) {
        o = r;
    } var i = O(o); for (var a in n) {
        if (z(n, a)) {
            var u = n[a];
            h(i, a, u, true);
        }
    } return i; };
    if (String.fromCodePoint && String.fromCodePoint.length !== 1) {
        var Re = String.fromCodePoint;
        ne(String, "fromCodePoint", function fromCodePoint(e) { return ce.Call(Re, this, arguments); });
    }
    var _e = { fromCodePoint: function fromCodePoint(e) { var t = []; var r; for (var n = 0, o = arguments.length; n < o; n++) {
            r = Number(arguments[n]);
            if (!ce.SameValue(r, ce.ToInteger(r)) || r < 0 || r > 1114111) {
                throw new RangeError("Invalid code point " + r);
            }
            if (r < 65536) {
                M(t, String.fromCharCode(r));
            }
            else {
                r -= 65536;
                M(t, String.fromCharCode((r >> 10) + 55296));
                M(t, String.fromCharCode(r % 1024 + 56320));
            }
        } return t.join(""); }, raw: function raw(e) { var t = ce.ToObject(e, "bad callSite"); var r = ce.ToObject(t.raw, "bad raw value"); var n = r.length; var o = ce.ToLength(n); if (o <= 0) {
            return "";
        } var i = []; var a = 0; var u, f, s, c; while (a < o) {
            u = ce.ToString(a);
            s = ce.ToString(r[u]);
            M(i, s);
            if (a + 1 >= o) {
                break;
            }
            f = a + 1 < arguments.length ? arguments[a + 1] : "";
            c = ce.ToString(f);
            M(i, c);
            a += 1;
        } return i.join(""); } };
    if (String.raw && String.raw({ raw: { 0: "x", 1: "y", length: 2 } }) !== "xy") {
        ne(String, "raw", _e.raw);
    }
    b(String, _e);
    var ke = function repeat(e, t) { if (t < 1) {
        return "";
    } if (t % 2) {
        return repeat(e, t - 1) + e;
    } var r = repeat(e, t / 2); return r + r; };
    var Le = Infinity;
    var Fe = { repeat: function repeat(e) { var t = ce.ToString(ce.RequireObjectCoercible(this)); var r = ce.ToInteger(e); if (r < 0 || r >= Le) {
            throw new RangeError("repeat count must be less than infinity and not overflow maximum string size");
        } return ke(t, r); }, startsWith: function startsWith(e) { var t = ce.ToString(ce.RequireObjectCoercible(this)); if (ce.IsRegExp(e)) {
            throw new TypeError('Cannot call method "startsWith" with a regex');
        } var r = ce.ToString(e); var n; if (arguments.length > 1) {
            n = arguments[1];
        } var o = A(ce.ToInteger(n), 0); return C(t, o, o + r.length) === r; }, endsWith: function endsWith(e) { var t = ce.ToString(ce.RequireObjectCoercible(this)); if (ce.IsRegExp(e)) {
            throw new TypeError('Cannot call method "endsWith" with a regex');
        } var r = ce.ToString(e); var n = t.length; var o; if (arguments.length > 1) {
            o = arguments[1];
        } var i = typeof o === "undefined" ? n : ce.ToInteger(o); var a = R(A(i, 0), n); return C(t, a - r.length, a) === r; }, includes: function includes(e) { if (ce.IsRegExp(e)) {
            throw new TypeError('"includes" does not accept a RegExp');
        } var t = ce.ToString(e); var r; if (arguments.length > 1) {
            r = arguments[1];
        } return I(this, t, r) !== -1; }, codePointAt: function codePointAt(e) { var t = ce.ToString(ce.RequireObjectCoercible(this)); var r = ce.ToInteger(e); var n = t.length; if (r >= 0 && r < n) {
            var o = t.charCodeAt(r);
            var i = r + 1 === n;
            if (o < 55296 || o > 56319 || i) {
                return o;
            }
            var a = t.charCodeAt(r + 1);
            if (a < 56320 || a > 57343) {
                return o;
            }
            return (o - 55296) * 1024 + (a - 56320) + 65536;
        } } };
    if (String.prototype.includes && "a".includes("a", Infinity) !== false) {
        ne(String.prototype, "includes", Fe.includes);
    }
    if (String.prototype.startsWith && String.prototype.endsWith) {
        var De = i(function () { return "/a/".startsWith(/a/); });
        var ze = a(function () { return "abc".startsWith("a", Infinity) === false; });
        if (!De || !ze) {
            ne(String.prototype, "startsWith", Fe.startsWith);
            ne(String.prototype, "endsWith", Fe.endsWith);
        }
    }
    if (oe) {
        var qe = a(function () { var e = /a/; e[$.match] = false; return "/a/".startsWith(e); });
        if (!qe) {
            ne(String.prototype, "startsWith", Fe.startsWith);
        }
        var We = a(function () { var e = /a/; e[$.match] = false; return "/a/".endsWith(e); });
        if (!We) {
            ne(String.prototype, "endsWith", Fe.endsWith);
        }
        var Ge = a(function () { var e = /a/; e[$.match] = false; return "/a/".includes(e); });
        if (!Ge) {
            ne(String.prototype, "includes", Fe.includes);
        }
    }
    b(String.prototype, Fe);
    var He = ["\t\n\x0B\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003", "\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028", "\u2029\ufeff"].join("");
    var Ve = new RegExp("(^[" + He + "]+)|([" + He + "]+$)", "g");
    var Be = function trim() { return ce.ToString(ce.RequireObjectCoercible(this)).replace(Ve, ""); };
    var Ue = ["\x85", "\u200b", "\ufffe"].join("");
    var $e = new RegExp("[" + Ue + "]", "g");
    var Je = /^[-+]0x[0-9a-f]+$/i;
    var Xe = Ue.trim().length !== Ue.length;
    h(String.prototype, "trim", Be, Xe);
    var Ke = function (e) { return { value: e, done: arguments.length === 0 }; };
    var Ze = function (e) { ce.RequireObjectCoercible(e); this._s = ce.ToString(e); this._i = 0; };
    Ze.prototype.next = function () { var e = this._s; var t = this._i; if (typeof e === "undefined" || t >= e.length) {
        this._s = void 0;
        return Ke();
    } var r = e.charCodeAt(t); var n, o; if (r < 55296 || r > 56319 || t + 1 === e.length) {
        o = 1;
    }
    else {
        n = e.charCodeAt(t + 1);
        o = n < 56320 || n > 57343 ? 1 : 2;
    } this._i = t + o; return Ke(e.substr(t, o)); };
    Me(Ze.prototype);
    Me(String.prototype, function () { return new Ze(this); });
    var Ye = { from: function from(e) { var r = this; var n; if (arguments.length > 1) {
            n = arguments[1];
        } var o, i; if (typeof n === "undefined") {
            o = false;
        }
        else {
            if (!ce.IsCallable(n)) {
                throw new TypeError("Array.from: when provided, the second argument must be a function");
            }
            if (arguments.length > 2) {
                i = arguments[2];
            }
            o = true;
        } var a = typeof (te(e) || ce.GetMethod(e, ie)) !== "undefined"; var u, f, s; if (a) {
            f = ce.IsConstructor(r) ? Object(new r) : [];
            var c = ce.GetIterator(e);
            var l, p;
            s = 0;
            while (true) {
                l = ce.IteratorStep(c);
                if (l === false) {
                    break;
                }
                p = l.value;
                try {
                    if (o) {
                        p = typeof i === "undefined" ? n(p, s) : t(n, i, p, s);
                    }
                    f[s] = p;
                }
                catch (v) {
                    ce.IteratorClose(c, true);
                    throw v;
                }
                s += 1;
            }
            u = s;
        }
        else {
            var y = ce.ToObject(e);
            u = ce.ToLength(y.length);
            f = ce.IsConstructor(r) ? Object(new r(u)) : new Array(u);
            var h;
            for (s = 0; s < u; ++s) {
                h = y[s];
                if (o) {
                    h = typeof i === "undefined" ? n(h, s) : t(n, i, h, s);
                }
                Ne(f, s, h);
            }
        } f.length = u; return f; }, of: function of() { var e = arguments.length; var t = this; var n = r(t) || !ce.IsCallable(t) ? new Array(e) : ce.Construct(t, [e]); for (var o = 0; o < e; ++o) {
            Ne(n, o, arguments[o]);
        } n.length = e; return n; } };
    b(Array, Ye);
    Ce(Array);
    q = function (e, t) { this.i = 0; this.array = e; this.kind = t; };
    b(q.prototype, { next: function () { var e = this.i; var t = this.array; if (!(this instanceof q)) {
            throw new TypeError("Not an ArrayIterator");
        } if (typeof t !== "undefined") {
            var r = ce.ToLength(t.length);
            for (; e < r; e++) {
                var n = this.kind;
                var o;
                if (n === "key") {
                    o = e;
                }
                else if (n === "value") {
                    o = t[e];
                }
                else if (n === "entry") {
                    o = [e, t[e]];
                }
                this.i = e + 1;
                return Ke(o);
            }
        } this.array = void 0; return Ke(); } });
    Me(q.prototype);
    var Qe = Array.of === Ye.of || function () { var e = function Foo(e) { this.length = e; }; e.prototype = []; var t = Array.of.apply(e, [1, 2]); return t instanceof e && t.length === 2; }();
    if (!Qe) {
        ne(Array, "of", Ye.of);
    }
    var et = { copyWithin: function copyWithin(e, t) { var r = ce.ToObject(this); var n = ce.ToLength(r.length); var o = ce.ToInteger(e); var i = ce.ToInteger(t); var a = o < 0 ? A(n + o, 0) : R(o, n); var u = i < 0 ? A(n + i, 0) : R(i, n); var f; if (arguments.length > 2) {
            f = arguments[2];
        } var s = typeof f === "undefined" ? n : ce.ToInteger(f); var c = s < 0 ? A(n + s, 0) : R(s, n); var l = R(c - u, n - a); var p = 1; if (u < a && a < u + l) {
            p = -1;
            u += l - 1;
            a += l - 1;
        } while (l > 0) {
            if (u in r) {
                r[a] = r[u];
            }
            else {
                delete r[a];
            }
            u += p;
            a += p;
            l -= 1;
        } return r; }, fill: function fill(e) { var t; if (arguments.length > 1) {
            t = arguments[1];
        } var r; if (arguments.length > 2) {
            r = arguments[2];
        } var n = ce.ToObject(this); var o = ce.ToLength(n.length); t = ce.ToInteger(typeof t === "undefined" ? 0 : t); r = ce.ToInteger(typeof r === "undefined" ? o : r); var i = t < 0 ? A(o + t, 0) : R(t, o); var a = r < 0 ? o + r : r; for (var u = i; u < o && u < a; ++u) {
            n[u] = e;
        } return n; }, find: function find(e) { var r = ce.ToObject(this); var n = ce.ToLength(r.length); if (!ce.IsCallable(e)) {
            throw new TypeError("Array#find: predicate must be a function");
        } var o = arguments.length > 1 ? arguments[1] : null; for (var i = 0, a; i < n; i++) {
            a = r[i];
            if (o) {
                if (t(e, o, a, i, r)) {
                    return a;
                }
            }
            else if (e(a, i, r)) {
                return a;
            }
        } }, findIndex: function findIndex(e) { var r = ce.ToObject(this); var n = ce.ToLength(r.length); if (!ce.IsCallable(e)) {
            throw new TypeError("Array#findIndex: predicate must be a function");
        } var o = arguments.length > 1 ? arguments[1] : null; for (var i = 0; i < n; i++) {
            if (o) {
                if (t(e, o, r[i], i, r)) {
                    return i;
                }
            }
            else if (e(r[i], i, r)) {
                return i;
            }
        } return -1; }, keys: function keys() { return new q(this, "key"); }, values: function values() { return new q(this, "value"); }, entries: function entries() { return new q(this, "entry"); } };
    if (Array.prototype.keys && !ce.IsCallable([1].keys().next)) {
        delete Array.prototype.keys;
    }
    if (Array.prototype.entries && !ce.IsCallable([1].entries().next)) {
        delete Array.prototype.entries;
    }
    if (Array.prototype.keys && Array.prototype.entries && !Array.prototype.values && Array.prototype[ie]) {
        b(Array.prototype, { values: Array.prototype[ie] });
        if (re.symbol($.unscopables)) {
            Array.prototype[$.unscopables].values = true;
        }
    }
    if (c && Array.prototype.values && Array.prototype.values.name !== "values") {
        var tt = Array.prototype.values;
        ne(Array.prototype, "values", function values() { return ce.Call(tt, this, arguments); });
        h(Array.prototype, ie, Array.prototype.values, true);
    }
    b(Array.prototype, et);
    if (1 / [true].indexOf(true, -0) < 0) {
        h(Array.prototype, "indexOf", function indexOf(e) { var t = E(this, arguments); if (t === 0 && 1 / t < 0) {
            return 0;
        } return t; }, true);
    }
    Me(Array.prototype, function () { return this.values(); });
    if (Object.getPrototypeOf) {
        Me(Object.getPrototypeOf([].values()));
    }
    var rt = function () { return a(function () { return Array.from({ length: -1 }).length === 0; }); }();
    var nt = function () { var e = Array.from([0].entries()); return e.length === 1 && r(e[0]) && e[0][0] === 0 && e[0][1] === 0; }();
    if (!rt || !nt) {
        ne(Array, "from", Ye.from);
    }
    var ot = function () { return a(function () { return Array.from([0], void 0); }); }();
    if (!ot) {
        var it = Array.from;
        ne(Array, "from", function from(e) { if (arguments.length > 1 && typeof arguments[1] !== "undefined") {
            return ce.Call(it, this, arguments);
        }
        else {
            return t(it, this, e);
        } });
    }
    var at = -(Math.pow(2, 32) - 1);
    var ut = function (e, r) { var n = { length: at }; n[r ? (n.length >>> 0) - 1 : 0] = true; return a(function () { t(e, n, function () { throw new RangeError("should not reach here"); }, []); return true; }); };
    if (!ut(Array.prototype.forEach)) {
        var ft = Array.prototype.forEach;
        ne(Array.prototype, "forEach", function forEach(e) { return ce.Call(ft, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.map)) {
        var st = Array.prototype.map;
        ne(Array.prototype, "map", function map(e) { return ce.Call(st, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.filter)) {
        var ct = Array.prototype.filter;
        ne(Array.prototype, "filter", function filter(e) { return ce.Call(ct, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.some)) {
        var lt = Array.prototype.some;
        ne(Array.prototype, "some", function some(e) { return ce.Call(lt, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.every)) {
        var pt = Array.prototype.every;
        ne(Array.prototype, "every", function every(e) { return ce.Call(pt, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.reduce)) {
        var vt = Array.prototype.reduce;
        ne(Array.prototype, "reduce", function reduce(e) { return ce.Call(vt, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.reduceRight, true)) {
        var yt = Array.prototype.reduceRight;
        ne(Array.prototype, "reduceRight", function reduceRight(e) { return ce.Call(yt, this.length >= 0 ? this : [], arguments); }, true);
    }
    var ht = Number("0o10") !== 8;
    var bt = Number("0b10") !== 2;
    var gt = y(Ue, function (e) { return Number(e + 0 + e) === 0; });
    if (ht || bt || gt) {
        var dt = Number;
        var mt = /^0b[01]+$/i;
        var Ot = /^0o[0-7]+$/i;
        var wt = mt.test.bind(mt);
        var jt = Ot.test.bind(Ot);
        var St = function (e) { var t; if (typeof e.valueOf === "function") {
            t = e.valueOf();
            if (re.primitive(t)) {
                return t;
            }
        } if (typeof e.toString === "function") {
            t = e.toString();
            if (re.primitive(t)) {
                return t;
            }
        } throw new TypeError("No default value"); };
        var Tt = $e.test.bind($e);
        var It = Je.test.bind(Je);
        var Et = function () { var e = function Number(t) { var r; if (arguments.length > 0) {
            r = re.primitive(t) ? t : St(t, "number");
        }
        else {
            r = 0;
        } if (typeof r === "string") {
            r = ce.Call(Be, r);
            if (wt(r)) {
                r = parseInt(C(r, 2), 2);
            }
            else if (jt(r)) {
                r = parseInt(C(r, 2), 8);
            }
            else if (Tt(r) || It(r)) {
                r = NaN;
            }
        } var n = this; var o = a(function () { dt.prototype.valueOf.call(n); return true; }); if (n instanceof e && !o) {
            return new dt(r);
        } return dt(r); }; return e; }();
        Ee(dt, Et, {});
        b(Et, { NaN: dt.NaN, MAX_VALUE: dt.MAX_VALUE, MIN_VALUE: dt.MIN_VALUE, NEGATIVE_INFINITY: dt.NEGATIVE_INFINITY, POSITIVE_INFINITY: dt.POSITIVE_INFINITY });
        Number = Et;
        m.redefine(S, "Number", Et);
    }
    var Pt = Math.pow(2, 53) - 1;
    b(Number, { MAX_SAFE_INTEGER: Pt, MIN_SAFE_INTEGER: -Pt, EPSILON: 2.220446049250313e-16, parseInt: S.parseInt, parseFloat: S.parseFloat, isFinite: K, isInteger: function isInteger(e) { return K(e) && ce.ToInteger(e) === e; }, isSafeInteger: function isSafeInteger(e) { return Number.isInteger(e) && k(e) <= Number.MAX_SAFE_INTEGER; }, isNaN: X });
    h(Number, "parseInt", S.parseInt, Number.parseInt !== S.parseInt);
    if ([, 1].find(function () { return true; }) === 1) {
        ne(Array.prototype, "find", et.find);
    }
    if ([, 1].findIndex(function () { return true; }) !== 0) {
        ne(Array.prototype, "findIndex", et.findIndex);
    }
    var Ct = Function.bind.call(Function.bind, Object.prototype.propertyIsEnumerable);
    var Mt = function ensureEnumerable(e, t) { if (s && Ct(e, t)) {
        Object.defineProperty(e, t, { enumerable: false });
    } };
    var xt = function sliceArgs() { var e = Number(this); var t = arguments.length; var r = t - e; var n = new Array(r < 0 ? 0 : r); for (var o = e; o < t; ++o) {
        n[o - e] = arguments[o];
    } return n; };
    var Nt = function assignTo(e) { return function assignToSource(t, r) { t[r] = e[r]; return t; }; };
    var At = function (e, t) { var r = n(Object(t)); var o; if (ce.IsCallable(Object.getOwnPropertySymbols)) {
        o = v(Object.getOwnPropertySymbols(Object(t)), Ct(t));
    } return p(P(r, o || []), Nt(t), e); };
    var Rt = { assign: function (e, t) { var r = ce.ToObject(e, "Cannot convert undefined or null to object"); return p(ce.Call(xt, 1, arguments), At, r); }, is: function is(e, t) { return ce.SameValue(e, t); } };
    var _t = Object.assign && Object.preventExtensions && function () { var e = Object.preventExtensions({ 1: 2 }); try {
        Object.assign(e, "xy");
    }
    catch (t) {
        return e[1] === "y";
    } }();
    if (_t) {
        ne(Object, "assign", Rt.assign);
    }
    b(Object, Rt);
    if (s) {
        var kt = { setPrototypeOf: function (e, r) { var n; var o = function (e, t) { if (!ce.TypeIsObject(e)) {
                throw new TypeError("cannot set prototype on a non-object");
            } if (!(t === null || ce.TypeIsObject(t))) {
                throw new TypeError("can only set prototype to an object or null" + t);
            } }; var i = function (e, r) { o(e, r); t(n, e, r); return e; }; try {
                n = e.getOwnPropertyDescriptor(e.prototype, r).set;
                t(n, {}, null);
            }
            catch (a) {
                if (e.prototype !== {}[r]) {
                    return;
                }
                n = function (e) { this[r] = e; };
                i.polyfill = i(i({}, null), e.prototype) instanceof e;
            } return i; }(Object, "__proto__") };
        b(Object, kt);
    }
    if (Object.setPrototypeOf && Object.getPrototypeOf && Object.getPrototypeOf(Object.setPrototypeOf({}, null)) !== null && Object.getPrototypeOf(Object.create(null)) === null) {
        (function () { var e = Object.create(null); var t = Object.getPrototypeOf; var r = Object.setPrototypeOf; Object.getPrototypeOf = function (r) { var n = t(r); return n === e ? null : n; }; Object.setPrototypeOf = function (t, n) { var o = n === null ? e : n; return r(t, o); }; Object.setPrototypeOf.polyfill = false; })();
    }
    var Lt = !i(function () { return Object.keys("foo"); });
    if (!Lt) {
        var Ft = Object.keys;
        ne(Object, "keys", function keys(e) { return Ft(ce.ToObject(e)); });
        n = Object.keys;
    }
    var Dt = i(function () { return Object.keys(/a/g); });
    if (Dt) {
        var zt = Object.keys;
        ne(Object, "keys", function keys(e) { if (re.regex(e)) {
            var t = [];
            for (var r in e) {
                if (z(e, r)) {
                    M(t, r);
                }
            }
            return t;
        } return zt(e); });
        n = Object.keys;
    }
    if (Object.getOwnPropertyNames) {
        var qt = !i(function () { return Object.getOwnPropertyNames("foo"); });
        if (!qt) {
            var Wt = typeof window === "object" ? Object.getOwnPropertyNames(window) : [];
            var Gt = Object.getOwnPropertyNames;
            ne(Object, "getOwnPropertyNames", function getOwnPropertyNames(e) { var t = ce.ToObject(e); if (g(t) === "[object Window]") {
                try {
                    return Gt(t);
                }
                catch (r) {
                    return P([], Wt);
                }
            } return Gt(t); });
        }
    }
    if (Object.getOwnPropertyDescriptor) {
        var Ht = !i(function () { return Object.getOwnPropertyDescriptor("foo", "bar"); });
        if (!Ht) {
            var Vt = Object.getOwnPropertyDescriptor;
            ne(Object, "getOwnPropertyDescriptor", function getOwnPropertyDescriptor(e, t) { return Vt(ce.ToObject(e), t); });
        }
    }
    if (Object.seal) {
        var Bt = !i(function () { return Object.seal("foo"); });
        if (!Bt) {
            var Ut = Object.seal;
            ne(Object, "seal", function seal(e) { if (!ce.TypeIsObject(e)) {
                return e;
            } return Ut(e); });
        }
    }
    if (Object.isSealed) {
        var $t = !i(function () { return Object.isSealed("foo"); });
        if (!$t) {
            var Jt = Object.isSealed;
            ne(Object, "isSealed", function isSealed(e) { if (!ce.TypeIsObject(e)) {
                return true;
            } return Jt(e); });
        }
    }
    if (Object.freeze) {
        var Xt = !i(function () { return Object.freeze("foo"); });
        if (!Xt) {
            var Kt = Object.freeze;
            ne(Object, "freeze", function freeze(e) { if (!ce.TypeIsObject(e)) {
                return e;
            } return Kt(e); });
        }
    }
    if (Object.isFrozen) {
        var Zt = !i(function () { return Object.isFrozen("foo"); });
        if (!Zt) {
            var Yt = Object.isFrozen;
            ne(Object, "isFrozen", function isFrozen(e) { if (!ce.TypeIsObject(e)) {
                return true;
            } return Yt(e); });
        }
    }
    if (Object.preventExtensions) {
        var Qt = !i(function () { return Object.preventExtensions("foo"); });
        if (!Qt) {
            var er = Object.preventExtensions;
            ne(Object, "preventExtensions", function preventExtensions(e) { if (!ce.TypeIsObject(e)) {
                return e;
            } return er(e); });
        }
    }
    if (Object.isExtensible) {
        var tr = !i(function () { return Object.isExtensible("foo"); });
        if (!tr) {
            var rr = Object.isExtensible;
            ne(Object, "isExtensible", function isExtensible(e) { if (!ce.TypeIsObject(e)) {
                return false;
            } return rr(e); });
        }
    }
    if (Object.getPrototypeOf) {
        var nr = !i(function () { return Object.getPrototypeOf("foo"); });
        if (!nr) {
            var or = Object.getPrototypeOf;
            ne(Object, "getPrototypeOf", function getPrototypeOf(e) { return or(ce.ToObject(e)); });
        }
    }
    var ir = s && function () { var e = Object.getOwnPropertyDescriptor(RegExp.prototype, "flags"); return e && ce.IsCallable(e.get); }();
    if (s && !ir) {
        var ar = function flags() { if (!ce.TypeIsObject(this)) {
            throw new TypeError("Method called on incompatible type: must be an object.");
        } var e = ""; if (this.global) {
            e += "g";
        } if (this.ignoreCase) {
            e += "i";
        } if (this.multiline) {
            e += "m";
        } if (this.unicode) {
            e += "u";
        } if (this.sticky) {
            e += "y";
        } return e; };
        m.getter(RegExp.prototype, "flags", ar);
    }
    var ur = s && a(function () { return String(new RegExp(/a/g, "i")) === "/a/i"; });
    var fr = oe && s && function () { var e = /./; e[$.match] = false; return RegExp(e) === e; }();
    var sr = a(function () { return RegExp.prototype.toString.call({ source: "abc" }) === "/abc/"; });
    var cr = sr && a(function () { return RegExp.prototype.toString.call({ source: "a", flags: "b" }) === "/a/b"; });
    if (!sr || !cr) {
        var lr = RegExp.prototype.toString;
        h(RegExp.prototype, "toString", function toString() { var e = ce.RequireObjectCoercible(this); if (re.regex(e)) {
            return t(lr, e);
        } var r = ue(e.source); var n = ue(e.flags); return "/" + r + "/" + n; }, true);
        m.preserveToString(RegExp.prototype.toString, lr);
    }
    if (s && (!ur || fr)) {
        var pr = Object.getOwnPropertyDescriptor(RegExp.prototype, "flags").get;
        var vr = Object.getOwnPropertyDescriptor(RegExp.prototype, "source") || {};
        var yr = function () { return this.source; };
        var hr = ce.IsCallable(vr.get) ? vr.get : yr;
        var br = RegExp;
        var gr = function () { return function RegExp(e, t) { var r = ce.IsRegExp(e); var n = this instanceof RegExp; if (!n && r && typeof t === "undefined" && e.constructor === RegExp) {
            return e;
        } var o = e; var i = t; if (re.regex(e)) {
            o = ce.Call(hr, e);
            i = typeof t === "undefined" ? ce.Call(pr, e) : t;
            return new RegExp(o, i);
        }
        else if (r) {
            o = e.source;
            i = typeof t === "undefined" ? e.flags : t;
        } return new br(e, t); }; }();
        Ee(br, gr, { $input: true });
        RegExp = gr;
        m.redefine(S, "RegExp", gr);
    }
    if (s) {
        var dr = { input: "$_", lastMatch: "$&", lastParen: "$+", leftContext: "$`", rightContext: "$'" };
        l(n(dr), function (e) { if (e in RegExp && !(dr[e] in RegExp)) {
            m.getter(RegExp, dr[e], function get() { return RegExp[e]; });
        } });
    }
    Ce(RegExp);
    var mr = 1 / Number.EPSILON;
    var Or = function roundTiesToEven(e) { return e + mr - mr; };
    var wr = Math.pow(2, -23);
    var jr = Math.pow(2, 127) * (2 - wr);
    var Sr = Math.pow(2, -126);
    var Tr = Math.E;
    var Ir = Math.LOG2E;
    var Er = Math.LOG10E;
    var Pr = Number.prototype.clz;
    delete Number.prototype.clz;
    var Cr = { acosh: function acosh(e) { var t = Number(e); if (X(t) || e < 1) {
            return NaN;
        } if (t === 1) {
            return 0;
        } if (t === Infinity) {
            return t;
        } var r = 1 / (t * t); if (t < 2) {
            return Y(t - 1 + D(1 - r) * t);
        } var n = t / 2; return Y(n + D(1 - r) * n - 1) + 1 / Ir; }, asinh: function asinh(e) { var t = Number(e); if (t === 0 || !T(t)) {
            return t;
        } var r = k(t); var n = r * r; var o = Z(t); if (r < 1) {
            return o * Y(r + n / (D(n + 1) + 1));
        } return o * (Y(r / 2 + D(1 + 1 / n) * r / 2 - 1) + 1 / Ir); }, atanh: function atanh(e) { var t = Number(e); if (t === 0) {
            return t;
        } if (t === -1) {
            return -Infinity;
        } if (t === 1) {
            return Infinity;
        } if (X(t) || t < -1 || t > 1) {
            return NaN;
        } var r = k(t); return Z(t) * Y(2 * r / (1 - r)) / 2; }, cbrt: function cbrt(e) { var t = Number(e); if (t === 0) {
            return t;
        } var r = t < 0; var n; if (r) {
            t = -t;
        } if (t === Infinity) {
            n = Infinity;
        }
        else {
            n = L(F(t) / 3);
            n = (t / (n * n) + 2 * n) / 3;
        } return r ? -n : n; }, clz32: function clz32(e) { var t = Number(e); var r = ce.ToUint32(t); if (r === 0) {
            return 32;
        } return Pr ? ce.Call(Pr, r) : 31 - _(F(r + .5) * Ir); }, cosh: function cosh(e) { var t = Number(e); if (t === 0) {
            return 1;
        } if (X(t)) {
            return NaN;
        } if (!T(t)) {
            return Infinity;
        } var r = L(k(t) - 1); return (r + 1 / (r * Tr * Tr)) * (Tr / 2); }, expm1: function expm1(e) { var t = Number(e); if (t === -Infinity) {
            return -1;
        } if (!T(t) || t === 0) {
            return t;
        } if (k(t) > .5) {
            return L(t) - 1;
        } var r = t; var n = 0; var o = 1; while (n + r !== n) {
            n += r;
            o += 1;
            r *= t / o;
        } return n; }, hypot: function hypot(e, t) { var r = 0; var n = 0; for (var o = 0; o < arguments.length; ++o) {
            var i = k(Number(arguments[o]));
            if (n < i) {
                r *= n / i * (n / i);
                r += 1;
                n = i;
            }
            else {
                r += i > 0 ? i / n * (i / n) : i;
            }
        } return n === Infinity ? Infinity : n * D(r); }, log2: function log2(e) { return F(e) * Ir; }, log10: function log10(e) { return F(e) * Er; }, log1p: Y, sign: Z, sinh: function sinh(e) { var t = Number(e); if (!T(t) || t === 0) {
            return t;
        } var r = k(t); if (r < 1) {
            var n = Math.expm1(r);
            return Z(t) * n * (1 + 1 / (n + 1)) / 2;
        } var o = L(r - 1); return Z(t) * (o - 1 / (o * Tr * Tr)) * (Tr / 2); }, tanh: function tanh(e) { var t = Number(e); if (X(t) || t === 0) {
            return t;
        } if (t >= 20) {
            return 1;
        } if (t <= -20) {
            return -1;
        } return (Math.expm1(t) - Math.expm1(-t)) / (L(t) + L(-t)); }, trunc: function trunc(e) { var t = Number(e); return t < 0 ? -_(-t) : _(t); }, imul: function imul(e, t) { var r = ce.ToUint32(e); var n = ce.ToUint32(t); var o = r >>> 16 & 65535; var i = r & 65535; var a = n >>> 16 & 65535; var u = n & 65535; return i * u + (o * u + i * a << 16 >>> 0) | 0; }, fround: function fround(e) { var t = Number(e); if (t === 0 || t === Infinity || t === -Infinity || X(t)) {
            return t;
        } var r = Z(t); var n = k(t); if (n < Sr) {
            return r * Or(n / Sr / wr) * Sr * wr;
        } var o = (1 + wr / Number.EPSILON) * n; var i = o - (o - n); if (i > jr || X(i)) {
            return r * Infinity;
        } return r * i; } };
    var Mr = function withinULPDistance(e, t, r) { return k(1 - e / t) / Number.EPSILON < (r || 8); };
    b(Math, Cr);
    h(Math, "sinh", Cr.sinh, Math.sinh(710) === Infinity);
    h(Math, "cosh", Cr.cosh, Math.cosh(710) === Infinity);
    h(Math, "log1p", Cr.log1p, Math.log1p(-1e-17) !== -1e-17);
    h(Math, "asinh", Cr.asinh, Math.asinh(-1e7) !== -Math.asinh(1e7));
    h(Math, "asinh", Cr.asinh, Math.asinh(1e300) === Infinity);
    h(Math, "atanh", Cr.atanh, Math.atanh(1e-300) === 0);
    h(Math, "tanh", Cr.tanh, Math.tanh(-2e-17) !== -2e-17);
    h(Math, "acosh", Cr.acosh, Math.acosh(Number.MAX_VALUE) === Infinity);
    h(Math, "acosh", Cr.acosh, !Mr(Math.acosh(1 + Number.EPSILON), Math.sqrt(2 * Number.EPSILON)));
    h(Math, "cbrt", Cr.cbrt, !Mr(Math.cbrt(1e-300), 1e-100));
    h(Math, "sinh", Cr.sinh, Math.sinh(-2e-17) !== -2e-17);
    var xr = Math.expm1(10);
    h(Math, "expm1", Cr.expm1, xr > 22025.465794806718 || xr < 22025.465794806718);
    var Nr = Math.round;
    var Ar = Math.round(.5 - Number.EPSILON / 4) === 0 && Math.round(-.5 + Number.EPSILON / 3.99) === 1;
    var Rr = mr + 1;
    var _r = 2 * mr - 1;
    var kr = [Rr, _r].every(function (e) { return Math.round(e) === e; });
    h(Math, "round", function round(e) { var t = _(e); var r = t === -1 ? -0 : t + 1; return e - t < .5 ? t : r; }, !Ar || !kr);
    m.preserveToString(Math.round, Nr);
    var Lr = Math.imul;
    if (Math.imul(4294967295, 5) !== -5) {
        Math.imul = Cr.imul;
        m.preserveToString(Math.imul, Lr);
    }
    if (Math.imul.length !== 2) {
        ne(Math, "imul", function imul(e, t) { return ce.Call(Lr, Math, arguments); });
    }
    var Fr = function () { var e = S.setTimeout; if (typeof e !== "function" && typeof e !== "object") {
        return;
    } ce.IsPromise = function (e) { if (!ce.TypeIsObject(e)) {
        return false;
    } if (typeof e._promise === "undefined") {
        return false;
    } return true; }; var r = function (e) { if (!ce.IsConstructor(e)) {
        throw new TypeError("Bad promise constructor");
    } var t = this; var r = function (e, r) { if (t.resolve !== void 0 || t.reject !== void 0) {
        throw new TypeError("Bad Promise implementation!");
    } t.resolve = e; t.reject = r; }; t.resolve = void 0; t.reject = void 0; t.promise = new e(r); if (!(ce.IsCallable(t.resolve) && ce.IsCallable(t.reject))) {
        throw new TypeError("Bad promise constructor");
    } }; var n; if (typeof window !== "undefined" && ce.IsCallable(window.postMessage)) {
        n = function () { var e = []; var t = "zero-timeout-message"; var r = function (r) { M(e, r); window.postMessage(t, "*"); }; var n = function (r) { if (r.source === window && r.data === t) {
            r.stopPropagation();
            if (e.length === 0) {
                return;
            }
            var n = N(e);
            n();
        } }; window.addEventListener("message", n, true); return r; };
    } var o = function () { var e = S.Promise; var t = e && e.resolve && e.resolve(); return t && function (e) { return t.then(e); }; }; var i = ce.IsCallable(S.setImmediate) ? S.setImmediate : typeof process === "object" && process.nextTick ? process.nextTick : o() || (ce.IsCallable(n) ? n() : function (t) { e(t, 0); }); var a = function (e) { return e; }; var u = function (e) { throw e; }; var f = 0; var s = 1; var c = 2; var l = 0; var p = 1; var v = 2; var y = {}; var h = function (e, t, r) { i(function () { g(e, t, r); }); }; var g = function (e, t, r) { var n, o; if (t === y) {
        return e(r);
    } try {
        n = e(r);
        o = t.resolve;
    }
    catch (i) {
        n = i;
        o = t.reject;
    } o(n); }; var d = function (e, t) { var r = e._promise; var n = r.reactionLength; if (n > 0) {
        h(r.fulfillReactionHandler0, r.reactionCapability0, t);
        r.fulfillReactionHandler0 = void 0;
        r.rejectReactions0 = void 0;
        r.reactionCapability0 = void 0;
        if (n > 1) {
            for (var o = 1, i = 0; o < n; o++, i += 3) {
                h(r[i + l], r[i + v], t);
                e[i + l] = void 0;
                e[i + p] = void 0;
                e[i + v] = void 0;
            }
        }
    } r.result = t; r.state = s; r.reactionLength = 0; }; var m = function (e, t) { var r = e._promise; var n = r.reactionLength; if (n > 0) {
        h(r.rejectReactionHandler0, r.reactionCapability0, t);
        r.fulfillReactionHandler0 = void 0;
        r.rejectReactions0 = void 0;
        r.reactionCapability0 = void 0;
        if (n > 1) {
            for (var o = 1, i = 0; o < n; o++, i += 3) {
                h(r[i + p], r[i + v], t);
                e[i + l] = void 0;
                e[i + p] = void 0;
                e[i + v] = void 0;
            }
        }
    } r.result = t; r.state = c; r.reactionLength = 0; }; var O = function (e) { var t = false; var r = function (r) { var n; if (t) {
        return;
    } t = true; if (r === e) {
        return m(e, new TypeError("Self resolution"));
    } if (!ce.TypeIsObject(r)) {
        return d(e, r);
    } try {
        n = r.then;
    }
    catch (o) {
        return m(e, o);
    } if (!ce.IsCallable(n)) {
        return d(e, r);
    } i(function () { j(e, r, n); }); }; var n = function (r) { if (t) {
        return;
    } t = true; return m(e, r); }; return { resolve: r, reject: n }; }; var w = function (e, r, n, o) { if (e === I) {
        t(e, r, n, o, y);
    }
    else {
        t(e, r, n, o);
    } }; var j = function (e, t, r) { var n = O(e); var o = n.resolve; var i = n.reject; try {
        w(r, t, o, i);
    }
    catch (a) {
        i(a);
    } }; var T, I; var E = function () { var e = function Promise(t) { if (!(this instanceof e)) {
        throw new TypeError('Constructor Promise requires "new"');
    } if (this && this._promise) {
        throw new TypeError("Bad construction");
    } if (!ce.IsCallable(t)) {
        throw new TypeError("not a valid resolver");
    } var r = Ae(this, e, T, { _promise: { result: void 0, state: f, reactionLength: 0, fulfillReactionHandler0: void 0, rejectReactionHandler0: void 0, reactionCapability0: void 0 } }); var n = O(r); var o = n.reject; try {
        t(n.resolve, o);
    }
    catch (i) {
        o(i);
    } return r; }; return e; }(); T = E.prototype; var P = function (e, t, r, n) { var o = false; return function (i) { if (o) {
        return;
    } o = true; t[e] = i; if (--n.count === 0) {
        var a = r.resolve;
        a(t);
    } }; }; var C = function (e, t, r) { var n = e.iterator; var o = []; var i = { count: 1 }; var a, u; var f = 0; while (true) {
        try {
            a = ce.IteratorStep(n);
            if (a === false) {
                e.done = true;
                break;
            }
            u = a.value;
        }
        catch (s) {
            e.done = true;
            throw s;
        }
        o[f] = void 0;
        var c = t.resolve(u);
        var l = P(f, o, r, i);
        i.count += 1;
        w(c.then, c, l, r.reject);
        f += 1;
    } if (--i.count === 0) {
        var p = r.resolve;
        p(o);
    } return r.promise; }; var x = function (e, t, r) { var n = e.iterator; var o, i, a; while (true) {
        try {
            o = ce.IteratorStep(n);
            if (o === false) {
                e.done = true;
                break;
            }
            i = o.value;
        }
        catch (u) {
            e.done = true;
            throw u;
        }
        a = t.resolve(i);
        w(a.then, a, r.resolve, r.reject);
    } return r.promise; }; b(E, { all: function all(e) { var t = this; if (!ce.TypeIsObject(t)) {
            throw new TypeError("Promise is not object");
        } var n = new r(t); var o, i; try {
            o = ce.GetIterator(e);
            i = { iterator: o, done: false };
            return C(i, t, n);
        }
        catch (a) {
            var u = a;
            if (i && !i.done) {
                try {
                    ce.IteratorClose(o, true);
                }
                catch (f) {
                    u = f;
                }
            }
            var s = n.reject;
            s(u);
            return n.promise;
        } }, race: function race(e) { var t = this; if (!ce.TypeIsObject(t)) {
            throw new TypeError("Promise is not object");
        } var n = new r(t); var o, i; try {
            o = ce.GetIterator(e);
            i = { iterator: o, done: false };
            return x(i, t, n);
        }
        catch (a) {
            var u = a;
            if (i && !i.done) {
                try {
                    ce.IteratorClose(o, true);
                }
                catch (f) {
                    u = f;
                }
            }
            var s = n.reject;
            s(u);
            return n.promise;
        } }, reject: function reject(e) { var t = this; if (!ce.TypeIsObject(t)) {
            throw new TypeError("Bad promise constructor");
        } var n = new r(t); var o = n.reject; o(e); return n.promise; }, resolve: function resolve(e) { var t = this; if (!ce.TypeIsObject(t)) {
            throw new TypeError("Bad promise constructor");
        } if (ce.IsPromise(e)) {
            var n = e.constructor;
            if (n === t) {
                return e;
            }
        } var o = new r(t); var i = o.resolve; i(e); return o.promise; } }); b(T, { "catch": function (e) { return this.then(null, e); }, then: function then(e, t) { var n = this; if (!ce.IsPromise(n)) {
            throw new TypeError("not a promise");
        } var o = ce.SpeciesConstructor(n, E); var i; var b = arguments.length > 2 && arguments[2] === y; if (b && o === E) {
            i = y;
        }
        else {
            i = new r(o);
        } var g = ce.IsCallable(e) ? e : a; var d = ce.IsCallable(t) ? t : u; var m = n._promise; var O; if (m.state === f) {
            if (m.reactionLength === 0) {
                m.fulfillReactionHandler0 = g;
                m.rejectReactionHandler0 = d;
                m.reactionCapability0 = i;
            }
            else {
                var w = 3 * (m.reactionLength - 1);
                m[w + l] = g;
                m[w + p] = d;
                m[w + v] = i;
            }
            m.reactionLength += 1;
        }
        else if (m.state === s) {
            O = m.result;
            h(g, i, O);
        }
        else if (m.state === c) {
            O = m.result;
            h(d, i, O);
        }
        else {
            throw new TypeError("unexpected Promise state");
        } return i.promise; } }); y = new r(E); I = T.then; return E; }();
    if (S.Promise) {
        delete S.Promise.accept;
        delete S.Promise.defer;
        delete S.Promise.prototype.chain;
    }
    if (typeof Fr === "function") {
        b(S, { Promise: Fr });
        var Dr = w(S.Promise, function (e) { return e.resolve(42).then(function () { }) instanceof e; });
        var zr = !i(function () { return S.Promise.reject(42).then(null, 5).then(null, W); });
        var qr = i(function () { return S.Promise.call(3, W); });
        var Wr = function (e) { var t = e.resolve(5); t.constructor = {}; var r = e.resolve(t); try {
            r.then(null, W).then(null, W);
        }
        catch (n) {
            return true;
        } return t === r; }(S.Promise);
        var Gr = s && function () { var e = 0; var t = Object.defineProperty({}, "then", { get: function () { e += 1; } }); Promise.resolve(t); return e === 1; }();
        var Hr = function BadResolverPromise(e) { var t = new Promise(e); e(3, function () { }); this.then = t.then; this.constructor = BadResolverPromise_1; };
        Hr.prototype = Promise.prototype;
        Hr.all = Promise.all;
        var Vr = a(function () { return !!Hr.all([1, 2]); });
        if (!Dr || !zr || !qr || Wr || !Gr || Vr) {
            Promise = Fr;
            ne(S, "Promise", Fr);
        }
        if (Promise.all.length !== 1) {
            var Br = Promise.all;
            ne(Promise, "all", function all(e) { return ce.Call(Br, this, arguments); });
        }
        if (Promise.race.length !== 1) {
            var Ur = Promise.race;
            ne(Promise, "race", function race(e) { return ce.Call(Ur, this, arguments); });
        }
        if (Promise.resolve.length !== 1) {
            var $r = Promise.resolve;
            ne(Promise, "resolve", function resolve(e) { return ce.Call($r, this, arguments); });
        }
        if (Promise.reject.length !== 1) {
            var Jr = Promise.reject;
            ne(Promise, "reject", function reject(e) { return ce.Call(Jr, this, arguments); });
        }
        Mt(Promise, "all");
        Mt(Promise, "race");
        Mt(Promise, "resolve");
        Mt(Promise, "reject");
        Ce(Promise);
    }
    var Xr = function (e) { var t = n(p(e, function (e, t) { e[t] = true; return e; }, {})); return e.join(":") === t.join(":"); };
    var Kr = Xr(["z", "a", "bb"]);
    var Zr = Xr(["z", 1, "a", "3", 2]);
    if (s) {
        var Yr = function fastkey(e, t) { if (!t && !Kr) {
            return null;
        } if (se(e)) {
            return "^" + ce.ToString(e);
        }
        else if (typeof e === "string") {
            return "$" + e;
        }
        else if (typeof e === "number") {
            if (!Zr) {
                return "n" + e;
            }
            return e;
        }
        else if (typeof e === "boolean") {
            return "b" + e;
        } return null; };
        var Qr = function emptyObject() { return Object.create ? Object.create(null) : {}; };
        var en = function addIterableToMap(e, n, o) { if (r(o) || re.string(o)) {
            l(o, function (e) { if (!ce.TypeIsObject(e)) {
                throw new TypeError("Iterator value " + e + " is not an entry object");
            } n.set(e[0], e[1]); });
        }
        else if (o instanceof e) {
            t(e.prototype.forEach, o, function (e, t) { n.set(t, e); });
        }
        else {
            var i, a;
            if (!se(o)) {
                a = n.set;
                if (!ce.IsCallable(a)) {
                    throw new TypeError("bad map");
                }
                i = ce.GetIterator(o);
            }
            if (typeof i !== "undefined") {
                while (true) {
                    var u = ce.IteratorStep(i);
                    if (u === false) {
                        break;
                    }
                    var f = u.value;
                    try {
                        if (!ce.TypeIsObject(f)) {
                            throw new TypeError("Iterator value " + f + " is not an entry object");
                        }
                        t(a, n, f[0], f[1]);
                    }
                    catch (s) {
                        ce.IteratorClose(i, true);
                        throw s;
                    }
                }
            }
        } };
        var tn = function addIterableToSet(e, n, o) { if (r(o) || re.string(o)) {
            l(o, function (e) { n.add(e); });
        }
        else if (o instanceof e) {
            t(e.prototype.forEach, o, function (e) { n.add(e); });
        }
        else {
            var i, a;
            if (!se(o)) {
                a = n.add;
                if (!ce.IsCallable(a)) {
                    throw new TypeError("bad set");
                }
                i = ce.GetIterator(o);
            }
            if (typeof i !== "undefined") {
                while (true) {
                    var u = ce.IteratorStep(i);
                    if (u === false) {
                        break;
                    }
                    var f = u.value;
                    try {
                        t(a, n, f);
                    }
                    catch (s) {
                        ce.IteratorClose(i, true);
                        throw s;
                    }
                }
            }
        } };
        var rn = { Map: function () { var e = {}; var r = function MapEntry(e, t) { this.key = e; this.value = t; this.next = null; this.prev = null; }; r.prototype.isRemoved = function isRemoved() { return this.key === e; }; var n = function isMap(e) { return !!e._es6map; }; var o = function requireMapSlot(e, t) { if (!ce.TypeIsObject(e) || !n(e)) {
                throw new TypeError("Method Map.prototype." + t + " called on incompatible receiver " + ce.ToString(e));
            } }; var i = function MapIterator(e, t) { o(e, "[[MapIterator]]"); this.head = e._head; this.i = this.head; this.kind = t; }; i.prototype = { isMapIterator: true, next: function next() { if (!this.isMapIterator) {
                    throw new TypeError("Not a MapIterator");
                } var e = this.i; var t = this.kind; var r = this.head; if (typeof this.i === "undefined") {
                    return Ke();
                } while (e.isRemoved() && e !== r) {
                    e = e.prev;
                } var n; while (e.next !== r) {
                    e = e.next;
                    if (!e.isRemoved()) {
                        if (t === "key") {
                            n = e.key;
                        }
                        else if (t === "value") {
                            n = e.value;
                        }
                        else {
                            n = [e.key, e.value];
                        }
                        this.i = e;
                        return Ke(n);
                    }
                } this.i = void 0; return Ke(); } }; Me(i.prototype); var a; var u = function Map() { if (!(this instanceof Map)) {
                throw new TypeError('Constructor Map requires "new"');
            } if (this && this._es6map) {
                throw new TypeError("Bad construction");
            } var e = Ae(this, Map, a, { _es6map: true, _head: null, _map: G ? new G : null, _size: 0, _storage: Qr() }); var t = new r(null, null); t.next = t.prev = t; e._head = t; if (arguments.length > 0) {
                en(Map, e, arguments[0]);
            } return e; }; a = u.prototype; m.getter(a, "size", function () { if (typeof this._size === "undefined") {
                throw new TypeError("size method called on incompatible Map");
            } return this._size; }); b(a, { get: function get(e) { o(this, "get"); var t; var r = Yr(e, true); if (r !== null) {
                    t = this._storage[r];
                    if (t) {
                        return t.value;
                    }
                    else {
                        return;
                    }
                } if (this._map) {
                    t = V.call(this._map, e);
                    if (t) {
                        return t.value;
                    }
                    else {
                        return;
                    }
                } var n = this._head; var i = n; while ((i = i.next) !== n) {
                    if (ce.SameValueZero(i.key, e)) {
                        return i.value;
                    }
                } }, has: function has(e) { o(this, "has"); var t = Yr(e, true); if (t !== null) {
                    return typeof this._storage[t] !== "undefined";
                } if (this._map) {
                    return B.call(this._map, e);
                } var r = this._head; var n = r; while ((n = n.next) !== r) {
                    if (ce.SameValueZero(n.key, e)) {
                        return true;
                    }
                } return false; }, set: function set(e, t) { o(this, "set"); var n = this._head; var i = n; var a; var u = Yr(e, true); if (u !== null) {
                    if (typeof this._storage[u] !== "undefined") {
                        this._storage[u].value = t;
                        return this;
                    }
                    else {
                        a = this._storage[u] = new r(e, t);
                        i = n.prev;
                    }
                }
                else if (this._map) {
                    if (B.call(this._map, e)) {
                        V.call(this._map, e).value = t;
                    }
                    else {
                        a = new r(e, t);
                        U.call(this._map, e, a);
                        i = n.prev;
                    }
                } while ((i = i.next) !== n) {
                    if (ce.SameValueZero(i.key, e)) {
                        i.value = t;
                        return this;
                    }
                } a = a || new r(e, t); if (ce.SameValue(-0, e)) {
                    a.key = +0;
                } a.next = this._head; a.prev = this._head.prev; a.prev.next = a; a.next.prev = a; this._size += 1; return this; }, "delete": function (t) { o(this, "delete"); var r = this._head; var n = r; var i = Yr(t, true); if (i !== null) {
                    if (typeof this._storage[i] === "undefined") {
                        return false;
                    }
                    n = this._storage[i].prev;
                    delete this._storage[i];
                }
                else if (this._map) {
                    if (!B.call(this._map, t)) {
                        return false;
                    }
                    n = V.call(this._map, t).prev;
                    H.call(this._map, t);
                } while ((n = n.next) !== r) {
                    if (ce.SameValueZero(n.key, t)) {
                        n.key = e;
                        n.value = e;
                        n.prev.next = n.next;
                        n.next.prev = n.prev;
                        this._size -= 1;
                        return true;
                    }
                } return false; }, clear: function clear() { o(this, "clear"); this._map = G ? new G : null; this._size = 0; this._storage = Qr(); var t = this._head; var r = t; var n = r.next; while ((r = n) !== t) {
                    r.key = e;
                    r.value = e;
                    n = r.next;
                    r.next = r.prev = t;
                } t.next = t.prev = t; }, keys: function keys() { o(this, "keys"); return new i(this, "key"); }, values: function values() { o(this, "values"); return new i(this, "value"); }, entries: function entries() { o(this, "entries"); return new i(this, "key+value"); }, forEach: function forEach(e) { o(this, "forEach"); var r = arguments.length > 1 ? arguments[1] : null; var n = this.entries(); for (var i = n.next(); !i.done; i = n.next()) {
                    if (r) {
                        t(e, r, i.value[1], i.value[0], this);
                    }
                    else {
                        e(i.value[1], i.value[0], this);
                    }
                } } }); Me(a, a.entries); return u; }(), Set: function () { var e = function isSet(e) { return e._es6set && typeof e._storage !== "undefined"; }; var r = function requireSetSlot(t, r) { if (!ce.TypeIsObject(t) || !e(t)) {
                throw new TypeError("Set.prototype." + r + " called on incompatible receiver " + ce.ToString(t));
            } }; var o; var i = function Set() { if (!(this instanceof Set)) {
                throw new TypeError('Constructor Set requires "new"');
            } if (this && this._es6set) {
                throw new TypeError("Bad construction");
            } var e = Ae(this, Set, o, { _es6set: true, "[[SetData]]": null, _storage: Qr() }); if (!e._es6set) {
                throw new TypeError("bad set");
            } if (arguments.length > 0) {
                tn(Set, e, arguments[0]);
            } return e; }; o = i.prototype; var a = function (e) { var t = e; if (t === "^null") {
                return null;
            }
            else if (t === "^undefined") {
                return void 0;
            }
            else {
                var r = t.charAt(0);
                if (r === "$") {
                    return C(t, 1);
                }
                else if (r === "n") {
                    return +C(t, 1);
                }
                else if (r === "b") {
                    return t === "btrue";
                }
            } return +t; }; var u = function ensureMap(e) { if (!e["[[SetData]]"]) {
                var t = new rn.Map;
                e["[[SetData]]"] = t;
                l(n(e._storage), function (e) { var r = a(e); t.set(r, r); });
                e["[[SetData]]"] = t;
            } e._storage = null; }; m.getter(i.prototype, "size", function () { r(this, "size"); if (this._storage) {
                return n(this._storage).length;
            } u(this); return this["[[SetData]]"].size; }); b(i.prototype, { has: function has(e) { r(this, "has"); var t; if (this._storage && (t = Yr(e)) !== null) {
                    return !!this._storage[t];
                } u(this); return this["[[SetData]]"].has(e); }, add: function add(e) { r(this, "add"); var t; if (this._storage && (t = Yr(e)) !== null) {
                    this._storage[t] = true;
                    return this;
                } u(this); this["[[SetData]]"].set(e, e); return this; }, "delete": function (e) { r(this, "delete"); var t; if (this._storage && (t = Yr(e)) !== null) {
                    var n = z(this._storage, t);
                    return delete this._storage[t] && n;
                } u(this); return this["[[SetData]]"]["delete"](e); }, clear: function clear() { r(this, "clear"); if (this._storage) {
                    this._storage = Qr();
                } if (this["[[SetData]]"]) {
                    this["[[SetData]]"].clear();
                } }, values: function values() { r(this, "values"); u(this); return new f(this["[[SetData]]"].values()); }, entries: function entries() { r(this, "entries"); u(this); return new f(this["[[SetData]]"].entries()); }, forEach: function forEach(e) { r(this, "forEach"); var n = arguments.length > 1 ? arguments[1] : null; var o = this; u(o); this["[[SetData]]"].forEach(function (r, i) { if (n) {
                    t(e, n, i, i, o);
                }
                else {
                    e(i, i, o);
                } }); } }); h(i.prototype, "keys", i.prototype.values, true); Me(i.prototype, i.prototype.values); var f = function SetIterator(e) { this.it = e; }; f.prototype = { isSetIterator: true, next: function next() { if (!this.isSetIterator) {
                    throw new TypeError("Not a SetIterator");
                } return this.it.next(); } }; Me(f.prototype); return i; }() };
        var nn = S.Set && !Set.prototype["delete"] && Set.prototype.remove && Set.prototype.items && Set.prototype.map && Array.isArray((new Set).keys);
        if (nn) {
            S.Set = rn.Set;
        }
        if (S.Map || S.Set) {
            var on = a(function () { return new Map([[1, 2]]).get(1) === 2; });
            if (!on) {
                S.Map = function Map() { if (!(this instanceof Map)) {
                    throw new TypeError('Constructor Map requires "new"');
                } var e = new G; if (arguments.length > 0) {
                    en(Map, e, arguments[0]);
                } delete e.constructor; Object.setPrototypeOf(e, S.Map.prototype); return e; };
                S.Map.prototype = O(G.prototype);
                h(S.Map.prototype, "constructor", S.Map, true);
                m.preserveToString(S.Map, G);
            }
            var an = new Map;
            var un = function () { var e = new Map([[1, 0], [2, 0], [3, 0], [4, 0]]); e.set(-0, e); return e.get(0) === e && e.get(-0) === e && e.has(0) && e.has(-0); }();
            var fn = an.set(1, 2) === an;
            if (!un || !fn) {
                ne(Map.prototype, "set", function set(e, r) { t(U, this, e === 0 ? 0 : e, r); return this; });
            }
            if (!un) {
                b(Map.prototype, { get: function get(e) { return t(V, this, e === 0 ? 0 : e); }, has: function has(e) { return t(B, this, e === 0 ? 0 : e); } }, true);
                m.preserveToString(Map.prototype.get, V);
                m.preserveToString(Map.prototype.has, B);
            }
            var sn = new Set;
            var cn = Set.prototype["delete"] && Set.prototype.add && Set.prototype.has && function (e) { e["delete"](0); e.add(-0); return !e.has(0); }(sn);
            var ln = sn.add(1) === sn;
            if (!cn || !ln) {
                var pn = Set.prototype.add;
                Set.prototype.add = function add(e) { t(pn, this, e === 0 ? 0 : e); return this; };
                m.preserveToString(Set.prototype.add, pn);
            }
            if (!cn) {
                var vn = Set.prototype.has;
                Set.prototype.has = function has(e) { return t(vn, this, e === 0 ? 0 : e); };
                m.preserveToString(Set.prototype.has, vn);
                var yn = Set.prototype["delete"];
                Set.prototype["delete"] = function SetDelete(e) { return t(yn, this, e === 0 ? 0 : e); };
                m.preserveToString(Set.prototype["delete"], yn);
            }
            var hn = w(S.Map, function (e) { var t = new e([]); t.set(42, 42); return t instanceof e; });
            var bn = Object.setPrototypeOf && !hn;
            var gn = function () { try {
                return !(S.Map() instanceof S.Map);
            }
            catch (e) {
                return e instanceof TypeError;
            } }();
            if (S.Map.length !== 0 || bn || !gn) {
                S.Map = function Map() { if (!(this instanceof Map)) {
                    throw new TypeError('Constructor Map requires "new"');
                } var e = new G; if (arguments.length > 0) {
                    en(Map, e, arguments[0]);
                } delete e.constructor; Object.setPrototypeOf(e, Map.prototype); return e; };
                S.Map.prototype = G.prototype;
                h(S.Map.prototype, "constructor", S.Map, true);
                m.preserveToString(S.Map, G);
            }
            var dn = w(S.Set, function (e) { var t = new e([]); t.add(42, 42); return t instanceof e; });
            var mn = Object.setPrototypeOf && !dn;
            var On = function () { try {
                return !(S.Set() instanceof S.Set);
            }
            catch (e) {
                return e instanceof TypeError;
            } }();
            if (S.Set.length !== 0 || mn || !On) {
                var wn = S.Set;
                S.Set = function Set() { if (!(this instanceof Set)) {
                    throw new TypeError('Constructor Set requires "new"');
                } var e = new wn; if (arguments.length > 0) {
                    tn(Set, e, arguments[0]);
                } delete e.constructor; Object.setPrototypeOf(e, Set.prototype); return e; };
                S.Set.prototype = wn.prototype;
                h(S.Set.prototype, "constructor", S.Set, true);
                m.preserveToString(S.Set, wn);
            }
            var jn = new S.Map;
            var Sn = !a(function () { return jn.keys().next().done; });
            if (typeof S.Map.prototype.clear !== "function" || (new S.Set).size !== 0 || jn.size !== 0 || typeof S.Map.prototype.keys !== "function" || typeof S.Set.prototype.keys !== "function" || typeof S.Map.prototype.forEach !== "function" || typeof S.Set.prototype.forEach !== "function" || u(S.Map) || u(S.Set) || typeof jn.keys().next !== "function" || Sn || !hn) {
                b(S, { Map: rn.Map, Set: rn.Set }, true);
            }
            if (S.Set.prototype.keys !== S.Set.prototype.values) {
                h(S.Set.prototype, "keys", S.Set.prototype.values, true);
            }
            Me(Object.getPrototypeOf((new S.Map).keys()));
            Me(Object.getPrototypeOf((new S.Set).keys()));
            if (c && S.Set.prototype.has.name !== "has") {
                var Tn = S.Set.prototype.has;
                ne(S.Set.prototype, "has", function has(e) { return t(Tn, this, e); });
            }
        }
        b(S, rn);
        Ce(S.Map);
        Ce(S.Set);
    }
    var In = function throwUnlessTargetIsObject(e) { if (!ce.TypeIsObject(e)) {
        throw new TypeError("target must be an object");
    } };
    var En = { apply: function apply() { return ce.Call(ce.Call, null, arguments); }, construct: function construct(e, t) { if (!ce.IsConstructor(e)) {
            throw new TypeError("First argument must be a constructor.");
        } var r = arguments.length > 2 ? arguments[2] : e; if (!ce.IsConstructor(r)) {
            throw new TypeError("new.target must be a constructor.");
        } return ce.Construct(e, t, r, "internal"); }, deleteProperty: function deleteProperty(e, t) { In(e); if (s) {
            var r = Object.getOwnPropertyDescriptor(e, t);
            if (r && !r.configurable) {
                return false;
            }
        } return delete e[t]; }, has: function has(e, t) { In(e); return t in e; } };
    if (Object.getOwnPropertyNames) {
        Object.assign(En, { ownKeys: function ownKeys(e) { In(e); var t = Object.getOwnPropertyNames(e); if (ce.IsCallable(Object.getOwnPropertySymbols)) {
                x(t, Object.getOwnPropertySymbols(e));
            } return t; } });
    }
    var Pn = function ConvertExceptionToBoolean(e) { return !i(e); };
    if (Object.preventExtensions) {
        Object.assign(En, { isExtensible: function isExtensible(e) { In(e); return Object.isExtensible(e); }, preventExtensions: function preventExtensions(e) { In(e); return Pn(function () { return Object.preventExtensions(e); }); } });
    }
    if (s) {
        var Cn = function get(e, t, r) { var n = Object.getOwnPropertyDescriptor(e, t); if (!n) {
            var o = Object.getPrototypeOf(e);
            if (o === null) {
                return void 0;
            }
            return Cn(o, t, r);
        } if ("value" in n) {
            return n.value;
        } if (n.get) {
            return ce.Call(n.get, r);
        } return void 0; };
        var Mn = function set(e, r, n, o) { var i = Object.getOwnPropertyDescriptor(e, r); if (!i) {
            var a = Object.getPrototypeOf(e);
            if (a !== null) {
                return Mn(a, r, n, o);
            }
            i = { value: void 0, writable: true, enumerable: true, configurable: true };
        } if ("value" in i) {
            if (!i.writable) {
                return false;
            }
            if (!ce.TypeIsObject(o)) {
                return false;
            }
            var u = Object.getOwnPropertyDescriptor(o, r);
            if (u) {
                return ae.defineProperty(o, r, { value: n });
            }
            else {
                return ae.defineProperty(o, r, { value: n, writable: true, enumerable: true, configurable: true });
            }
        } if (i.set) {
            t(i.set, o, n);
            return true;
        } return false; };
        Object.assign(En, { defineProperty: function defineProperty(e, t, r) { In(e); return Pn(function () { return Object.defineProperty(e, t, r); }); }, getOwnPropertyDescriptor: function getOwnPropertyDescriptor(e, t) { In(e); return Object.getOwnPropertyDescriptor(e, t); }, get: function get(e, t) { In(e); var r = arguments.length > 2 ? arguments[2] : e; return Cn(e, t, r); }, set: function set(e, t, r) { In(e); var n = arguments.length > 3 ? arguments[3] : e; return Mn(e, t, r, n); } });
    }
    if (Object.getPrototypeOf) {
        var xn = Object.getPrototypeOf;
        En.getPrototypeOf = function getPrototypeOf(e) { In(e); return xn(e); };
    }
    if (Object.setPrototypeOf && En.getPrototypeOf) {
        var Nn = function (e, t) { var r = t; while (r) {
            if (e === r) {
                return true;
            }
            r = En.getPrototypeOf(r);
        } return false; };
        Object.assign(En, { setPrototypeOf: function setPrototypeOf(e, t) { In(e); if (t !== null && !ce.TypeIsObject(t)) {
                throw new TypeError("proto must be an object or null");
            } if (t === ae.getPrototypeOf(e)) {
                return true;
            } if (ae.isExtensible && !ae.isExtensible(e)) {
                return false;
            } if (Nn(e, t)) {
                return false;
            } Object.setPrototypeOf(e, t); return true; } });
    }
    var An = function (e, t) { if (!ce.IsCallable(S.Reflect[e])) {
        h(S.Reflect, e, t);
    }
    else {
        var r = a(function () { S.Reflect[e](1); S.Reflect[e](NaN); S.Reflect[e](true); return true; });
        if (r) {
            ne(S.Reflect, e, t);
        }
    } };
    Object.keys(En).forEach(function (e) { An(e, En[e]); });
    var Rn = S.Reflect.getPrototypeOf;
    if (c && Rn && Rn.name !== "getPrototypeOf") {
        ne(S.Reflect, "getPrototypeOf", function getPrototypeOf(e) { return t(Rn, S.Reflect, e); });
    }
    if (S.Reflect.setPrototypeOf) {
        if (a(function () { S.Reflect.setPrototypeOf(1, {}); return true; })) {
            ne(S.Reflect, "setPrototypeOf", En.setPrototypeOf);
        }
    }
    if (S.Reflect.defineProperty) {
        if (!a(function () { var e = !S.Reflect.defineProperty(1, "test", { value: 1 }); var t = typeof Object.preventExtensions !== "function" || !S.Reflect.defineProperty(Object.preventExtensions({}), "test", {}); return e && t; })) {
            ne(S.Reflect, "defineProperty", En.defineProperty);
        }
    }
    if (S.Reflect.construct) {
        if (!a(function () { var e = function F() { }; return S.Reflect.construct(function () { }, [], e) instanceof e; })) {
            ne(S.Reflect, "construct", En.construct);
        }
    }
    if (String(new Date(NaN)) !== "Invalid Date") {
        var _n = Date.prototype.toString;
        var kn = function toString() { var e = +this; if (e !== e) {
            return "Invalid Date";
        } return ce.Call(_n, this); };
        ne(Date.prototype, "toString", kn);
    }
    var Ln = { anchor: function anchor(e) { return ce.CreateHTML(this, "a", "name", e); }, big: function big() { return ce.CreateHTML(this, "big", "", ""); }, blink: function blink() { return ce.CreateHTML(this, "blink", "", ""); }, bold: function bold() { return ce.CreateHTML(this, "b", "", ""); }, fixed: function fixed() { return ce.CreateHTML(this, "tt", "", ""); }, fontcolor: function fontcolor(e) { return ce.CreateHTML(this, "font", "color", e); }, fontsize: function fontsize(e) { return ce.CreateHTML(this, "font", "size", e); }, italics: function italics() { return ce.CreateHTML(this, "i", "", ""); }, link: function link(e) { return ce.CreateHTML(this, "a", "href", e); }, small: function small() { return ce.CreateHTML(this, "small", "", ""); }, strike: function strike() { return ce.CreateHTML(this, "strike", "", ""); }, sub: function sub() { return ce.CreateHTML(this, "sub", "", ""); }, sup: function sub() { return ce.CreateHTML(this, "sup", "", ""); } };
    l(Object.keys(Ln), function (e) { var r = String.prototype[e]; var n = false; if (ce.IsCallable(r)) {
        var o = t(r, "", ' " ');
        var i = P([], o.match(/"/g)).length;
        n = o !== o.toLowerCase() || i > 2;
    }
    else {
        n = true;
    } if (n) {
        ne(String.prototype, e, Ln[e]);
    } });
    var Fn = function () { if (!oe) {
        return false;
    } var e = typeof JSON === "object" && typeof JSON.stringify === "function" ? JSON.stringify : null; if (!e) {
        return false;
    } if (typeof e($()) !== "undefined") {
        return true;
    } if (e([$()]) !== "[null]") {
        return true;
    } var t = { a: $() }; t[$()] = true; if (e(t) !== "{}") {
        return true;
    } return false; }();
    var Dn = a(function () { if (!oe) {
        return true;
    } return JSON.stringify(Object($())) === "{}" && JSON.stringify([Object($())]) === "[{}]"; });
    if (Fn || !Dn) {
        var zn = JSON.stringify;
        ne(JSON, "stringify", function stringify(e) { if (typeof e === "symbol") {
            return;
        } var n; if (arguments.length > 1) {
            n = arguments[1];
        } var o = [e]; if (!r(n)) {
            var i = ce.IsCallable(n) ? n : null;
            var a = function (e, r) { var n = i ? t(i, this, e, r) : r; if (typeof n !== "symbol") {
                if (re.symbol(n)) {
                    return Nt({})(n);
                }
                else {
                    return n;
                }
            } };
            o.push(a);
        }
        else {
            o.push(n);
        } if (arguments.length > 2) {
            o.push(arguments[2]);
        } return zn.apply(this, o); });
    }
    return S;
});
//# sourceMappingURL=es6-shim.map
// By referencing this file first, before any other Keyman class definitions,
// a globally-usable 'singleton' reference to KeymanWeb can be established.
var com;
(function (com) {
    var keyman;
    (function (keyman) {
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var has = Object.prototype.hasOwnProperty, prefix = '~';
/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() { }
//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
    Events.prototype = Object.create(null);
    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__)
        prefix = false;
}
/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
}
/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
    }
    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
    if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
    else
        emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
}
/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0)
        emitter._events = new Events();
    else
        delete emitter._events[evt];
}
/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
}
/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
    var names = [], events, name;
    if (this._eventsCount === 0)
        return names;
    for (name in (events = this._events)) {
        if (has.call(events, name))
            names.push(prefix ? name.slice(1) : name);
    }
    if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
    }
    return names;
};
/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers = this._events[evt];
    if (!handlers)
        return [];
    if (handlers.fn)
        return [handlers.fn];
    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
    }
    return ee;
};
/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners)
        return 0;
    if (listeners.fn)
        return 1;
    return listeners.length;
};
/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt])
        return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
        if (listeners.once)
            this.removeListener(event, listeners.fn, undefined, true);
        switch (len) {
            case 1: return listeners.fn.call(listeners.context), true;
            case 2: return listeners.fn.call(listeners.context, a1), true;
            case 3: return listeners.fn.call(listeners.context, a1, a2), true;
            case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
    }
    else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
            if (listeners[i].once)
                this.removeListener(event, listeners[i].fn, undefined, true);
            switch (len) {
                case 1:
                    listeners[i].fn.call(listeners[i].context);
                    break;
                case 2:
                    listeners[i].fn.call(listeners[i].context, a1);
                    break;
                case 3:
                    listeners[i].fn.call(listeners[i].context, a1, a2);
                    break;
                case 4:
                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                    break;
                default:
                    if (!args)
                        for (j = 1, args = new Array(len - 1); j < len; j++) {
                            args[j - 1] = arguments[j];
                        }
                    listeners[i].fn.apply(listeners[i].context, args);
            }
        }
    }
    return true;
};
/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
};
/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
};
/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt])
        return this;
    if (!fn) {
        clearEvent(this, evt);
        return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
        if (listeners.fn === fn &&
            (!once || listeners.once) &&
            (!context || listeners.context === context)) {
            clearEvent(this, evt);
        }
    }
    else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn ||
                (once && !listeners[i].once) ||
                (context && listeners[i].context !== context)) {
                events.push(listeners[i]);
            }
        }
        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length)
            this._events[evt] = events.length === 1 ? events[0] : events;
        else
            clearEvent(this, evt);
    }
    return this;
};
/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
            clearEvent(this, evt);
    }
    else {
        this._events = new Events();
        this._eventsCount = 0;
    }
    return this;
};
//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;
//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;
//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;
//
// Expose the module.
//
if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
}
// Implements Node's EventEmitter class and related module components in a near
// browser-compatible way.  (Just requires a blank 'module' object on the window.)
///<reference path="../../node_modules/eventemitter3/index.js" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            text.Codes = {
                // Define Keyman Developer modifier bit-flags (exposed for use by other modules)
                // Compare against /common/core/desktop/src/kmx/kmx_file.h.  CTRL+F "#define LCTRLFLAG" to find the secton.
                modifierCodes: {
                    "LCTRL": 0x0001,
                    "RCTRL": 0x0002,
                    "LALT": 0x0004,
                    "RALT": 0x0008,
                    "SHIFT": 0x0010,
                    "CTRL": 0x0020,
                    "ALT": 0x0040,
                    // TENTATIVE:  Represents command keys, which some OSes use for shortcuts we don't
                    // want to block.  No rule will ever target a modifier set with this bit set to 1. 
                    "META": 0x0080,
                    "CAPS": 0x0100,
                    "NO_CAPS": 0x0200,
                    "NUM_LOCK": 0x0400,
                    "NO_NUM_LOCK": 0x0800,
                    "SCROLL_LOCK": 0x1000,
                    "NO_SCROLL_LOCK": 0x2000,
                    "VIRTUAL_KEY": 0x4000,
                    "VIRTUAL_CHAR_KEY": 0x8000 // VIRTUALCHARKEY // Unused by KMW, but reserved for use by other Keyman engines.
                },
                modifierBitmasks: {
                    "ALL": 0x007F,
                    "ALT_GR_SIM": (0x0001 | 0x0004),
                    "CHIRAL": 0x001F,
                    "IS_CHIRAL": 0x000F,
                    "NON_CHIRAL": 0x0070 // The default bitmask, for non-chiral keyboards
                },
                stateBitmasks: {
                    "ALL": 0x3F00,
                    "CAPS": 0x0300,
                    "NUM_LOCK": 0x0C00,
                    "SCROLL_LOCK": 0x3000
                },
                // Define standard keycode numbers (exposed for use by other modules)
                keyCodes: {
                    "K_BKSP": 8, "K_TAB": 9, "K_ENTER": 13,
                    "K_SHIFT": 16, "K_CONTROL": 17, "K_ALT": 18, "K_PAUSE": 19, "K_CAPS": 20,
                    "K_ESC": 27, "K_SPACE": 32, "K_PGUP": 33,
                    "K_PGDN": 34, "K_END": 35, "K_HOME": 36, "K_LEFT": 37, "K_UP": 38,
                    "K_RIGHT": 39, "K_DOWN": 40, "K_SEL": 41, "K_PRINT": 42, "K_EXEC": 43,
                    "K_INS": 45, "K_DEL": 46, "K_HELP": 47, "K_0": 48,
                    "K_1": 49, "K_2": 50, "K_3": 51, "K_4": 52, "K_5": 53, "K_6": 54, "K_7": 55,
                    "K_8": 56, "K_9": 57, "K_A": 65, "K_B": 66, "K_C": 67, "K_D": 68, "K_E": 69,
                    "K_F": 70, "K_G": 71, "K_H": 72, "K_I": 73, "K_J": 74, "K_K": 75, "K_L": 76,
                    "K_M": 77, "K_N": 78, "K_O": 79, "K_P": 80, "K_Q": 81, "K_R": 82, "K_S": 83,
                    "K_T": 84, "K_U": 85, "K_V": 86, "K_W": 87, "K_X": 88, "K_Y": 89, "K_Z": 90,
                    "K_NP0": 96, "K_NP1": 97, "K_NP2": 98,
                    "K_NP3": 99, "K_NP4": 100, "K_NP5": 101, "K_NP6": 102,
                    "K_NP7": 103, "K_NP8": 104, "K_NP9": 105, "K_NPSTAR": 106,
                    "K_NPPLUS": 107, "K_SEPARATOR": 108, "K_NPMINUS": 109, "K_NPDOT": 110,
                    "K_NPSLASH": 111, "K_F1": 112, "K_F2": 113, "K_F3": 114, "K_F4": 115,
                    "K_F5": 116, "K_F6": 117, "K_F7": 118, "K_F8": 119, "K_F9": 120,
                    "K_F10": 121, "K_F11": 122, "K_F12": 123, "K_NUMLOCK": 144, "K_SCROLL": 145,
                    "K_LSHIFT": 160, "K_RSHIFT": 161, "K_LCONTROL": 162, "K_RCONTROL": 163,
                    "K_LALT": 164, "K_RALT": 165,
                    "K_COLON": 186, "K_EQUAL": 187, "K_COMMA": 188, "K_HYPHEN": 189,
                    "K_PERIOD": 190, "K_SLASH": 191, "K_BKQUOTE": 192,
                    "K_LBRKT": 219, "K_BKSLASH": 220, "K_RBRKT": 221,
                    "K_QUOTE": 222, "K_oE2": 226, "K_OE2": 226,
                    "K_LOPT": 50001, "K_ROPT": 50002,
                    "K_NUMERALS": 50003, "K_SYMBOLS": 50004, "K_CURRENCIES": 50005,
                    "K_UPPER": 50006, "K_LOWER": 50007, "K_ALPHA": 50008,
                    "K_SHIFTED": 50009, "K_ALTGR": 50010,
                    "K_TABBACK": 50011, "K_TABFWD": 50012
                },
                codesUS: [
                    ['0123456789', ';=,-./`', '[\\]\''],
                    [')!@#$%^&*(', ':+<_>?~', '{|}"']
                ]
            };
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            // Defines the base Deadkey-tracking object.
            var Deadkey = /** @class */ (function () {
                function Deadkey(pos, id) {
                    this.p = pos;
                    this.d = id;
                    this.o = Deadkey.ordinalSeed++;
                }
                Deadkey.prototype.match = function (p, d) {
                    var result = (this.p == p && this.d == d);
                    return result;
                };
                Deadkey.prototype.set = function () {
                    this.matched = 1;
                };
                Deadkey.prototype.reset = function () {
                    this.matched = 0;
                };
                Deadkey.prototype.before = function (other) {
                    return this.o < other.o;
                };
                Deadkey.prototype.clone = function () {
                    var dk = new Deadkey(this.p, this.d);
                    dk.o = this.o;
                    return dk;
                };
                Deadkey.ordinalSeed = 0;
                /**
                 * Sorts the deadkeys in reverse order.
                 */
                Deadkey.sortFunc = function (a, b) {
                    // We want descending order, so we want 'later' deadkeys first.
                    if (a.p != b.p) {
                        return b.p - a.p;
                    }
                    else {
                        return b.o - a.o;
                    }
                };
                return Deadkey;
            }());
            text.Deadkey = Deadkey;
            // Object-orients deadkey management.
            var DeadkeyTracker = /** @class */ (function () {
                function DeadkeyTracker() {
                    this.dks = [];
                }
                DeadkeyTracker.prototype.toSortedArray = function () {
                    this.dks = this.dks.sort(Deadkey.sortFunc);
                    return [].concat(this.dks);
                };
                DeadkeyTracker.prototype.clone = function () {
                    var dkt = new DeadkeyTracker();
                    var dks = this.toSortedArray();
                    // Make sure to clone the deadkeys themselves - the Deadkey object is mutable.
                    dkt.dks = [];
                    dks.forEach(function (value) {
                        dkt.dks.push(value.clone());
                    });
                    return dkt;
                };
                /**
                 * Function     isMatch
                 * Scope        Public
                 * @param       {number}      caretPos  current cursor position
                 * @param       {number}      n         expected offset of deadkey from cursor
                 * @param       {number}      d         deadkey
                 * @return      {boolean}               True if deadkey found selected context matches val
                 * Description  Match deadkey at current cursor position
                 */
                DeadkeyTracker.prototype.isMatch = function (caretPos, n, d) {
                    if (this.dks.length == 0) {
                        return false; // I3318
                    }
                    var sp = caretPos;
                    n = sp - n;
                    for (var i = 0; i < this.dks.length; i++) {
                        // Don't re-match an already-matched deadkey.  It's possible to have two identical 
                        // entries, and they should be kept separately.
                        if (this.dks[i].match(n, d) && !this.dks[i].matched) {
                            this.dks[i].set();
                            // Assumption:  since we match the first possible entry in the array, we
                            // match the entry with the lower ordinal - the 'first' deadkey in the position.
                            return true; // I3318
                        }
                    }
                    this.resetMatched(); // I3318
                    return false;
                };
                DeadkeyTracker.prototype.add = function (dk) {
                    this.dks = this.dks.concat(dk);
                };
                DeadkeyTracker.prototype.remove = function (dk) {
                    var index = this.dks.indexOf(dk);
                    this.dks.splice(index, 1);
                };
                DeadkeyTracker.prototype.clear = function () {
                    this.dks = [];
                };
                DeadkeyTracker.prototype.resetMatched = function () {
                    for (var _i = 0, _a = this.dks; _i < _a.length; _i++) {
                        var dk = _a[_i];
                        dk.reset();
                    }
                };
                DeadkeyTracker.prototype.deleteMatched = function () {
                    for (var Li = 0; Li < this.dks.length; Li++) {
                        if (this.dks[Li].matched) {
                            this.dks.splice(Li--, 1); // Don't forget to decrement!
                        }
                    }
                };
                /**
                 * Function     adjustPositions (formerly _DeadkeyAdjustPos)
                 * Scope        Private
                 * @param       {number}      Lstart      start position in context
                 * @param       {number}      Ldelta      characters to adjust by
                 * Description  Adjust saved positions of deadkeys in context
                 */
                DeadkeyTracker.prototype.adjustPositions = function (Lstart, Ldelta) {
                    if (Ldelta == 0) {
                        return;
                    }
                    for (var _i = 0, _a = this.dks; _i < _a.length; _i++) {
                        var dk = _a[_i];
                        if (dk.p > Lstart) {
                            dk.p += Ldelta;
                        }
                    }
                };
                DeadkeyTracker.prototype.count = function () {
                    return this.dks.length;
                };
                return DeadkeyTracker;
            }());
            text.DeadkeyTracker = DeadkeyTracker;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Defines deadkey management in a manner attachable to each element interface.
///<reference path="../text/deadkeys.ts" />
// Defines the KeyEvent type.
///<reference path="keyEvent.ts" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Also relies on string-extensions provided by the web-utils package.
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text_1) {
            var TextTransform = /** @class */ (function () {
                function TextTransform(insert, deleteLeft, deleteRight) {
                    this.insert = insert;
                    this.deleteLeft = deleteLeft;
                    this.deleteRight = deleteRight || 0;
                }
                TextTransform.nil = new TextTransform('', 0, 0);
                return TextTransform;
            }());
            text_1.TextTransform = TextTransform;
            var Transcription = /** @class */ (function () {
                function Transcription(keystroke, transform, preInput, alternates /*, removedDks: Deadkey[], insertedDks: Deadkey[]*/) {
                    var token = this.token = Transcription.tokenSeed++;
                    this.keystroke = keystroke;
                    this.transform = transform;
                    this.alternates = alternates;
                    this.preInput = preInput;
                    this.transform.id = this.token;
                    // Assign the ID to each alternate, as well.
                    if (alternates) {
                        alternates.forEach(function (alt) {
                            alt.sample.id = token;
                        });
                    }
                }
                Transcription.tokenSeed = 0;
                return Transcription;
            }());
            text_1.Transcription = Transcription;
            var OutputTarget = /** @class */ (function () {
                function OutputTarget() {
                    this._dks = new text.DeadkeyTracker();
                }
                Object.defineProperty(OutputTarget.prototype, "isSynthetic", {
                    /**
                     * Signifies that this OutputTarget has no default key processing behaviors.  This should be false
                     * for OutputTargets backed by web elements like HTMLInputElement or HTMLTextAreaElement.
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                OutputTarget.prototype.resetContext = function () {
                    this.deadkeys().clear();
                };
                OutputTarget.prototype.deadkeys = function () {
                    return this._dks;
                };
                OutputTarget.prototype.hasDeadkeyMatch = function (n, d) {
                    return this.deadkeys().isMatch(this.getDeadkeyCaret(), n, d);
                };
                OutputTarget.prototype.insertDeadkeyBeforeCaret = function (d) {
                    var dk = new text_1.Deadkey(this.getDeadkeyCaret(), d);
                    this.deadkeys().add(dk);
                };
                /**
                 * Should be called by each output target immediately before text mutation operations occur.
                 *
                 * Maintains solutions to old issues:  I3318,I3319
                 * @param {number} delta  Use negative values if characters were deleted, positive if characters were added.
                 */
                OutputTarget.prototype.adjustDeadkeys = function (delta) {
                    this.deadkeys().adjustPositions(this.getDeadkeyCaret(), delta);
                };
                /**
                 * Needed to properly clone deadkeys for use with Mock element interfaces toward predictive text purposes.
                 * @param {object}  dks   An existing set of deadkeys to deep-copy for use by this element interface.
                 */
                OutputTarget.prototype.setDeadkeys = function (dks) {
                    this._dks = dks.clone();
                };
                /**
                 * Determines the basic operations needed to reconstruct the current OutputTarget's text from the prior state specified
                 * by another OutputTarget based on their text and caret positions.
                 *
                 * This is designed for use as a "before and after" comparison to determine the effect of a single keyboard rule at a time.
                 * As such, it assumes that the caret is immediately after any inserted text.
                 * @param from An output target (preferably a Mock) representing the prior state of the input/output system.
                 */
                OutputTarget.prototype.buildTransformFrom = function (original) {
                    var to = this.getText();
                    var from = original.getText();
                    var fromCaret = original.getDeadkeyCaret();
                    var toCaret = this.getDeadkeyCaret();
                    // Step 1:  Determine the number of left-deletions.
                    var maxSMPLeftMatch = fromCaret < toCaret ? fromCaret : toCaret;
                    // We need the corresponding non-SMP caret location in order to binary-search efficiently.
                    // (Examining code units is much more computationally efficient.)
                    var maxLeftMatch = to._kmwCodePointToCodeUnit(maxSMPLeftMatch);
                    // 1.1:  use a non-SMP-aware binary search to determine the divergence point.
                    var start = 0;
                    var end = maxLeftMatch; // the index AFTER the last possible matching char.
                    // This search is O(maxLeftMatch).  1/2 + 1/4 + 1/8 + ... converges to = 1.
                    while (start < end) {
                        var mid = Math.floor((end + start + 1) / 2); // round up (compare more)
                        var fromLeft = from.substr(start, mid - start);
                        var toLeft = to.substr(start, mid - start);
                        if (fromLeft == toLeft) {
                            start = mid;
                        }
                        else {
                            end = mid - 1;
                        }
                    }
                    // At the loop's end:  `end` now holds the non-SMP-aware divergence point.
                    // The 'caret' is after the last matching code unit.
                    // 1.2:  detect a possible surrogate-pair split scenario, correcting for it
                    //       (by moving the split before the high-surrogate) if detected.
                    // If the split location is precisely on either end of the context, we can't
                    // have split a surrogate pair.
                    if (end > 0 && end < maxLeftMatch) {
                        var potentialHigh = from.charCodeAt(end - 1);
                        var potentialFromLow = from.charCodeAt(end);
                        var potentialToLow = to.charCodeAt(end);
                        // if potentialHigh is a possible high surrogate...
                        if (potentialHigh >= 0xD800 && potentialHigh <= 0xDBFF) {
                            // and at least one potential 'low' is a possible low surrogate...
                            var flag = potentialFromLow >= 0xDC00 && potentialFromLow <= 0xDFFF;
                            flag = flag || (potentialToLow >= 0XDC00 && potentialToLow <= 0xDFFF);
                            // Correct the split location, moving it 'before' the high surrogate.
                            if (flag) {
                                end = end - 1;
                            }
                        }
                    }
                    // 1.3:  take substring from start to the split point; determine SMP-aware length.
                    //       This yields the SMP-aware divergence index, which gives the number of left-deletes.
                    var newCaret = from._kmwCodeUnitToCodePoint(end);
                    var deletedLeft = fromCaret - newCaret;
                    // Step 2:  Determine the other properties.
                    // Since the 'after' OutputTarget's caret indicates the end of any inserted text, we
                    // can easily calculate the rest.
                    var insertedLength = toCaret - newCaret;
                    var delta = to._kmwSubstr(newCaret, insertedLength);
                    var undeletedRight = to._kmwLength() - toCaret;
                    var originalRight = from._kmwLength() - fromCaret;
                    var deletedRight = originalRight - undeletedRight;
                    // May occur when reverting a suggestion that had been applied mid-word.
                    if (deletedRight < 0) {
                        // Restores deleteRight characters.
                        delta = delta + to._kmwSubstr(toCaret, -deletedRight);
                        deletedRight = 0;
                    }
                    return new TextTransform(delta, deletedLeft, deletedRight);
                };
                OutputTarget.prototype.buildTranscriptionFrom = function (original, keyEvent, alternates) {
                    var transform = this.buildTransformFrom(original);
                    // If we ever decide to re-add deadkey tracking, this is the place for it.
                    return new Transcription(keyEvent, transform, Mock.from(original), alternates);
                };
                /**
                 * Restores the `OutputTarget` to the indicated state.  Designed for use with `Transcription.preInput`.
                 * @param original An `OutputTarget` (usually a `Mock`).
                 */
                OutputTarget.prototype.restoreTo = function (original) {
                    //
                    this.setTextBeforeCaret(original.getTextBeforeCaret());
                    this.setTextAfterCaret(original.getTextAfterCaret());
                    // Also, restore the deadkeys!
                    this._dks = original._dks.clone();
                };
                OutputTarget.prototype.apply = function (transform) {
                    if (transform.deleteRight) {
                        this.setTextAfterCaret(this.getTextAfterCaret()._kmwSubstr(transform.deleteRight));
                    }
                    if (transform.deleteLeft) {
                        this.deleteCharsBeforeCaret(transform.deleteLeft);
                    }
                    if (transform.insert) {
                        this.insertTextBeforeCaret(transform.insert);
                    }
                    // We assume that all deadkeys are invalidated after applying a Transform, since
                    // prediction implies we'll be completing a word, post-deadkeys.
                    this._dks.clear();
                };
                /**
                 * Helper to `restoreTo` - allows directly setting the 'before' context to that of another
                 * `OutputTarget`.
                 * @param s
                 */
                OutputTarget.prototype.setTextBeforeCaret = function (s) {
                    // This one's easy enough to provide a default implementation for.
                    this.deleteCharsBeforeCaret(this.getTextBeforeCaret()._kmwLength());
                    this.insertTextBeforeCaret(s);
                };
                /**
                 * Saves element-specific state properties prone to mutation, enabling restoration after
                 * text-output operations.
                 */
                OutputTarget.prototype.saveProperties = function () {
                    // Most element interfaces won't need anything here.
                };
                /**
                 * Restores previously-saved element-specific state properties.  Designed for use after text-output
                 * ops to facilitate more-seamless web-dev and user interactions.
                 */
                OutputTarget.prototype.restoreProperties = function () {
                    // Most element interfaces won't need anything here. 
                };
                return OutputTarget;
            }());
            text_1.OutputTarget = OutputTarget;
            // Due to some interesting requirements on compile ordering in TS,
            // this needs to be in the same file as OutputTarget now.
            var Mock = /** @class */ (function (_super) {
                __extends(Mock, _super);
                function Mock(text, caretPos) {
                    var _this = _super.call(this) || this;
                    _this.text = text ? text : "";
                    var defaultLength = _this.text._kmwLength();
                    // Ensures that `caretPos == 0` is handled correctly.
                    _this.caretIndex = typeof caretPos == "number" ? caretPos : defaultLength;
                    return _this;
                }
                // Clones the state of an existing EditableElement, creating a Mock version of its state.
                Mock.from = function (outputTarget) {
                    var clone;
                    if (outputTarget instanceof Mock) {
                        // Avoids the need to run expensive kmwstring.ts / `_kmwLength()`
                        // calculations when deep-copying Mock instances.
                        var priorMock = outputTarget;
                        clone = new Mock(priorMock.text, priorMock.caretIndex);
                    }
                    else {
                        // If we're 'cloning' a different OutputTarget type, we don't have a
                        // guaranteed way to more efficiently get these values; these are the
                        // best methods specified by the abstraction.
                        var preText = outputTarget.getTextBeforeCaret();
                        var caretIndex = preText._kmwLength();
                        // We choose to ignore (rather, pre-emptively remove) any actively-selected text,
                        // as since it's always removed instantly during any text mutation operations.
                        clone = new Mock(preText + outputTarget.getTextAfterCaret(), caretIndex);
                    }
                    // Also duplicate deadkey state!  (Needed for fat-finger ops.)
                    clone.setDeadkeys(outputTarget.deadkeys());
                    return clone;
                };
                Mock.prototype.clearSelection = function () {
                    return;
                };
                Mock.prototype.invalidateSelection = function () {
                    return;
                };
                Mock.prototype.hasSelection = function () {
                    return true;
                };
                Mock.prototype.getDeadkeyCaret = function () {
                    return this.caretIndex;
                };
                Mock.prototype.setDeadkeyCaret = function (index) {
                    if (index < 0 || index > this.text._kmwLength()) {
                        throw new Error("Provided caret index is out of range.");
                    }
                    this.caretIndex = index;
                };
                Mock.prototype.getTextBeforeCaret = function () {
                    return this.text.kmwSubstr(0, this.caretIndex);
                };
                Mock.prototype.getTextAfterCaret = function () {
                    return this.text.kmwSubstr(this.caretIndex);
                };
                Mock.prototype.getText = function () {
                    return this.text;
                };
                Mock.prototype.deleteCharsBeforeCaret = function (dn) {
                    if (dn >= 0) {
                        if (dn > this.caretIndex) {
                            dn = this.caretIndex;
                        }
                        this.text = this.text.kmwSubstr(0, this.caretIndex - dn) + this.getTextAfterCaret();
                        this.caretIndex -= dn;
                    }
                };
                Mock.prototype.insertTextBeforeCaret = function (s) {
                    this.text = this.getTextBeforeCaret() + s + this.getTextAfterCaret();
                    this.caretIndex += s.kmwLength();
                };
                Mock.prototype.handleNewlineAtCaret = function () {
                    this.insertTextBeforeCaret('\n');
                };
                Mock.prototype.setTextAfterCaret = function (s) {
                    this.text = this.getTextBeforeCaret() + s;
                };
                Mock.prototype.doInputEvent = function () {
                    // Mock isn't backed by an element, so it won't have any event listeners.
                };
                return Mock;
            }(OutputTarget));
            text_1.Mock = Mock;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="outputTarget.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            /**
             * This class is defined within its own file so that it can be loaded by code outside of KMW without
             * having to actually load the entirety of KMW.
             */
            var KeyEvent = /** @class */ (function () {
                function KeyEvent() {
                    /**
                     * `true` if this event was produced by sources other than a DOM-based KeyboardEvent.
                     */
                    this.isSynthetic = true;
                }
                return KeyEvent;
            }());
            text.KeyEvent = KeyEvent;
            ;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            /**
             * Represents the commands and state changes that result from a matched keyboard rule.
             */
            var RuleBehavior = /** @class */ (function () {
                function RuleBehavior() {
                    /**
                     * The before-and-after Transform from matching a keyboard rule.  May be `null`
                     * if no keyboard rules were matched for the keystroke.
                     */
                    this.transcription = null;
                    /**
                     * A set of changed store values triggered by the matched keyboard rule.
                     */
                    this.setStore = {};
                    /**
                     * A set of variable stores with save requests triggered by the matched keyboard rule
                     */
                    this.saveStore = {};
                    /**
                     * A set of variable stores with possible changes to be applied during finalization.
                     */
                    this.variableStores = {};
                    /**
                     * Denotes a non-output default behavior; this should be evaluated later, against the true keystroke.
                     */
                    this.triggersDefaultCommand = false;
                }
                RuleBehavior.prototype.finalize = function (processor, outputTarget) {
                    if (!this.transcription) {
                        throw "Cannot finalize a RuleBehavior with no transcription.";
                    }
                    if (processor.beepHandler && this.beep) {
                        processor.beepHandler(outputTarget);
                    }
                    for (var storeID in this.setStore) {
                        var sysStore = processor.keyboardInterface.systemStores[storeID];
                        if (sysStore) {
                            try {
                                sysStore.set(this.setStore[storeID]);
                            }
                            catch (error) {
                                if (processor.errorLogger) {
                                    processor.errorLogger("Rule attempted to perform illegal operation - 'platform' may not be changed.");
                                }
                            }
                        }
                        else if (processor.warningLogger) {
                            processor.warningLogger("Unknown store affected by keyboard rule: " + storeID);
                        }
                    }
                    processor.keyboardInterface.applyVariableStores(this.variableStores);
                    if (processor.keyboardInterface.variableStoreSerializer) {
                        for (var storeID in this.saveStore) {
                            processor.keyboardInterface.variableStoreSerializer.saveStore(processor.activeKeyboard.id, storeID, this.saveStore[storeID]);
                        }
                    }
                    if (this.triggersDefaultCommand) {
                        var keyEvent = this.transcription.keystroke;
                        text.DefaultOutput.applyCommand(keyEvent, outputTarget);
                    }
                    if (processor.warningLogger && this.warningLog) {
                        processor.warningLogger(this.warningLog);
                    }
                    else if (processor.errorLogger && this.errorLog) {
                        processor.errorLogger(this.errorLog);
                    }
                };
                /**
                 * Merges default-related behaviors from another RuleBehavior into this one.  Assumes that the current instance
                 * "came first" chronologically.  Both RuleBehaviors must be sourced from the same keystroke.
                 *
                 * Intended use:  merging rule-based behavior with default key behavior during scenarios like those described
                 * at https://github.com/keymanapp/keyman/pull/4350#issuecomment-768753852.
                 *
                 * This function does not attempt a "complete" merge for two fully-constructed RuleBehaviors!  Things
                 * WILL break for unintended uses.
                 * @param other
                 */
                RuleBehavior.prototype.mergeInDefaults = function (other) {
                    var keystroke = this.transcription.keystroke;
                    var keyFromOther = other.transcription.keystroke;
                    if (keystroke.Lcode != keyFromOther.Lcode || keystroke.Lmodifiers != keyFromOther.Lmodifiers) {
                        throw "RuleBehavior default-merge not supported unless keystrokes are identical!";
                    }
                    this.triggersDefaultCommand = this.triggersDefaultCommand || other.triggersDefaultCommand;
                    var mergingMock = text.Mock.from(this.transcription.preInput);
                    mergingMock.apply(this.transcription.transform);
                    mergingMock.apply(other.transcription.transform);
                    this.transcription = mergingMock.buildTranscriptionFrom(this.transcription.preInput, keystroke, this.transcription.alternates);
                };
                return RuleBehavior;
            }());
            text.RuleBehavior = RuleBehavior;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Establishes key-code definitions.
/// <reference path="codes.ts" />
// Defines our generalized "KeyEvent" class.
/// <reference path="keyEvent.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            var EmulationKeystrokes;
            (function (EmulationKeystrokes) {
                EmulationKeystrokes["Enter"] = "\n";
                EmulationKeystrokes["Backspace"] = "\b";
            })(EmulationKeystrokes = text.EmulationKeystrokes || (text.EmulationKeystrokes = {}));
            /**
             * Defines a collection of static library functions that define KeymanWeb's default (implied) keyboard rule behaviors.
             */
            var DefaultOutput = /** @class */ (function () {
                function DefaultOutput() {
                }
                DefaultOutput.codeForEvent = function (Lkc) {
                    return text.Codes.keyCodes[Lkc.kName] || Lkc.Lcode;
                    ;
                };
                /**
                 * Serves as a default keycode lookup table.  This may be referenced safely by mnemonic handling without fear of side-effects.
                 * Also used by Processor.defaultRuleBehavior to generate output after filtering for special cases.
                 */
                DefaultOutput.forAny = function (Lkc, isMnemonic, ruleBehavior) {
                    var char = '';
                    // A pretty simple table of lookups, corresponding VERY closely to the original defaultKeyOutput.
                    if ((char = DefaultOutput.forSpecialEmulation(Lkc, ruleBehavior)) != null) {
                        return char;
                    }
                    else if (!isMnemonic && ((char = DefaultOutput.forNumpadKeys(Lkc, ruleBehavior)) != null)) {
                        return char;
                    }
                    else if ((char = DefaultOutput.forUnicodeKeynames(Lkc, ruleBehavior)) != null) {
                        return char;
                    }
                    else if ((char = DefaultOutput.forBaseKeys(Lkc, ruleBehavior)) != null) {
                        return char;
                    }
                    else {
                        // // For headless and embeddded, we may well allow '\t'.  It's DOM mode that has other uses.
                        // // Not originally defined for text output within defaultKeyOutput.
                        // // We can't enable it yet, as it'll cause hardware keystrokes in the DOM to output '\t' rather
                        // // than rely on the browser-default handling.
                        var code = DefaultOutput.codeForEvent(Lkc);
                        switch (code) {
                            //   case Codes.keyCodes['K_TAB']:
                            //   case Codes.keyCodes['K_TABBACK']:
                            //   case Codes.keyCodes['K_TABFWD']:
                            //     return '\t';
                            default:
                                return null;
                        }
                    }
                };
                /**
                 * isCommand - returns a boolean indicating if a non-text event should be triggered by the keystroke.
                 */
                DefaultOutput.isCommand = function (Lkc) {
                    var code = DefaultOutput.codeForEvent(Lkc);
                    switch (code) {
                        // Should we ever implement them:
                        // case Codes.keyCodes['K_LEFT']:  // would not output text, but would alter the caret's position in the context.
                        // case Codes.keyCodes['K_RIGHT']:
                        //   return true;
                        default:
                            return false;
                    }
                };
                /**
                 * Used when a RuleBehavior represents a non-text "command" within the Engine.  This will generally
                 * trigger events that require context reset - often by moving the caret or by moving what OutputTarget
                 * the caret is in.  However, we let those events perform the actual context reset.
                 *
                 * Note:  is extended by DOM-aware KeymanWeb code.
                 */
                DefaultOutput.applyCommand = function (Lkc, outputTarget) {
                    // Notes for potential default-handling extensions:
                    //
                    // switch(code) {
                    // // Problem:  clusters, and doing them right.
                    // // The commented-out code below should be a decent starting point, but clusters make it complex.
                    // // Mostly based on pre-12.0 code, but the general idea should be relatively clear.
                    //
                    // case Codes.keyCodes['K_LEFT']:
                    //   if(touchAlias) {
                    //     var caretPos = keymanweb.getTextCaret(Lelem);
                    //     keymanweb.setTextCaret(Lelem, caretPos - 1 >= 0 ? caretPos - 1 : 0);
                    //   }
                    //   break;
                    // case Codes.keyCodes['K_RIGHT']:
                    //   if(touchAlias) {
                    //     var caretPos = keymanweb.getTextCaret(Lelem);
                    //     keymanweb.setTextCaret(Lelem, caretPos + 1);
                    //   }
                    //   if(code == VisualKeyboard.keyCodes['K_RIGHT']) {
                    //     break;
                    //   }
                    // }
                    //
                    // Note that these would be useful even outside of a DOM context.
                };
                /**
                 * Codes matched here generally have default implementations when in a browser but require emulation
                 * for 'synthetic' `OutputTarget`s like `Mock`s, which have no default text handling.
                 */
                DefaultOutput.forSpecialEmulation = function (Lkc, ruleBehavior) {
                    var code = DefaultOutput.codeForEvent(Lkc);
                    switch (code) {
                        case text.Codes.keyCodes['K_BKSP']:
                            return EmulationKeystrokes.Backspace;
                        case text.Codes.keyCodes['K_ENTER']:
                            return EmulationKeystrokes.Enter;
                        // case Codes.keyCodes['K_DEL']:
                        //   return '\u007f'; // 127, ASCII / Unicode control code for DEL.
                        default:
                            return null;
                    }
                };
                // Should not be used for mnenomic keyboards.  forAny()'s use of this method checks first.
                DefaultOutput.forNumpadKeys = function (Lkc, ruleBehavior) {
                    // Translate numpad keystrokes into their non-numpad equivalents
                    if (Lkc.Lcode >= text.Codes.keyCodes["K_NP0"] && Lkc.Lcode <= text.Codes.keyCodes["K_NPSLASH"]) {
                        // Number pad, numlock on
                        if (Lkc.Lcode < 106) {
                            var Lch = Lkc.Lcode - 48;
                        }
                        else {
                            Lch = Lkc.Lcode - 64;
                        }
                        var ch = String._kmwFromCharCode(Lch); //I3319
                        return ch;
                    }
                    else {
                        return null;
                    }
                };
                // Test for fall back to U_xxxxxx key id
                // For this first test, we ignore the keyCode and use the keyName
                DefaultOutput.forUnicodeKeynames = function (Lkc, ruleBehavior) {
                    var keyName = Lkc.kName;
                    // Test for fall back to U_xxxxxx key id
                    // For this first test, we ignore the keyCode and use the keyName
                    if (!keyName || keyName.substr(0, 2) != 'U_') {
                        return null;
                    }
                    var result = '';
                    var codePoints = keyName.substr(2).split('_');
                    for (var _i = 0, codePoints_1 = codePoints; _i < codePoints_1.length; _i++) {
                        var codePoint = codePoints_1[_i];
                        var codePointValue = parseInt(codePoint, 16);
                        if (((0x0 <= codePointValue) && (codePointValue <= 0x1F)) || ((0x80 <= codePointValue) && (codePointValue <= 0x9F))) {
                            // Code points [U_0000 - U_001F] and [U_0080 - U_009F] refer to Unicode C0 and C1 control codes.
                            // Check the codePoint number and do not allow output of these codes via U_xxxxxx shortcuts.
                            if (ruleBehavior) {
                                ruleBehavior.errorLog = ("Suppressing Unicode control code in " + keyName);
                            }
                            // We'll attempt to add valid chars
                            continue;
                        }
                        else {
                            // String.fromCharCode() is inadequate to handle the entire range of Unicode
                            // Someday after upgrading to ES2015, can use String.fromCodePoint()
                            result += String.kmwFromCharCode(codePointValue);
                        }
                    }
                    return result ? result : null;
                };
                // Test for otherwise unimplemented keys on the the base default & shift layers.
                // Those keys must be blocked by keyboard rules if intentionally unimplemented; otherwise, this function will trigger.
                DefaultOutput.forBaseKeys = function (Lkc, ruleBehavior) {
                    var n = Lkc.Lcode;
                    var keyShiftState = Lkc.Lmodifiers;
                    // check if exact match to SHIFT's code.  Only the 'default' and 'shift' layers should have default key outputs.
                    // TODO:  Extend to allow AltGr as well - better mnemonic support.
                    if (keyShiftState == text.Codes.modifierCodes['SHIFT']) {
                        keyShiftState = 1;
                    }
                    else if (keyShiftState != 0) {
                        if (ruleBehavior) {
                            ruleBehavior.warningLog = "KMW only defines default key output for the 'default' and 'shift' layers!";
                        }
                        return null;
                    }
                    // Now that keyShiftState is either 0 or 1, we can use the following structure to determine the default output.
                    try {
                        if (n == text.Codes.keyCodes['K_SPACE']) {
                            return ' ';
                        }
                        else if (n >= text.Codes.keyCodes['K_0'] && n <= text.Codes.keyCodes['K_9']) { // The number keys.
                            return text.Codes.codesUS[keyShiftState][0][n - text.Codes.keyCodes['K_0']];
                        }
                        else if (n >= text.Codes.keyCodes['K_A'] && n <= text.Codes.keyCodes['K_Z']) { // The base letter keys
                            return String.fromCharCode(n + (keyShiftState ? 0 : 32)); // 32 is the offset from uppercase to lowercase.
                        }
                        else if (n >= text.Codes.keyCodes['K_COLON'] && n <= text.Codes.keyCodes['K_BKQUOTE']) {
                            return text.Codes.codesUS[keyShiftState][1][n - text.Codes.keyCodes['K_COLON']];
                        }
                        else if (n >= text.Codes.keyCodes['K_LBRKT'] && n <= text.Codes.keyCodes['K_QUOTE']) {
                            return text.Codes.codesUS[keyShiftState][2][n - text.Codes.keyCodes['K_LBRKT']];
                        }
                    }
                    catch (e) {
                        if (ruleBehavior) {
                            ruleBehavior.errorLog = "Error detected with default mapping for key:  code = " + n + ", shift state = " + (keyShiftState == 1 ? 'shift' : 'default');
                        }
                    }
                    return null;
                };
                return DefaultOutput;
            }());
            text.DefaultOutput = DefaultOutput;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/***
   KeymanWeb 10.0
   Copyright 2017 SIL International
***/
// Relies on web-utils for version and deep-copy functionality.
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var keyboards;
        (function (keyboards) {
            var Codes = com.keyman.text.Codes;
            // This class manages default layout construction for consumption by OSKs without a specified layout.
            var Layouts = /** @class */ (function () {
                function Layouts() {
                }
                /**
                * Build a default layout for keyboards with no explicit layout
                *
                * @param   {Object}  PVK         raw specifications
                * @param   {Keyboard} keyboard   keyboard object (as loaded)
                * @param   {string} formFactor   (really utils.FormFactor)
                * @return  {LayoutFormFactor}
                */
                Layouts.buildDefaultLayout = function (PVK, keyboard, formFactor) {
                    // Build a layout using the default for the device
                    var layoutType = formFactor;
                    if (typeof Layouts.dfltLayout[layoutType] != 'object') {
                        layoutType = 'desktop';
                    }
                    var kbdBitmask = Codes.modifierBitmasks['NON_CHIRAL'];
                    // An unfortunate dependency there.  Should probably also set a version within web-core for use.
                    var kbdDevVersion = keyman.utils.Version.CURRENT;
                    if (keyboard) {
                        kbdBitmask = keyboard.modifierBitmask;
                        kbdDevVersion = keyboard.compilerVersion;
                    }
                    if (!PVK) {
                        PVK = this.DEFAULT_RAW_SPEC;
                    }
                    // Clone the default layout object for this device
                    var layout = keyman.utils.deepCopy(Layouts.dfltLayout[layoutType]);
                    var n, layers = layout['layer'], keyLabels = PVK['KLS'], key102 = PVK['K102'];
                    var i, j, k, m, row, rows, key, keys;
                    var chiral = (kbdBitmask & Codes.modifierBitmasks.IS_CHIRAL) != 0;
                    var kmw10Plus = !(typeof keyLabels == 'undefined' || !keyLabels);
                    if (!kmw10Plus) {
                        // Save the processed key label information to the keyboard's general data.
                        // Makes things more efficient elsewhere and for reloading after keyboard swaps.
                        keyLabels = PVK['KLS'] = Layouts.processLegacyDefinitions(PVK['BK']);
                    }
                    // Identify key labels (e.g. *Shift*) that require the special OSK font
                    var specialLabel = /\*\w+\*/;
                    // *** Step 1:  instantiate the layer objects. ***
                    // Get the list of valid layers, enforcing that the 'default' layer must be the first one processed.
                    var validIdList = Object.getOwnPropertyNames(keyLabels), invalidIdList = [];
                    validIdList.splice(validIdList.indexOf('default'), 1);
                    validIdList = ['default'].concat(validIdList);
                    // Automatic AltGr emulation if the 'leftctrl-leftalt' layer is otherwise undefined.
                    if (keyboard && keyboard.emulatesAltGr) {
                        // We insert only the layers that need to be emulated.
                        if ((validIdList.indexOf('leftctrl-leftalt') == -1) && validIdList.indexOf('rightalt') != -1) {
                            validIdList.push('leftctrl-leftalt');
                            keyLabels['leftctrl-leftalt'] = keyLabels['rightalt'];
                        }
                        if ((validIdList.indexOf('leftctrl-leftalt-shift') == -1) && validIdList.indexOf('rightalt-shift') != -1) {
                            validIdList.push('leftctrl-leftalt-shift');
                            keyLabels['leftctrl-leftalt-shift'] = keyLabels['rightalt-shift'];
                        }
                    }
                    // If there is no predefined layout, even touch layouts will follow the desktop's
                    // setting for the displayUnderlying flag.  As the desktop layout uses a different
                    // format for its layout spec, that's found at the field referenced below.
                    layout["displayUnderlying"] = keyboard ? !!keyboard.scriptObject['KDU'] : false;
                    // For desktop devices, we must create all layers, even if invalid.
                    if (formFactor == 'desktop') {
                        invalidIdList = Layouts.generateLayerIds(chiral);
                        // Filter out all ids considered valid.  (We also don't want duplicates in the following list...)
                        for (n = 0; n < invalidIdList.length; n++) {
                            if (validIdList.indexOf(invalidIdList[n]) != -1) {
                                invalidIdList.splice(n--, 1);
                            }
                        }
                    }
                    // This ensures all 'valid' layers are at the front of the layer array and managed by the main loop below.
                    // 'invalid' layers aren't handled by the loop and thus remain blank after it.
                    var idList = validIdList.concat(invalidIdList);
                    if (kmw10Plus && formFactor != 'desktop') { // KLS exists, so we know the exact layer set.
                        // Find the SHIFT key...
                        var shiftKey = null;
                        rows = layers[0]['row'];
                        for (var r = 0; r < rows.length; r++) {
                            keys = rows[r]['key'];
                            for (var c = 0; c < keys.length; c++) {
                                key = keys[c];
                                if (key['id'] == 'K_SHIFT') {
                                    shiftKey = key;
                                }
                            }
                        }
                        if (shiftKey) {
                            // Erase the legacy shifted subkey array.
                            shiftKey['sk'] = [];
                            for (var layerID in keyLabels) {
                                if (layerID == 'default' || layerID == 'shift') {
                                    // These two are accessible from the layer without subkeys.
                                    continue;
                                }
                                // Create a new subkey for the specified layer so that it will be accessible via OSK.
                                var specialChar = Layouts.modifierSpecials[layerID];
                                var subkey = {
                                    id: "K_" + specialChar,
                                    text: specialChar,
                                    sp: "1",
                                    nextlayer: layerID
                                };
                                shiftKey['sk'].push(subkey);
                            }
                        }
                        else {
                            // Seriously, this should never happen.  It's here for the debugging log only.
                            console.warn("Error in default layout - cannot find default Shift key!");
                        }
                    }
                    for (n = 0; n < idList.length; n++) {
                        // Populate non-default (shifted) keygroups
                        if (n > 0) {
                            layers[n] = keyman.utils.deepCopy(layers[0]);
                        }
                        layers[n]['id'] = idList[n];
                        layers[n]['nextlayer'] = idList[n]; // This would only be different for a dynamic keyboard
                        // Extraced into a helper method to improve readability.
                        Layouts.formatDefaultLayer(layers[n], chiral, formFactor, !!key102);
                    }
                    // *** Step 2: Layer objects now exist; time to fill them with the appropriate key labels and key styles ***
                    for (n = 0; n < layers.length; n++) {
                        var layer = layers[n], kx, shiftKey = null, nextKey = null, allText = '';
                        var capsKey = null, numKey = null, scrollKey = null; // null if not in the OSK layout.
                        var layerSpec = keyLabels[layer['id']];
                        var isShift = layer['id'] == 'shift' ? 1 : 0;
                        var isDefault = layer['id'] == 'default' || isShift ? 1 : 0;
                        rows = layer['row'];
                        for (i = 0; i < rows.length; i++) {
                            keys = rows[i]['key'];
                            for (j = 0; j < keys.length; j++) {
                                key = keys[j];
                                kx = Layouts.dfltCodes.indexOf(key['id']);
                                // Only create keys for defined layers.  ('default' and 'shift' are always defined.)
                                if (layerSpec || isDefault) {
                                    // Get keycap text from visual keyboard array, if defined in keyboard
                                    if (layerSpec) {
                                        if (kx >= 0 && kx < layerSpec.length)
                                            key['text'] = layerSpec[kx];
                                    }
                                    // Legacy (pre 12.0) behavior:  fall back to US English keycap text as default for the base two layers
                                    // if a key cap is not otherwise defined. (Any intentional 'ghost' keys must be explicitly defined.)
                                    if (isDefault && kbdDevVersion.precedes(keyman.utils.Version.NO_DEFAULT_KEYCAPS)) {
                                        if (key['id'] != 'K_SPACE' && kx + 65 * isShift < Layouts.dfltText.length && key['text'] !== null) {
                                            key['text'] = key['text'] || Layouts.dfltText[kx + 65 * isShift];
                                        }
                                    }
                                }
                                // Leave any unmarked key caps as null strings
                                if (key['text'] !== null) {
                                    key['text'] = key['text'] || '';
                                }
                                // Detect important tracking keys.
                                switch (key['id']) {
                                    case "K_SHIFT":
                                        shiftKey = key;
                                        break;
                                    case "K_TAB":
                                        nextKey = key;
                                        break;
                                    case "K_CAPS":
                                        capsKey = key;
                                        break;
                                    case "K_NUMLOCK":
                                        numKey = key;
                                        break;
                                    case "K_SCROLL":
                                        scrollKey = key;
                                        break;
                                }
                                // Remove pop-up shift keys referencing invalid layers (Build 349)
                                if (key['sk'] != null) {
                                    for (k = 0; k < key['sk'].length; k++) {
                                        if (validIdList.indexOf(key['sk'][k]['nextlayer']) == -1) {
                                            key['sk'].splice(k--, 1);
                                        }
                                    }
                                    if (key['sk'].length == 0) {
                                        key['sk'] = null;
                                    }
                                }
                            }
                        }
                        // We're done with the layer keys initialization pass.  Time to do post-analysis layer-level init where necessary.
                        layer.shiftKey = shiftKey;
                        layer.capsKey = capsKey;
                        layer.numKey = numKey;
                        layer.scrollKey = scrollKey;
                        // Set modifier key appearance and behaviour for non-desktop devices using the default layout
                        if (formFactor != 'desktop') {
                            if (n > 0 && shiftKey != null) {
                                shiftKey['sp'] = Layouts.buttonClasses['SHIFT-ON'];
                                shiftKey['sk'] = null;
                                shiftKey['text'] = Layouts.modifierSpecials[layers[n].id] ? Layouts.modifierSpecials[layers[n].id] : "*Shift*";
                            }
                        }
                    }
                    return layout;
                };
                /**
             * Function     getLayerId
             * Scope        Private
             * @param       {number}      m     shift modifier code
             * @return      {string}            layer string from shift modifier code (desktop keyboards)
             * Description  Get name of layer from code, where the modifer order is determined by ascending bit-flag value.
             */
                Layouts.getLayerId = function (m) {
                    var modifierCodes = Codes.modifierCodes;
                    var s = '';
                    if (m == 0) {
                        return 'default';
                    }
                    else {
                        if (m & modifierCodes['LCTRL']) {
                            s = (s.length > 0 ? s + '-' : '') + 'leftctrl';
                        }
                        if (m & modifierCodes['RCTRL']) {
                            s = (s.length > 0 ? s + '-' : '') + 'rightctrl';
                        }
                        if (m & modifierCodes['LALT']) {
                            s = (s.length > 0 ? s + '-' : '') + 'leftalt';
                        }
                        if (m & modifierCodes['RALT']) {
                            s = (s.length > 0 ? s + '-' : '') + 'rightalt';
                        }
                        if (m & modifierCodes['SHIFT']) {
                            s = (s.length > 0 ? s + '-' : '') + 'shift';
                        }
                        if (m & modifierCodes['CTRL']) {
                            s = (s.length > 0 ? s + '-' : '') + 'ctrl';
                        }
                        if (m & modifierCodes['ALT']) {
                            s = (s.length > 0 ? s + '-' : '') + 'alt';
                        }
                        return s;
                    }
                };
                /**
                 * Generates a list of potential layer ids for the specified chirality mode.
                 *
                 * @param   {boolean}   chiral    // Does the keyboard use chiral modifiers or not?
                 */
                Layouts.generateLayerIds = function (chiral) {
                    var layerCnt, offset;
                    if (chiral) {
                        layerCnt = 32;
                        offset = 0x01;
                    }
                    else {
                        layerCnt = 8;
                        offset = 0x10;
                    }
                    var layerIds = [];
                    for (var i = 0; i < layerCnt; i++) {
                        layerIds.push(Layouts.getLayerId(i * offset));
                    }
                    return layerIds;
                };
                /**
                 * Sets a formatting property for the modifier keys when constructing a default layout for a keyboard.
                 *
                 * @param   {Object}    layer   // One layer specification
                 * @param   {boolean}   chiral  // Whether or not the keyboard uses chiral modifier information.
                 * @param   {string}    formFactor  // The form factor of the device the layout is being constructed for.
                 * @param   {boolean}   key102      // Whether or not the extended key 102 should be hidden.
                 */
                Layouts.formatDefaultLayer = function (layer, chiral, formFactor, key102) {
                    var layerId = layer['id'];
                    var buttonClasses = Layouts.buttonClasses;
                    // Correct appearance of state-dependent modifier keys according to group
                    for (var i = 0; i < layer['row'].length; i++) {
                        var row = layer['row'][i];
                        var keys = row['key'];
                        for (var j = 0; j < keys.length; j++) {
                            var key = keys[j];
                            switch (key['id']) {
                                case 'K_SHIFT':
                                case 'K_LSHIFT':
                                case 'K_RSHIFT':
                                    if (layerId.indexOf('shift') != -1) {
                                        key['sp'] = buttonClasses['SHIFT-ON'];
                                    }
                                    if (formFactor != 'desktop') {
                                        if (layerId != 'default') {
                                            key['nextlayer'] = 'default';
                                        }
                                        else {
                                            key['nextlayer'] = 'shift';
                                        }
                                    }
                                    break;
                                case 'K_LCTRL':
                                case 'K_LCONTROL':
                                    if (chiral) {
                                        if (layerId.indexOf('leftctrl') != -1) {
                                            key['sp'] = buttonClasses['SHIFT-ON'];
                                        }
                                        break;
                                    }
                                case 'K_RCTRL':
                                case 'K_RCONTROL':
                                    if (chiral) {
                                        if (layerId.indexOf('rightctrl') != -1) {
                                            key['sp'] = buttonClasses['SHIFT-ON'];
                                        }
                                        break;
                                    }
                                case 'K_CONTROL':
                                    if (layerId.indexOf('ctrl') != -1) {
                                        if (!chiral || (layerId.indexOf('leftctrl') != -1 && layerId.indexOf('rightctrl') != -1)) {
                                            key['sp'] = buttonClasses['SHIFT-ON'];
                                        }
                                    }
                                    break;
                                case 'K_LALT':
                                    if (chiral) {
                                        if (layerId.indexOf('leftalt') != -1) {
                                            key['sp'] = buttonClasses['SHIFT-ON'];
                                        }
                                        break;
                                    }
                                case 'K_RALT':
                                    if (chiral) {
                                        if (layerId.indexOf('rightalt') != -1) {
                                            key['sp'] = buttonClasses['SHIFT-ON'];
                                        }
                                        break;
                                    }
                                case 'K_ALT':
                                    if (layerId.indexOf('alt') != -1) {
                                        if (!chiral || (layerId.indexOf('leftalt') != -1 && layerId.indexOf('rightalt') != -1)) {
                                            key['sp'] = buttonClasses['SHIFT-ON'];
                                        }
                                    }
                                    break;
                                case 'K_oE2':
                                    if (typeof key102 == 'undefined' || !key102) {
                                        if (formFactor == 'desktop') {
                                            keys.splice(j--, 1);
                                            keys[0]['width'] = '200';
                                        }
                                        else {
                                            keys[j]['sp'] = buttonClasses['HIDDEN'];
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                };
                /**
                 * Converts the legacy BK property from pre 10.0 into the KLS keyboard layer spec format,
                 * sparsifying it as possible to pre-emptively check invalid layers.
                 *
                 * @param   {Array}   BK      keyboard object (as loaded)
                 * @return  {Object}
                 */
                Layouts.processLegacyDefinitions = function (BK) {
                    //['default','shift','ctrl','shiftctrl','alt','shiftalt','ctrlalt','shiftctrlalt'];
                    var idList = Layouts.generateLayerIds(false); // Non-chiral.
                    var KLS = {};
                    // The old default:  eight auto-managed layers...
                    for (var n = 0; n < idList.length; n++) {
                        var id = idList[n], arr = [], valid = false;
                        // ... with keycode mappings in blocks of 65.
                        for (var k = 0; k < 65; k++) {
                            var index = k + 65 * n;
                            arr.push(BK[index]);
                            // The entry for K_SPACE's keycode tends to hold ' ' instead of '', which causes
                            // the whole layer to be treated as 'valid' if not included in the conditional.
                            if (index < BK.length && BK[index] != '' && k != Layouts.dfltCodes.indexOf('K_SPACE')) {
                                valid = true;
                            }
                        }
                        if (valid) {
                            KLS[id] = arr;
                        }
                    }
                    // There must always be at least a plain 'default' layer.  Array(65).fill('') would be preferable but isn't supported on IE,
                    // but buildDefaultLayer will set the defaults for these layers if no entry exists for them in the array due to length.
                    if (typeof KLS['default'] == 'undefined' || !KLS['default']) {
                        KLS['default'] = [''];
                    }
                    // There must always be at least a plain 'shift' layer.
                    if (typeof KLS['shift'] == 'undefined' || !KLS['shift']) {
                        KLS['shift'] = [''];
                    }
                    return KLS;
                };
                Layouts.dfltCodes = [
                    "K_BKQUOTE", "K_1", "K_2", "K_3", "K_4", "K_5", "K_6", "K_7", "K_8", "K_9", "K_0",
                    "K_HYPHEN", "K_EQUAL", "K_*", "K_*", "K_*", "K_Q", "K_W", "K_E", "K_R", "K_T",
                    "K_Y", "K_U", "K_I", "K_O", "K_P", "K_LBRKT", "K_RBRKT", "K_BKSLASH", "K_*",
                    "K_*", "K_*", "K_A", "K_S", "K_D", "K_F", "K_G", "K_H", "K_J", "K_K", "K_L",
                    "K_COLON", "K_QUOTE", "K_*", "K_*", "K_*", "K_*", "K_*", "K_oE2",
                    "K_Z", "K_X", "K_C", "K_V", "K_B", "K_N", "K_M", "K_COMMA", "K_PERIOD",
                    "K_SLASH", "K_*", "K_*", "K_*", "K_*", "K_*", "K_SPACE"
                ];
                Layouts.dfltText = '`1234567890-=\xA7~~qwertyuiop[]\\~~~asdfghjkl;\'~~~~~?zxcvbnm,./~~~~~ '
                    + '~!@#$%^&*()_+\xA7~~QWERTYUIOP{}\\~~~ASDFGHJKL:"~~~~~?ZXCVBNM<>?~~~~~ ';
                Layouts.DEFAULT_RAW_SPEC = { 'F': 'Tahoma', 'BK': Layouts.dfltText };
                // Cross-reference with the ids in osk.setButtonClass.
                Layouts.buttonClasses = {
                    'DEFAULT': '0',
                    'SHIFT': '1',
                    'SHIFT-ON': '2',
                    'SPECIAL': '3',
                    'SPECIAL-ON': '4',
                    'DEADKEY': '8',
                    'BLANK': '9',
                    'HIDDEN': '10'
                };
                Layouts.modifierSpecials = {
                    'leftalt': '*LAlt*',
                    'rightalt': '*RAlt*',
                    'alt': '*Alt*',
                    'leftctrl': '*LCtrl*',
                    'rightctrl': '*RCtrl*',
                    'ctrl': '*Ctrl*',
                    'ctrl-alt': '*AltGr*',
                    'leftctrl-leftalt': '*LAltCtrl*',
                    'rightctrl-rightalt': '*RAltCtrl*',
                    'leftctrl-leftalt-shift': '*LAltCtrlShift*',
                    'rightctrl-rightalt-shift': '*RAltCtrlShift*',
                    'shift': '*Shift*',
                    'shift-alt': '*AltShift*',
                    'shift-ctrl': '*CtrlShift*',
                    'shift-ctrl-alt': '*AltCtrlShift*',
                    'leftalt-shift': '*LAltShift*',
                    'rightalt-shift': '*RAltShift*',
                    'leftctrl-shift': '*LCtrlShift*',
                    'rightctrl-shift': '*RCtrlShift*'
                };
                // Defines the default visual layout for a keyboard.
                Layouts.dfltLayout = {
                    "desktop": {
                        "font": "Tahoma,Helvetica",
                        "layer": [
                            {
                                "id": "default",
                                "row": [
                                    {
                                        "id": "1",
                                        "key": [
                                            { "id": "K_BKQUOTE" },
                                            { "id": "K_1" },
                                            { "id": "K_2" },
                                            { "id": "K_3" },
                                            { "id": "K_4" },
                                            { "id": "K_5" },
                                            { "id": "K_6" },
                                            { "id": "K_7" },
                                            { "id": "K_8" },
                                            { "id": "K_9" },
                                            { "id": "K_0" },
                                            { "id": "K_HYPHEN" },
                                            { "id": "K_EQUAL" },
                                            { "id": "K_BKSP", "text": "*BkSp*", "sp": "1", "width": "130" }
                                        ]
                                    },
                                    {
                                        "id": "2",
                                        "key": [
                                            { "id": "K_TAB", "text": "*Tab*", "sp": "1", "width": "130" },
                                            { "id": "K_Q" },
                                            { "id": "K_W" },
                                            { "id": "K_E" },
                                            { "id": "K_R" },
                                            { "id": "K_T" },
                                            { "id": "K_Y" },
                                            { "id": "K_U" },
                                            { "id": "K_I" },
                                            { "id": "K_O" },
                                            { "id": "K_P" },
                                            { "id": "K_LBRKT" },
                                            { "id": "K_RBRKT" },
                                            { "id": "K_BKSLASH" }
                                        ]
                                    },
                                    {
                                        "id": "3",
                                        "key": [
                                            { "id": "K_CAPS", "text": "*Caps*", "sp": "1", "width": "165" },
                                            { "id": "K_A" },
                                            { "id": "K_S" },
                                            { "id": "K_D" },
                                            { "id": "K_F" },
                                            { "id": "K_G" },
                                            { "id": "K_H" },
                                            { "id": "K_J" },
                                            { "id": "K_K" },
                                            { "id": "K_L" },
                                            { "id": "K_COLON" },
                                            { "id": "K_QUOTE" },
                                            { "id": "K_ENTER", "text": "*Enter*", "sp": "1", "width": "165" }
                                        ]
                                    },
                                    {
                                        "id": "4",
                                        "key": [
                                            { "id": "K_SHIFT", "text": "*Shift*", "sp": "1", "width": "130" },
                                            { "id": "K_oE2" },
                                            { "id": "K_Z" },
                                            { "id": "K_X" },
                                            { "id": "K_C" },
                                            { "id": "K_V" },
                                            { "id": "K_B" },
                                            { "id": "K_N" },
                                            { "id": "K_M" },
                                            { "id": "K_COMMA" },
                                            { "id": "K_PERIOD" },
                                            { "id": "K_SLASH" },
                                            { "id": "K_RSHIFT", "text": "*Shift*", "sp": "1", "width": "130" }
                                        ]
                                    },
                                    {
                                        "id": "5",
                                        "key": [
                                            { "id": "K_LCONTROL", "text": "*Ctrl*", "sp": "1", "width": "170" },
                                            { "id": "K_LALT", "text": "*Alt*", "sp": "1", "width": "160" },
                                            { "id": "K_SPACE", "text": "", "width": "770" },
                                            { "id": "K_RALT", "text": "*Alt*", "sp": "1", "width": "160" },
                                            { "id": "K_RCONTROL", "text": "*Ctrl*", "sp": "1", "width": "170" }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "tablet": {
                        "font": "Tahoma,Helvetica",
                        "layer": [
                            {
                                "id": "default",
                                "row": [
                                    {
                                        "id": "0",
                                        "key": [
                                            { "id": "K_1" },
                                            { "id": "K_2" },
                                            { "id": "K_3" },
                                            { "id": "K_4" },
                                            { "id": "K_5" },
                                            { "id": "K_6" },
                                            { "id": "K_7" },
                                            { "id": "K_8" },
                                            { "id": "K_9" },
                                            { "id": "K_0" },
                                            { "id": "K_HYPHEN" },
                                            { "id": "K_EQUAL" },
                                            { "sp": "10", "width": "1" }
                                        ]
                                    },
                                    {
                                        "id": "1",
                                        "key": [
                                            { "id": "K_Q", "pad": "25" },
                                            { "id": "K_W" },
                                            { "id": "K_E" },
                                            { "id": "K_R" },
                                            { "id": "K_T" },
                                            { "id": "K_Y" },
                                            { "id": "K_U" },
                                            { "id": "K_I" },
                                            { "id": "K_O" },
                                            { "id": "K_P" },
                                            { "id": "K_LBRKT" },
                                            { "id": "K_RBRKT" },
                                            { "sp": "10", "width": "1" }
                                        ]
                                    },
                                    {
                                        "id": "2",
                                        "key": [
                                            { "id": "K_A", "pad": "50" },
                                            { "id": "K_S" },
                                            { "id": "K_D" },
                                            { "id": "K_F" },
                                            { "id": "K_G" },
                                            { "id": "K_H" },
                                            { "id": "K_J" },
                                            { "id": "K_K" },
                                            { "id": "K_L" },
                                            { "id": "K_COLON" },
                                            { "id": "K_QUOTE" },
                                            { "id": "K_BKSLASH", "width": "90" }
                                        ]
                                    },
                                    {
                                        "id": "3",
                                        "key": [
                                            { "id": "K_oE2", "width": "90" },
                                            { "id": "K_Z" },
                                            { "id": "K_X" },
                                            { "id": "K_C" },
                                            { "id": "K_V" },
                                            { "id": "K_B" },
                                            { "id": "K_N" },
                                            { "id": "K_M" },
                                            { "id": "K_COMMA" },
                                            { "id": "K_PERIOD" },
                                            { "id": "K_SLASH" },
                                            { "id": "K_BKQUOTE" },
                                            { "sp": "10", "width": "1" }
                                        ]
                                    },
                                    {
                                        "id": "4",
                                        "key": [
                                            {
                                                "id": "K_SHIFT", "text": "*Shift*", "sp": "1", "width": "200", "sk": [
                                                    { "id": "K_LCONTROL", "text": "*Ctrl*", "sp": "1", "width": "50", "nextlayer": "ctrl" },
                                                    { "id": "K_LCONTROL", "text": "*LCtrl*", "sp": "1", "width": "50", "nextlayer": "leftctrl" },
                                                    { "id": "K_RCONTROL", "text": "*RCtrl*", "sp": "1", "width": "50", "nextlayer": "rightctrl" },
                                                    { "id": "K_LALT", "text": "*Alt*", "sp": "1", "width": "50", "nextlayer": "alt" },
                                                    { "id": "K_LALT", "text": "*LAlt*", "sp": "1", "width": "50", "nextlayer": "leftalt" },
                                                    { "id": "K_RALT", "text": "*RAlt*", "sp": "1", "width": "50", "nextlayer": "rightalt" },
                                                    { "id": "K_ALTGR", "text": "*AltGr*", "sp": "1", "width": "50", "nextlayer": "ctrl-alt" }
                                                ]
                                            },
                                            { "id": "K_LOPT", "text": "*Menu*", "sp": "1", "width": "150" },
                                            { "id": "K_SPACE", "text": "", "width": "570" },
                                            { "id": "K_BKSP", "text": "*BkSp*", "sp": "1", "width": "150" },
                                            { "id": "K_ENTER", "text": "*Enter*", "sp": "1", "width": "200" }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "phone": {
                        "font": "Tahoma,Helvetica",
                        "layer": [
                            {
                                "id": "default",
                                "row": [
                                    {
                                        "id": "0",
                                        "key": [
                                            { "id": "K_1" },
                                            { "id": "K_2" },
                                            { "id": "K_3" },
                                            { "id": "K_4" },
                                            { "id": "K_5" },
                                            { "id": "K_6" },
                                            { "id": "K_7" },
                                            { "id": "K_8" },
                                            { "id": "K_9" },
                                            { "id": "K_0" },
                                            { "id": "K_HYPHEN" },
                                            { "id": "K_EQUAL" },
                                            { "sp": "10", "width": "1" }
                                        ]
                                    },
                                    {
                                        "id": "1",
                                        "key": [
                                            { "id": "K_Q", "pad": "25" },
                                            { "id": "K_W" },
                                            { "id": "K_E" },
                                            { "id": "K_R" },
                                            { "id": "K_T" },
                                            { "id": "K_Y" },
                                            { "id": "K_U" },
                                            { "id": "K_I" },
                                            { "id": "K_O" },
                                            { "id": "K_P" },
                                            { "id": "K_LBRKT" },
                                            { "id": "K_RBRKT" },
                                            { "sp": "10", "width": "1" }
                                        ]
                                    },
                                    {
                                        "id": "2",
                                        "key": [
                                            { "id": "K_A", "pad": "50" },
                                            { "id": "K_S" },
                                            { "id": "K_D" },
                                            { "id": "K_F" },
                                            { "id": "K_G" },
                                            { "id": "K_H" },
                                            { "id": "K_J" },
                                            { "id": "K_K" },
                                            { "id": "K_L" },
                                            { "id": "K_COLON" },
                                            { "id": "K_QUOTE" },
                                            { "id": "K_BKSLASH", "width": "90" }
                                        ]
                                    },
                                    {
                                        "id": "3",
                                        "key": [
                                            { "id": "K_oE2", "width": "90" },
                                            { "id": "K_Z" },
                                            { "id": "K_X" },
                                            { "id": "K_C" },
                                            { "id": "K_V" },
                                            { "id": "K_B" },
                                            { "id": "K_N" },
                                            { "id": "K_M" },
                                            { "id": "K_COMMA" },
                                            { "id": "K_PERIOD" },
                                            { "id": "K_SLASH" },
                                            { "id": "K_BKQUOTE" },
                                            { "sp": "10", "width": "1" }
                                        ]
                                    },
                                    {
                                        "id": "4",
                                        "key": [
                                            {
                                                "id": "K_SHIFT", "text": "*Shift*", "sp": "1", "width": "200", "sk": [
                                                    { "id": "K_LCONTROL", "text": "*Ctrl*", "sp": "1", "width": "50", "nextlayer": "ctrl" },
                                                    { "id": "K_LCONTROL", "text": "*LCtrl*", "sp": "1", "width": "50", "nextlayer": "leftctrl" },
                                                    { "id": "K_RCONTROL", "text": "*RCtrl*", "sp": "1", "width": "50", "nextlayer": "rightctrl" },
                                                    { "id": "K_LALT", "text": "*Alt*", "sp": "1", "width": "50", "nextlayer": "alt" },
                                                    { "id": "K_LALT", "text": "*LAlt*", "sp": "1", "width": "50", "nextlayer": "leftalt" },
                                                    { "id": "K_RALT", "text": "*RAlt*", "sp": "1", "width": "50", "nextlayer": "rightalt" },
                                                    { "id": "K_ALTGR", "text": "*AltGr*", "sp": "1", "width": "50", "nextlayer": "ctrl-alt" }
                                                ]
                                            },
                                            { "id": "K_LOPT", "text": "*Menu*", "width": "150", "sp": "1" },
                                            { "id": "K_SPACE", "width": "570", "text": "" },
                                            { "id": "K_BKSP", "text": "*BkSp*", "width": "150", "sp": "1" },
                                            { "id": "K_ENTER", "text": "*Enter*", "width": "200", "sp": "1" }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                };
                return Layouts;
            }());
            keyboards.Layouts = Layouts;
        })(keyboards = keyman.keyboards || (keyman.keyboards = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var keyboards;
        (function (keyboards) {
            var ActiveKey = /** @class */ (function () {
                function ActiveKey() {
                    this.isMnemonic = false;
                }
                Object.defineProperty(ActiveKey.prototype, "baseKeyID", {
                    // Keeping things simple here, as this was added LATE in 14.0 beta.
                    // Could definitely extend in the future to instead return an object
                    // that denotes the 'nature' of the key.
                    // - isUnicode
                    // - isHardwareKey
                    // - etc.
                    // Reference for the terminology in the comments below:
                    // https://help.keyman.com/developer/current-version/guides/develop/creating-a-touch-keyboard-layout-for-amharic-the-nitty-gritty
                    /**
                     * Matches the key code as set within Keyman Developer for the layout.
                     * For example, K_R or U_0020.  Denotes either physical keys or virtual keys with custom output,
                     * with no additional metadata like layer or active modifiers.
                     *
                     * Is used to determine the keycode for input events, rule-matching, and keystroke processing.
                     */
                    get: function () {
                        if (typeof this.id === 'undefined') {
                            return undefined;
                        }
                        return this.id;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ActiveKey.prototype, "coreID", {
                    /**
                     * A unique identifier based on both the key ID & the 'desktop layer' to be used for the key.
                     *
                     * Allows diambiguation of scenarios where the same key ID is used twice within a layer, but
                     * with different innate modifiers.  (Refer to https://github.com/keymanapp/keyman/issues/4617)
                     * The 'desktop layer' may be omitted if it matches the key's display layer.
                     *
                     * Examples, given a 'default' display layer, matching keys to Keyman keyboard language:
                     *
                     * ```
                     * "K_Q"
                     * + [K_Q]
                     * "K_Q+shift"
                     * + [K_Q SHIFT]
                     * ```
                     *
                     * Useful when the active layer of an input-event is already known.
                     */
                    get: function () {
                        if (typeof this.id === 'undefined') {
                            return undefined;
                        }
                        var baseID = this.id || '';
                        if (this.displayLayer != this.layer) {
                            baseID = baseID + '+' + this.layer;
                        }
                        return baseID;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ActiveKey.prototype, "elementID", {
                    /**
                     * A keyboard-unique identifier to be used for any display elements representing this key
                     * in user interfaces and/or on-screen keyboards.
                     *
                     * Distinguishes between otherwise-identical keys on different layers of an OSK.
                     * Includes identifying information about the key's display layer.
                     *
                     * Examples, given a 'default' display layer, matching keys to Keyman keyboard language:
                     *
                     * ```
                     * "default-K_Q"
                     * + [K_Q]
                     * "default-K_Q+shift"
                     * + [K_Q SHIFT]
                     * ```
                     *
                     * Useful when only the active keyboard is known about an input event.
                     */
                    get: function () {
                        if (typeof this.id === 'undefined') {
                            return undefined;
                        }
                        return this.displayLayer + '-' + this.coreID;
                    },
                    enumerable: true,
                    configurable: true
                });
                ActiveKey.polyfill = function (key, layout, displayLayer) {
                    // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.
                    var dummy = new ActiveKey();
                    var proto = Object.getPrototypeOf(dummy);
                    for (var prop in dummy) {
                        if (!key.hasOwnProperty(prop)) {
                            var descriptor = Object.getOwnPropertyDescriptor(proto, prop);
                            if (descriptor) {
                                // It's a computed property!  Copy the descriptor onto the key's object.
                                Object.defineProperty(key, prop, descriptor);
                            }
                            else {
                                key[prop] = dummy[prop];
                            }
                        }
                    }
                    // Ensure subkeys are also properly extended.
                    if (key.sk) {
                        for (var _i = 0, _a = key.sk; _i < _a.length; _i++) {
                            var subkey = _a[_i];
                            ActiveKey.polyfill(subkey, layout, displayLayer);
                        }
                    }
                    var aKey = key;
                    aKey.displayLayer = displayLayer;
                    aKey.layer = aKey.layer || displayLayer;
                    // Compute the key's base KeyEvent properties for use in future event generation
                    aKey.constructBaseKeyEvent(layout, displayLayer);
                };
                ActiveKey.prototype.constructBaseKeyEvent = function (layout, displayLayer) {
                    // Get key name and keyboard shift state (needed only for default layouts and physical keyboard handling)
                    // Note - virtual keys should be treated case-insensitive, so we force uppercasing here.
                    var layer = this.layer || displayLayer || '';
                    var keyName = this.id ? this.id.toUpperCase() : null;
                    // Start:  mirrors _GetKeyEventProperties
                    // Override key shift state if specified for key in layout (corrected for popup keys KMEW-93)
                    var keyShiftState = keyman.text.KeyboardProcessor.getModifierState(layer);
                    // First check the virtual key, and process shift, control, alt or function keys
                    var Lkc = {
                        Lmodifiers: keyShiftState,
                        Lstates: 0,
                        Lcode: keyName ? keyman.text.Codes.keyCodes[keyName] : 0,
                        LisVirtualKey: true,
                        vkCode: 0,
                        kName: keyName,
                        kLayer: layer,
                        kbdLayer: displayLayer,
                        kNextLayer: this.nextlayer,
                        device: null,
                        isSynthetic: true
                    };
                    if (layout.keyboard) {
                        var keyboard = layout.keyboard;
                        // Include *limited* support for mnemonic keyboards (Sept 2012)
                        // If a touch layout has been defined for a mnemonic keyout, do not perform mnemonic mapping for rules on touch devices.
                        if (keyboard.isMnemonic && !(layout.isDefault && layout.formFactor != 'desktop')) {
                            if (Lkc.Lcode != keyman.text.Codes.keyCodes['K_SPACE']) { // exception required, March 2013
                                // Jan 2019 - interesting that 'K_SPACE' also affects the caps-state check...
                                Lkc.vkCode = Lkc.Lcode;
                                this.isMnemonic = true;
                            }
                        }
                        else {
                            Lkc.vkCode = Lkc.Lcode;
                        }
                        // Support version 1.0 KeymanWeb keyboards that do not define positional vs mnemonic
                        if (!keyboard.definesPositionalOrMnemonic) {
                            // Not the best pattern, but currently safe - we don't look up any properties of any of the
                            // arguments in this use case, and the object's scope is extremely limited.
                            Lkc.Lcode = keyman.KeyMapping._USKeyCodeToCharCode(this.constructKeyEvent(null, null));
                            Lkc.LisVirtualKey = false;
                        }
                    }
                    this.baseKeyEvent = Lkc;
                };
                ActiveKey.prototype.constructKeyEvent = function (keyboardProcessor, device) {
                    // Make a deep copy of our preconstructed key event, filling it out from there.
                    var Lkc = keyman.utils.deepCopy(this.baseKeyEvent);
                    Lkc.device = device;
                    if (this.isMnemonic) {
                        keyman.text.KeyboardProcessor.setMnemonicCode(Lkc, this.layer.indexOf('shift') != -1, keyboardProcessor ? keyboardProcessor.stateKeys['K_CAPS'] : false);
                    }
                    // Performs common pre-analysis for both 'native' and 'embedded' OSK key & subkey input events.
                    // This part depends on the keyboard processor's active state.
                    if (keyboardProcessor) {
                        keyboardProcessor.setSyntheticEventDefaults(Lkc);
                        // If it's a state key modifier, trigger its effects as part of the
                        // keystroke.
                        var bitmap = {
                            'K_CAPS': keyman.text.Codes.stateBitmasks.CAPS,
                            'K_NUMLOCK': keyman.text.Codes.stateBitmasks.NUM_LOCK,
                            'K_SCROLL': keyman.text.Codes.stateBitmasks.SCROLL_LOCK
                        };
                        var bitmask = bitmap[Lkc.kName];
                        if (bitmask) {
                            Lkc.Lstates ^= bitmask;
                            Lkc.LmodifierChange = true;
                        }
                    }
                    return Lkc;
                };
                ActiveKey.prototype.getSubkey = function (coreID) {
                    if (this.sk) {
                        for (var _i = 0, _a = this.sk; _i < _a.length; _i++) {
                            var key = _a[_i];
                            if (key.coreID == coreID) {
                                return key;
                            }
                        }
                    }
                    return null;
                };
                ActiveKey.DEFAULT_PAD = 15; // Padding to left of key, in virtual units
                ActiveKey.DEFAULT_RIGHT_MARGIN = 15; // Padding to right of right-most key, in virtual units
                ActiveKey.DEFAULT_KEY_WIDTH = 100; // Width of a key, if not specified, in virtual units
                // Defines key defaults
                ActiveKey.DEFAULT_KEY = {
                    text: '',
                    width: ActiveKey.DEFAULT_KEY_WIDTH.toString(),
                    sp: '0',
                    pad: ActiveKey.DEFAULT_PAD.toString()
                };
                return ActiveKey;
            }());
            keyboards.ActiveKey = ActiveKey;
            var ActiveRow = /** @class */ (function () {
                function ActiveRow() {
                }
                ActiveRow.polyfill = function (row, layout, displayLayer, totalWidth, proportionalY) {
                    // Apply defaults, setting the width and other undefined properties for each key
                    var keys = row['key'];
                    for (var j = 0; j < keys.length; j++) {
                        var key = keys[j];
                        for (var tp in ActiveKey.DEFAULT_KEY) {
                            if (typeof key[tp] != 'string') {
                                key[tp] = ActiveKey.DEFAULT_KEY[tp];
                            }
                        }
                        // Modify the key type for special keys with non-standard labels
                        // to allow the keyboard font to ovveride the SpecialOSK font.
                        // Blank keys are no longer reclassed - can use before/after CSS to add text
                        switch (key['sp']) {
                            case '1':
                                if (!ActiveRow.SPECIAL_LABEL.test(key['text']) && key['text'] != '') {
                                    key['sp'] = '3';
                                }
                                break;
                            case '2':
                                if (!ActiveRow.SPECIAL_LABEL.test(key['text']) && key['text'] != '') {
                                    key['sp'] = '4';
                                }
                                break;
                        }
                        ActiveKey.polyfill(key, layout, displayLayer);
                    }
                    /* The calculations here are effectively 'virtualized'.  When used with the OSK, the VisualKeyboard
                     * will overwrite these values with their true runtime geometry.
                     *
                     * These calculations approximate those of the actual OSK (without fitting to a specific resolution)
                     * and are intended for use with layout testing (while headless) in the future.
                     */
                    var setProportions = function (key, padPc, keyPc, totalPc) {
                        key.proportionalPad = padPc;
                        key.proportionalWidth = keyPc;
                        key.proportionalX = (totalPc + padPc + (keyPc / 2));
                    };
                    // Calculate percentage-based scalings by summing defined widths and scaling each key to %.
                    // Save each percentage key width as a separate member (do *not* overwrite layout specified width!)
                    var keyPercent, padPercent, totalPercent = 0;
                    for (var j = 0; j < keys.length - 1; j++) {
                        keyPercent = parseInt(keys[j]['width'], 10) / totalWidth;
                        keys[j]['widthpc'] = keyPercent;
                        padPercent = parseInt(keys[j]['pad'], 10) / totalWidth;
                        keys[j]['padpc'] = padPercent;
                        // compute center's default x-coord (used in headless modes)
                        setProportions(keys[j], padPercent, keyPercent, totalPercent);
                        totalPercent += padPercent + keyPercent;
                    }
                    // Allow for right OSK margin (15 layout units)
                    var rightMargin = ActiveKey.DEFAULT_RIGHT_MARGIN / totalWidth;
                    totalPercent += rightMargin;
                    // If a single key, and padding is negative, add padding to right align the key
                    if (keys.length == 1 && parseInt(keys[0]['pad'], 10) < 0) {
                        keyPercent = parseInt(keys[0]['width'], 10) / totalWidth;
                        keys[0]['widthpc'] = keyPercent;
                        totalPercent += keyPercent;
                        keys[0]['padpc'] = 1 - totalPercent;
                        // compute center's default x-coord (used in headless modes)
                        setProportions(keys[0], padPercent, keyPercent, totalPercent);
                    }
                    else if (keys.length > 0) {
                        var j = keys.length - 1;
                        padPercent = parseInt(keys[j]['pad'], 10) / totalWidth;
                        keys[j]['padpc'] = padPercent;
                        totalPercent += padPercent;
                        keys[j]['widthpc'] = keyPercent = 1 - totalPercent;
                        // compute center's default x-coord (used in headless modes)
                        setProportions(keys[j], padPercent, keyPercent, totalPercent);
                    }
                    // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.
                    var dummy = new ActiveRow();
                    for (var key in dummy) {
                        if (!row.hasOwnProperty(key)) {
                            row[key] = dummy[key];
                        }
                    }
                    var aRow = row;
                    aRow.proportionalY = proportionalY;
                };
                ActiveRow.prototype.populateKeyMap = function (map) {
                    this.key.forEach(function (key) {
                        if (key.coreID) {
                            map[key.coreID] = key;
                        }
                    });
                };
                // Identify key labels (e.g. *Shift*) that require the special OSK font
                ActiveRow.SPECIAL_LABEL = /\*\w+\*/;
                return ActiveRow;
            }());
            keyboards.ActiveRow = ActiveRow;
            var ActiveLayer = /** @class */ (function () {
                function ActiveLayer() {
                }
                ActiveLayer.polyfill = function (layer, layout) {
                    layer.aligned = false;
                    // Create a DIV for each row of the group
                    var rows = layer['row'];
                    // Calculate the maximum row width (in layout units)
                    var totalWidth = 0;
                    for (var i = 0; i < layer['row'].length; i++) {
                        var width = 0;
                        var row = rows[i];
                        var keys = row['key'];
                        for (var j = 0; j < keys.length; j++) {
                            var key = keys[j];
                            // Test for a trailing comma included in spec, added as null object by IE
                            if (key == null) {
                                keys.length = keys.length - 1;
                            }
                            else {
                                var kw, kp;
                                kw = (typeof key['width'] == 'string' && key['width'] != '') ? parseInt(key['width'], 10) : ActiveKey.DEFAULT_KEY_WIDTH;
                                if (isNaN(kw) || kw == 0)
                                    kw = ActiveKey.DEFAULT_KEY_WIDTH;
                                key['width'] = kw.toString();
                                kp = (typeof key['pad'] == 'string' && key['pad'] != '') ? parseInt(key['pad'], 10) : ActiveKey.DEFAULT_PAD;
                                if (isNaN(kp) || kp == 0)
                                    kp = ActiveKey.DEFAULT_PAD; // KMEW-119
                                key['pad'] = kp.toString();
                                width += kw + kp;
                                //if(typeof key['width'] == 'string' && key['width'] != '') width += parseInt(key['width'],10); else width += DEFAULT_KEY_WIDTH;
                                //if(typeof key['pad'] == 'string' && key['pad'] != '') width += parseInt(key['pad'],10); else width += 5;
                            }
                        }
                        if (width > totalWidth) {
                            totalWidth = width;
                        }
                    }
                    // Add default right margin
                    if (layout.formFactor == 'desktop') {
                        totalWidth += 5; // TODO: resolve difference between touch and desktop; why don't we use ActiveKey.DEFAULT_RIGHT_MARGIN?
                    }
                    else {
                        totalWidth += ActiveKey.DEFAULT_RIGHT_MARGIN;
                    }
                    var rowCount = layer.row.length;
                    for (var i = 0; i < rowCount; i++) {
                        // Calculate proportional y-coord of row.  0 is at top with highest y-coord.
                        var rowProportionalY = (i + 0.5) / rowCount;
                        ActiveRow.polyfill(layer.row[i], layout, layer.id, totalWidth, rowProportionalY);
                    }
                    // Add class functions and properties to the existing layout object, allowing it to act as an ActiveLayout.
                    var dummy = new ActiveLayer();
                    for (var key in dummy) {
                        if (!layer.hasOwnProperty(key)) {
                            layer[key] = dummy[key];
                        }
                    }
                    var aLayer = layer;
                    aLayer.totalWidth = totalWidth;
                    aLayer.defaultKeyProportionalWidth = parseInt(ActiveKey.DEFAULT_KEY.width, 10) / totalWidth;
                    aLayer.rowProportionalHeight = 1.0 / rowCount;
                    aLayer.keyMap = aLayer.constructKeyMap();
                };
                ActiveLayer.prototype.constructKeyMap = function () {
                    var map = {};
                    this.row.forEach(function (row) {
                        row.populateKeyMap(map);
                    });
                    return map;
                };
                /**
                 * Builds a sorted-order array of most likely keys to be intended for a given touch.
                 * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.
                 *                           Should be within [0, 0] to [1, 1].
                 * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.
                 *                           For a 400 x 200 keyboard, should be 2.
                 */
                ActiveLayer.prototype.getTouchProbabilities = function (touchCoords, kbdScaleRatio) {
                    var distribution = this.simpleTouchDistribution(touchCoords, kbdScaleRatio);
                    var list = [];
                    for (var key in distribution) {
                        list.push({ keyId: key, p: distribution[key] });
                    }
                    return list.sort(function (a, b) {
                        return b.p - a.p; // Largest probability keys should be listed first.
                    });
                };
                /**
                 * Computes a probability distribution regarding the likelihood of a touch command being intended
                 * for each of the layout's keys.
                 * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.
                 *                           Should be within [0, 0] to [1, 1].
                 * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.
                 *                           For a 400 x 200 keyboard, should be 2.
                 */
                ActiveLayer.prototype.simpleTouchDistribution = function (touchCoords, kbdScaleRatio) {
                    var keyDists = this.keyTouchDistances(touchCoords, kbdScaleRatio);
                    var keyProbs = {};
                    var totalMass = 0;
                    // Should we wish to allow multiple different transforms for distance -> probability, use a function parameter in place
                    // of the formula in the loop below.
                    for (var key in keyDists) {
                        totalMass += keyProbs[key] = 1 / (keyDists[key] + 1e-6); // Prevent div-by-0 errors.
                    }
                    for (var key in keyProbs) {
                        keyProbs[key] /= totalMass;
                    }
                    return keyProbs;
                };
                /**
                 * Computes a squared 'pseudo-distance' for the touch from each key.  (Not a proper metric.)
                 * Intended for use in generating a probability distribution over the keys based on the touch input.
                 * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.
                 *                           Should be within [0, 0] to [1, 1].
                 * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.
                 *                           For a 400 x 200 keyboard, should be 2.
                 */
                ActiveLayer.prototype.keyTouchDistances = function (touchCoords, kbdScaleRatio) {
                    var layer = this;
                    var keyDists = {};
                    // This double-nested loop computes a pseudo-distance for the touch from each key.  Quite useful for
                    // generating a probability distribution.
                    this.row.forEach(function (row) {
                        row.key.forEach(function (key) {
                            // If the key lacks an ID, just skip it.  Sometimes used for padding.
                            if (!key.baseKeyID) {
                                return;
                            }
                            else {
                                // Attempt to filter out known non-output keys.
                                // Results in a more optimized distribution.
                                switch (key.baseKeyID) {
                                    case 'K_SHIFT':
                                    case 'K_LOPT':
                                    case 'K_ROPT':
                                    case 'K_NUMLOCK': // Often used for numeric layers.
                                    case 'K_CAPS':
                                        // As these aren't output keys, they shouldn't be possible fat-finger targets.
                                        return;
                                    default:
                                        // Refer to text/codes.ts - these are Keyman-custom "keycodes" used for
                                        // layer shifting keys.  To be safe, we currently let K_TABBACK and
                                        // K_TABFWD through, though we might be able to drop them too.
                                        var code = com.keyman.text.Codes[key.baseKeyID];
                                        if (code > 50000 && code < 50011) {
                                            return;
                                        }
                                }
                            }
                            // These represent the within-key distance of the touch from the key's center.
                            // Both should be on the interval [0, 0.5].
                            var dx = Math.abs(touchCoords.x - key.proportionalX);
                            var dy = Math.abs(touchCoords.y - row.proportionalY);
                            // If the touch isn't within the key, these store the out-of-key distance
                            // from the closest point on the key being checked.
                            var distX, distY;
                            if (dx > 0.5 * key.proportionalWidth) {
                                distX = (dx - 0.5 * key.proportionalWidth);
                                dx = 0.5;
                            }
                            else {
                                distX = 0;
                                dx /= key.proportionalWidth;
                            }
                            if (dy > 0.5 * layer.rowProportionalHeight) {
                                distY = (dy - 0.5 * layer.rowProportionalHeight);
                                dy = 0.5;
                            }
                            else {
                                distY = 0;
                                dy /= layer.rowProportionalHeight;
                            }
                            // Now that the differentials are computed, it's time to do distance scaling.
                            //
                            // For out-of-key distance, we scale the X component by the keyboard's aspect ratio
                            // to get the actual out-of-key distance rather than proportional.
                            distX *= kbdScaleRatio;
                            // While the keys are rarely perfect squares, we map all within-key distance
                            // to a square shape.  (ALT/CMD should seem as close to SPACE as a 'B'.)
                            //
                            // For that square, we take the rowHeight as its edge lengths.
                            distX += dx * layer.rowProportionalHeight;
                            distY += dy * layer.rowProportionalHeight;
                            var distance = distX * distX + distY * distY;
                            keyDists[key.coreID] = distance;
                        });
                    });
                    return keyDists;
                };
                ActiveLayer.prototype.getKey = function (keyId) {
                    // Keys usually are specified in a "long form" prefixed with their layer's ID.
                    if (keyId.indexOf(this.id + '-') == 0) {
                        keyId = keyId.replace(this.id + '-', '');
                    }
                    var idComponents = keyId.split('::');
                    if (idComponents.length > 1) {
                        var baseKey = this.keyMap[idComponents[0]];
                        return baseKey.getSubkey(idComponents[1]);
                    }
                    else {
                        return this.keyMap[keyId];
                    }
                };
                return ActiveLayer;
            }());
            keyboards.ActiveLayer = ActiveLayer;
            var ActiveLayout = /** @class */ (function () {
                function ActiveLayout() {
                }
                ActiveLayout.prototype.getLayer = function (layerId) {
                    return this.layerMap[layerId];
                };
                /**
                 * Refer to https://github.com/keymanapp/keyman/issues/254, which mentions
                 * KD-11 from a prior issue-tracking system from the closed-source days that
                 * resulted in an unintended extra empty row.
                 *
                 * It'll be pretty rare to see a keyboard affected by the bug, but we don't
                 * 100% control all keyboards out there, so it's best we make sure the edge
                 * case is covered.
                 *
                 * @param layers The layer group to be loaded for the form factor.  Will be
                 *               mutated by this operation.
                 */
                ActiveLayout.correctLayerEmptyRowBug = function (layers) {
                    for (var n = 0; n < layers.length; n++) {
                        var layer = layers[n];
                        var rows = layer['row'];
                        var i = void 0;
                        for (i = rows.length - 1; i >= 0; i--) {
                            if (!Array.isArray(rows[i]['key']) || rows[i]['key'].length == 0) {
                                rows.splice(i, 1);
                            }
                        }
                    }
                };
                /**
                 *
                 * @param layout
                 * @param formFactor
                 */
                ActiveLayout.polyfill = function (layout, keyboard, formFactor) {
                    if (layout == null) {
                        throw new Error("Cannot build an ActiveLayout for a null specification.");
                    }
                    // Create a separate OSK div for each OSK layer, only one of which will ever be visible
                    var n;
                    var layerMap = {};
                    var layers = layout['layer'];
                    ActiveLayout.correctLayerEmptyRowBug(layers);
                    // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.
                    var dummy = new ActiveLayout();
                    for (var key in dummy) {
                        if (!layout.hasOwnProperty(key)) {
                            layout[key] = dummy[key];
                        }
                    }
                    var aLayout = layout;
                    aLayout.keyboard = keyboard;
                    aLayout.formFactor = formFactor;
                    for (n = 0; n < layers.length; n++) {
                        ActiveLayer.polyfill(layers[n], aLayout);
                        layerMap[layers[n].id] = layers[n];
                    }
                    aLayout.layerMap = layerMap;
                    return aLayout;
                };
                return ActiveLayout;
            }());
            keyboards.ActiveLayout = ActiveLayout;
        })(keyboards = keyman.keyboards || (keyman.keyboards = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            /**
             * Defines common behaviors associated with system stores.
             */
            var SystemStore = /** @class */ (function () {
                function SystemStore(id) {
                    this.id = id;
                }
                SystemStore.prototype.set = function (value) {
                    throw new Error("System store with ID " + this.id + " may not be directly set.");
                };
                return SystemStore;
            }());
            text.SystemStore = SystemStore;
            var MutableSystemStore = /** @class */ (function (_super) {
                __extends(MutableSystemStore, _super);
                function MutableSystemStore(id, defaultValue) {
                    var _this = _super.call(this, id) || this;
                    _this.handler = null;
                    _this._value = defaultValue;
                    return _this;
                }
                Object.defineProperty(MutableSystemStore.prototype, "value", {
                    get: function () {
                        return this._value;
                    },
                    enumerable: true,
                    configurable: true
                });
                MutableSystemStore.prototype.matches = function (value) {
                    return this._value == value;
                };
                MutableSystemStore.prototype.set = function (value) {
                    if (this.handler) {
                        if (this.handler(this, value)) {
                            return;
                        }
                    }
                    this._value = value;
                };
                return MutableSystemStore;
            }(SystemStore));
            text.MutableSystemStore = MutableSystemStore;
            /**
             * Handles checks against the current platform.
             */
            var PlatformSystemStore = /** @class */ (function (_super) {
                __extends(PlatformSystemStore, _super);
                function PlatformSystemStore(keyboardInterface) {
                    var _this = _super.call(this, text.KeyboardInterface.TSS_PLATFORM) || this;
                    _this.kbdInterface = keyboardInterface;
                    return _this;
                }
                PlatformSystemStore.prototype.matches = function (value) {
                    var i, constraint, constraints = value.split(' ');
                    var device = this.kbdInterface.activeDevice;
                    for (i = 0; i < constraints.length; i++) {
                        constraint = constraints[i].toLowerCase();
                        switch (constraint) {
                            case 'touch':
                            case 'hardware':
                                if (device.touchable != (constraint == 'touch')) {
                                    return false;
                                }
                                break;
                            case 'macos':
                            case 'mac':
                                constraint = 'macosx';
                            // fall through
                            case 'macosx':
                            case 'windows':
                            case 'android':
                            case 'ios':
                            case 'linux':
                                if (device.OS != constraint) {
                                    return false;
                                }
                                break;
                            case 'tablet':
                            case 'phone':
                            case 'desktop':
                                if (device.formFactor != constraint) {
                                    return false;
                                }
                                break;
                            case 'web':
                                if (device.browser == 'native') {
                                    return false; // web matches anything other than 'native'
                                }
                                break;
                            case 'native':
                            // This will return true for embedded KeymanWeb
                            case 'ie':
                            case 'chrome':
                            case 'firefox':
                            case 'safari':
                            case 'edge':
                            case 'opera':
                                if (device.browser != constraint) {
                                    return false;
                                }
                                break;
                            default:
                                return false;
                        }
                    }
                    // Everything we checked against was valid and had matches - it's a match!
                    return true;
                };
                return PlatformSystemStore;
            }(SystemStore));
            text.PlatformSystemStore = PlatformSystemStore;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="deadkeys.ts" />
/// <reference path="ruleBehavior.ts" />
// Defines classes for handling system stores
/// <reference path="systemStores.ts" />
/***
   KeymanWeb 11.0
   Copyright 2019 SIL International
***/
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            //#region Helper type definitions
            var KeyInformation = /** @class */ (function () {
                function KeyInformation() {
                }
                return KeyInformation;
            }());
            text.KeyInformation = KeyInformation;
            var RuleDeadkey = /** @class */ (function () {
                function RuleDeadkey() {
                }
                return RuleDeadkey;
            }());
            var ContextAny = /** @class */ (function () {
                function ContextAny() {
                }
                return ContextAny;
            }());
            var RuleIndex = /** @class */ (function () {
                function RuleIndex() {
                }
                return RuleIndex;
            }());
            var ContextEx = /** @class */ (function () {
                function ContextEx() {
                }
                return ContextEx;
            }());
            var ContextNul = /** @class */ (function () {
                function ContextNul() {
                }
                return ContextNul;
            }());
            var StoreBeep = /** @class */ (function () {
                function StoreBeep() {
                }
                return StoreBeep;
            }());
            /**
             * Cache of context storing and retrieving return values from KC
             * Must be reset prior to each keystroke and after any text changes
             * MCD 3/1/14
             **/
            var CachedContext = /** @class */ (function () {
                function CachedContext() {
                }
                CachedContext.prototype.reset = function () {
                    this._cache = [];
                };
                CachedContext.prototype.get = function (n, ln) {
                    // return null; // uncomment this line to disable context caching
                    if (typeof this._cache[n] == 'undefined') {
                        return null;
                    }
                    else if (typeof this._cache[n][ln] == 'undefined') {
                        return null;
                    }
                    return this._cache[n][ln];
                };
                CachedContext.prototype.set = function (n, ln, val) {
                    if (typeof this._cache[n] == 'undefined') {
                        this._cache[n] = [];
                    }
                    this._cache[n][ln] = val;
                };
                return CachedContext;
            }());
            ;
            /**
             * An extended version of cached context storing designed to work with
             * `fullContextMatch` and its helper functions.
             */
            var CachedContextEx = /** @class */ (function () {
                function CachedContextEx() {
                }
                CachedContextEx.prototype.reset = function () {
                    this._cache = [];
                };
                CachedContextEx.prototype.get = function (n, ln) {
                    // return null; // uncomment this line to disable context caching
                    if (typeof this._cache[n] == 'undefined') {
                        return null;
                    }
                    else if (typeof this._cache[n][ln] == 'undefined') {
                        return null;
                    }
                    return this._cache[n][ln];
                };
                CachedContextEx.prototype.set = function (n, ln, val) {
                    if (typeof this._cache[n] == 'undefined') {
                        this._cache[n] = [];
                    }
                    this._cache[n][ln] = val;
                };
                CachedContextEx.prototype.clone = function () {
                    var r = new CachedContextEx();
                    r._cache = this._cache;
                    return r;
                };
                return CachedContextEx;
            }());
            ;
            //#endregion
            var KeyboardInterface = /** @class */ (function () {
                function KeyboardInterface(variableStoreSerializer) {
                    if (variableStoreSerializer === void 0) { variableStoreSerializer = null; }
                    this.cachedContext = new CachedContext();
                    this.cachedContextEx = new CachedContextEx();
                    this._AnyIndices = []; // AnyIndex - array of any/index match indices
                    this.systemStores = {};
                    this.systemStores[KeyboardInterface.TSS_PLATFORM] = new text.PlatformSystemStore(this);
                    this.systemStores[KeyboardInterface.TSS_LAYER] = new text.MutableSystemStore(KeyboardInterface.TSS_LAYER, 'default');
                    this.variableStoreSerializer = variableStoreSerializer;
                }
                /**
                 * Function     KSF
                 * Scope        Public
                 *
                 * Saves the document's current focus settings on behalf of the keyboard.  Often paired with insertText.
                 */
                KeyboardInterface.prototype.saveFocus = function () { };
                /**
                 * Function     registerKeyboard  KR
                 * Scope        Public
                 * @param       {Object}      Pk      Keyboard  object
                 * Description  Registers a keyboard with KeymanWeb once its script has fully loaded.
                 *
                 *              In web-core, this also activates the keyboard; in other modules, this method
                 *              may be replaced with other implementations.
                 */
                KeyboardInterface.prototype.registerKeyboard = function (Pk) {
                    // NOTE:  This implementation is web-core specific and is intentionally replaced, whole-sale,
                    //        by DOM-aware code.
                    var keyboard = new keyman.keyboards.Keyboard(Pk);
                    this.activeKeyboard = keyboard;
                };
                /**
                 * Get *cached or uncached* keyboard context for a specified range, relative to caret
                 *
                 * @param       {number}      n       Number of characters to move back from caret
                 * @param       {number}      ln      Number of characters to return
                 * @param       {Object}      Pelem   Element to work with (must be currently focused element)
                 * @return      {string}              Context string
                 *
                 * Example     [abcdef|ghi] as INPUT, with the caret position marked by |:
                 *             KC(2,1,Pelem) == "e"
                 *             KC(3,3,Pelem) == "def"
                 *             KC(10,10,Pelem) == "abcdef"  i.e. return as much as possible of the requested string
                 */
                KeyboardInterface.prototype.context = function (n, ln, outputTarget) {
                    var v = this.cachedContext.get(n, ln);
                    if (v !== null) {
                        return v;
                    }
                    var r = this.KC_(n, ln, outputTarget);
                    this.cachedContext.set(n, ln, r);
                    return r;
                };
                /**
                 * Get (uncached) keyboard context for a specified range, relative to caret
                 *
                 * @param       {number}      n       Number of characters to move back from caret
                 * @param       {number}      ln      Number of characters to return
                 * @param       {Object}      Pelem   Element to work with (must be currently focused element)
                 * @return      {string}              Context string
                 *
                 * Example     [abcdef|ghi] as INPUT, with the caret position marked by |:
                 *             KC(2,1,Pelem) == "e"
                 *             KC(3,3,Pelem) == "def"
                 *             KC(10,10,Pelem) == "XXXXabcdef"  i.e. return as much as possible of the requested string, where X = \uFFFE
                 */
                KeyboardInterface.prototype.KC_ = function (n, ln, outputTarget) {
                    var tempContext = '';
                    tempContext = outputTarget.getTextBeforeCaret();
                    if (tempContext._kmwLength() < n) {
                        tempContext = Array(n - tempContext._kmwLength() + 1).join("\uFFFE") + tempContext;
                    }
                    return tempContext._kmwSubstr(-n)._kmwSubstr(0, ln);
                };
                /**
                 * Function     nul           KN
                 * Scope        Public
                 * @param       {number}      n       Length of context to check
                 * @param       {Object}      Ptarg   Element to work with (must be currently focused element)
                 * @return      {boolean}             True if length of context is less than or equal to n
                 * Description  Test length of context, return true if the length of the context is less than or equal to n
                 *
                 * Example     [abc|def] as INPUT, with the caret position marked by |:
                 *             KN(3,Pelem) == TRUE
                 *             KN(2,Pelem) == FALSE
                 *             KN(4,Pelem) == TRUE
                 */
                KeyboardInterface.prototype.nul = function (n, outputTarget) {
                    var cx = this.context(n + 1, 1, outputTarget);
                    // With #31, the result will be a replacement character if context is empty.
                    return cx === "\uFFFE";
                };
                /**
                 * Function     contextMatch  KCM
                 * Scope        Public
                 * @param       {number}      n       Number of characters to move back from caret
                 * @param       {Object}      Ptarg   Focused element
                 * @param       {string}      val     String to match
                 * @param       {number}      ln      Number of characters to return
                 * @return      {boolean}             True if selected context matches val
                 * Description  Test keyboard context for match
                 */
                KeyboardInterface.prototype.contextMatch = function (n, outputTarget, val, ln) {
                    var cx = this.context(n, ln, outputTarget);
                    if (cx === val) {
                        return true; // I3318
                    }
                    outputTarget.deadkeys().resetMatched(); // I3318
                    return false;
                };
                /**
                 * Builds the *cached or uncached* keyboard context for a specified range, relative to caret
                 *
                 * @param       {number}      n       Number of characters to move back from caret
                 * @param       {number}      ln      Number of characters to return
                 * @param       {Object}      Pelem   Element to work with (must be currently focused element)
                 * @return      {Array}               Context array (of strings and numbers)
                 */
                KeyboardInterface.prototype._BuildExtendedContext = function (n, ln, outputTarget) {
                    var cache = this.cachedContextEx.get(n, ln);
                    if (cache !== null) {
                        return cache;
                    }
                    else {
                        // By far the easiest way to correctly build what we want is to start from the right and work to what we need.
                        // We may have done it for a similar cursor position before.
                        cache = this.cachedContextEx.get(n, n);
                        if (cache === null) {
                            // First, let's make sure we have a cloned, sorted copy of the deadkey array.
                            var unmatchedDeadkeys = outputTarget.deadkeys().toSortedArray(); // Is reverse-order sorted for us already.
                            // Time to build from scratch!
                            var index = 0;
                            cache = { valContext: [], deadContext: [] };
                            while (cache.valContext.length < n) {
                                // As adapted from `deadkeyMatch`.
                                var sp = outputTarget.getDeadkeyCaret();
                                var deadPos = sp - index;
                                if (unmatchedDeadkeys.length > 0 && unmatchedDeadkeys[0].p > deadPos) {
                                    // We have deadkeys at the right-hand side of the caret!  They don't belong in the context, so pop 'em off.
                                    unmatchedDeadkeys.splice(0, 1);
                                    continue;
                                }
                                else if (unmatchedDeadkeys.length > 0 && unmatchedDeadkeys[0].p == deadPos) {
                                    // Take the deadkey.
                                    cache.deadContext[n - cache.valContext.length - 1] = unmatchedDeadkeys[0];
                                    cache.valContext = [unmatchedDeadkeys[0].d].concat(cache.valContext);
                                    unmatchedDeadkeys.splice(0, 1);
                                }
                                else {
                                    // Take the character.  We get "\ufffe" if it doesn't exist.
                                    var kc = this.context(++index, 1, outputTarget);
                                    cache.valContext = [kc].concat(cache.valContext);
                                }
                            }
                            this.cachedContextEx.set(n, n, cache);
                        }
                        // Now that we have the cache...
                        var subCache = cache;
                        subCache.valContext = subCache.valContext.slice(0, ln);
                        for (var i = 0; i < subCache.valContext.length; i++) {
                            if (subCache[i] == '\ufffe') {
                                subCache.valContext.splice(0, 1);
                                subCache.deadContext.splice(0, 1);
                            }
                        }
                        if (subCache.valContext.length == 0) {
                            subCache.valContext = ['\ufffe'];
                            subCache.deadContext = [];
                        }
                        this.cachedContextEx.set(n, ln, subCache);
                        return subCache;
                    }
                };
                /**
                 * Function       fullContextMatch    KFCM
                 * Scope          Private
                 * @param         {number}    n       Number of characters to move back from caret
                 * @param         {Object}    Ptarg   Focused element
                 * @param         {Array}     rule    An array of ContextEntries to match.
                 * @return        {boolean}           True if the fully-specified rule context matches the current KMW state.
                 *
                 * A KMW 10+ function designed to bring KMW closer to Keyman Desktop functionality,
                 * near-directly modeling (externally) the compiled form of Desktop rules' context section.
                 */
                KeyboardInterface.prototype.fullContextMatch = function (n, outputTarget, rule) {
                    // Stage one:  build the context index map.
                    var fullContext = this._BuildExtendedContext(n, rule.length, outputTarget);
                    this.ruleContextEx = this.cachedContextEx.clone();
                    var context = fullContext.valContext;
                    var deadContext = fullContext.deadContext;
                    var mismatch = false;
                    // This symbol internally indicates lack of context in a position.  (See KC_)
                    var NUL_CONTEXT = "\uFFFE";
                    var assertNever = function (x) {
                        // Could be accessed by improperly handwritten calls to `fullContextMatch`.
                        throw new Error("Unexpected object in fullContextMatch specification: " + x);
                    };
                    // Stage two:  time to match against the rule specified.
                    for (var i = 0; i < rule.length; i++) {
                        if (typeof rule[i] == 'string') {
                            var str = rule[i];
                            if (str !== context[i]) {
                                mismatch = true;
                                break;
                            }
                        }
                        else {
                            // TypeScript needs a cast to this intermediate type to do its discriminated union magic.
                            var r = rule[i];
                            switch (r.t) {
                                case 'd':
                                    // We still need to set a flag here;
                                    if (r['d'] !== context[i]) {
                                        mismatch = true;
                                    }
                                    else {
                                        deadContext[i].set();
                                    }
                                    break;
                                case 'a':
                                    var lookup;
                                    if (typeof context[i] == 'string') {
                                        lookup = context[i];
                                    }
                                    else {
                                        lookup = { 't': 'd', 'd': context[i] };
                                    }
                                    var result = this.any(i, lookup, r.a);
                                    if (!r.n) { // If it's a standard 'any'...
                                        if (!result) {
                                            mismatch = true;
                                        }
                                        else if (deadContext[i] !== undefined) {
                                            // It's a deadkey match, so indicate that.
                                            deadContext[i].set();
                                        }
                                        // 'n' for 'notany'.
                                        // - if `result === true`, `any` would match:  this should thus fail.
                                        // - if `context[i] === NUL_CONTEXT`, `notany` should not match.
                                    }
                                    else if (r.n && (result || context[i] === NUL_CONTEXT)) {
                                        mismatch = true;
                                    }
                                    break;
                                case 'i':
                                    // The context will never hold a 'beep.'
                                    var ch = this._Index(r.i, r.o);
                                    if (ch !== undefined && (typeof (ch) == 'string' ? ch : ch.d) !== context[i]) {
                                        mismatch = true;
                                    }
                                    else if (deadContext[i] !== undefined) {
                                        deadContext[i].set();
                                    }
                                    break;
                                case 'c':
                                    if (context[r.c - 1] !== context[i]) {
                                        mismatch = true;
                                    }
                                    else if (deadContext[i] !== undefined) {
                                        deadContext[i].set();
                                    }
                                    break;
                                case 'n':
                                    // \uFFFE is the internal 'no context here sentinel'.
                                    if (context[i] != NUL_CONTEXT) {
                                        mismatch = true;
                                    }
                                    break;
                                default:
                                    assertNever(r);
                            }
                        }
                    }
                    if (mismatch) {
                        // Reset the matched 'any' indices, if any.
                        outputTarget.deadkeys().resetMatched();
                        this._AnyIndices = [];
                    }
                    return !mismatch;
                };
                /**
                 * Function     KIK
                 * Scope        Public
                 * @param       {Object}  e   keystroke event
                 * @return      {boolean}     true if keypress event
                 * Description  Test if event as a keypress event
                 */
                KeyboardInterface.prototype.isKeypress = function (e) {
                    if (this.activeKeyboard.isMnemonic) { // I1380 - support KIK for positional layouts
                        return !e.LisVirtualKey; // will now return true for U_xxxx keys, but not for T_xxxx keys
                    }
                    else {
                        return keyman.KeyMapping._USKeyCodeToCharCode(e) ? true : false; // I1380 - support KIK for positional layouts
                    }
                };
                /**
                 * Function     keyMatch      KKM
                 * Scope        Public
                 * @param       {Object}      e           keystroke event
                 * @param       {number}      Lruleshift
                 * @param       {number}      Lrulekey
                 * @return      {boolean}                 True if key matches rule
                 * Description  Test keystroke with modifiers against rule
                 */
                KeyboardInterface.prototype.keyMatch = function (e, Lruleshift, Lrulekey) {
                    var retVal = false; // I3318
                    var keyCode = (e.Lcode == 173 ? 189 : e.Lcode); //I3555 (Firefox hyphen issue)
                    var bitmask = this.activeKeyboard.modifierBitmask;
                    var Codes = com.keyman.text.Codes;
                    var modifierBitmask = bitmask & Codes.modifierBitmasks["ALL"];
                    var stateBitmask = bitmask & Codes.stateBitmasks["ALL"];
                    if (e.vkCode > 255) {
                        keyCode = e.vkCode; // added to support extended (touch-hold) keys for mnemonic layouts
                    }
                    if (e.LisVirtualKey || keyCode > 255) {
                        if ((Lruleshift & 0x4000) == 0x4000 || (keyCode > 255)) { // added keyCode test to support extended keys
                            retVal = ((Lrulekey == keyCode) && ((Lruleshift & modifierBitmask) == e.Lmodifiers)); //I3318, I3555
                            retVal = retVal && this.stateMatch(e, Lruleshift & stateBitmask);
                        }
                    }
                    else if ((Lruleshift & 0x4000) == 0) {
                        retVal = (keyCode == Lrulekey); // I3318, I3555
                    }
                    if (!retVal) {
                        this.activeTargetOutput.deadkeys().resetMatched(); // I3318
                    }
                    return retVal; // I3318
                };
                ;
                /**
                 * Function     stateMatch    KSM
                 * Scope        Public
                 * @param       {Object}      e       keystroke event
                 * @param       {number}      Lstate
                 * Description  Test keystroke against state key rules
                 */
                KeyboardInterface.prototype.stateMatch = function (e, Lstate) {
                    return ((Lstate & e.Lstates) == Lstate);
                };
                /**
                 * Function     keyInformation  KKI
                 * Scope        Public
                 * @param       {Object}      e
                 * @return      {Object}              Object with event's virtual key flag, key code, and modifiers
                 * Description  Get object with extended key event information
                 */
                KeyboardInterface.prototype.keyInformation = function (e) {
                    var ei = new KeyInformation();
                    ei['vk'] = e.LisVirtualKey;
                    ei['code'] = e.Lcode;
                    ei['modifiers'] = e.Lmodifiers;
                    return ei;
                };
                ;
                /**
                 * Function     deadkeyMatch  KDM
                 * Scope        Public
                 * @param       {number}      n       offset from current cursor position
                 * @param       {Object}      Ptarg   target element
                 * @param       {number}      d       deadkey
                 * @return      {boolean}             True if deadkey found selected context matches val
                 * Description  Match deadkey at current cursor position
                 */
                KeyboardInterface.prototype.deadkeyMatch = function (n, outputTarget, d) {
                    return outputTarget.hasDeadkeyMatch(n, d);
                };
                /**
                 * Function     beep          KB
                 * Scope        Public
                 * @param       {Object}      Pelem     element to flash
                 * Description  Flash body as substitute for audible beep; notify embedded device to vibrate
                 */
                KeyboardInterface.prototype.beep = function (outputTarget) {
                    this.resetContextCache();
                    // Denote as part of the matched rule's behavior.
                    this.ruleBehavior.beep = true;
                };
                KeyboardInterface.prototype._ExplodeStore = function (store) {
                    if (typeof (store) == 'string') {
                        var cachedStores = this.activeKeyboard.explodedStores;
                        // Is the result cached?
                        if (cachedStores[store]) {
                            return cachedStores[store];
                        }
                        // Nope, so let's build its cache.
                        var result = [];
                        for (var i = 0; i < store._kmwLength(); i++) {
                            result.push(store._kmwCharAt(i));
                        }
                        // Cache the result for later!
                        cachedStores[store] = result;
                        return result;
                    }
                    else {
                        return store;
                    }
                };
                /**
                 * Function     any           KA
                 * Scope        Public
                 * @param       {number}      n     character position (index)
                 * @param       {string}      ch    character to find in string
                 * @param       {string}      s     'any' string
                 * @return      {boolean}           True if character found in 'any' string, sets index accordingly
                 * Description  Test for character matching
                 */
                KeyboardInterface.prototype.any = function (n, ch, s) {
                    if (ch == '') {
                        return false;
                    }
                    s = this._ExplodeStore(s);
                    var Lix = -1;
                    for (var i = 0; i < s.length; i++) {
                        if (typeof (s[i]) == 'string') {
                            if (s[i] == ch) {
                                Lix = i;
                                break;
                            }
                        }
                        else if (s[i]['d'] === ch['d']) {
                            Lix = i;
                            break;
                        }
                    }
                    this._AnyIndices[n] = Lix;
                    return Lix >= 0;
                };
                /**
                 * Function     _Index
                 * Scope        Public
                 * @param       {string}      Ps      string
                 * @param       {number}      Pn      index
                 * Description  Returns the character from a store string according to the offset in the index array
                 */
                KeyboardInterface.prototype._Index = function (Ps, Pn) {
                    Ps = this._ExplodeStore(Ps);
                    if (this._AnyIndices[Pn - 1] < Ps.length) { //I3319
                        return Ps[this._AnyIndices[Pn - 1]];
                    }
                    else {
                        /* Should not be possible for a compiled keyboard, but may arise
                        * during the development of handwritten keyboards.
                        */
                        console.warn("Unmatched contextual index() statement detected in rule with index " + Pn + "!");
                        return "";
                    }
                };
                /**
                 * Function     indexOutput   KIO
                 * Scope        Public
                 * @param       {number}      Pdn     no of character to overwrite (delete)
                 * @param       {string}      Ps      string
                 * @param       {number}      Pn      index
                 * @param       {Object}      Pelem   element to output to
                 * Description  Output a character selected from the string according to the offset in the index array
                 */
                KeyboardInterface.prototype.indexOutput = function (Pdn, Ps, Pn, outputTarget) {
                    this.resetContextCache();
                    var assertNever = function (x) {
                        // Could be accessed by improperly handwritten calls to `fullContextMatch`.
                        throw new Error("Unexpected object in fullContextMatch specification: " + x);
                    };
                    var indexChar = this._Index(Ps, Pn);
                    if (indexChar !== "") {
                        if (typeof indexChar == 'string') {
                            this.output(Pdn, outputTarget, indexChar); //I3319
                        }
                        else if (indexChar['t']) {
                            var storeEntry = indexChar;
                            switch (storeEntry.t) {
                                case 'b': // Beep commands may appear within stores.
                                    this.beep(outputTarget);
                                    break;
                                case 'd':
                                    this.deadkeyOutput(Pdn, outputTarget, indexChar['d']);
                                    break;
                                default:
                                    assertNever(storeEntry);
                            }
                        }
                        else { // For keyboards developed during 10.0's alpha phase - t:'d' was assumed.
                            this.deadkeyOutput(Pdn, outputTarget, indexChar['d']);
                        }
                    }
                };
                /**
                 * Function     deleteContext KDC
                 * Scope        Public
                 * @param       {number}      dn      number of context entries to overwrite
                 * @param       {Object}      Pelem   element to output to
                 * @param       {string}      s       string to output
                 * Description  Keyboard output
                 */
                KeyboardInterface.prototype.deleteContext = function (dn, outputTarget) {
                    var context;
                    // We want to control exactly which deadkeys get removed.
                    if (dn > 0) {
                        context = this._BuildExtendedContext(dn, dn, outputTarget);
                        var nulCount = 0;
                        for (var i = 0; i < context.valContext.length; i++) {
                            var dk = context.deadContext[i];
                            if (dk) {
                                // Remove deadkey in context.
                                outputTarget.deadkeys().remove(dk);
                                // Reduce our reported context size.
                                dn--;
                            }
                            else if (context.valContext[i] == "\uFFFE") {
                                // Count any `nul` sentinels that would contribute to our deletion count.
                                nulCount++;
                            }
                        }
                        // Prevent attempts to delete nul sentinels, as they don't exist in the actual context.
                        // (Addresses regression from KMW v 12.0 paired with Developer bug through same version)
                        var contextLength = context.valContext.length - nulCount;
                        if (dn > contextLength) {
                            dn = contextLength;
                        }
                    }
                    // If a matched deadkey hasn't been deleted, we don't WANT to delete it.
                    outputTarget.deadkeys().resetMatched();
                    // Why reinvent the wheel?  Delete the remaining characters by 'inserting a blank string'.
                    this.output(dn, outputTarget, '');
                };
                /**
                 * Function     output        KO
                 * Scope        Public
                 * @param       {number}      dn      number of characters to overwrite
                 * @param       {Object}      Pelem   element to output to
                 * @param       {string}      s       string to output
                 * Description  Keyboard output
                 */
                KeyboardInterface.prototype.output = function (dn, outputTarget, s) {
                    this.resetContextCache();
                    outputTarget.saveProperties();
                    outputTarget.clearSelection();
                    outputTarget.deadkeys().deleteMatched(); // I3318
                    if (dn >= 0) {
                        // Automatically manages affected deadkey positions.  Does not delete deadkeys b/c legacy behavior support.
                        outputTarget.deleteCharsBeforeCaret(dn);
                    }
                    // Automatically manages affected deadkey positions.
                    outputTarget.insertTextBeforeCaret(s);
                    outputTarget.restoreProperties();
                };
                /**
                 * `contextExOutput` function emits the character or object at `contextOffset` from the
                 * current matched rule's context. Introduced in Keyman 14.0, in order to resolve a
                 * gap between desktop and web core functionality for context(n) matching on notany().
                 * See #917 for additional detail.
                 * @alias       KCXO
                 * @public
                 * @param       {number}        Pdn            number of characters to delete left of cursor
                 * @param       {OutputTarget}  outputTarget   target to output to
                 * @param       {number}        contextLength  length of current rule context to retrieve
                 * @param       {number}        contextOffset  offset from start of current rule context, 1-based
                 */
                KeyboardInterface.prototype.contextExOutput = function (Pdn, outputTarget, contextLength, contextOffset) {
                    this.resetContextCache();
                    if (Pdn >= 0) {
                        this.output(Pdn, outputTarget, "");
                    }
                    var context = this.ruleContextEx.get(contextLength, contextLength);
                    var dk = context.deadContext[contextOffset - 1], vc = context.valContext[contextOffset - 1];
                    if (dk) {
                        outputTarget.insertDeadkeyBeforeCaret(dk.d);
                    }
                    else if (typeof vc == 'string') {
                        this.output(-1, outputTarget, vc);
                    }
                    else {
                        throw new Error("contextExOutput: should never be a numeric valContext with no corresponding deadContext");
                    }
                };
                /**
                 * Function     deadkeyOutput KDO
                 * Scope        Public
                 * @param       {number}      Pdn     no of character to overwrite (delete)
                 * @param       {Object}      Pelem   element to output to
                 * @param       {number}      Pd      deadkey id
                 * Description  Record a deadkey at current cursor position, deleting Pdn characters first
                 */
                KeyboardInterface.prototype.deadkeyOutput = function (Pdn, outputTarget, Pd) {
                    this.resetContextCache();
                    if (Pdn >= 0) {
                        this.output(Pdn, outputTarget, ""); //I3318 corrected to >=
                    }
                    outputTarget.insertDeadkeyBeforeCaret(Pd);
                    //    _DebugDeadKeys(Pelem, 'KDeadKeyOutput: dn='+Pdn+'; deadKey='+Pd);
                };
                /**
                 * KIFS compares the content of a system store with a string value
                 *
                 * @param       {number}      systemId    ID of the system store to test (only TSS_LAYER currently supported)
                 * @param       {string}      strValue    String value to compare to
                 * @param       {Object}      Pelem       Currently active element (may be needed by future tests)
                 * @return      {boolean}                 True if the test succeeds
                 */
                KeyboardInterface.prototype.ifStore = function (systemId, strValue, outputTarget) {
                    var result = true;
                    var store = this.systemStores[systemId];
                    if (store) {
                        result = store.matches(strValue);
                    }
                    return result; //Moved from previous line, now supports layer selection, Build 350
                };
                /**
                 * KSETS sets the value of a system store to a string
                 *
                 * @param       {number}      systemId    ID of the system store to set (only TSS_LAYER currently supported)
                 * @param       {string}      strValue    String to set as the system store content
                 * @param       {Object}      Pelem       Currently active element (may be needed in future tests)
                 * @return      {boolean}                 True if command succeeds
                 *                                        (i.e. for TSS_LAYER, if the layer is successfully selected)
                 *
                 * Note that option/variable stores are instead set within keyboard script code, as they only
                 * affect keyboard behavior.
                 */
                KeyboardInterface.prototype.setStore = function (systemId, strValue, outputTarget) {
                    this.resetContextCache();
                    if (systemId == KeyboardInterface.TSS_LAYER) {
                        // Denote the changed store as part of the matched rule's behavior.
                        this.ruleBehavior.setStore[systemId] = strValue;
                    }
                    else {
                        return false;
                    }
                };
                /**
                 * Load an option store value from a cookie or default value
                 *
                 * @param       {string}      kbdName     keyboard internal name
                 * @param       {string}      storeName   store (option) name, embedded in cookie name
                 * @param       {string}      dfltValue   default value
                 * @return      {string}                  current or default option value
                 *
                 * This will only ever be called when the keyboard is loaded, as it is used by keyboards
                 * to initialize a store value on the keyboard's script object.
                 */
                KeyboardInterface.prototype.loadStore = function (kbdName, storeName, dfltValue) {
                    this.resetContextCache();
                    if (this.variableStoreSerializer) {
                        var cValue = this.variableStoreSerializer.loadStore(kbdName, storeName);
                        return cValue[storeName] || dfltValue;
                    }
                    else {
                        return dfltValue;
                    }
                };
                /**
                 * Save an option store value to a cookie
                 *
                 * @param       {string}      storeName   store (option) name, embedded in cookie name
                 * @param       {string}      optValue    option value to save
                 * @return      {boolean}                 true if save successful
                 *
                 * Note that a keyboard will freely manipulate the value of its variable stores on the
                 * script object within its own code.  This function's use is merely to _persist_ that
                 * value across sessions, providing a custom user default for later uses of the keyboard.
                 */
                KeyboardInterface.prototype.saveStore = function (storeName, optValue) {
                    this.resetContextCache();
                    var kbd = this.activeKeyboard;
                    if (!kbd || typeof kbd.id == 'undefined' || kbd.id == '') {
                        return false;
                    }
                    // And the lookup under that entry looks for the value under the store name, again.
                    var valueObj = {};
                    valueObj[storeName] = optValue;
                    // Null-check in case of invocation during unit-test
                    if (this.ruleBehavior) {
                        this.ruleBehavior.saveStore[storeName] = valueObj;
                    }
                    else {
                        // We're in a unit-test environment, directly invoking this method from outside of a keyboard.
                        // In this case, we should immediately commit the change.
                        this.variableStoreSerializer.saveStore(this.activeKeyboard.id, storeName, valueObj);
                    }
                    return true;
                };
                KeyboardInterface.prototype.resetContextCache = function () {
                    this.cachedContext.reset();
                    this.cachedContextEx.reset();
                };
                KeyboardInterface.prototype.defaultBackspace = function (outputTarget) {
                    this.output(1, outputTarget, "");
                };
                /**
                 * Function     processKeystroke
                 * Scope        Private
                 * @param       {Object}        element     The page element receiving input
                 * @param       {Object}        keystroke   The input keystroke (with its properties) to be mapped by the keyboard.
                 * Description  Encapsulates calls to keyboard input processing.
                 * @returns     {number}        0 if no match is made, otherwise 1.
                 */
                KeyboardInterface.prototype.processKeystroke = function (outputTarget, keystroke) {
                    // Clear internal state tracking data from prior keystrokes.
                    if (!outputTarget) {
                        throw "No target specified for keyboard output!";
                    }
                    else if (!this.activeKeyboard) {
                        throw "No active keyboard for keystroke processing!";
                    }
                    outputTarget.invalidateSelection();
                    outputTarget.deadkeys().resetMatched(); // I3318
                    this.resetContextCache();
                    // Capture the initial state of the OutputTarget before any rules are matched.
                    var preInput = text.Mock.from(outputTarget);
                    // Capture the initial state of any variable stores
                    var cachedVariableStores = this.activeKeyboard.variableStores;
                    // Establishes the results object, allowing corresponding commands to set values here as appropriate.
                    this.ruleBehavior = new text.RuleBehavior();
                    // Ensure the settings are in place so that KIFS/ifState activates and deactivates
                    // the appropriate rule(s) for the modeled device.
                    this.activeDevice = keystroke.device;
                    // Calls the start-group of the active keyboard.
                    this.activeTargetOutput = outputTarget;
                    var matched = this.activeKeyboard.process(outputTarget, keystroke);
                    this.activeTargetOutput = null;
                    // Finalize the rule's results.
                    this.ruleBehavior.transcription = outputTarget.buildTranscriptionFrom(preInput, keystroke);
                    // We always backup the changes to variable stores to the RuleBehavior, to
                    // be applied during finalization, then restore them to the cached initial
                    // values to avoid side-effects with predictive text mocks.
                    this.ruleBehavior.variableStores = this.activeKeyboard.variableStores;
                    this.activeKeyboard.variableStores = cachedVariableStores;
                    // `matched` refers to whether or not the FINAL rule (from any group) matched, rather than
                    // whether or not ANY rule matched.  If the final rule doesn't match, we trigger the key's
                    // default behavior (if appropriate).
                    //
                    // See https://github.com/keymanapp/keyman/pull/4350#issuecomment-768753852
                    this.ruleBehavior.triggerKeyDefault = !matched;
                    // Clear our result-tracking variable to prevent any possible pollution for future processing.
                    var behavior = this.ruleBehavior;
                    this.ruleBehavior = null;
                    return behavior;
                };
                /**
                 * Applies the dictionary of variable store values to the active keyboard
                 *
                 * Has no effect on keyboards compiled with 14.0 or earlier; system store
                 * names are not exposed unless compiled with Developer 15.0 or later.
                 *
                 * @param stores A dictionary of stores which should be found in the
                 *               keyboard
                 */
                KeyboardInterface.prototype.applyVariableStores = function (stores) {
                    this.activeKeyboard.variableStores = stores;
                };
                /**
                 * Publishes the KeyboardInterface's shorthand API names.  As this assigns the current functions
                 * held by the longform versions, note that this should be called after replacing any of them via
                 * JS method extension.
                 *
                 * DOM-aware KeymanWeb should call this after its domKbdInterface.ts code is loaded, as it replaces
                 * a few.  (This is currently done within its kmwapi.ts.)
                 */
                KeyboardInterface.__publishShorthandAPI = function () {
                    // Keyboard callbacks
                    var prototype = this.prototype;
                    var exportKBCallback = function (miniName, longName) {
                        prototype[miniName] = prototype[longName];
                    };
                    exportKBCallback('KSF', 'saveFocus');
                    exportKBCallback('KBR', 'beepReset');
                    exportKBCallback('KT', 'insertText');
                    exportKBCallback('KR', 'registerKeyboard');
                    exportKBCallback('KRS', 'registerStub');
                    exportKBCallback('KC', 'context');
                    exportKBCallback('KN', 'nul');
                    exportKBCallback('KCM', 'contextMatch');
                    exportKBCallback('KFCM', 'fullContextMatch');
                    exportKBCallback('KIK', 'isKeypress');
                    exportKBCallback('KKM', 'keyMatch');
                    exportKBCallback('KSM', 'stateMatch');
                    exportKBCallback('KKI', 'keyInformation');
                    exportKBCallback('KDM', 'deadkeyMatch');
                    exportKBCallback('KB', 'beep');
                    exportKBCallback('KA', 'any');
                    exportKBCallback('KDC', 'deleteContext');
                    exportKBCallback('KO', 'output');
                    exportKBCallback('KDO', 'deadkeyOutput');
                    exportKBCallback('KCXO', 'contextExOutput');
                    exportKBCallback('KIO', 'indexOutput');
                    exportKBCallback('KIFS', 'ifStore');
                    exportKBCallback('KSETS', 'setStore');
                    exportKBCallback('KLOAD', 'loadStore');
                    exportKBCallback('KSAVE', 'saveStore');
                };
                KeyboardInterface.GLOBAL_NAME = 'KeymanWeb';
                KeyboardInterface.TSS_LAYER = 33;
                KeyboardInterface.TSS_PLATFORM = 31;
                return KeyboardInterface;
            }());
            text.KeyboardInterface = KeyboardInterface;
            (function () {
                // This will be the only call within the keyboard-processor module.
                KeyboardInterface.__publishShorthandAPI();
            }());
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="defaultLayouts.ts" />
/// <reference path="activeLayout.ts" />
/// <reference path="../text/kbdInterface.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var keyboards;
        (function (keyboards) {
            /**
             * Stores preprocessed properties of a keyboard for quick retrieval later.
             */
            var CacheTag = /** @class */ (function () {
                function CacheTag() {
                    this.stores = {};
                }
                return CacheTag;
            }());
            var LayoutState;
            (function (LayoutState) {
                LayoutState[LayoutState["NOT_LOADED"] = undefined] = "NOT_LOADED";
                LayoutState[LayoutState["POLYFILLED"] = 1] = "POLYFILLED";
                LayoutState[LayoutState["CALIBRATED"] = 2] = "CALIBRATED";
            })(LayoutState = keyboards.LayoutState || (keyboards.LayoutState = {}));
            ;
            /**
             * Acts as a wrapper class for Keyman keyboards compiled to JS, providing type information
             * and keyboard-centered functionality in an object-oriented way without modifying the
             * wrapped keyboard itself.
             */
            var Keyboard = /** @class */ (function () {
                function Keyboard(keyboardScript) {
                    if (keyboardScript) {
                        this.scriptObject = keyboardScript;
                    }
                    else {
                        this.scriptObject = Keyboard.DEFAULT_SCRIPT_OBJECT;
                    }
                    this.layoutStates = {};
                }
                /**
                 * Calls the keyboard's `gs` function, which represents the keyboard source's group(main).
                 */
                Keyboard.prototype.process = function (outputTarget, keystroke) {
                    return this.scriptObject['gs'](outputTarget, keystroke);
                };
                Object.defineProperty(Keyboard.prototype, "isHollow", {
                    get: function () {
                        return this.scriptObject == Keyboard.DEFAULT_SCRIPT_OBJECT;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "id", {
                    get: function () {
                        return this.scriptObject['KI'];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "name", {
                    get: function () {
                        return this.scriptObject['KN'];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "variableStores", {
                    /**
                     * Cache variable store values
                     *
                     * Primarily used for predictive text to prevent variable store
                     * values from being changed in 'fat finger' processing.
                     *
                     * KVS is available in keyboards compiled with Keyman Developer 15
                     * and later versions. See #2924.
                     *
                     * @returns an object with each property referencing a variable store
                     */
                    get: function () {
                        var storeNames = this.scriptObject['KVS'];
                        var values = {};
                        if (Array.isArray(storeNames)) {
                            for (var _i = 0, storeNames_1 = storeNames; _i < storeNames_1.length; _i++) {
                                var store = storeNames_1[_i];
                                values[store] = this.scriptObject[store];
                            }
                        }
                        return values;
                    },
                    /**
                     * Restore variable store values from cache
                     *
                     * KVS is available in keyboards compiled with Keyman Developer 15
                     * and later versions. See #2924.
                     *
                     * @param values  name-value pairs for each store value
                     */
                    set: function (values) {
                        var storeNames = this.scriptObject['KVS'];
                        if (Array.isArray(storeNames)) {
                            for (var _i = 0, storeNames_2 = storeNames; _i < storeNames_2.length; _i++) {
                                var store = storeNames_2[_i];
                                // If the value is not present in the cache, don't overwrite it;
                                // while this is not used in initial implementation, we could use
                                // it in future to update a single variable store value rather than
                                // the whole cache.
                                if (typeof values[store] == 'string') {
                                    this.scriptObject[store] = values[store];
                                }
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "_legacyLayoutSpec", {
                    // TODO:  Better typing.
                    get: function () {
                        return this.scriptObject['KV']; // used with buildDefaultLayout; layout must be constructed at runtime.
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "_layouts", {
                    // May return null if no layouts exist or have been initialized.
                    get: function () {
                        return this.scriptObject['KVKL']; // This one is compiled by Developer's visual keyboard layout editor.
                    },
                    set: function (value) {
                        this.scriptObject['KVKL'] = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "compilerVersion", {
                    get: function () {
                        return new keyman.utils.Version(this.scriptObject['KVER']);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "isMnemonic", {
                    get: function () {
                        return !!this.scriptObject['KM'];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "definesPositionalOrMnemonic", {
                    get: function () {
                        return typeof this.scriptObject['KM'] != 'undefined';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "helpText", {
                    /**
                     * HTML help text, as specified by either the &kmw_helptext or &kmw_helpfile system stores.
                     *
                     * Reference: https://help.keyman.com/developer/language/reference/kmw_helptext,
                     *            https://help.keyman.com/developer/language/reference/kmw_helpfile
                     */
                    get: function () {
                        return this.scriptObject['KH'];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "hasScript", {
                    /**
                     * Embedded JS script designed for use with a keyboard's HTML help text.  Always defined
                     * within the file referenced by &kmw_embedjs in a keyboard's source, though that file
                     * may also contain _other_ script definitions as well.  (`KHF` must be explicitly defined
                     * within that file.)
                     */
                    get: function () {
                        return !!this.scriptObject['KHF'];
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Embeds a custom script for use by the OSK, which may be interactive (like with sil_euro_latin).
                 * Note:  this must be called AFTER any contents of `helpText` have been inserted into the DOM.
                 * (See sil_euro_latin's source -> sil_euro_latin_js.txt)
                 *
                 * Reference: https://help.keyman.com/developer/language/reference/kmw_embedjs
                 */
                Keyboard.prototype.embedScript = function (e) {
                    // e:  Expects the OSKManager's _Box element.  We don't add type info here b/c it would
                    //     reference the DOM.
                    this.scriptObject['KHF'](e);
                };
                Object.defineProperty(Keyboard.prototype, "oskStyling", {
                    get: function () {
                        return this.scriptObject['KCSS'];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "isCJK", {
                    /**
                     * true if this keyboard uses a (legacy) pick list (Chinese, Japanese, Korean, etc.)
                     *
                     * TODO:  Make a property on keyboards (say, `isPickList` / `KPL`) to signal this when we
                     *        get around to better, generalized picker-list support.
                     */
                    get: function () {
                        var lg;
                        if (typeof (this.scriptObject['KLC']) != 'undefined') {
                            lg = this.scriptObject['KLC'];
                        }
                        else if (typeof (this.scriptObject['LanguageCode']) != 'undefined') {
                            lg = this.scriptObject['LanguageCode'];
                        }
                        // While some of these aren't proper BCP-47 language codes, the CJK keyboards predate our use of BCP-47.
                        // So, we preserve the old ISO 639-3 codes, as that's what the keyboards are matching against.
                        return ((lg == 'cmn') || (lg == 'jpn') || (lg == 'kor'));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "isRTL", {
                    get: function () {
                        return !!this.scriptObject['KRTL'];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "modifierBitmask", {
                    /**
                     * Obtains the currently-active modifier bitmask for the active keyboard.
                     */
                    get: function () {
                        // NON_CHIRAL is the default bitmask if KMBM is not defined.
                        // We always need a bitmask to compare against, as seen in `isChiral`.
                        return this.scriptObject['KMBM'] || keyman.text.Codes.modifierBitmasks['NON_CHIRAL'];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "isChiral", {
                    get: function () {
                        return !!(this.modifierBitmask & keyman.text.Codes.modifierBitmasks['IS_CHIRAL']);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "desktopFont", {
                    get: function () {
                        if (this.scriptObject['KV']) {
                            return this.scriptObject['KV']['F'];
                        }
                        else {
                            return null;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "cacheTag", {
                    get: function () {
                        var tag = this.scriptObject['_kmw'];
                        if (!tag) {
                            tag = new CacheTag();
                            this.scriptObject['_kmw'] = tag;
                        }
                        return tag;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "explodedStores", {
                    get: function () {
                        return this.cacheTag.stores;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "emulatesAltGr", {
                    /**
                     * Signifies whether or not a layout or OSK should include AltGr / Right-alt emulation for this keyboard.
                     * @param   {Object=}   keyLabels
                     * @return  {boolean}
                     */
                    get: function () {
                        var modifierCodes = keyman.text.Codes.modifierCodes;
                        // If we're not chiral, we're not emulating.
                        if (!this.isChiral) {
                            return false;
                        }
                        if (this._legacyLayoutSpec == null) {
                            return false;
                        }
                        // Only exists in KMW 10.0+, but before that Web had no chirality support, so... return false.
                        var layers = this._legacyLayoutSpec['KLS'];
                        if (!layers) {
                            return false;
                        }
                        var emulationMask = modifierCodes['LCTRL'] | modifierCodes['LALT'];
                        var unshiftedEmulationLayer = layers[keyboards.Layouts.getLayerId(emulationMask)];
                        var shiftedEmulationLayer = layers[keyboards.Layouts.getLayerId(modifierCodes['SHIFT'] | emulationMask)];
                        // buildDefaultLayout ensures that these are aliased to the original modifier set being emulated.
                        // As a result, we can directly test for reference equality.
                        //
                        // This allows us to still return `true` after creating the layers for emulation; during keyboard
                        // construction, the two layers should be null for AltGr emulation to succeed.
                        if (unshiftedEmulationLayer != null &&
                            unshiftedEmulationLayer != layers[keyboards.Layouts.getLayerId(modifierCodes['RALT'])]) {
                            return false;
                        }
                        if (shiftedEmulationLayer != null &&
                            shiftedEmulationLayer != layers[keyboards.Layouts.getLayerId(modifierCodes['RALT'] | modifierCodes['SHIFT'])]) {
                            return false;
                        }
                        // It's technically possible for the OSK to not specify anything while allowing chiral input.  A last-ditch catch:
                        var bitmask = this.modifierBitmask;
                        if ((bitmask & emulationMask) != emulationMask) {
                            // At least one of the emulation modifiers is never used by the keyboard!  We can confirm everything's safe.
                            return true;
                        }
                        if (unshiftedEmulationLayer == null && shiftedEmulationLayer == null) {
                            // We've run out of things to go on; we can't detect if chiral AltGr emulation is intended or not.
                            // TODO:  handle this again!
                            // if(!osk.altGrWarning) {
                            //   console.warn("Could not detect if AltGr emulation is safe, but defaulting to active emulation!")
                            //   // Avoid spamming the console with warnings on every call of the method.
                            //   osk.altGrWarning = true;
                            // }
                            return true;
                        }
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Keyboard.prototype, "usesSupplementaryPlaneChars", {
                    get: function () {
                        var kbd = this.scriptObject;
                        // I3319 - SMP extension, I3363 (Build 301)
                        return kbd && ((kbd['KS'] && kbd['KS'] == 1) || kbd['KN'] == 'Hieroglyphic');
                    },
                    enumerable: true,
                    configurable: true
                });
                Keyboard.prototype.usesDesktopLayoutOnDevice = function (device) {
                    if (this.scriptObject['KVKL']) {
                        // A custom mobile layout is defined... but are we using it?
                        return device.formFactor == keyman.utils.FormFactor.Desktop;
                    }
                    else {
                        return true;
                    }
                };
                /**
                 * @param       {number}    _PCommand     event code (16,17,18) or 0
                 * @param       {Object}    _PTarget      target element
                 * @param       {number}    _PData        1 or 0
                 * Notifies keyboard of keystroke or other event
                 */
                Keyboard.prototype.notify = function (_PCommand, _PTarget, _PData) {
                    // Good example use case - the Japanese CJK-picker keyboard
                    if (typeof (this.scriptObject['KNS']) == 'function') {
                        this.scriptObject['KNS'](_PCommand, _PTarget, _PData);
                    }
                };
                Keyboard.prototype.findOrConstructLayout = function (formFactor) {
                    if (this._layouts) {
                        // Search for viable layouts.  `null` is allowed for desktop form factors when help text is available,
                        // so we check explicitly against `undefined`.
                        if (this._layouts[formFactor] !== undefined) {
                            return this._layouts[formFactor];
                        }
                        else if (formFactor == keyman.utils.FormFactor.Phone && this._layouts[keyman.utils.FormFactor.Tablet]) {
                            return this._layouts[keyman.utils.FormFactor.Phone] = this._layouts[keyman.utils.FormFactor.Tablet];
                        }
                        else if (formFactor == keyman.utils.FormFactor.Tablet && this._layouts[keyman.utils.FormFactor.Phone]) {
                            return this._layouts[keyman.utils.FormFactor.Tablet] = this._layouts[keyman.utils.FormFactor.Phone];
                        }
                    }
                    // No pre-built layout available; time to start constructing it via defaults.
                    // First, if we have non-default keys specified by the ['BK'] array, we've got
                    // enough to work with to build a default layout.
                    var rawSpecifications = null; // TODO:  better typing, same type as this._legacyLayoutSpec.
                    if (this._legacyLayoutSpec != null && this._legacyLayoutSpec['KLS']) { // KLS is only specified whenever there are non-default keys.
                        rawSpecifications = this._legacyLayoutSpec;
                    }
                    else if (this._legacyLayoutSpec != null && this._legacyLayoutSpec['BK'] != null) {
                        var keyCaps = this._legacyLayoutSpec['BK'];
                        for (var i = 0; i < keyCaps.length; i++) {
                            if (keyCaps[i].length > 0) {
                                rawSpecifications = this._legacyLayoutSpec;
                                break;
                            }
                        }
                    }
                    // If we don't have key definitions to use for a layout but also lack help text or are a touch-based layout,
                    // we make a default layout anyway.  We have to show display something usable.
                    if (!rawSpecifications && (this.helpText == '' || formFactor != keyman.utils.FormFactor.Desktop)) {
                        rawSpecifications = { 'F': 'Tahoma', 'BK': keyboards.Layouts.dfltText };
                    }
                    // Regardless of success, we'll want to initialize the field that backs the property;
                    // may as well cache the default layout we just built, or a 'null' if it shouldn't exist..
                    if (!this._layouts) {
                        this._layouts = {};
                    }
                    // Final check - do we construct a layout, or is this a case where helpText / insertHelpHTML should take over?
                    if (rawSpecifications) {
                        // Now to generate a layout from our raw specifications.
                        var layout = this._layouts[formFactor] = keyboards.Layouts.buildDefaultLayout(rawSpecifications, this, formFactor);
                        layout.isDefault = true;
                        return layout;
                    }
                    else {
                        // The fact that it doesn't exist will indicate that help text/HTML should be inserted instead.
                        this._layouts[formFactor] = null; // provides a cached value for the check at the top of this method.
                        return null;
                    }
                };
                /**
                 * Returns an ActiveLayout object representing the keyboard's layout for this form factor.  May return null if a custom desktop "help" OSK is defined, as with sil_euro_latin.
                 *
                 * In such cases, please use either `helpText` or `insertHelpHTML` instead.
                 * @param formFactor {string} The desired form factor for the layout.
                 */
                Keyboard.prototype.layout = function (formFactor) {
                    var rawLayout = this.findOrConstructLayout(formFactor);
                    if (rawLayout) {
                        // Prevents accidentally reprocessing layouts; it's a simple enough check.
                        if (this.layoutStates[formFactor] == LayoutState.NOT_LOADED) {
                            rawLayout = keyboards.ActiveLayout.polyfill(rawLayout, this, formFactor);
                            this.layoutStates[formFactor] = LayoutState.POLYFILLED;
                        }
                        return rawLayout;
                    }
                    else {
                        return null;
                    }
                };
                Keyboard.prototype.refreshLayouts = function () {
                    var formFactors = [keyman.utils.FormFactor.Desktop, keyman.utils.FormFactor.Phone, keyman.utils.FormFactor.Tablet];
                    var _this = this;
                    formFactors.forEach(function (form) {
                        // Currently doesn't work if we reset it to POLYFILLED, likely due to how 'calibration'
                        // currently works.
                        _this.layoutStates[form] = LayoutState.NOT_LOADED;
                    });
                };
                Keyboard.prototype.markLayoutCalibrated = function (formFactor) {
                    if (this.layoutStates[formFactor] != LayoutState.NOT_LOADED) {
                        this.layoutStates[formFactor] = LayoutState.CALIBRATED;
                    }
                };
                Keyboard.prototype.getLayoutState = function (formFactor) {
                    return this.layoutStates[formFactor];
                };
                Keyboard.DEFAULT_SCRIPT_OBJECT = {
                    'gs': function (outputTarget, keystroke) { return false; },
                    'KI': '',
                    'KN': '',
                    'KV': keyboards.Layouts.DEFAULT_RAW_SPEC,
                    'KM': 0 // May not be the best default, but this matches current behavior when there is no activeKeyboard.
                };
                return Keyboard;
            }());
            keyboards.Keyboard = Keyboard;
        })(keyboards = keyman.keyboards || (keyman.keyboards = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/***
   KeymanWeb 11.0
   Copyright 2019 SIL International
***/
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var KeyMap = /** @class */ (function () {
            function KeyMap() {
            }
            return KeyMap;
        }());
        var BrowserKeyMaps = /** @class */ (function () {
            function BrowserKeyMaps() {
                this.FF = new KeyMap();
                this.Safari = new KeyMap();
                this.Opera = new KeyMap();
                // All three have been around since at least May 2014 / FF 29.
                // It'd hard to find precise history, but at least that much has been confirmed.
                // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode, on Feb 26 2021.
                this.FF['k61'] = 187; // =   // FF 2.0
                this.FF['k59'] = 186; // ;
                this.FF['k173'] = 189; // -/_
            }
            return BrowserKeyMaps;
        }());
        var LanguageKeyMaps = /** @class */ (function () {
            // // Here are some old legacy definitions that were no longer referenced but are likely related:
            // static _BaseLayoutEuro: {[code: string]: string} = {
            //   'se': '\u00a71234567890+´~~~QWERTYUIOP\u00c5\u00a8\'~~~ASDFGHJKL\u00d6\u00c4~~~~~<ZXCVBNM,.-~~~~~ ',  // Swedish
            //   'uk': '`1234567890-=~~~QWERTYUIOP[]#~~~ASDFGHJKL;\'~~~~~\\ZXCVBNM,./~~~~~ ' // UK
            function LanguageKeyMaps() {
                /* I732 START - 13/03/2007 MCD: Swedish: Start mapping of keystroke to US keyboard #2 */
                // Swedish key map
                this['se'] = new KeyMap();
                this['se']['k220'] = 192; // `
                this['se']['k187'] = 189; // -
                this['se']['k219'] = 187; // =
                this['se']['k221'] = 219; // [
                this['se']['k186'] = 221; // ]
                this['se']['k191'] = 220; // \
                this['se']['k192'] = 186; // ;
                this['se']['k189'] = 191; // /
                this['uk'] = new KeyMap(); // I1299
                this['uk']['k223'] = 192; // // ` U+00AC (logical not) =>  ` ~
                this['uk']['k192'] = 222; // ' @  =>  ' "
                this['uk']['k222'] = 226; // # ~  => K_oE2     // I1504 - UK keyboard mixup #, \
                this['uk']['k220'] = 220; // \ |  => \ |       // I1504 - UK keyboard mixup #, \
            }
            return LanguageKeyMaps;
        }());
        var KeyMapping = /** @class */ (function () {
            function KeyMapping() {
                // Do not construct this class.
            }
            KeyMapping._usCodeInit = function () {
                var s0 = new KeyMap(), s1 = new KeyMap();
                s0['k192'] = 96;
                s0['k49'] = 49;
                s0['k50'] = 50;
                s0['k51'] = 51;
                s0['k52'] = 52;
                s0['k53'] = 53;
                s0['k54'] = 54;
                s0['k55'] = 55;
                s0['k56'] = 56;
                s0['k57'] = 57;
                s0['k48'] = 48;
                s0['k189'] = 45;
                s0['k187'] = 61;
                s0['k81'] = 113;
                s0['k87'] = 119;
                s0['k69'] = 101;
                s0['k82'] = 114;
                s0['k84'] = 116;
                s0['k89'] = 121;
                s0['k85'] = 117;
                s0['k73'] = 105;
                s0['k79'] = 111;
                s0['k80'] = 112;
                s0['k219'] = 91;
                s0['k221'] = 93;
                s0['k220'] = 92;
                s0['k65'] = 97;
                s0['k83'] = 115;
                s0['k68'] = 100;
                s0['k70'] = 102;
                s0['k71'] = 103;
                s0['k72'] = 104;
                s0['k74'] = 106;
                s0['k75'] = 107;
                s0['k76'] = 108;
                s0['k186'] = 59;
                s0['k222'] = 39;
                s0['k90'] = 122;
                s0['k88'] = 120;
                s0['k67'] = 99;
                s0['k86'] = 118;
                s0['k66'] = 98;
                s0['k78'] = 110;
                s0['k77'] = 109;
                s0['k188'] = 44;
                s0['k190'] = 46;
                s0['k191'] = 47;
                s1['k192'] = 126;
                s1['k49'] = 33;
                s1['k50'] = 64;
                s1['k51'] = 35;
                s1['k52'] = 36;
                s1['k53'] = 37;
                s1['k54'] = 94;
                s1['k55'] = 38;
                s1['k56'] = 42;
                s1['k57'] = 40;
                s1['k48'] = 41;
                s1['k189'] = 95;
                s1['k187'] = 43;
                s1['k81'] = 81;
                s1['k87'] = 87;
                s1['k69'] = 69;
                s1['k82'] = 82;
                s1['k84'] = 84;
                s1['k89'] = 89;
                s1['k85'] = 85;
                s1['k73'] = 73;
                s1['k79'] = 79;
                s1['k80'] = 80;
                s1['k219'] = 123;
                s1['k221'] = 125;
                s1['k220'] = 124;
                s1['k65'] = 65;
                s1['k83'] = 83;
                s1['k68'] = 68;
                s1['k70'] = 70;
                s1['k71'] = 71;
                s1['k72'] = 72;
                s1['k74'] = 74;
                s1['k75'] = 75;
                s1['k76'] = 76;
                s1['k186'] = 58;
                s1['k222'] = 34;
                s1['k90'] = 90;
                s1['k88'] = 88;
                s1['k67'] = 67;
                s1['k86'] = 86;
                s1['k66'] = 66;
                s1['k78'] = 78;
                s1['k77'] = 77;
                s1['k188'] = 60;
                s1['k190'] = 62;
                s1['k191'] = 63;
                KeyMapping._usCharCodes = [s0, s1];
            };
            /**
             * Function     _USKeyCodeToCharCode
             * Scope        Private
             * @param       {Event}     Levent      KMW event object
             * @return      {number}                Character code
             * Description Translate keyboard codes to standard US layout codes
             */
            KeyMapping._USKeyCodeToCharCode = function (Levent) {
                return KeyMapping.usCharCodes[Levent.Lmodifiers & 0x10 ? 1 : 0]['k' + Levent.Lcode];
            };
            ;
            Object.defineProperty(KeyMapping, "usCharCodes", {
                get: function () {
                    if (!KeyMapping._usCharCodes) {
                        KeyMapping._usCodeInit();
                    }
                    return KeyMapping._usCharCodes;
                },
                enumerable: true,
                configurable: true
            });
            KeyMapping.browserMap = new BrowserKeyMaps();
            KeyMapping.languageMap = new LanguageKeyMaps();
            return KeyMapping;
        }());
        keyman.KeyMapping = KeyMapping;
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Establishes key-code definitions.
/// <reference path="codes.ts" />
// Defines our generalized "KeyEvent" class.
/// <reference path="keyEvent.ts" />
// Defines the RuleBehavior keyboard-processing return object.
/// <reference path="ruleBehavior.ts" />
// Defines default key handling behaviors.
/// <reference path="defaultOutput.ts" />
// Defines the keyboard wrapper object.
/// <reference path="../keyboards/keyboard.ts" />
// Defines built-in keymapping.
/// <reference path="keyMapping.ts" />
// Also relies on @keymanapp/web-utils, which is included via tsconfig.json.
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            var KeyboardProcessor = /** @class */ (function () {
                function KeyboardProcessor(options) {
                    // Tracks the simulated value for supported state keys, allowing the OSK to mirror a physical keyboard for them.
                    // Using the exact keyCode name from the Codes definitions will allow for certain optimizations elsewhere in the code.
                    this.stateKeys = {
                        "K_CAPS": false,
                        "K_NUMLOCK": false,
                        "K_SCROLL": false
                    };
                    // Tracks the most recent modifier state information in order to quickly detect changes
                    // in keyboard state not otherwise captured by the hosting page in the browser.
                    // Needed for AltGr simulation.
                    this.modStateFlags = 0;
                    if (!options) {
                        options = KeyboardProcessor.DEFAULT_OPTIONS;
                    }
                    this.baseLayout = options.baseLayout || KeyboardProcessor.DEFAULT_OPTIONS.baseLayout;
                    this.keyboardInterface = new text.KeyboardInterface(options.variableStoreSerializer);
                    this.installInterface();
                }
                KeyboardProcessor.prototype.installInterface = function () {
                    // We must ensure that the keyboard can find the API functions at the expected place.
                    var globalThis = keyman.utils.getGlobalObject();
                    globalThis[text.KeyboardInterface.GLOBAL_NAME] = this.keyboardInterface;
                    // Ensure that the active keyboard is set on the keyboard interface object.
                    if (this.activeKeyboard) {
                        this.keyboardInterface.activeKeyboard = this.activeKeyboard;
                    }
                };
                Object.defineProperty(KeyboardProcessor.prototype, "activeKeyboard", {
                    get: function () {
                        return this.keyboardInterface.activeKeyboard;
                    },
                    set: function (keyboard) {
                        this.keyboardInterface.activeKeyboard = keyboard;
                        // All old deadkeys and keyboard-specific cache should immediately be invalidated
                        // on a keyboard change.
                        this.resetContext();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(KeyboardProcessor.prototype, "layerStore", {
                    get: function () {
                        return this.keyboardInterface.systemStores[text.KeyboardInterface.TSS_LAYER];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(KeyboardProcessor.prototype, "layerId", {
                    get: function () {
                        return this.layerStore.value;
                    },
                    // Note:  will trigger an 'event' callback designed to notify the OSK of layer changes.
                    set: function (value) {
                        this.layerStore.set(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Get the default RuleBehavior for the specified key, attempting to mimic standard browser defaults
                 * where and when appropriate.
                 *
                 * @param   {object}  Lkc           The pre-analyzed KeyEvent object
                 * @param   {boolean} outputTarget  The OutputTarget receiving the KeyEvent
                 * @return  {string}
                 */
                KeyboardProcessor.prototype.defaultRuleBehavior = function (Lkc, outputTarget) {
                    var preInput = text.Mock.from(outputTarget);
                    var ruleBehavior = new text.RuleBehavior();
                    var matched = false;
                    var char = '';
                    var special;
                    if (Lkc.isSynthetic || outputTarget.isSynthetic) {
                        matched = true; // All the conditions below result in matches until the final else, which restores the expected default
                        // if no match occurs.
                        if (text.DefaultOutput.isCommand(Lkc)) {
                            // Note this in the rule behavior, return successfully.  We'll consider applying it later.
                            ruleBehavior.triggersDefaultCommand = true;
                            // We'd rather let the browser handle these keys, but we're using emulated keystrokes, forcing KMW
                            // to emulate default behavior here.
                        }
                        else if ((special = text.DefaultOutput.forSpecialEmulation(Lkc)) != null) {
                            switch (special) {
                                case text.EmulationKeystrokes.Backspace:
                                    this.keyboardInterface.defaultBackspace(outputTarget);
                                    break;
                                case text.EmulationKeystrokes.Enter:
                                    outputTarget.handleNewlineAtCaret();
                                    break;
                                // case '\u007f': // K_DEL
                                // // For (possible) future implementation.
                                // // Would recommend (conceptually) equaling K_RIGHT + K_BKSP, the former of which would technically be a 'command'.
                                default:
                                    // In case we extend the allowed set, but forget to implement its handling case above.
                                    ruleBehavior.errorLog = "Unexpected 'special emulation' character (\\u" + special.kmwCharCodeAt(0).toString(16) + ") went unhandled!";
                            }
                        }
                        else {
                            // Back to the standard default, pending normal matching.
                            matched = false;
                        }
                    }
                    var isMnemonic = this.activeKeyboard && this.activeKeyboard.isMnemonic;
                    if (!matched) {
                        if ((char = text.DefaultOutput.forAny(Lkc, isMnemonic)) != null) {
                            special = text.DefaultOutput.forSpecialEmulation(Lkc);
                            if (special == text.EmulationKeystrokes.Backspace) {
                                // A browser's default backspace may fail to delete both parts of an SMP character.
                                this.keyboardInterface.defaultBackspace(outputTarget);
                            }
                            else if (special || text.DefaultOutput.isCommand(Lkc)) { // Filters out 'commands' like TAB.
                                // We only do the "for special emulation" cases under the condition above... aside from backspace
                                // Let the browser handle those.
                                return null;
                            }
                            else {
                                this.keyboardInterface.output(0, outputTarget, char);
                            }
                        }
                        else {
                            // No match, no default RuleBehavior.
                            return null;
                        }
                    }
                    // Shortcut things immediately if there were issues generating this rule behavior.
                    if (ruleBehavior.errorLog) {
                        return ruleBehavior;
                    }
                    var transcription = outputTarget.buildTranscriptionFrom(preInput, Lkc);
                    ruleBehavior.transcription = transcription;
                    return ruleBehavior;
                };
                KeyboardProcessor.prototype.setSyntheticEventDefaults = function (Lkc) {
                    // Set the flags for the state keys.
                    Lkc.Lstates |= this.stateKeys['K_CAPS'] ? text.Codes.modifierCodes['CAPS'] : text.Codes.modifierCodes['NO_CAPS'];
                    Lkc.Lstates |= this.stateKeys['K_NUMLOCK'] ? text.Codes.modifierCodes['NUM_LOCK'] : text.Codes.modifierCodes['NO_NUM_LOCK'];
                    Lkc.Lstates |= this.stateKeys['K_SCROLL'] ? text.Codes.modifierCodes['SCROLL_LOCK'] : text.Codes.modifierCodes['NO_SCROLL_LOCK'];
                    // Set LisVirtualKey to false to ensure that nomatch rule does fire for U_xxxx keys
                    if (Lkc.kName && Lkc.kName.substr(0, 2) == 'U_') {
                        Lkc.LisVirtualKey = false;
                    }
                    // Get code for non-physical keys (T_KOKAI, U_05AB etc)
                    if (typeof Lkc.Lcode == 'undefined') {
                        Lkc.Lcode = this.getVKDictionaryCode(Lkc.kName); // Updated for Build 347
                        if (!Lkc.Lcode) {
                            // Special case for U_xxxx keys. This vk code will never be used
                            // in a keyboard, so we use this to ensure that keystroke processing
                            // occurs for the key.
                            Lkc.Lcode = 1;
                        }
                    }
                    // Handles modifier states when the OSK is emulating rightalt through the leftctrl-leftalt layer.
                    if ((Lkc.Lmodifiers & text.Codes.modifierBitmasks['ALT_GR_SIM']) == text.Codes.modifierBitmasks['ALT_GR_SIM'] && this.activeKeyboard.emulatesAltGr) {
                        Lkc.Lmodifiers &= ~text.Codes.modifierBitmasks['ALT_GR_SIM'];
                        Lkc.Lmodifiers |= text.Codes.modifierCodes['RALT'];
                    }
                };
                KeyboardProcessor.prototype.processKeystroke = function (keyEvent, outputTarget) {
                    var matchBehavior;
                    // Pass this key code and state to the keyboard program
                    if (this.activeKeyboard && keyEvent.Lcode != 0) {
                        /*
                         * The `this.installInterface()` call is insurance against something I've seen in unit tests when things break a bit.
                         *
                         * Currently, when a KMW shutdown doesn't go through properly or completely, sometimes we end up with parallel
                         * versions of KMW running, and an old, partially-shutdown one will "snipe" a command meant for the most-recent
                         * one's test. So, installing here ensures that the active Processor has its matching KeyboardInterface ready,
                         * even should that occur.
                         */
                        this.installInterface();
                        matchBehavior = this.keyboardInterface.processKeystroke(outputTarget, keyEvent);
                    }
                    if (!matchBehavior || matchBehavior.triggerKeyDefault) {
                        // Restore the virtual key code if a mnemonic keyboard is being used
                        // If no vkCode value was stored, maintain the original Lcode value.
                        keyEvent.Lcode = keyEvent.vkCode || keyEvent.Lcode;
                        // Handle unmapped keys, including special keys
                        // The following is physical layout dependent, so should be avoided if possible.  All keys should be mapped.
                        this.keyboardInterface.activeTargetOutput = outputTarget;
                        // Match against the 'default keyboard' - rules to mimic the default string output when typing in a browser.
                        // Many keyboards rely upon these 'implied rules'.
                        var defaultBehavior = this.defaultRuleBehavior(keyEvent, outputTarget);
                        if (defaultBehavior) {
                            if (!matchBehavior) {
                                matchBehavior = defaultBehavior;
                            }
                            else {
                                matchBehavior.mergeInDefaults(defaultBehavior);
                            }
                            matchBehavior.triggerKeyDefault = false; // We've triggered it successfully.
                        } // If null, we must rely on something else (like the browser, in DOM-aware code) to fulfill the default.
                        this.keyboardInterface.activeTargetOutput = null;
                    }
                    return matchBehavior;
                };
                // FIXME:  makes some bad assumptions.
                KeyboardProcessor.setMnemonicCode = function (Lkc, shifted, capsActive) {
                    // K_SPACE is not handled by defaultKeyOutput for physical keystrokes unless using touch-aliased elements.
                    // It's also a "exception required, March 2013" for clickKey, so at least they both have this requirement.
                    if (Lkc.Lcode != text.Codes.keyCodes['K_SPACE']) {
                        // So long as the key name isn't prefixed with 'U_', we'll get a default mapping based on the Lcode value.
                        // We need to determine the mnemonic base character - for example, SHIFT + K_PERIOD needs to map to '>'.
                        var mappingEvent = new text.KeyEvent();
                        for (var key in Lkc) {
                            mappingEvent[key] = Lkc[key];
                        }
                        // To facilitate storing relevant commands, we should probably reverse-lookup
                        // the actual keyname instead.
                        mappingEvent.kName = 'K_xxxx';
                        mappingEvent.Lmodifiers = (shifted ? 0x10 : 0); // mnemonic lookups only exist for default & shift layers.
                        var mappedChar = text.DefaultOutput.forAny(mappingEvent, true);
                        /* First, save a backup of the original code.  This one won't needlessly trigger keyboard
                         * rules, but allows us to replicate/emulate commands after rule processing if needed.
                         * (Like backspaces)
                         */
                        Lkc.vkCode = Lkc.Lcode;
                        if (mappedChar) {
                            // Will return 96 for 'a', which is a keycode corresponding to Codes.keyCodes('K_NP1') - a numpad key.
                            // That stated, we're in mnemonic mode - this keyboard's rules are based on the char codes.
                            Lkc.Lcode = mappedChar.charCodeAt(0);
                        }
                        else {
                            // Don't let command-type keys (like K_DEL, which will output '.' otherwise!)
                            // trigger keyboard rules.
                            //
                            // However, DO make sure modifier keys pass through safely.
                            // (https://github.com/keymanapp/keyman/issues/3744)
                            if (!KeyboardProcessor.isModifier(Lkc)) {
                                delete Lkc.Lcode;
                            }
                        }
                    }
                    if (capsActive) {
                        // TODO:  Needs fixing - does not properly mirror physical keystrokes, as Lcode range 96-111 corresponds
                        // to numpad keys!  (Physical keyboard section has its own issues here.)
                        if ((Lkc.Lcode >= 65 && Lkc.Lcode <= 90) /* 'A' - 'Z' */ || (Lkc.Lcode >= 97 && Lkc.Lcode <= 122) /* 'a' - 'z' */) {
                            Lkc.Lmodifiers ^= 0x10; // Flip the 'shifted' bit, so it'll act as the opposite key.
                            Lkc.Lcode ^= 0x20; // Flips the 'upper' vs 'lower' bit for the base 'a'-'z' ASCII alphabetics.
                        }
                    }
                };
                /**
                 * Get modifier key state from layer id
                 *
                 * @param       {string}      layerId       layer id (e.g. ctrlshift)
                 * @return      {number}                    modifier key state (desktop keyboards)
                 */
                KeyboardProcessor.getModifierState = function (layerId) {
                    var modifier = 0;
                    if (layerId.indexOf('shift') >= 0) {
                        modifier |= text.Codes.modifierCodes['SHIFT'];
                    }
                    // The chiral checks must not be directly exclusive due each other to visual OSK feedback.
                    var ctrlMatched = false;
                    if (layerId.indexOf('leftctrl') >= 0) {
                        modifier |= text.Codes.modifierCodes['LCTRL'];
                        ctrlMatched = true;
                    }
                    if (layerId.indexOf('rightctrl') >= 0) {
                        modifier |= text.Codes.modifierCodes['RCTRL'];
                        ctrlMatched = true;
                    }
                    if (layerId.indexOf('ctrl') >= 0 && !ctrlMatched) {
                        modifier |= text.Codes.modifierCodes['CTRL'];
                    }
                    var altMatched = false;
                    if (layerId.indexOf('leftalt') >= 0) {
                        modifier |= text.Codes.modifierCodes['LALT'];
                        altMatched = true;
                    }
                    if (layerId.indexOf('rightalt') >= 0) {
                        modifier |= text.Codes.modifierCodes['RALT'];
                        altMatched = true;
                    }
                    if (layerId.indexOf('alt') >= 0 && !altMatched) {
                        modifier |= text.Codes.modifierCodes['ALT'];
                    }
                    return modifier;
                };
                /**
                 * @summary Look up a custom virtual key code in the virtual key code dictionary KVKD.  On first run, will build the dictionary.
                 *
                 * `VKDictionary` is constructed from the keyboard's `KVKD` member. This list is constructed
                 * at compile-time and is a list of 'additional' virtual key codes, starting at 256 (i.e.
                 * outside the range of standard virtual key codes). These additional codes are both
                 * `[T_xxx]` and `[U_xxxx]` custom key codes from the Keyman keyboard language. However,
                 * `[U_xxxx]` keys only generate an entry in `KVKD` if there is a corresponding rule that
                 * is associated with them in the keyboard rules. If the `[U_xxxx]` key code is only
                 * referenced as the id of a key in the touch layout, then it does not get an entry in
                 * the `KVKD` property.
                 *
                 * @private
                 * @param       {string}      keyName   custom virtual key code to lookup in the dictionary
                 * @return      {number}                key code > 255 on success, or 0 if not found
                 */
                KeyboardProcessor.prototype.getVKDictionaryCode = function (keyName) {
                    var activeKeyboard = this.activeKeyboard;
                    if (!activeKeyboard.scriptObject['VKDictionary']) {
                        var a = [];
                        if (typeof activeKeyboard.scriptObject['KVKD'] == 'string') {
                            // Build the VK dictionary
                            // TODO: Move the dictionary build into the compiler -- so compiler generates code such as following.
                            // Makes the VKDictionary member unnecessary.
                            //       this.KVKD={"K_ABC":256,"K_DEF":257,...};
                            var s = activeKeyboard.scriptObject['KVKD'].split(' ');
                            for (var i = 0; i < s.length; i++) {
                                a[s[i].toUpperCase()] = i + 256; // We force upper-case since virtual keys should be case-insensitive.
                            }
                        }
                        activeKeyboard.scriptObject['VKDictionary'] = a;
                    }
                    var res = activeKeyboard.scriptObject['VKDictionary'][keyName.toUpperCase()];
                    return res ? res : 0;
                };
                /**
                 * Function     _UpdateVKShift
                 * Scope        Private
                 * @param       {Object}            e     OSK event
                 * @param       {number}            v     keyboard shift state
                 * @param       {(boolean|number)}  d     set (1) or clear(0) shift state bits
                 * @return      {boolean}                 Always true
                 * Description  Updates the current shift state within KMW, updating the OSK's visualization thereof.
                 */
                KeyboardProcessor.prototype._UpdateVKShift = function (e, v, d) {
                    var keyShiftState = 0, lockStates = 0, i;
                    var lockNames = ['CAPS', 'NUM_LOCK', 'SCROLL_LOCK'];
                    var lockKeys = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'];
                    if (!this.activeKeyboard) {
                        return true;
                    }
                    if (e) {
                        // read shift states from Pevent
                        keyShiftState = e.Lmodifiers;
                        lockStates = e.Lstates;
                        // Are we simulating AltGr?  If it's a simulation and not real, time to un-simulate for the OSK.
                        if (this.activeKeyboard.isChiral && (this.activeKeyboard.emulatesAltGr) &&
                            (this.modStateFlags & text.Codes.modifierBitmasks['ALT_GR_SIM']) == text.Codes.modifierBitmasks['ALT_GR_SIM']) {
                            keyShiftState |= text.Codes.modifierBitmasks['ALT_GR_SIM'];
                            keyShiftState &= ~text.Codes.modifierCodes['RALT'];
                        }
                        for (i = 0; i < lockNames.length; i++) {
                            if (lockStates & text.Codes.stateBitmasks[lockNames[i]]) {
                                this.stateKeys[lockKeys[i]] = !!(lockStates & text.Codes.modifierCodes[lockNames[i]]);
                            }
                        }
                    }
                    else if (d) {
                        keyShiftState |= v;
                        for (i = 0; i < lockNames.length; i++) {
                            if (v & text.Codes.stateBitmasks[lockNames[i]]) {
                                this.stateKeys[lockKeys[i]] = true;
                            }
                        }
                    }
                    else {
                        keyShiftState &= ~v;
                        for (i = 0; i < lockNames.length; i++) {
                            if (v & text.Codes.stateBitmasks[lockNames[i]]) {
                                this.stateKeys[lockKeys[i]] = false;
                            }
                        }
                    }
                    this.updateStates();
                    if (this.activeKeyboard.isMnemonic && this.stateKeys['K_CAPS']) {
                        // Modifier keypresses doesn't trigger mnemonic manipulation of modifier state.
                        // Only an output key does; active use of Caps will also flip the SHIFT flag.
                        if (!e || !KeyboardProcessor.isModifier(e)) {
                            // Mnemonic keystrokes manipulate the SHIFT property based on CAPS state.
                            // We need to unflip them when tracking the OSK layer.
                            keyShiftState ^= text.Codes.modifierCodes['SHIFT'];
                        }
                    }
                    this.layerId = this.getLayerId(keyShiftState);
                    return true;
                };
                KeyboardProcessor.prototype.updateStates = function () {
                    var lockNames = ['CAPS', 'NUM_LOCK', 'SCROLL_LOCK'];
                    var lockKeys = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'];
                    for (var i = 0; i < lockKeys.length; i++) {
                        var key = lockKeys[i];
                        var flag = this.stateKeys[key];
                        var onBit = lockNames[i];
                        var offBit = 'NO_' + lockNames[i];
                        // Ensures that the current mod-state info properly matches the currently-simulated
                        // state key states.
                        if (flag) {
                            this.modStateFlags |= text.Codes.modifierCodes[onBit];
                            this.modStateFlags &= ~text.Codes.modifierCodes[offBit];
                        }
                        else {
                            this.modStateFlags &= ~text.Codes.modifierCodes[onBit];
                            this.modStateFlags |= text.Codes.modifierCodes[offBit];
                        }
                    }
                };
                KeyboardProcessor.prototype.getLayerId = function (modifier) {
                    return keyman.keyboards.Layouts.getLayerId(modifier);
                };
                /**
                 * Select the OSK's next keyboard layer based upon layer switching keys as a default
                 * The next layer will be determined from the key name unless otherwise specifed
                 *
                 *  @param  {string}                    keyName     key identifier
                 *  @param  {number|string|undefined}   nextLayerIn optional next layer identifier
                 *  @return {boolean}                               return true if keyboard layer changed
                 */
                KeyboardProcessor.prototype.selectLayer = function (keyEvent, fromNameOnly) {
                    if (fromNameOnly === void 0) { fromNameOnly = false; }
                    var keyName = keyEvent.kName;
                    var nextLayer = fromNameOnly ? null : keyEvent.kNextLayer;
                    var isChiral = this.activeKeyboard && this.activeKeyboard.isChiral;
                    // Layer must be identified by name, not number (27/08/2015)
                    if (typeof nextLayer == 'number') {
                        nextLayer = this.getLayerId(nextLayer * 0x10);
                    }
                    // Identify next layer, if required by key
                    if (!nextLayer) {
                        switch (keyName) {
                            case 'K_LSHIFT':
                            case 'K_RSHIFT':
                            case 'K_SHIFT':
                                nextLayer = 'shift';
                                break;
                            case 'K_LCONTROL':
                            case 'K_LCTRL':
                                if (isChiral) {
                                    nextLayer = 'leftctrl';
                                    break;
                                }
                            case 'K_RCONTROL':
                            case 'K_RCTRL':
                                if (isChiral) {
                                    nextLayer = 'rightctrl';
                                    break;
                                }
                            case 'K_CTRL':
                                nextLayer = 'ctrl';
                                break;
                            case 'K_LMENU':
                            case 'K_LALT':
                                if (isChiral) {
                                    nextLayer = 'leftalt';
                                    break;
                                }
                            case 'K_RMENU':
                            case 'K_RALT':
                                if (isChiral) {
                                    nextLayer = 'rightalt';
                                    break;
                                }
                            case 'K_ALT':
                                nextLayer = 'alt';
                                break;
                            case 'K_ALTGR':
                                if (isChiral) {
                                    nextLayer = 'leftctrl-rightalt';
                                }
                                else {
                                    nextLayer = 'ctrl-alt';
                                }
                                break;
                            case 'K_CURRENCIES':
                            case 'K_NUMERALS':
                            case 'K_SHIFTED':
                            case 'K_UPPER':
                            case 'K_LOWER':
                            case 'K_SYMBOLS':
                                nextLayer = 'default';
                                break;
                        }
                    }
                    // If no key corresponding to a layer transition is pressed, maintain the current layer.
                    if (!nextLayer) {
                        return false;
                    }
                    // Change layer and refresh OSK
                    this.updateLayer(keyEvent, nextLayer);
                    return true;
                };
                /**
                 * Sets the new layer id, allowing for toggling shift/ctrl/alt while preserving the remainder
                 * of the modifiers represented by the current layer id (where applicable)
                 *
                 * @param       {string}      id      layer id (e.g. ctrlshift)
                 */
                KeyboardProcessor.prototype.updateLayer = function (keyEvent, id) {
                    var activeLayer = this.layerId;
                    var s = activeLayer;
                    // Do not change layer unless needed (27/08/2015)
                    if (id == activeLayer && keyEvent.device.formFactor != keyman.utils.FormFactor.Desktop) {
                        return false;
                    }
                    var idx = id;
                    var i;
                    if (keyEvent.device.formFactor == keyman.utils.FormFactor.Desktop) {
                        // Need to test if target layer is a standard layer (based on the plain 'default')
                        var replacements = ['leftctrl', 'rightctrl', 'ctrl', 'leftalt', 'rightalt', 'alt', 'shift'];
                        for (i = 0; i < replacements.length; i++) {
                            // Don't forget to remove the kebab-case hyphens!
                            idx = idx.replace(replacements[i] + '-', '');
                            idx = idx.replace(replacements[i], '');
                        }
                        // If we are presently on the default layer, drop the 'default' and go straight to the shifted mode.
                        // If on a common symbolic layer, drop out of symbolic mode and go straight to the shifted mode.
                        if (activeLayer == 'default' || activeLayer == 'numeric' || activeLayer == 'symbol' || activeLayer == 'currency' || idx != '') {
                            s = id;
                        }
                        // Otherwise, we are based upon a layer that accepts modifier variations.
                        // Modify the layer according to the current state and key pressed.
                        //
                        // TODO:  Consider:  should this ever be allowed for a base layer other than 'default'?  If not,
                        // if(idx == '') with accompanying if-else structural shift would be a far better test here.
                        else {
                            // Save our current modifier state.
                            var modifier = KeyboardProcessor.getModifierState(s);
                            // Strip down to the base modifiable layer.
                            for (i = 0; i < replacements.length; i++) {
                                // Don't forget to remove the kebab-case hyphens!
                                s = s.replace(replacements[i] + '-', '');
                                s = s.replace(replacements[i], '');
                            }
                            // Toggle the modifier represented by our input argument.
                            switch (id) {
                                case 'shift':
                                    modifier ^= text.Codes.modifierCodes['SHIFT'];
                                    break;
                                case 'leftctrl':
                                    modifier ^= text.Codes.modifierCodes['LCTRL'];
                                    break;
                                case 'rightctrl':
                                    modifier ^= text.Codes.modifierCodes['RCTRL'];
                                    break;
                                case 'ctrl':
                                    modifier ^= text.Codes.modifierCodes['CTRL'];
                                    break;
                                case 'leftalt':
                                    modifier ^= text.Codes.modifierCodes['LALT'];
                                    break;
                                case 'rightalt':
                                    modifier ^= text.Codes.modifierCodes['RALT'];
                                    break;
                                case 'alt':
                                    modifier ^= text.Codes.modifierCodes['ALT'];
                                    break;
                                default:
                                    s = id;
                            }
                            // Combine our base modifiable layer and attach the new modifier variation info to obtain our destination layer.
                            if (s != 'default') {
                                if (s == '') {
                                    s = this.getLayerId(modifier);
                                }
                                else {
                                    s = this.getLayerId(modifier) + '-' + s;
                                }
                            }
                        }
                        if (s == '') {
                            s = 'default';
                        }
                    }
                    else {
                        // Mobile form-factor.  Either the layout is specified by a keyboard developer with direct layer name references
                        // or all layers are accessed via subkey of a single layer-shifting key - no need for modifier-combining logic.
                        s = id;
                    }
                    var layout = this.activeKeyboard.layout(keyEvent.device.formFactor);
                    if (layout.getLayer(s)) {
                        this.layerId = s;
                    }
                    else {
                        this.layerId = 'default';
                    }
                    var baseModifierState = text.KeyboardProcessor.getModifierState(this.layerId);
                    this.modStateFlags = baseModifierState | keyEvent.Lstates;
                };
                KeyboardProcessor.isModifier = function (Levent) {
                    switch (Levent.Lcode) {
                        case 16: //"K_SHIFT":16,"K_CONTROL":17,"K_ALT":18
                        case 17:
                        case 18:
                        case 20: //"K_CAPS":20, "K_NUMLOCK":144,"K_SCROLL":145
                        case 144:
                        case 145:
                            return true;
                        default:
                            return false;
                    }
                };
                // Returns true if the key event is a modifier press, allowing keyPress to return selectively
                // in those cases.
                KeyboardProcessor.prototype.doModifierPress = function (Levent, outputTarget, isKeyDown) {
                    if (!this.activeKeyboard) {
                        return false;
                    }
                    if (Levent.Lcode == 8) {
                        // I3318 (always clear deadkeys after backspace)
                        outputTarget.deadkeys().clear();
                    }
                    else if (KeyboardProcessor.isModifier(Levent)) {
                        // For eventual integration - we bypass an OSK update for physical keystrokes when in touch mode.
                        this.activeKeyboard.notify(Levent.Lcode, outputTarget, isKeyDown ? 1 : 0);
                        if (!Levent.device.touchable) {
                            return this._UpdateVKShift(Levent, Levent.Lcode - 15, 1); // I2187
                        }
                        else {
                            return true;
                        }
                    }
                    if (Levent.LmodifierChange) {
                        this.activeKeyboard.notify(0, outputTarget, 1);
                        this._UpdateVKShift(Levent, 0, 1);
                    }
                    // No modifier keypresses detected.
                    return false;
                };
                KeyboardProcessor.prototype.resetContext = function () {
                    this.layerId = 'default';
                    this.keyboardInterface.resetContextCache();
                    this._UpdateVKShift(null, 15, 0);
                };
                ;
                KeyboardProcessor.prototype.setNumericLayer = function (device) {
                    if (this.activeKeyboard) {
                        var layout = this.activeKeyboard.layout(device.formFactor);
                        if (layout.getLayer('numeric')) {
                            this.layerId = 'numeric';
                        }
                    }
                };
                ;
                KeyboardProcessor.DEFAULT_OPTIONS = {
                    baseLayout: 'us'
                };
                return KeyboardProcessor;
            }());
            text.KeyboardProcessor = KeyboardProcessor;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
(function () {
    var ns = com.keyman.text;
    // Let the Keyboard Processor be available both in the browser and in Node.
    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
        module.exports = ns.KeyboardProcessor;
        //@ts-ignore
        ns.KeyboardProcessor.com = com; // Export the root namespace so that all KeyboardProcessor classes are accessible by unit tests.
    }
}());
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            var ContextWindow = /** @class */ (function () {
                function ContextWindow(mock, config) {
                    this.left = mock.getTextBeforeCaret();
                    this.startOfBuffer = this.left._kmwLength() <= config.leftContextCodePoints;
                    if (!this.startOfBuffer) {
                        // Our custom substring version will return the last n characters if param #1 is given -n.
                        this.left = this.left._kmwSubstr(-config.leftContextCodePoints);
                    }
                    this.right = mock.getTextAfterCaret();
                    this.endOfBuffer = this.right._kmwLength() <= config.rightContextCodePoints;
                    if (!this.endOfBuffer) {
                        this.right = this.right._kmwSubstr(0, config.rightContextCodePoints);
                    }
                }
                ContextWindow.prototype.toMock = function () {
                    var caretPos = this.left._kmwLength();
                    return new text.Mock(this.left + (this.right || ""), caretPos);
                };
                // Used to limit the range of context replicated for use of keyboard rules within
                // the engine, as used for fat-finger prep / `Alternate` generation.
                ContextWindow.ENGINE_RULE_WINDOW = {
                    leftContextCodePoints: 64,
                    rightContextCodePoints: 32
                };
                return ContextWindow;
            }());
            text.ContextWindow = ContextWindow;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Autogenerated code. Do not modify!
function LMLayerWorkerCode() {
    /*! https://mths.be/codepointat v0.2.0 by @mathias */
    if (!String.prototype.codePointAt) {
        (function () {
            'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
            var defineProperty = (function () {
                // IE 8 only supports `Object.defineProperty` on DOM elements
                try {
                    var object = {};
                    var $defineProperty = Object.defineProperty;
                    var result = $defineProperty(object, object, object) && $defineProperty;
                }
                catch (error) { }
                return result;
            }());
            var codePointAt = function (position) {
                if (this == null) {
                    throw TypeError();
                }
                var string = String(this);
                var size = string.length;
                // `ToInteger`
                var index = position ? Number(position) : 0;
                if (index != index) { // better `isNaN`
                    index = 0;
                }
                // Account for out-of-bounds indices:
                if (index < 0 || index >= size) {
                    return undefined;
                }
                // Get the first code unit
                var first = string.charCodeAt(index);
                var second;
                if ( // check if it’s the start of a surrogate pair
                first >= 0xD800 && first <= 0xDBFF && // high surrogate
                    size > index + 1 // there is a next code unit
                ) {
                    second = string.charCodeAt(index + 1);
                    if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
                        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                    }
                }
                return first;
            };
            if (defineProperty) {
                defineProperty(String.prototype, 'codePointAt', {
                    'value': codePointAt,
                    'configurable': true,
                    'writable': true
                });
            }
            else {
                String.prototype.codePointAt = codePointAt;
            }
        }());
    }
    /*! http://mths.be/startswith v0.2.0 by @mathias */
    if (!String.prototype.startsWith) {
        (function () {
            'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
            var defineProperty = (function () {
                // IE 8 only supports `Object.defineProperty` on DOM elements
                try {
                    var object = {};
                    var $defineProperty = Object.defineProperty;
                    var result = $defineProperty(object, object, object) && $defineProperty;
                }
                catch (error) { }
                return result;
            }());
            var toString = {}.toString;
            var startsWith = function (search) {
                if (this == null) {
                    throw TypeError();
                }
                var string = String(this);
                if (search && toString.call(search) == '[object RegExp]') {
                    throw TypeError();
                }
                var stringLength = string.length;
                var searchString = String(search);
                var searchLength = searchString.length;
                var position = arguments.length > 1 ? arguments[1] : undefined;
                // `ToInteger`
                var pos = position ? Number(position) : 0;
                if (pos != pos) { // better `isNaN`
                    pos = 0;
                }
                var start = Math.min(Math.max(pos, 0), stringLength);
                // Avoid the `indexOf` call if no match is possible
                if (searchLength + start > stringLength) {
                    return false;
                }
                var index = -1;
                while (++index < searchLength) {
                    if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {
                        return false;
                    }
                }
                return true;
            };
            if (defineProperty) {
                defineProperty(String.prototype, 'startsWith', {
                    'value': startsWith,
                    'configurable': true,
                    'writable': true
                });
            }
            else {
                String.prototype.startsWith = startsWith;
            }
        }());
    }
    // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill
    if (!Array.prototype.fill) {
        Object.defineProperty(Array.prototype, 'fill', {
            value: function (value) {
                // Steps 1-2.
                if (this == null) {
                    throw new TypeError('this is null or not defined');
                }
                var O = Object(this);
                // Steps 3-5.
                var len = O.length >>> 0;
                // Steps 6-7.
                var start = arguments[1];
                var relativeStart = start >> 0;
                // Step 8.
                var k = relativeStart < 0 ?
                    Math.max(len + relativeStart, 0) :
                    Math.min(relativeStart, len);
                // Steps 9-10.
                var end = arguments[2];
                var relativeEnd = end === undefined ?
                    len : end >> 0;
                // Step 11.
                var finalValue = relativeEnd < 0 ?
                    Math.max(len + relativeEnd, 0) :
                    Math.min(relativeEnd, len);
                // Step 12.
                while (k < finalValue) {
                    O[k] = value;
                    k++;
                }
                // Step 13.
                return O;
            }
        });
    } // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from
    // Any npm-based ones require use of `require`, which won't work for us.
    // Production steps of ECMA-262, Edition 6, 22.1.2.1
    if (!Array.from) {
        Array.from = (function () {
            var toStr = Object.prototype.toString;
            var isCallable = function (fn) {
                return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
            };
            var toInteger = function (value) {
                var number = Number(value);
                if (isNaN(number)) {
                    return 0;
                }
                if (number === 0 || !isFinite(number)) {
                    return number;
                }
                return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
            };
            var maxSafeInteger = Math.pow(2, 53) - 1;
            var toLength = function (value) {
                var len = toInteger(value);
                return Math.min(Math.max(len, 0), maxSafeInteger);
            };
            // The length property of the from method is 1.
            return function from(arrayLike /*, mapFn, thisArg */) {
                // 1. Let C be the this value.
                var C = this;
                // 2. Let items be ToObject(arrayLike).
                var items = Object(arrayLike);
                // 3. ReturnIfAbrupt(items).
                if (arrayLike == null) {
                    throw new TypeError('Array.from requires an array-like object - not null or undefined');
                }
                // 4. If mapfn is undefined, then let mapping be false.
                var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
                var T;
                if (typeof mapFn !== 'undefined') {
                    // 5. else
                    // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
                    if (!isCallable(mapFn)) {
                        throw new TypeError('Array.from: when provided, the second argument must be a function');
                    }
                    // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
                    if (arguments.length > 2) {
                        T = arguments[2];
                    }
                }
                // 10. Let lenValue be Get(items, "length").
                // 11. Let len be ToLength(lenValue).
                var len = toLength(items.length);
                // 13. If IsConstructor(C) is true, then
                // 13. a. Let A be the result of calling the [[Construct]] internal method 
                // of C with an argument list containing the single item len.
                // 14. a. Else, Let A be ArrayCreate(len).
                var A = isCallable(C) ? Object(new C(len)) : new Array(len);
                // 16. Let k be 0.
                var k = 0;
                // 17. Repeat, while k < len… (also steps a - h)
                var kValue;
                while (k < len) {
                    kValue = items[k];
                    if (mapFn) {
                        A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
                    }
                    else {
                        A[k] = kValue;
                    }
                    k += 1;
                }
                // 18. Let putStatus be Put(A, "length", len, true).
                A.length = len;
                // 20. Return A.
                return A;
            };
        }());
    }
    // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
    if (!Object.keys) {
        Object.keys = (function () {
            'use strict';
            var hasOwnProperty = Object.prototype.hasOwnProperty, hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'), dontEnums = [
                'toString',
                'toLocaleString',
                'valueOf',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'constructor'
            ], dontEnumsLength = dontEnums.length;
            return function (obj) {
                if (typeof obj !== 'function' && (typeof obj !== 'object' || obj === null)) {
                    throw new TypeError('Object.keys called on non-object');
                }
                var result = [], prop, i;
                for (prop in obj) {
                    if (hasOwnProperty.call(obj, prop)) {
                        result.push(prop);
                    }
                }
                if (hasDontEnumBug) {
                    for (i = 0; i < dontEnumsLength; i++) {
                        if (hasOwnProperty.call(obj, dontEnums[i])) {
                            result.push(dontEnums[i]);
                        }
                    }
                }
                return result;
            };
        }());
    }
    // Now for Object.values, from https://github.com/tc39/proposal-object-values-entries/blob/master/polyfill.js
    // Early Android APIs do not support Reflect, hence the need to 'mesh' them like this.
    var reduce = Function.bind.call(Function.call, Array.prototype.reduce);
    var isEnumerable = Function.bind.call(Function.call, Object.prototype.propertyIsEnumerable);
    var concat = Function.bind.call(Function.call, Array.prototype.concat);
    //const keys = Reflect.ownKeys;
    var keys = Object.keys;
    if (!Object.values) {
        Object.values = function values(O) {
            return reduce(keys(O), function (v, k) { return concat(v, typeof k === 'string' && isEnumerable(O, k) ? [O[k]] : []); }, []);
        };
    }
    if (!Object.entries) {
        Object.entries = function entries(O) {
            return reduce(keys(O), function (e, k) { return concat(e, typeof k === 'string' && isEnumerable(O, k) ? [[k, O[k]]] : []); }, []);
        };
    } // From https://rousan.io/symbol-es6/, lightly modified to be worker-compatible for Android Lollipop.
    !function (global, factory) {
        "use strict";
        "object" == typeof module && "object" == typeof module.exports ? module.exports = factory(global) : factory(global);
    }("undefined" != typeof window ? window : (self ? self : global), function (global) {
        "use strict";
        var defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, symbolHiddenCounter = 0, globalSymbolRegistry = [], slice = Array.prototype.slice, ES6 = "object" == typeof global.ES6 ? global.ES6 : global.ES6 = {}, isArray = Array.isArray, objectToString = Object.prototype.toString, push = Array.prototype.push, emptyFunction = function () { }, simpleFunction = function (arg) { return arg; }, isCallable = function (fn) { return "function" == typeof fn; }, Iterator = function () { }, ArrayIterator = function (array, flag) { this._array = array, this._flag = flag, this._nextIndex = 0; }, StringIterator = function (string, flag) { this._string = string, this._flag = flag, this._nextIndex = 0; }, isObject = function (value) { return null !== value && ("object" == typeof value || "function" == typeof value); }, setupSymbolInternals = function (symbol, desc) { return defineProperties(symbol, { _description: { value: desc }, _isSymbol: { value: !0 }, _id: { value: symbolHiddenCounter++ } }), symbol; }, appendArray = function (array1, array2) { if ("number" == typeof array1.length && array1.length >= 0 && "number" == typeof array2.length && array2.length >= 0) {
            var length1 = Math.floor(array1.length), length2 = Math.floor(array2.length), i = 0;
            for (array1.length = length1 + length2; i < length2; ++i)
                array2.hasOwnProperty(i) && (array1[length1 + i] = array2[i]);
        } }, simpleInheritance = function (child, parent) { if ("function" != typeof child || "function" != typeof parent)
            throw new TypeError("Child and Parent must be function type"); child.prototype = Object.create(parent.prototype), child.prototype.constructor = child; }, Symbol = function Symbol(desc) { if (desc = void 0 === desc ? "" : String(desc), this instanceof Symbol)
            throw new TypeError("Symbol is not a constructor"); return setupSymbolInternals(Object.create(Symbol.prototype), desc); };
        defineProperties(Symbol, { for: { value: function (key) { key = String(key); for (var record, registryLength = globalSymbolRegistry.length, i = 0; i < registryLength; ++i)
                    if ((record = globalSymbolRegistry[i]).key === key)
                        return record.symbol; return record = { key: key, symbol: Symbol(key) }, globalSymbolRegistry.push(record), record.symbol; }, writable: !0, configurable: !0 }, keyFor: { value: function (symbol) { if (!ES6.isSymbol(symbol))
                    throw new TypeError(String(symbol) + " is not a symbol"); for (var record, registryLength = globalSymbolRegistry.length, i = 0; i < registryLength; ++i)
                    if ((record = globalSymbolRegistry[i]).symbol === symbol)
                        return record.key; }, writable: !0, configurable: !0 }, hasInstance: { value: Symbol("Symbol.hasInstance") }, isConcatSpreadable: { value: Symbol("Symbol.isConcatSpreadable") }, iterator: { value: Symbol("Symbol.iterator") }, toStringTag: { value: Symbol("Symbol.toStringTag") } }), Symbol.prototype.toString = function () { return "@@_____" + this._id + "_____"; }, Symbol.prototype.valueOf = function () { return this; }, defineProperty(Iterator.prototype, Symbol.iterator.toString(), { value: function () { return this; }, writable: !0, configurable: !0 }), simpleInheritance(ArrayIterator, Iterator), simpleInheritance(StringIterator, Iterator), defineProperty(ArrayIterator.prototype, Symbol.toStringTag.toString(), { value: "Array Iterator", configurable: !0 }), defineProperty(StringIterator.prototype, Symbol.toStringTag.toString(), { value: "String Iterator", configurable: !0 }), ArrayIterator.prototype.next = function () { if (!(this instanceof ArrayIterator))
            throw new TypeError("Method Array Iterator.prototype.next called on incompatible receiver " + String(this)); var nextValue; return -1 === this._nextIndex ? { done: !0, value: void 0 } : "number" == typeof this._array.length && this._array.length >= 0 && this._nextIndex < Math.floor(this._array.length) ? (1 === this._flag ? nextValue = [this._nextIndex, this._array[this._nextIndex]] : 2 === this._flag ? nextValue = this._array[this._nextIndex] : 3 === this._flag && (nextValue = this._nextIndex), this._nextIndex++, { done: !1, value: nextValue }) : (this._nextIndex = -1, { done: !0, value: void 0 }); }, StringIterator.prototype.next = function () { if (!(this instanceof StringIterator))
            throw new TypeError("Method String Iterator.prototype.next called on incompatible receiver " + String(this)); var nextValue, stringObject = new String(this._string); return -1 === this._nextIndex ? { done: !0, value: void 0 } : this._nextIndex < stringObject.length ? (nextValue = stringObject[this._nextIndex], this._nextIndex++, { done: !1, value: nextValue }) : (this._nextIndex = -1, { done: !0, value: void 0 }); };
        var SpreadOperatorImpl = function (target, thisArg) { this._target = target, this._values = [], this._thisArg = thisArg; };
        SpreadOperatorImpl.prototype.spread = function () { var self = this; return slice.call(arguments).forEach(function (iterable) { ES6.forOf(iterable, function (value) { self._values.push(value); }); }), self; }, SpreadOperatorImpl.prototype.add = function () { var self = this; return slice.call(arguments).forEach(function (value) { self._values.push(value); }), self; }, SpreadOperatorImpl.prototype.call = function (thisArg) { if ("function" != typeof this._target)
            throw new TypeError("Target is not a function"); return thisArg = arguments.length <= 0 ? this._thisArg : thisArg, this._target.apply(thisArg, this._values); }, SpreadOperatorImpl.prototype.new = function () { if ("function" != typeof this._target)
            throw new TypeError("Target is not a constructor"); var temp, returnValue; return temp = Object.create(this._target.prototype), returnValue = this._target.apply(temp, this._values), isObject(returnValue) ? returnValue : temp; }, SpreadOperatorImpl.prototype.array = function () { if (!isArray(this._target))
            throw new TypeError("Target is not a array"); return push.apply(this._target, this._values), this._target; };
        return defineProperties(ES6, { isSymbol: { value: function (symbol) { return symbol instanceof Symbol && function (symbol) { return !0 === symbol._isSymbol && "number" == typeof symbol._id && "string" == typeof symbol._description; }(symbol); }, writable: !0, configurable: !0 }, instanceOf: { value: function (object, constructor) { if (!isObject(constructor))
                    throw new TypeError("Right-hand side of 'instanceof' is not an object"); var hasInstanceSymbolProp = constructor[Symbol.hasInstance]; if (void 0 === hasInstanceSymbolProp)
                    return object instanceof constructor; if ("function" != typeof hasInstanceSymbolProp)
                    throw new TypeError(typeof hasInstanceSymbolProp + " is not a function"); return hasInstanceSymbolProp.call(constructor, object); }, writable: !0, configurable: !0 }, forOf: { value: function (iterable, callback, thisArg) { if (callback = "function" != typeof callback ? emptyFunction : callback, "function" != typeof iterable[Symbol.iterator])
                    throw new TypeError("Iterable[Symbol.iterator] is not a function"); var iterationResult, iterator = iterable[Symbol.iterator](); if ("function" != typeof iterator.next)
                    throw new TypeError(".iterator.next is not a function"); for (;;) {
                    if (iterationResult = iterator.next(), !isObject(iterationResult))
                        throw new TypeError("Iterator result " + iterationResult + " is not an object");
                    if (iterationResult.done)
                        break;
                    callback.call(thisArg, iterationResult.value);
                } }, writable: !0, configurable: !0 }, spreadOperator: { value: function (target, thisArg) { if ("function" != typeof target && !isArray(target))
                    throw new TypeError("Spread operator only supports on array and function objects at this moment"); return new SpreadOperatorImpl(target, thisArg); }, writable: !0, configurable: !0 } }), defineProperty(global, "Symbol", { value: Symbol, writable: !0, configurable: !0 }), defineProperty(Function.prototype, Symbol.hasInstance.toString(), { value: function (instance) { return "function" == typeof this && instance instanceof this; } }), defineProperty(Array.prototype, "concat", { value: function () { if (void 0 === this || null === this)
                throw new TypeError("Array.prototype.concat called on null or undefined"); var self = Object(this), targets = slice.call(arguments), outputs = []; return targets.unshift(self), targets.forEach(function (target) { isObject(target) ? void 0 !== target[Symbol.isConcatSpreadable] ? target[Symbol.isConcatSpreadable] ? appendArray(outputs, target) : outputs.push(target) : isArray(target) ? appendArray(outputs, target) : outputs.push(target) : outputs.push(target); }), outputs; }, writable: !0, configurable: !0 }), defineProperty(Object.prototype, "toString", { value: function () { return void 0 === this || null === this ? objectToString.call(this) : "string" == typeof this[Symbol.toStringTag] ? "[object " + this[Symbol.toStringTag] + "]" : objectToString.call(this); }, writable: !0, configurable: !0 }), defineProperty(Array.prototype, Symbol.iterator.toString(), { value: function () { if (void 0 === this || null === this)
                throw new TypeError("Cannot convert undefined or null to object"); var self = Object(this); return new ArrayIterator(self, 2); }, writable: !0, configurable: !0 }), defineProperty(Array, "from", { value: function (arrayLike, mapFn, thisArg) { var constructor, length, outputs, i = 0; if (constructor = isCallable(this) ? this : Array, void 0 === arrayLike || null === arrayLike)
                throw new TypeError("Cannot convert undefined or null to object"); if (arrayLike = Object(arrayLike), void 0 === mapFn)
                mapFn = simpleFunction;
            else if (!isCallable(mapFn))
                throw new TypeError(mapFn + " is not a function"); if (void 0 === arrayLike[Symbol.iterator]) {
                if (!("number" == typeof arrayLike.length && arrayLike.length >= 0))
                    return (outputs = new constructor(0)).length = 0, outputs;
                for (length = Math.floor(arrayLike.length), (outputs = new constructor(length)).length = length; i < length; ++i)
                    outputs[i] = mapFn.call(thisArg, arrayLike[i]);
            }
            else
                (outputs = new constructor).length = 0, ES6.forOf(arrayLike, function (value) { outputs.length++, outputs[outputs.length - 1] = mapFn.call(thisArg, value); }); return outputs; }, writable: !0, configurable: !0 }), defineProperty(Array.prototype, "entries", { value: function () { if (void 0 === this || null === this)
                throw new TypeError("Cannot convert undefined or null to object"); var self = Object(this); return new ArrayIterator(self, 1); }, writable: !0, configurable: !0 }), defineProperty(Array.prototype, "keys", { value: function () { if (void 0 === this || null === this)
                throw new TypeError("Cannot convert undefined or null to object"); var self = Object(this); return new ArrayIterator(self, 3); }, writable: !0, configurable: !0 }), defineProperty(String.prototype, Symbol.iterator.toString(), { value: function () { if (void 0 === this || null === this)
                throw new TypeError("String.prototype[Symbol.iterator] called on null or undefined"); return new StringIterator(String(this), 0); }, writable: !0, configurable: !0 }), ES6;
    });
    if (!String.prototype.normalize) {
        (function () {
            /* This table is of all characters in the range of U+0100 to U+2200 that
             * have a canonical decomposition in NFD form. For some characters, this
             * translates them into their canonical characters (e.g., K -> K). For
             * characters with combining diacritical marks, this leaves behind the base
             * character, removing its diacritics (e.g., É -> E).
             */
            var PARTIAL_NFD_LOOKUP = { "À": "A", "Á": "A", "Â": "A", "Ã": "A", "Ä": "A", "Å": "A", "Ç": "C",
                "È": "E", "É": "E", "Ê": "E", "Ë": "E", "Ì": "I", "Í": "I", "Î": "I", "Ï": "I",
                "Ñ": "N", "Ò": "O", "Ó": "O", "Ô": "O", "Õ": "O", "Ö": "O",
                "Ù": "U", "Ú": "U", "Û": "U", "Ü": "U", "Ý": "Y",
                "à": "a", "á": "a", "â": "a", "ã": "a", "ä": "a", "å": "a", "ç": "c",
                "è": "e", "é": "e", "ê": "e", "ë": "e", "ì": "i", "í": "i", "î": "i", "ï": "i",
                "ñ": "n", "ò": "o", "ó": "o", "ô": "o", "õ": "o", "ö": "o",
                "ù": "u", "ú": "u", "û": "u", "ü": "u", "ý": "y", "ÿ": "y",
                "Ā": "A", "ā": "a", "Ă": "A", "ă": "a", "Ą": "A", "ą": "a",
                "Ć": "C", "ć": "c", "Ĉ": "C", "ĉ": "c", "Ċ": "C", "ċ": "c", "Č": "C", "č": "c", "Ď": "D", "ď": "d",
                "Ē": "E", "ē": "e", "Ĕ": "E", "ĕ": "e", "Ė": "E", "ė": "e",
                "Ę": "E", "ę": "e", "Ě": "E", "ě": "e",
                "Ĝ": "G", "ĝ": "g", "Ğ": "G", "ğ": "g", "Ġ": "G", "ġ": "g", "Ģ": "G", "ģ": "g", "Ĥ": "H", "ĥ": "h",
                "Ĩ": "I", "ĩ": "i", "Ī": "I", "ī": "i", "Ĭ": "I", "ĭ": "i", "Į": "I", "į": "i", "İ": "I",
                "Ĵ": "J", "ĵ": "j", "Ķ": "K", "ķ": "k", "Ĺ": "L", "ĺ": "l", "Ļ": "L", "ļ": "l", "Ľ": "L", "ľ": "l",
                "Ń": "N", "ń": "n", "Ņ": "N", "ņ": "n", "Ň": "N", "ň": "n",
                "Ō": "O", "ō": "o", "Ŏ": "O", "ŏ": "o", "Ő": "O", "ő": "o",
                "Ŕ": "R", "ŕ": "r", "Ŗ": "R", "ŗ": "r", "Ř": "R", "ř": "r",
                "Ś": "S", "ś": "s", "Ŝ": "S", "ŝ": "s", "Ş": "S", "ş": "s", "Š": "S", "š": "s",
                "Ţ": "T", "ţ": "t", "Ť": "T", "ť": "t",
                "Ũ": "U", "ũ": "u", "Ū": "U", "ū": "u", "Ŭ": "U", "ŭ": "u", "Ů": "U", "ů": "u",
                "Ű": "U", "ű": "u", "Ų": "U", "ų": "u", "Ŵ": "W", "ŵ": "w",
                "Ŷ": "Y", "ŷ": "y", "Ÿ": "Y", "Ź": "Z", "ź": "z", "Ż": "Z", "ż": "z", "Ž": "Z", "ž": "z",
                "Ơ": "O", "ơ": "o", "Ư": "U", "ư": "u", "Ǎ": "A", "ǎ": "a", "Ǐ": "I", "ǐ": "i",
                "Ǒ": "O", "ǒ": "o", "Ǔ": "U", "ǔ": "u", "Ǖ": "U", "ǖ": "u", "Ǘ": "U", "ǘ": "u", "Ǚ": "U",
                "ǚ": "u", "Ǜ": "U", "ǜ": "u", "Ǟ": "A", "ǟ": "a", "Ǡ": "A", "ǡ": "a", "Ǣ": "Æ", "ǣ": "æ",
                "Ǧ": "G", "ǧ": "g", "Ǩ": "K", "ǩ": "k", "Ǫ": "O", "ǫ": "o", "Ǭ": "O", "ǭ": "o",
                "Ǯ": "Ʒ", "ǯ": "ʒ", "ǰ": "j", "Ǵ": "G", "ǵ": "g", "Ǹ": "N", "ǹ": "n",
                "Ǻ": "A", "ǻ": "a", "Ǽ": "Æ", "ǽ": "æ", "Ǿ": "Ø", "ǿ": "ø", "Ȁ": "A", "ȁ": "a", "Ȃ": "A", "ȃ": "a",
                "Ȅ": "E", "ȅ": "e", "Ȇ": "E", "ȇ": "e", "Ȉ": "I", "ȉ": "i", "Ȋ": "I", "ȋ": "i",
                "Ȍ": "O", "ȍ": "o", "Ȏ": "O", "ȏ": "o", "Ȑ": "R", "ȑ": "r", "Ȓ": "R", "ȓ": "r",
                "Ȕ": "U", "ȕ": "u", "Ȗ": "U", "ȗ": "u", "Ș": "S", "ș": "s", "Ț": "T", "ț": "t",
                "Ȟ": "H", "ȟ": "h", "Ȧ": "A", "ȧ": "a", "Ȩ": "E", "ȩ": "e",
                "Ȫ": "O", "ȫ": "o", "Ȭ": "O", "ȭ": "o", "Ȯ": "O", "ȯ": "o", "Ȱ": "O", "ȱ": "o",
                "Ȳ": "Y", "ȳ": "y", "̀": "̀", "́": "́", "̓": "̓", "̈́": "̈", "ʹ": "ʹ", ";": ";", "΅": "¨",
                "Ά": "Α", "·": "·", "Έ": "Ε", "Ή": "Η", "Ί": "Ι", "Ό": "Ο", "Ύ": "Υ", "Ώ": "Ω",
                "ΐ": "ι", "Ϊ": "Ι", "Ϋ": "Υ", "ά": "α", "έ": "ε", "ή": "η", "ί": "ι",
                "ϊ": "ι", "ϋ": "υ", "ό": "ο", "ύ": "υ", "ώ": "ω", "ϓ": "ϒ", "ϔ": "ϒ",
                "Ѐ": "Е", "Ё": "Е", "Ѓ": "Г", "Ї": "І", "Ќ": "К", "Ѝ": "И", "Ў": "У", "Й": "И", "й": "и",
                "ѐ": "е", "ё": "е", "ѓ": "г", "ї": "і", "ќ": "к", "ѝ": "и", "ў": "у", "Ѷ": "Ѵ", "ѷ": "ѵ",
                "Ӂ": "Ж", "ӂ": "ж", "Ӑ": "А", "ӑ": "а", "Ӓ": "А", "ӓ": "а",
                "Ӗ": "Е", "ӗ": "е", "Ӛ": "Ә", "ӛ": "ә", "Ӝ": "Ж", "ӝ": "ж", "Ӟ": "З", "ӟ": "з",
                "Ӣ": "И", "ӣ": "и", "Ӥ": "И", "ӥ": "и", "Ӧ": "О", "ӧ": "о", "Ӫ": "Ө", "ӫ": "ө",
                "Ӭ": "Э", "ӭ": "э", "Ӯ": "У", "ӯ": "у", "Ӱ": "У", "ӱ": "у", "Ӳ": "У", "ӳ": "у",
                "Ӵ": "Ч", "ӵ": "ч", "Ӹ": "Ы", "ӹ": "ы", "Ḁ": "A", "ḁ": "a",
                "Ḃ": "B", "ḃ": "b", "Ḅ": "B", "ḅ": "b", "Ḇ": "B", "ḇ": "b", "Ḉ": "C", "ḉ": "c",
                "Ḋ": "D", "ḋ": "d", "Ḍ": "D", "ḍ": "d", "Ḏ": "D", "ḏ": "d", "Ḑ": "D", "ḑ": "d", "Ḓ": "D", "ḓ": "d",
                "Ḕ": "E", "ḕ": "e", "Ḗ": "E", "ḗ": "e", "Ḙ": "E", "ḙ": "e", "Ḛ": "E", "ḛ": "e", "Ḝ": "E", "ḝ": "e",
                "Ḟ": "F", "ḟ": "f", "Ḡ": "G", "ḡ": "g", "Ḣ": "H", "ḣ": "h", "Ḥ": "H",
                "ḥ": "h", "Ḧ": "H", "ḧ": "h", "Ḩ": "H", "ḩ": "h", "Ḫ": "H", "ḫ": "h",
                "Ḭ": "I", "ḭ": "i", "Ḯ": "I", "ḯ": "i", "Ḱ": "K", "ḱ": "k", "Ḳ": "K", "ḳ": "k", "Ḵ": "K", "ḵ": "k",
                "Ḷ": "L", "ḷ": "l", "Ḹ": "L", "ḹ": "l", "Ḻ": "L", "ḻ": "l", "Ḽ": "L", "ḽ": "l",
                "Ḿ": "M", "ḿ": "m", "Ṁ": "M", "ṁ": "m", "Ṃ": "M", "ṃ": "m",
                "Ṅ": "N", "ṅ": "n", "Ṇ": "N", "ṇ": "n", "Ṉ": "N", "ṉ": "n", "Ṋ": "N", "ṋ": "n",
                "Ṍ": "O", "ṍ": "o", "Ṏ": "O", "ṏ": "o", "Ṑ": "O", "ṑ": "o", "Ṓ": "O", "ṓ": "o",
                "Ṕ": "P", "ṕ": "p", "Ṗ": "P", "ṗ": "p", "Ṙ": "R", "ṙ": "r", "Ṛ": "R",
                "ṛ": "r", "Ṝ": "R", "ṝ": "r", "Ṟ": "R", "ṟ": "r",
                "Ṡ": "S", "ṡ": "s", "Ṣ": "S", "ṣ": "s", "Ṥ": "S", "ṥ": "s", "Ṧ": "S", "ṧ": "s", "Ṩ": "S", "ṩ": "s",
                "Ṫ": "T", "ṫ": "t", "Ṭ": "T", "ṭ": "t", "Ṯ": "T", "ṯ": "t", "Ṱ": "T", "ṱ": "t",
                "Ṳ": "U", "ṳ": "u", "Ṵ": "U", "ṵ": "u", "Ṷ": "U", "ṷ": "u", "Ṹ": "U", "ṹ": "u", "Ṻ": "U", "ṻ": "u",
                "Ṽ": "V", "ṽ": "v", "Ṿ": "V", "ṿ": "v", "Ẁ": "W", "ẁ": "w", "Ẃ": "W",
                "ẃ": "w", "Ẅ": "W", "ẅ": "w", "Ẇ": "W", "ẇ": "w", "Ẉ": "W", "ẉ": "w",
                "Ẋ": "X", "ẋ": "x", "Ẍ": "X", "ẍ": "x", "Ẏ": "Y", "ẏ": "y",
                "Ẑ": "Z", "ẑ": "z", "Ẓ": "Z", "ẓ": "z", "Ẕ": "Z", "ẕ": "z",
                "ẖ": "h", "ẗ": "t", "ẘ": "w", "ẙ": "y", "ẛ": "ſ",
                "Ạ": "A", "ạ": "a", "Ả": "A", "ả": "a", "Ấ": "A", "ấ": "a", "Ầ": "A", "ầ": "a",
                "Ẩ": "A", "ẩ": "a", "Ẫ": "A", "ẫ": "a", "Ậ": "A", "ậ": "a", "Ắ": "A", "ắ": "a",
                "Ằ": "A", "ằ": "a", "Ẳ": "A", "ẳ": "a", "Ẵ": "A", "ẵ": "a", "Ặ": "A", "ặ": "a",
                "Ẹ": "E", "ẹ": "e", "Ẻ": "E", "ẻ": "e", "Ẽ": "E", "ẽ": "e", "Ế": "E", "ế": "e",
                "Ề": "E", "ề": "e", "Ể": "E", "ể": "e", "Ễ": "E", "ễ": "e", "Ệ": "E", "ệ": "e",
                "Ỉ": "I", "ỉ": "i", "Ị": "I", "ị": "i",
                "Ọ": "O", "ọ": "o", "Ỏ": "O", "ỏ": "o", "Ố": "O", "ố": "o", "Ồ": "O", "ồ": "o",
                "Ổ": "O", "ổ": "o", "Ỗ": "O", "ỗ": "o", "Ộ": "O", "ộ": "o", "Ớ": "O", "ớ": "o",
                "Ờ": "O", "ờ": "o", "Ở": "O", "ở": "o", "Ỡ": "O", "ỡ": "o", "Ợ": "O", "ợ": "o",
                "Ụ": "U", "ụ": "u", "Ủ": "U", "ủ": "u", "Ứ": "U", "ứ": "u", "Ừ": "U", "ừ": "u",
                "Ử": "U", "ử": "u", "Ữ": "U", "ữ": "u", "Ự": "U", "ự": "u",
                "Ỳ": "Y", "ỳ": "y", "Ỵ": "Y", "ỵ": "y", "Ỷ": "Y", "ỷ": "y", "Ỹ": "Y", "ỹ": "y",
                "ἀ": "α", "ἁ": "α", "ἂ": "α", "ἃ": "α", "ἄ": "α", "ἅ": "α", "ἆ": "α", "ἇ": "α",
                "Ἀ": "Α", "Ἁ": "Α", "Ἂ": "Α", "Ἃ": "Α", "Ἄ": "Α", "Ἅ": "Α", "Ἆ": "Α", "Ἇ": "Α",
                "ἐ": "ε", "ἑ": "ε", "ἒ": "ε", "ἓ": "ε", "ἔ": "ε", "ἕ": "ε", "Ἐ": "Ε", "Ἑ": "Ε",
                "Ἒ": "Ε", "Ἓ": "Ε", "Ἔ": "Ε", "Ἕ": "Ε",
                "ἠ": "η", "ἡ": "η", "ἢ": "η", "ἣ": "η", "ἤ": "η", "ἥ": "η", "ἦ": "η", "ἧ": "η",
                "Ἠ": "Η", "Ἡ": "Η", "Ἢ": "Η", "Ἣ": "Η", "Ἤ": "Η", "Ἥ": "Η", "Ἦ": "Η", "Ἧ": "Η",
                "ἰ": "ι", "ἱ": "ι", "ἲ": "ι", "ἳ": "ι", "ἴ": "ι", "ἵ": "ι", "ἶ": "ι", "ἷ": "ι",
                "Ἰ": "Ι", "Ἱ": "Ι", "Ἲ": "Ι", "Ἳ": "Ι", "Ἴ": "Ι", "Ἵ": "Ι", "Ἶ": "Ι", "Ἷ": "Ι",
                "ὀ": "ο", "ὁ": "ο", "ὂ": "ο", "ὃ": "ο", "ὄ": "ο", "ὅ": "ο", "Ὀ": "Ο", "Ὁ": "Ο",
                "Ὂ": "Ο", "Ὃ": "Ο", "Ὄ": "Ο", "Ὅ": "Ο",
                "ὐ": "υ", "ὑ": "υ", "ὒ": "υ", "ὓ": "υ", "ὔ": "υ", "ὕ": "υ", "ὖ": "υ", "ὗ": "υ",
                "Ὑ": "Υ", "Ὓ": "Υ", "Ὕ": "Υ", "Ὗ": "Υ",
                "ὠ": "ω", "ὡ": "ω", "ὢ": "ω", "ὣ": "ω", "ὤ": "ω", "ὥ": "ω", "ὦ": "ω", "ὧ": "ω",
                "Ὠ": "Ω", "Ὡ": "Ω", "Ὢ": "Ω", "Ὣ": "Ω", "Ὤ": "Ω", "Ὥ": "Ω", "Ὦ": "Ω", "Ὧ": "Ω",
                "ὰ": "α", "ὲ": "ε", "ὴ": "η", "ὶ": "ι", "ὸ": "ο", "ὺ": "υ", "ὼ": "ω",
                "ᾀ": "α", "ᾁ": "α", "ᾂ": "α", "ᾃ": "α", "ᾄ": "α", "ᾅ": "α", "ᾆ": "α", "ᾇ": "α",
                "ᾈ": "Α", "ᾉ": "Α", "ᾊ": "Α", "ᾋ": "Α", "ᾌ": "Α", "ᾍ": "Α", "ᾎ": "Α", "ᾏ": "Α",
                "ᾐ": "η", "ᾑ": "η", "ᾒ": "η", "ᾓ": "η", "ᾔ": "η", "ᾕ": "η", "ᾖ": "η", "ᾗ": "η",
                "ᾘ": "Η", "ᾙ": "Η", "ᾚ": "Η", "ᾛ": "Η", "ᾜ": "Η", "ᾝ": "Η", "ᾞ": "Η", "ᾟ": "Η",
                "ᾠ": "ω", "ᾡ": "ω", "ᾢ": "ω", "ᾣ": "ω", "ᾤ": "ω", "ᾥ": "ω", "ᾦ": "ω", "ᾧ": "ω",
                "ᾨ": "Ω", "ᾩ": "Ω", "ᾪ": "Ω", "ᾫ": "Ω", "ᾬ": "Ω", "ᾭ": "Ω", "ᾮ": "Ω", "ᾯ": "Ω",
                "ᾰ": "α", "ᾱ": "α", "ᾲ": "α", "ᾳ": "α", "ᾴ": "α", "ᾶ": "α", "ᾷ": "α",
                "Ᾰ": "Α", "Ᾱ": "Α", "Ὰ": "Α", "ᾼ": "Α",
                "ι": "ι", "῁": "¨", "ῂ": "η", "ῃ": "η", "ῄ": "η", "ῆ": "η", "ῇ": "η",
                "Ὲ": "Ε", "Ὴ": "Η", "ῌ": "Η", "῍": "᾿", "῎": "᾿", "῏": "᾿",
                "ῐ": "ι", "ῑ": "ι", "ῒ": "ι", "ῖ": "ι", "ῗ": "ι", "Ῐ": "Ι", "Ῑ": "Ι", "Ὶ": "Ι",
                "῝": "῾", "῞": "῾", "῟": "῾", "ῠ": "υ", "ῡ": "υ", "ῢ": "υ", "ΰ": "υ", "ῤ": "ρ", "ῥ": "ρ",
                "ῦ": "υ", "ῧ": "υ", "Ῠ": "Υ", "Ῡ": "Υ", "Ὺ": "Υ", "Ῥ": "Ρ",
                "῭": "¨", "`": "`", "ῲ": "ω", "ῳ": "ω", "ῴ": "ω", "ῶ": "ω", "ῷ": "ω",
                "Ὸ": "Ο", "Ὼ": "Ω", "ῼ": "Ω", "´": "´", " ": " ", " ": " ", "Ω": "Ω", "K": "K" };
            /* A VERY naive fill-in for the String.normalize function.
             * Mobile Safari only supports the function in iOS 10+, while
             * we currently support iOS 9.  (The last 32-bit iOS version)
             *
             * Note that this implementation assumes that all usage of String.normalize
             * is for use in wordform-keying operations common within the LMLayer.
             */
            String.prototype.normalize = function () {
                var chars = this.split('');
                return chars.map(function (c) {
                    if (c in PARTIAL_NFD_LOOKUP) {
                        return PARTIAL_NFD_LOOKUP[c];
                    }
                    return c;
                }).join('');
            };
        })();
    }
    //Autogenerated file - do not modify!
    var com;
    (function (com) {
        var keyman;
        (function (keyman) {
            var environment;
            (function (environment) {
                environment.VERSION = "15.0";
                environment.BUILD = 163;
                environment.ENVIRONMENT = "local";
                environment.SENTRY_RELEASE = "release-15.0.163-alpha-local";
            })(environment = keyman.environment || (keyman.environment = {}));
        })(keyman = com.keyman || (com.keyman = {}));
    })(com || (com = {}));
    var com;
    (function (com) {
        var keyman;
        (function (keyman) {
            var utils;
            (function (utils) {
                /**
                 * Function     deepCopy
                 * Scope        Private
                 * @param       {Object}      p           object to copy
                 * @param       {Array=}      c0          array member being copied
                 * @return      {Object}                  clone ('deep copy') of object
                 * Description  Makes an actual copy (not a reference) of an object, copying simple members,
                 *              arrays and member objects but not functions, so use with care!
                 */
                function deepCopy(p, c0) {
                    var c = c0 || {};
                    for (var i in p) {
                        if (typeof p[i] === 'object' && p[i] != null) {
                            c[i] = (p[i].constructor === Array) ? [] : {};
                            deepCopy(p[i], c[i]);
                        }
                        else {
                            c[i] = p[i];
                        }
                    }
                    return c;
                }
                utils.deepCopy = deepCopy;
            })(utils = keyman.utils || (keyman.utils = {}));
        })(keyman = com.keyman || (com.keyman = {}));
    })(com || (com = {}));
    var com;
    (function (com) {
        var keyman;
        (function (keyman) {
            var utils;
            (function (utils) {
                /**
                 * Returns the base global object available to the current JS platform.
                 * - In browsers, returns `window`.
                 * - In WebWorkers, returns `self`.
                 * - In Node, returns `global`.
                 */
                function getGlobalObject() {
                    // Evergreen browsers have started defining 'globalThis'.  
                    // Refer to https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#type-checking-for-globalthis
                    // and its referenced polyfill.  Said polyfill is very complex, so we opt for this far leaner variant.
                    if (typeof globalThis != 'undefined') {
                        return globalThis; // Not available in IE or older Edge versions
                        // @ts-ignore (TS will throw errors for whatever platform we're not compiling for.)
                    }
                    else if (typeof window != 'undefined') {
                        // @ts-ignore
                        return window; // The browser-based classic
                        // @ts-ignore
                    }
                    else if (typeof self != 'undefined') {
                        // @ts-ignore
                        return self; // WebWorker global
                    }
                    else {
                        // Assumption - if neither of the above exist, we're in Node, for unit-testing.
                        // Node doesn't have as many methods and properties as the other two, but what 
                        // matters for us is that it's the base global.
                        //
                        // Some other headless JS solutions use 'this' instead, but Node's enough for our needs.
                        // @ts-ignore
                        return global;
                    }
                }
                utils.getGlobalObject = getGlobalObject;
            })(utils = keyman.utils || (keyman.utils = {}));
        })(keyman = com.keyman || (com.keyman = {}));
    })(com || (com = {}));
    // Ensure that this class contains no reference into core KMW code - it is referenced
    // by components intended to be modular and possible to separate from core KMW.
    var com;
    (function (com) {
        var keyman;
        (function (keyman) {
            var utils;
            (function (utils) {
                // Dotted-decimal version
                var Version = /** @class */ (function () {
                    /**
                     * Parses version information, preparing it for use in comparisons.
                     * @param text Either a string representing a version number (ex: "9.0.0") or an array representing
                     *             its components (ex: [9, 0, 0]).
                     */
                    function Version(text) {
                        // If a keyboard doesn't specify a version, use the DEVELOPER_VERSION_FALLBACK values.
                        if (text === undefined || text === null) {
                            this.components = [].concat(Version.DEVELOPER_VERSION_FALLBACK.components);
                            return;
                        }
                        if (Array.isArray(text)) {
                            var components = text;
                            if (components.length < 2) {
                                throw new Error("Version string must have at least a major and minor component!");
                            }
                            else {
                                this.components = [].concat(components);
                                return;
                            }
                        }
                        // else, standard constructor path.
                        var parts = text.split('.');
                        var componentArray = [];
                        if (parts.length < 2) {
                            throw new Error("Version string must have at least a major and minor component!");
                        }
                        for (var i = 0; i < parts.length; i++) {
                            var value = parseInt(parts[i], 10);
                            if (isNaN(value)) {
                                throw new Error("Version string components must be numerical!");
                            }
                            componentArray.push(value);
                        }
                        this.components = componentArray;
                    }
                    Object.defineProperty(Version.prototype, "major", {
                        get: function () {
                            return this.components[0];
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Version.prototype, "minor", {
                        get: function () {
                            return this.components[1];
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Version.prototype.toString = function () {
                        return this.components.join('.');
                    };
                    Version.prototype.toJSON = function () {
                        return this.toString();
                    };
                    Version.prototype.equals = function (other) {
                        return this.compareTo(other) == 0;
                    };
                    Version.prototype.precedes = function (other) {
                        return this.compareTo(other) < 0;
                    };
                    Version.prototype.compareTo = function (other) {
                        // If the version info depth differs, we need a flag to indicate which instance is shorter.
                        var isShorter = this.components.length < other.components.length;
                        var maxDepth = (this.components.length < other.components.length) ? this.components.length : other.components.length;
                        var i;
                        for (i = 0; i < maxDepth; i++) {
                            var delta = this.components[i] - other.components[i];
                            if (delta != 0) {
                                return delta;
                            }
                        }
                        var longList = isShorter ? other.components : this.components;
                        do {
                            if (longList[i] > 0) {
                                return isShorter ? -1 : 1;
                            }
                            i++;
                        } while (i < longList.length);
                        // Equal.
                        return 0;
                    };
                    Version.CURRENT = new Version(com.keyman.environment.VERSION);
                    // Represents a default version value for keyboards compiled before this was compiled into keyboards.
                    // The exact version is unknown at this point, but the value is "good enough" for what we need.
                    Version.DEVELOPER_VERSION_FALLBACK = new Version([9, 0, 0]);
                    // For 12.0, the old default behavior of adding missing keycaps to the default layers was removed,
                    // as it results in unexpected, bug-like behavior for keyboard designers when it is unwanted.
                    Version.NO_DEFAULT_KEYCAPS = new Version([12, 0]);
                    Version.MAC_POSSIBLE_IPAD_ALIAS = new Version([10, 15]);
                    return Version;
                }());
                utils.Version = Version;
            })(utils = keyman.utils || (keyman.utils = {}));
        })(keyman = com.keyman || (com.keyman = {}));
    })(com || (com = {}));
    /***
       KeymanWeb 14.0
       Copyright 2020 SIL International
    ***/
    /**
     * Constructs a string from one or more Unicode character codepoint values
     * passed as integer parameters.
     *
     * @param  {number} cp0,...   1 or more Unicode codepoints, e.g. 0x0065, 0x10000
     * @return {string|null}      The new String object.
     */
    String.kmwFromCharCode = function (cp0) {
        var chars = [], i;
        for (i = 0; i < arguments.length; i++) {
            var c = Number(arguments[i]);
            if (!isFinite(c) || c < 0 || c > 0x10FFFF || Math.floor(c) !== c) {
                throw new RangeError("Invalid code point " + c);
            }
            if (c < 0x10000) {
                chars.push(c);
            }
            else {
                c -= 0x10000;
                chars.push((c >> 10) + 0xD800);
                chars.push((c % 0x400) + 0xDC00);
            }
        }
        return String.fromCharCode.apply(undefined, chars);
    };
    /**
     * Returns a number indicating the Unicode value of the character at the given
     * code point index, with support for supplementary plane characters.
     *
     * @param  {number}  codePointIndex  The code point index into the string (not
                                         the code unit index) to return
     * @return {number}                  The Unicode character value
     */
    String.prototype.kmwCharCodeAt = function (codePointIndex) {
        var str = String(this);
        var codeUnitIndex = 0;
        if (codePointIndex < 0 || codePointIndex >= str.length) {
            return NaN;
        }
        for (var i = 0; i < codePointIndex; i++) {
            codeUnitIndex = str.kmwNextChar(codeUnitIndex);
            if (codeUnitIndex === null)
                return NaN;
        }
        var first = str.charCodeAt(codeUnitIndex);
        if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {
            var second = str.charCodeAt(codeUnitIndex + 1);
            if (second >= 0xDC00 && second <= 0xDFFF) {
                return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;
            }
        }
        return first;
    };
    /**
     * Returns the code point index within the calling String object of the first occurrence
     * of the specified value, or -1 if not found.
     *
     * @param  {string}  searchValue    The value to search for
     * @param  {number}  [fromIndex]    Optional code point index to start searching from
     * @return {number}                 The code point index of the specified search value
     */
    String.prototype.kmwIndexOf = function (searchValue, fromIndex) {
        var str = String(this);
        var codeUnitIndex = str.indexOf(searchValue, fromIndex);
        if (codeUnitIndex < 0) {
            return codeUnitIndex;
        }
        var codePointIndex = 0;
        for (var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i))
            codePointIndex++;
        return codePointIndex;
    };
    /**
     * Returns the code point index within the calling String object of the last occurrence
     * of the specified value, or -1 if not found.
     *
     * @param  {string}  searchValue    The value to search for
     * @param  {number}  fromIndex      Optional code point index to start searching from
     * @return {number}                 The code point index of the specified search value
     */
    String.prototype.kmwLastIndexOf = function (searchValue, fromIndex) {
        var str = String(this);
        var codeUnitIndex = str.lastIndexOf(searchValue, fromIndex);
        if (codeUnitIndex < 0) {
            return codeUnitIndex;
        }
        var codePointIndex = 0;
        for (var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i))
            codePointIndex++;
        return codePointIndex;
    };
    /**
     * Returns the length of the string in code points, as opposed to code units.
     *
     * @return {number}                 The length of the string in code points
     */
    String.prototype.kmwLength = function () {
        var str = String(this);
        if (str.length == 0)
            return 0;
        for (var i = 0, codeUnitIndex = 0; codeUnitIndex !== null; i++)
            codeUnitIndex = str.kmwNextChar(codeUnitIndex);
        return i;
    };
    /**
     * Extracts a section of a string and returns a new string.
     *
     * @param  {number}  beginSlice    The start code point index in the string to
     *                                 extract from
     * @param  {number}  endSlice      Optional end code point index in the string
     *                                 to extract to
     * @return {string}                The substring as selected by beginSlice and
     *                                 endSlice
     */
    String.prototype.kmwSlice = function (beginSlice, endSlice) {
        var str = String(this);
        var beginSliceCodeUnit = str.kmwCodePointToCodeUnit(beginSlice);
        var endSliceCodeUnit = str.kmwCodePointToCodeUnit(endSlice);
        if (beginSliceCodeUnit === null || endSliceCodeUnit === null)
            return '';
        else
            return str.slice(beginSliceCodeUnit, endSliceCodeUnit);
    };
    /**
     * Returns the characters in a string beginning at the specified location through
     * the specified number of characters.
     *
     * @param  {number}  start         The start code point index in the string to
     *                                 extract from
     * @param  {number=}  length        Optional length to extract
     * @return {string}                The substring as selected by start and length
     */
    String.prototype.kmwSubstr = function (start, length) {
        var str = String(this);
        if (start < 0) {
            start = str.kmwLength() + start;
        }
        if (start < 0)
            start = 0;
        var startCodeUnit = str.kmwCodePointToCodeUnit(start);
        var endCodeUnit = startCodeUnit;
        if (startCodeUnit === null)
            return '';
        if (arguments.length < 2) {
            endCodeUnit = str.length;
        }
        else {
            for (var i = 0; i < length; i++)
                endCodeUnit = str.kmwNextChar(endCodeUnit);
        }
        if (endCodeUnit === null)
            return str.substring(startCodeUnit);
        else
            return str.substring(startCodeUnit, endCodeUnit);
    };
    /**
     * Returns the characters in a string between two indexes into the string.
     *
     * @param  {number}  indexA        The start code point index in the string to
     *                                 extract from
     * @param  {number}  indexB        The end code point index in the string to
     *                                 extract to
     * @return {string}                The substring as selected by indexA and indexB
     */
    String.prototype.kmwSubstring = function (indexA, indexB) {
        var str = String(this), indexACodeUnit, indexBCodeUnit;
        if (typeof (indexB) == 'undefined') {
            indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);
            indexBCodeUnit = str.length;
        }
        else {
            if (indexA > indexB) {
                var c = indexA;
                indexA = indexB;
                indexB = c;
            }
            indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);
            indexBCodeUnit = str.kmwCodePointToCodeUnit(indexB);
        }
        if (isNaN(indexACodeUnit) || indexACodeUnit === null)
            indexACodeUnit = 0;
        if (isNaN(indexBCodeUnit) || indexBCodeUnit === null)
            indexBCodeUnit = str.length;
        return str.substring(indexACodeUnit, indexBCodeUnit);
    };
    /*
      Helper functions
    */
    /**
     * Returns the code unit index for the next code point in the string, accounting for
     * supplementary pairs
     *
     * @param  {number|null}  codeUnitIndex  The code unit position to increment
     * @return {number|null}                 The index of the next code point in the string,
     *                                       in code units
     */
    String.prototype.kmwNextChar = function (codeUnitIndex) {
        var str = String(this);
        if (codeUnitIndex === null || codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {
            return null;
        }
        var first = str.charCodeAt(codeUnitIndex);
        if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {
            var second = str.charCodeAt(codeUnitIndex + 1);
            if (second >= 0xDC00 && second <= 0xDFFF) {
                if (codeUnitIndex == str.length - 2) {
                    return null;
                }
                return codeUnitIndex + 2;
            }
        }
        return codeUnitIndex + 1;
    };
    /**
     * Returns the code unit index for the previous code point in the string, accounting
     * for supplementary pairs
     *
     * @param  {number|null}  codeUnitIndex  The code unit position to decrement
     * @return {number|null}                 The index of the previous code point in the
     *                                       string, in code units
    */
    String.prototype.kmwPrevChar = function (codeUnitIndex) {
        var str = String(this);
        if (codeUnitIndex == null || codeUnitIndex <= 0 || codeUnitIndex > str.length) {
            return null;
        }
        var second = str.charCodeAt(codeUnitIndex - 1);
        if (second >= 0xDC00 && second <= 0xDFFF && codeUnitIndex > 1) {
            var first = str.charCodeAt(codeUnitIndex - 2);
            if (first >= 0xD800 && first <= 0xDBFF) {
                return codeUnitIndex - 2;
            }
        }
        return codeUnitIndex - 1;
    };
    /**
     * Returns the corresponding code unit index to the code point index passed
     *
     * @param  {number|null} codePointIndex  A code point index in the string
     * @return {number|null}                 The corresponding code unit index
     */
    String.prototype.kmwCodePointToCodeUnit = function (codePointIndex) {
        if (codePointIndex === null)
            return null;
        var str = String(this);
        var codeUnitIndex = 0;
        if (codePointIndex < 0) {
            codeUnitIndex = str.length;
            for (var i = 0; i > codePointIndex; i--)
                codeUnitIndex = str.kmwPrevChar(codeUnitIndex);
            return codeUnitIndex;
        }
        if (codePointIndex == str.kmwLength())
            return str.length;
        for (var i = 0; i < codePointIndex; i++)
            codeUnitIndex = str.kmwNextChar(codeUnitIndex);
        return codeUnitIndex;
    };
    /**
     * Returns the corresponding code point index to the code unit index passed
     *
     * @param  {number|null}  codeUnitIndex  A code unit index in the string
     * @return {number|null}                 The corresponding code point index
     */
    String.prototype.kmwCodeUnitToCodePoint = function (codeUnitIndex) {
        var str = String(this);
        if (codeUnitIndex === null)
            return null;
        else if (codeUnitIndex == 0)
            return 0;
        else if (codeUnitIndex < 0)
            return str.substr(codeUnitIndex).kmwLength();
        else
            return str.substr(0, codeUnitIndex).kmwLength();
    };
    /**
     * Returns the character at a the code point index passed
     *
     * @param  {number}  codePointIndex  A code point index in the string
     * @return {string}                  The corresponding character
     */
    String.prototype.kmwCharAt = function (codePointIndex) {
        var str = String(this);
        if (codePointIndex >= 0)
            return str.kmwSubstr(codePointIndex, 1);
        else
            return '';
    };
    /**
     * String prototype library extensions for basic plane characters,
     * to simplify enabling or disabling supplementary plane functionality (I3319)
     */
    /**
     * Returns the code unit index for the next code point in the string
     *
     * @param  {number}  codeUnitIndex    A code point index in the string
     * @return {number|null}                   The corresponding character
     */
    String.prototype.kmwBMPNextChar = function (codeUnitIndex) {
        var str = String(this);
        if (codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {
            return null;
        }
        return codeUnitIndex + 1;
    };
    /**
     * Returns the code unit index for the previous code point in the string
     *
     * @param  {number}  codeUnitIndex    A code unit index in the string
     * @return {number|null}                   The corresponding character
     */
    String.prototype.kmwBMPPrevChar = function (codeUnitIndex) {
        var str = String(this);
        if (codeUnitIndex <= 0 || codeUnitIndex > str.length) {
            return null;
        }
        return codeUnitIndex - 1;
    };
    /**
     * Returns the code unit index for a code point index
     *
     * @param  {number}  codePointIndex   A code point index in the string
     * @return {number}                   The corresponding character
     */
    String.prototype.kmwBMPCodePointToCodeUnit = function (codePointIndex) {
        return codePointIndex;
    };
    /**
     * Returns the code point index for a code unit index
     *
     * @param  {number}  codeUnitIndex    A code point index in the string
     * @return {number}                   The corresponding character
     */
    String.prototype.kmwBMPCodeUnitToCodePoint = function (codeUnitIndex) {
        return codeUnitIndex;
    };
    /**
     * Returns the length of a BMP string
     *
     * @return {number}                   The length in code points
     */
    String.prototype.kmwBMPLength = function () {
        var str = String(this);
        return str.length;
    };
    /**
     * Returns a substring
     *
     * @param  {number}  n
     * @param  {number=}  ln
     * @return {string}
     */
    String.prototype.kmwBMPSubstr = function (n, ln) {
        var str = String(this);
        if (n > -1)
            return str.substr(n, ln);
        else
            return str.substr(str.length + n, -n);
    };
    /**
     * Enable or disable supplementary plane string handling
     *
     * @param  {boolean}  bEnable
     */
    String.kmwEnableSupplementaryPlane = function (bEnable) {
        var p = String.prototype;
        String._kmwFromCharCode = bEnable ? String.kmwFromCharCode : String.fromCharCode;
        p._kmwCharAt = bEnable ? p.kmwCharAt : p.charAt;
        p._kmwCharCodeAt = bEnable ? p.kmwCharCodeAt : p.charCodeAt;
        p._kmwIndexOf = bEnable ? p.kmwIndexOf : p.indexOf;
        p._kmwLastIndexOf = bEnable ? p.kmwLastIndexOf : p.lastIndexOf;
        p._kmwSlice = bEnable ? p.kmwSlice : p.slice;
        p._kmwSubstring = bEnable ? p.kmwSubstring : p.substring;
        p._kmwSubstr = bEnable ? p.kmwSubstr : p.kmwBMPSubstr;
        p._kmwLength = bEnable ? p.kmwLength : p.kmwBMPLength;
        p._kmwNextChar = bEnable ? p.kmwNextChar : p.kmwBMPNextChar;
        p._kmwPrevChar = bEnable ? p.kmwPrevChar : p.kmwBMPPrevChar;
        p._kmwCodePointToCodeUnit = bEnable ? p.kmwCodePointToCodeUnit : p.kmwBMPCodePointToCodeUnit;
        p._kmwCodeUnitToCodePoint = bEnable ? p.kmwCodeUnitToCodePoint : p.kmwBMPCodeUnitToCodePoint;
    };
    var com;
    (function (com) {
        var keyman;
        (function (keyman) {
            var utils;
            (function (utils) {
                var Browser;
                (function (Browser) {
                    Browser["Chrome"] = "chrome";
                    Browser["Edge"] = "edge";
                    Browser["Firefox"] = "firefox";
                    Browser["Native"] = "native";
                    Browser["Opera"] = "opera";
                    Browser["Safari"] = "safari";
                    Browser["Other"] = "other";
                })(Browser = utils.Browser || (utils.Browser = {}));
                var OperatingSystem;
                (function (OperatingSystem) {
                    OperatingSystem["Windows"] = "windows";
                    OperatingSystem["macOS"] = "macosx";
                    OperatingSystem["Linux"] = "linux";
                    OperatingSystem["Android"] = "android";
                    OperatingSystem["iOS"] = "ios";
                    OperatingSystem["Other"] = "other";
                })(OperatingSystem = utils.OperatingSystem || (utils.OperatingSystem = {}));
                var FormFactor;
                (function (FormFactor) {
                    FormFactor["Desktop"] = "desktop";
                    FormFactor["Phone"] = "phone";
                    FormFactor["Tablet"] = "tablet";
                })(FormFactor = utils.FormFactor || (utils.FormFactor = {}));
                /**
                 * This class provides an abstract version of com.keyman.Device that is core-friendly,
                 * containing only the information needed by web-core for text processing use, devoid
                 * of any direct references to the DOM.
                 */
                var DeviceSpec = /** @class */ (function () {
                    function DeviceSpec(browser, formFactor, OS, touchable) {
                        switch (browser.toLowerCase()) {
                            case Browser.Chrome:
                            case Browser.Edge:
                            case Browser.Firefox:
                            case Browser.Native:
                            case Browser.Opera:
                            case Browser.Safari:
                                this.browser = browser.toLowerCase();
                                break;
                            default:
                                this.browser = Browser.Other;
                        }
                        switch (formFactor.toLowerCase()) {
                            case FormFactor.Desktop:
                            case FormFactor.Phone:
                            case FormFactor.Tablet:
                                this.formFactor = formFactor.toLowerCase();
                                break;
                            default:
                                throw ("Invalid form factor specified for device: " + formFactor);
                        }
                        switch (OS.toLowerCase()) {
                            case OperatingSystem.Windows.toLowerCase():
                            case OperatingSystem.macOS.toLowerCase():
                            case OperatingSystem.Linux.toLowerCase():
                            case OperatingSystem.Android.toLowerCase():
                            case OperatingSystem.iOS.toLowerCase():
                                this.OS = OS.toLowerCase();
                                break;
                            default:
                                this.OS = OperatingSystem.Other;
                        }
                        this.touchable = touchable;
                    }
                    return DeviceSpec;
                }());
                utils.DeviceSpec = DeviceSpec;
            })(utils = keyman.utils || (keyman.utils = {}));
        })(keyman = com.keyman || (com.keyman = {}));
    })(com || (com = {}));
    // References all utility includes from a single file, making import/export simple.
    ///<reference path="deepCopy.ts" />
    ///<reference path="globalObject.ts" />
    ///<reference path="version.ts" />
    ///<reference path="kmwstring.ts" />
    ///<reference path="deviceSpec.ts" />
    /*
     * Copyright (c) 2018 National Research Council Canada (author: Eddie A. Santos)
     * Copyright (c) 2018 SIL International
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of
     * this software and associated documentation files (the "Software"), to deal in
     * the Software without restriction, including without limitation the rights to
     * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
     * the Software, and to permit persons to whom the Software is furnished to do so,
     * subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */
    var __values = (this && this.__values) || function (o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var models;
    (function (models) {
        /**
         * @file dummy-model.ts
         *
         * Defines the Dummy model, which is used for testing the
         * prediction API exclusively.
         */
        /**
         * The Dummy Model that returns nonsensical, but predictable results.
         */
        var DummyModel = /** @class */ (function () {
            function DummyModel(options) {
                options = options || {};
                // Create a shallow copy of the suggestions;
                // this class mutates the array.
                this._futureSuggestions = options.futureSuggestions
                    ? options.futureSuggestions.slice() : [];
                if (options.punctuation) {
                    this.punctuation = options.punctuation;
                }
            }
            DummyModel.prototype.configure = function (capabilities) {
                this.configuration = {
                    leftContextCodePoints: capabilities.maxLeftContextCodePoints,
                    rightContextCodePoints: capabilities.maxRightContextCodePoints
                };
                return this.configuration;
            };
            DummyModel.prototype.predict = function (transform, context, injectedSuggestions) {
                var makeUniformDistribution = function (suggestions) {
                    var e_1, _a;
                    var distribution = [];
                    var n = suggestions.length;
                    try {
                        for (var suggestions_1 = __values(suggestions), suggestions_1_1 = suggestions_1.next(); !suggestions_1_1.done; suggestions_1_1 = suggestions_1.next()) {
                            var s = suggestions_1_1.value;
                            distribution.push({ sample: s, p: 1 }); // For a dummy model, this is sufficient.  The uniformness is all that matters.
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (suggestions_1_1 && !suggestions_1_1.done && (_a = suggestions_1.return))
                                _a.call(suggestions_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    return distribution;
                };
                if (injectedSuggestions) {
                    return makeUniformDistribution(injectedSuggestions);
                }
                var currentSet = this._futureSuggestions.shift();
                if (!currentSet) {
                    return [];
                }
                else {
                    return makeUniformDistribution(currentSet);
                }
            };
            return DummyModel;
        }());
        models.DummyModel = DummyModel;
        ;
    })(models || (models = {}));
    var wordBreakers;
    (function (wordBreakers) {
        /**
         * Splits ASCII words.
         *
         * @param phrase
         */
        function ascii(phrase) {
            var matchWord = /[A-Za-z0-9']+/g;
            var words = [];
            var match;
            while ((match = matchWord.exec(phrase)) !== null) {
                words.push(new RegExpDerivedSpan(match[0], match.index));
            }
            return words;
        }
        wordBreakers.ascii = ascii;
        /**
         * A concrete span class that derives its properties from the result of
         * RegExp.exec() array.
         */
        var RegExpDerivedSpan = /** @class */ (function () {
            function RegExpDerivedSpan(text, start) {
                this.text = text;
                this.start = start;
            }
            Object.defineProperty(RegExpDerivedSpan.prototype, "length", {
                get: function () {
                    return this.text.length;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RegExpDerivedSpan.prototype, "end", {
                get: function () {
                    return this.start + this.text.length;
                },
                enumerable: true,
                configurable: true
            });
            return RegExpDerivedSpan;
        }());
    })(wordBreakers || (wordBreakers = {}));
    var wordBreakers;
    (function (wordBreakers) {
        var data;
        (function (data) {
            ;
            data.WORD_BREAK_PROPERTY = [
                [/*start*/ 0x0, 0 /* Other */],
                [/*start*/ 0xA, 1 /* LF */],
                [/*start*/ 0xB, 2 /* Newline */],
                [/*start*/ 0xD, 3 /* CR */],
                [/*start*/ 0xE, 0 /* Other */],
                [/*start*/ 0x20, 4 /* WSegSpace */],
                [/*start*/ 0x21, 0 /* Other */],
                [/*start*/ 0x22, 5 /* Double_Quote */],
                [/*start*/ 0x23, 0 /* Other */],
                [/*start*/ 0x27, 6 /* Single_Quote */],
                [/*start*/ 0x28, 0 /* Other */],
                [/*start*/ 0x2C, 7 /* MidNum */],
                [/*start*/ 0x2D, 0 /* Other */],
                [/*start*/ 0x2E, 8 /* MidNumLet */],
                [/*start*/ 0x2F, 0 /* Other */],
                [/*start*/ 0x30, 9 /* Numeric */],
                [/*start*/ 0x3A, 10 /* MidLetter */],
                [/*start*/ 0x3B, 7 /* MidNum */],
                [/*start*/ 0x3C, 0 /* Other */],
                [/*start*/ 0x41, 11 /* ALetter */],
                [/*start*/ 0x5B, 0 /* Other */],
                [/*start*/ 0x5F, 12 /* ExtendNumLet */],
                [/*start*/ 0x60, 0 /* Other */],
                [/*start*/ 0x61, 11 /* ALetter */],
                [/*start*/ 0x7B, 0 /* Other */],
                [/*start*/ 0x85, 2 /* Newline */],
                [/*start*/ 0x86, 0 /* Other */],
                [/*start*/ 0xAA, 11 /* ALetter */],
                [/*start*/ 0xAB, 0 /* Other */],
                [/*start*/ 0xAD, 13 /* Format */],
                [/*start*/ 0xAE, 0 /* Other */],
                [/*start*/ 0xB5, 11 /* ALetter */],
                [/*start*/ 0xB6, 0 /* Other */],
                [/*start*/ 0xB7, 10 /* MidLetter */],
                [/*start*/ 0xB8, 0 /* Other */],
                [/*start*/ 0xBA, 11 /* ALetter */],
                [/*start*/ 0xBB, 0 /* Other */],
                [/*start*/ 0xC0, 11 /* ALetter */],
                [/*start*/ 0xD7, 0 /* Other */],
                [/*start*/ 0xD8, 11 /* ALetter */],
                [/*start*/ 0xF7, 0 /* Other */],
                [/*start*/ 0xF8, 11 /* ALetter */],
                [/*start*/ 0x2D8, 0 /* Other */],
                [/*start*/ 0x2DE, 11 /* ALetter */],
                [/*start*/ 0x300, 14 /* Extend */],
                [/*start*/ 0x370, 11 /* ALetter */],
                [/*start*/ 0x375, 0 /* Other */],
                [/*start*/ 0x376, 11 /* ALetter */],
                [/*start*/ 0x378, 0 /* Other */],
                [/*start*/ 0x37A, 11 /* ALetter */],
                [/*start*/ 0x37E, 7 /* MidNum */],
                [/*start*/ 0x37F, 11 /* ALetter */],
                [/*start*/ 0x380, 0 /* Other */],
                [/*start*/ 0x386, 11 /* ALetter */],
                [/*start*/ 0x387, 10 /* MidLetter */],
                [/*start*/ 0x388, 11 /* ALetter */],
                [/*start*/ 0x38B, 0 /* Other */],
                [/*start*/ 0x38C, 11 /* ALetter */],
                [/*start*/ 0x38D, 0 /* Other */],
                [/*start*/ 0x38E, 11 /* ALetter */],
                [/*start*/ 0x3A2, 0 /* Other */],
                [/*start*/ 0x3A3, 11 /* ALetter */],
                [/*start*/ 0x3F6, 0 /* Other */],
                [/*start*/ 0x3F7, 11 /* ALetter */],
                [/*start*/ 0x482, 0 /* Other */],
                [/*start*/ 0x483, 14 /* Extend */],
                [/*start*/ 0x48A, 11 /* ALetter */],
                [/*start*/ 0x530, 0 /* Other */],
                [/*start*/ 0x531, 11 /* ALetter */],
                [/*start*/ 0x557, 0 /* Other */],
                [/*start*/ 0x559, 11 /* ALetter */],
                [/*start*/ 0x55D, 0 /* Other */],
                [/*start*/ 0x55E, 11 /* ALetter */],
                [/*start*/ 0x55F, 10 /* MidLetter */],
                [/*start*/ 0x560, 11 /* ALetter */],
                [/*start*/ 0x589, 7 /* MidNum */],
                [/*start*/ 0x58A, 11 /* ALetter */],
                [/*start*/ 0x58B, 0 /* Other */],
                [/*start*/ 0x591, 14 /* Extend */],
                [/*start*/ 0x5BE, 0 /* Other */],
                [/*start*/ 0x5BF, 14 /* Extend */],
                [/*start*/ 0x5C0, 0 /* Other */],
                [/*start*/ 0x5C1, 14 /* Extend */],
                [/*start*/ 0x5C3, 0 /* Other */],
                [/*start*/ 0x5C4, 14 /* Extend */],
                [/*start*/ 0x5C6, 0 /* Other */],
                [/*start*/ 0x5C7, 14 /* Extend */],
                [/*start*/ 0x5C8, 0 /* Other */],
                [/*start*/ 0x5D0, 15 /* Hebrew_Letter */],
                [/*start*/ 0x5EB, 0 /* Other */],
                [/*start*/ 0x5EF, 15 /* Hebrew_Letter */],
                [/*start*/ 0x5F3, 11 /* ALetter */],
                [/*start*/ 0x5F4, 10 /* MidLetter */],
                [/*start*/ 0x5F5, 0 /* Other */],
                [/*start*/ 0x600, 13 /* Format */],
                [/*start*/ 0x606, 0 /* Other */],
                [/*start*/ 0x60C, 7 /* MidNum */],
                [/*start*/ 0x60E, 0 /* Other */],
                [/*start*/ 0x610, 14 /* Extend */],
                [/*start*/ 0x61B, 0 /* Other */],
                [/*start*/ 0x61C, 13 /* Format */],
                [/*start*/ 0x61D, 0 /* Other */],
                [/*start*/ 0x620, 11 /* ALetter */],
                [/*start*/ 0x64B, 14 /* Extend */],
                [/*start*/ 0x660, 9 /* Numeric */],
                [/*start*/ 0x66A, 0 /* Other */],
                [/*start*/ 0x66B, 9 /* Numeric */],
                [/*start*/ 0x66C, 7 /* MidNum */],
                [/*start*/ 0x66D, 0 /* Other */],
                [/*start*/ 0x66E, 11 /* ALetter */],
                [/*start*/ 0x670, 14 /* Extend */],
                [/*start*/ 0x671, 11 /* ALetter */],
                [/*start*/ 0x6D4, 0 /* Other */],
                [/*start*/ 0x6D5, 11 /* ALetter */],
                [/*start*/ 0x6D6, 14 /* Extend */],
                [/*start*/ 0x6DD, 13 /* Format */],
                [/*start*/ 0x6DE, 0 /* Other */],
                [/*start*/ 0x6DF, 14 /* Extend */],
                [/*start*/ 0x6E5, 11 /* ALetter */],
                [/*start*/ 0x6E7, 14 /* Extend */],
                [/*start*/ 0x6E9, 0 /* Other */],
                [/*start*/ 0x6EA, 14 /* Extend */],
                [/*start*/ 0x6EE, 11 /* ALetter */],
                [/*start*/ 0x6F0, 9 /* Numeric */],
                [/*start*/ 0x6FA, 11 /* ALetter */],
                [/*start*/ 0x6FD, 0 /* Other */],
                [/*start*/ 0x6FF, 11 /* ALetter */],
                [/*start*/ 0x700, 0 /* Other */],
                [/*start*/ 0x70F, 13 /* Format */],
                [/*start*/ 0x710, 11 /* ALetter */],
                [/*start*/ 0x711, 14 /* Extend */],
                [/*start*/ 0x712, 11 /* ALetter */],
                [/*start*/ 0x730, 14 /* Extend */],
                [/*start*/ 0x74B, 0 /* Other */],
                [/*start*/ 0x74D, 11 /* ALetter */],
                [/*start*/ 0x7A6, 14 /* Extend */],
                [/*start*/ 0x7B1, 11 /* ALetter */],
                [/*start*/ 0x7B2, 0 /* Other */],
                [/*start*/ 0x7C0, 9 /* Numeric */],
                [/*start*/ 0x7CA, 11 /* ALetter */],
                [/*start*/ 0x7EB, 14 /* Extend */],
                [/*start*/ 0x7F4, 11 /* ALetter */],
                [/*start*/ 0x7F6, 0 /* Other */],
                [/*start*/ 0x7F8, 7 /* MidNum */],
                [/*start*/ 0x7F9, 0 /* Other */],
                [/*start*/ 0x7FA, 11 /* ALetter */],
                [/*start*/ 0x7FB, 0 /* Other */],
                [/*start*/ 0x7FD, 14 /* Extend */],
                [/*start*/ 0x7FE, 0 /* Other */],
                [/*start*/ 0x800, 11 /* ALetter */],
                [/*start*/ 0x816, 14 /* Extend */],
                [/*start*/ 0x81A, 11 /* ALetter */],
                [/*start*/ 0x81B, 14 /* Extend */],
                [/*start*/ 0x824, 11 /* ALetter */],
                [/*start*/ 0x825, 14 /* Extend */],
                [/*start*/ 0x828, 11 /* ALetter */],
                [/*start*/ 0x829, 14 /* Extend */],
                [/*start*/ 0x82E, 0 /* Other */],
                [/*start*/ 0x840, 11 /* ALetter */],
                [/*start*/ 0x859, 14 /* Extend */],
                [/*start*/ 0x85C, 0 /* Other */],
                [/*start*/ 0x860, 11 /* ALetter */],
                [/*start*/ 0x86B, 0 /* Other */],
                [/*start*/ 0x8A0, 11 /* ALetter */],
                [/*start*/ 0x8B5, 0 /* Other */],
                [/*start*/ 0x8B6, 11 /* ALetter */],
                [/*start*/ 0x8C8, 0 /* Other */],
                [/*start*/ 0x8D3, 14 /* Extend */],
                [/*start*/ 0x8E2, 13 /* Format */],
                [/*start*/ 0x8E3, 14 /* Extend */],
                [/*start*/ 0x904, 11 /* ALetter */],
                [/*start*/ 0x93A, 14 /* Extend */],
                [/*start*/ 0x93D, 11 /* ALetter */],
                [/*start*/ 0x93E, 14 /* Extend */],
                [/*start*/ 0x950, 11 /* ALetter */],
                [/*start*/ 0x951, 14 /* Extend */],
                [/*start*/ 0x958, 11 /* ALetter */],
                [/*start*/ 0x962, 14 /* Extend */],
                [/*start*/ 0x964, 0 /* Other */],
                [/*start*/ 0x966, 9 /* Numeric */],
                [/*start*/ 0x970, 0 /* Other */],
                [/*start*/ 0x971, 11 /* ALetter */],
                [/*start*/ 0x981, 14 /* Extend */],
                [/*start*/ 0x984, 0 /* Other */],
                [/*start*/ 0x985, 11 /* ALetter */],
                [/*start*/ 0x98D, 0 /* Other */],
                [/*start*/ 0x98F, 11 /* ALetter */],
                [/*start*/ 0x991, 0 /* Other */],
                [/*start*/ 0x993, 11 /* ALetter */],
                [/*start*/ 0x9A9, 0 /* Other */],
                [/*start*/ 0x9AA, 11 /* ALetter */],
                [/*start*/ 0x9B1, 0 /* Other */],
                [/*start*/ 0x9B2, 11 /* ALetter */],
                [/*start*/ 0x9B3, 0 /* Other */],
                [/*start*/ 0x9B6, 11 /* ALetter */],
                [/*start*/ 0x9BA, 0 /* Other */],
                [/*start*/ 0x9BC, 14 /* Extend */],
                [/*start*/ 0x9BD, 11 /* ALetter */],
                [/*start*/ 0x9BE, 14 /* Extend */],
                [/*start*/ 0x9C5, 0 /* Other */],
                [/*start*/ 0x9C7, 14 /* Extend */],
                [/*start*/ 0x9C9, 0 /* Other */],
                [/*start*/ 0x9CB, 14 /* Extend */],
                [/*start*/ 0x9CE, 11 /* ALetter */],
                [/*start*/ 0x9CF, 0 /* Other */],
                [/*start*/ 0x9D7, 14 /* Extend */],
                [/*start*/ 0x9D8, 0 /* Other */],
                [/*start*/ 0x9DC, 11 /* ALetter */],
                [/*start*/ 0x9DE, 0 /* Other */],
                [/*start*/ 0x9DF, 11 /* ALetter */],
                [/*start*/ 0x9E2, 14 /* Extend */],
                [/*start*/ 0x9E4, 0 /* Other */],
                [/*start*/ 0x9E6, 9 /* Numeric */],
                [/*start*/ 0x9F0, 11 /* ALetter */],
                [/*start*/ 0x9F2, 0 /* Other */],
                [/*start*/ 0x9FC, 11 /* ALetter */],
                [/*start*/ 0x9FD, 0 /* Other */],
                [/*start*/ 0x9FE, 14 /* Extend */],
                [/*start*/ 0x9FF, 0 /* Other */],
                [/*start*/ 0xA01, 14 /* Extend */],
                [/*start*/ 0xA04, 0 /* Other */],
                [/*start*/ 0xA05, 11 /* ALetter */],
                [/*start*/ 0xA0B, 0 /* Other */],
                [/*start*/ 0xA0F, 11 /* ALetter */],
                [/*start*/ 0xA11, 0 /* Other */],
                [/*start*/ 0xA13, 11 /* ALetter */],
                [/*start*/ 0xA29, 0 /* Other */],
                [/*start*/ 0xA2A, 11 /* ALetter */],
                [/*start*/ 0xA31, 0 /* Other */],
                [/*start*/ 0xA32, 11 /* ALetter */],
                [/*start*/ 0xA34, 0 /* Other */],
                [/*start*/ 0xA35, 11 /* ALetter */],
                [/*start*/ 0xA37, 0 /* Other */],
                [/*start*/ 0xA38, 11 /* ALetter */],
                [/*start*/ 0xA3A, 0 /* Other */],
                [/*start*/ 0xA3C, 14 /* Extend */],
                [/*start*/ 0xA3D, 0 /* Other */],
                [/*start*/ 0xA3E, 14 /* Extend */],
                [/*start*/ 0xA43, 0 /* Other */],
                [/*start*/ 0xA47, 14 /* Extend */],
                [/*start*/ 0xA49, 0 /* Other */],
                [/*start*/ 0xA4B, 14 /* Extend */],
                [/*start*/ 0xA4E, 0 /* Other */],
                [/*start*/ 0xA51, 14 /* Extend */],
                [/*start*/ 0xA52, 0 /* Other */],
                [/*start*/ 0xA59, 11 /* ALetter */],
                [/*start*/ 0xA5D, 0 /* Other */],
                [/*start*/ 0xA5E, 11 /* ALetter */],
                [/*start*/ 0xA5F, 0 /* Other */],
                [/*start*/ 0xA66, 9 /* Numeric */],
                [/*start*/ 0xA70, 14 /* Extend */],
                [/*start*/ 0xA72, 11 /* ALetter */],
                [/*start*/ 0xA75, 14 /* Extend */],
                [/*start*/ 0xA76, 0 /* Other */],
                [/*start*/ 0xA81, 14 /* Extend */],
                [/*start*/ 0xA84, 0 /* Other */],
                [/*start*/ 0xA85, 11 /* ALetter */],
                [/*start*/ 0xA8E, 0 /* Other */],
                [/*start*/ 0xA8F, 11 /* ALetter */],
                [/*start*/ 0xA92, 0 /* Other */],
                [/*start*/ 0xA93, 11 /* ALetter */],
                [/*start*/ 0xAA9, 0 /* Other */],
                [/*start*/ 0xAAA, 11 /* ALetter */],
                [/*start*/ 0xAB1, 0 /* Other */],
                [/*start*/ 0xAB2, 11 /* ALetter */],
                [/*start*/ 0xAB4, 0 /* Other */],
                [/*start*/ 0xAB5, 11 /* ALetter */],
                [/*start*/ 0xABA, 0 /* Other */],
                [/*start*/ 0xABC, 14 /* Extend */],
                [/*start*/ 0xABD, 11 /* ALetter */],
                [/*start*/ 0xABE, 14 /* Extend */],
                [/*start*/ 0xAC6, 0 /* Other */],
                [/*start*/ 0xAC7, 14 /* Extend */],
                [/*start*/ 0xACA, 0 /* Other */],
                [/*start*/ 0xACB, 14 /* Extend */],
                [/*start*/ 0xACE, 0 /* Other */],
                [/*start*/ 0xAD0, 11 /* ALetter */],
                [/*start*/ 0xAD1, 0 /* Other */],
                [/*start*/ 0xAE0, 11 /* ALetter */],
                [/*start*/ 0xAE2, 14 /* Extend */],
                [/*start*/ 0xAE4, 0 /* Other */],
                [/*start*/ 0xAE6, 9 /* Numeric */],
                [/*start*/ 0xAF0, 0 /* Other */],
                [/*start*/ 0xAF9, 11 /* ALetter */],
                [/*start*/ 0xAFA, 14 /* Extend */],
                [/*start*/ 0xB00, 0 /* Other */],
                [/*start*/ 0xB01, 14 /* Extend */],
                [/*start*/ 0xB04, 0 /* Other */],
                [/*start*/ 0xB05, 11 /* ALetter */],
                [/*start*/ 0xB0D, 0 /* Other */],
                [/*start*/ 0xB0F, 11 /* ALetter */],
                [/*start*/ 0xB11, 0 /* Other */],
                [/*start*/ 0xB13, 11 /* ALetter */],
                [/*start*/ 0xB29, 0 /* Other */],
                [/*start*/ 0xB2A, 11 /* ALetter */],
                [/*start*/ 0xB31, 0 /* Other */],
                [/*start*/ 0xB32, 11 /* ALetter */],
                [/*start*/ 0xB34, 0 /* Other */],
                [/*start*/ 0xB35, 11 /* ALetter */],
                [/*start*/ 0xB3A, 0 /* Other */],
                [/*start*/ 0xB3C, 14 /* Extend */],
                [/*start*/ 0xB3D, 11 /* ALetter */],
                [/*start*/ 0xB3E, 14 /* Extend */],
                [/*start*/ 0xB45, 0 /* Other */],
                [/*start*/ 0xB47, 14 /* Extend */],
                [/*start*/ 0xB49, 0 /* Other */],
                [/*start*/ 0xB4B, 14 /* Extend */],
                [/*start*/ 0xB4E, 0 /* Other */],
                [/*start*/ 0xB55, 14 /* Extend */],
                [/*start*/ 0xB58, 0 /* Other */],
                [/*start*/ 0xB5C, 11 /* ALetter */],
                [/*start*/ 0xB5E, 0 /* Other */],
                [/*start*/ 0xB5F, 11 /* ALetter */],
                [/*start*/ 0xB62, 14 /* Extend */],
                [/*start*/ 0xB64, 0 /* Other */],
                [/*start*/ 0xB66, 9 /* Numeric */],
                [/*start*/ 0xB70, 0 /* Other */],
                [/*start*/ 0xB71, 11 /* ALetter */],
                [/*start*/ 0xB72, 0 /* Other */],
                [/*start*/ 0xB82, 14 /* Extend */],
                [/*start*/ 0xB83, 11 /* ALetter */],
                [/*start*/ 0xB84, 0 /* Other */],
                [/*start*/ 0xB85, 11 /* ALetter */],
                [/*start*/ 0xB8B, 0 /* Other */],
                [/*start*/ 0xB8E, 11 /* ALetter */],
                [/*start*/ 0xB91, 0 /* Other */],
                [/*start*/ 0xB92, 11 /* ALetter */],
                [/*start*/ 0xB96, 0 /* Other */],
                [/*start*/ 0xB99, 11 /* ALetter */],
                [/*start*/ 0xB9B, 0 /* Other */],
                [/*start*/ 0xB9C, 11 /* ALetter */],
                [/*start*/ 0xB9D, 0 /* Other */],
                [/*start*/ 0xB9E, 11 /* ALetter */],
                [/*start*/ 0xBA0, 0 /* Other */],
                [/*start*/ 0xBA3, 11 /* ALetter */],
                [/*start*/ 0xBA5, 0 /* Other */],
                [/*start*/ 0xBA8, 11 /* ALetter */],
                [/*start*/ 0xBAB, 0 /* Other */],
                [/*start*/ 0xBAE, 11 /* ALetter */],
                [/*start*/ 0xBBA, 0 /* Other */],
                [/*start*/ 0xBBE, 14 /* Extend */],
                [/*start*/ 0xBC3, 0 /* Other */],
                [/*start*/ 0xBC6, 14 /* Extend */],
                [/*start*/ 0xBC9, 0 /* Other */],
                [/*start*/ 0xBCA, 14 /* Extend */],
                [/*start*/ 0xBCE, 0 /* Other */],
                [/*start*/ 0xBD0, 11 /* ALetter */],
                [/*start*/ 0xBD1, 0 /* Other */],
                [/*start*/ 0xBD7, 14 /* Extend */],
                [/*start*/ 0xBD8, 0 /* Other */],
                [/*start*/ 0xBE6, 9 /* Numeric */],
                [/*start*/ 0xBF0, 0 /* Other */],
                [/*start*/ 0xC00, 14 /* Extend */],
                [/*start*/ 0xC05, 11 /* ALetter */],
                [/*start*/ 0xC0D, 0 /* Other */],
                [/*start*/ 0xC0E, 11 /* ALetter */],
                [/*start*/ 0xC11, 0 /* Other */],
                [/*start*/ 0xC12, 11 /* ALetter */],
                [/*start*/ 0xC29, 0 /* Other */],
                [/*start*/ 0xC2A, 11 /* ALetter */],
                [/*start*/ 0xC3A, 0 /* Other */],
                [/*start*/ 0xC3D, 11 /* ALetter */],
                [/*start*/ 0xC3E, 14 /* Extend */],
                [/*start*/ 0xC45, 0 /* Other */],
                [/*start*/ 0xC46, 14 /* Extend */],
                [/*start*/ 0xC49, 0 /* Other */],
                [/*start*/ 0xC4A, 14 /* Extend */],
                [/*start*/ 0xC4E, 0 /* Other */],
                [/*start*/ 0xC55, 14 /* Extend */],
                [/*start*/ 0xC57, 0 /* Other */],
                [/*start*/ 0xC58, 11 /* ALetter */],
                [/*start*/ 0xC5B, 0 /* Other */],
                [/*start*/ 0xC60, 11 /* ALetter */],
                [/*start*/ 0xC62, 14 /* Extend */],
                [/*start*/ 0xC64, 0 /* Other */],
                [/*start*/ 0xC66, 9 /* Numeric */],
                [/*start*/ 0xC70, 0 /* Other */],
                [/*start*/ 0xC80, 11 /* ALetter */],
                [/*start*/ 0xC81, 14 /* Extend */],
                [/*start*/ 0xC84, 0 /* Other */],
                [/*start*/ 0xC85, 11 /* ALetter */],
                [/*start*/ 0xC8D, 0 /* Other */],
                [/*start*/ 0xC8E, 11 /* ALetter */],
                [/*start*/ 0xC91, 0 /* Other */],
                [/*start*/ 0xC92, 11 /* ALetter */],
                [/*start*/ 0xCA9, 0 /* Other */],
                [/*start*/ 0xCAA, 11 /* ALetter */],
                [/*start*/ 0xCB4, 0 /* Other */],
                [/*start*/ 0xCB5, 11 /* ALetter */],
                [/*start*/ 0xCBA, 0 /* Other */],
                [/*start*/ 0xCBC, 14 /* Extend */],
                [/*start*/ 0xCBD, 11 /* ALetter */],
                [/*start*/ 0xCBE, 14 /* Extend */],
                [/*start*/ 0xCC5, 0 /* Other */],
                [/*start*/ 0xCC6, 14 /* Extend */],
                [/*start*/ 0xCC9, 0 /* Other */],
                [/*start*/ 0xCCA, 14 /* Extend */],
                [/*start*/ 0xCCE, 0 /* Other */],
                [/*start*/ 0xCD5, 14 /* Extend */],
                [/*start*/ 0xCD7, 0 /* Other */],
                [/*start*/ 0xCDE, 11 /* ALetter */],
                [/*start*/ 0xCDF, 0 /* Other */],
                [/*start*/ 0xCE0, 11 /* ALetter */],
                [/*start*/ 0xCE2, 14 /* Extend */],
                [/*start*/ 0xCE4, 0 /* Other */],
                [/*start*/ 0xCE6, 9 /* Numeric */],
                [/*start*/ 0xCF0, 0 /* Other */],
                [/*start*/ 0xCF1, 11 /* ALetter */],
                [/*start*/ 0xCF3, 0 /* Other */],
                [/*start*/ 0xD00, 14 /* Extend */],
                [/*start*/ 0xD04, 11 /* ALetter */],
                [/*start*/ 0xD0D, 0 /* Other */],
                [/*start*/ 0xD0E, 11 /* ALetter */],
                [/*start*/ 0xD11, 0 /* Other */],
                [/*start*/ 0xD12, 11 /* ALetter */],
                [/*start*/ 0xD3B, 14 /* Extend */],
                [/*start*/ 0xD3D, 11 /* ALetter */],
                [/*start*/ 0xD3E, 14 /* Extend */],
                [/*start*/ 0xD45, 0 /* Other */],
                [/*start*/ 0xD46, 14 /* Extend */],
                [/*start*/ 0xD49, 0 /* Other */],
                [/*start*/ 0xD4A, 14 /* Extend */],
                [/*start*/ 0xD4E, 11 /* ALetter */],
                [/*start*/ 0xD4F, 0 /* Other */],
                [/*start*/ 0xD54, 11 /* ALetter */],
                [/*start*/ 0xD57, 14 /* Extend */],
                [/*start*/ 0xD58, 0 /* Other */],
                [/*start*/ 0xD5F, 11 /* ALetter */],
                [/*start*/ 0xD62, 14 /* Extend */],
                [/*start*/ 0xD64, 0 /* Other */],
                [/*start*/ 0xD66, 9 /* Numeric */],
                [/*start*/ 0xD70, 0 /* Other */],
                [/*start*/ 0xD7A, 11 /* ALetter */],
                [/*start*/ 0xD80, 0 /* Other */],
                [/*start*/ 0xD81, 14 /* Extend */],
                [/*start*/ 0xD84, 0 /* Other */],
                [/*start*/ 0xD85, 11 /* ALetter */],
                [/*start*/ 0xD97, 0 /* Other */],
                [/*start*/ 0xD9A, 11 /* ALetter */],
                [/*start*/ 0xDB2, 0 /* Other */],
                [/*start*/ 0xDB3, 11 /* ALetter */],
                [/*start*/ 0xDBC, 0 /* Other */],
                [/*start*/ 0xDBD, 11 /* ALetter */],
                [/*start*/ 0xDBE, 0 /* Other */],
                [/*start*/ 0xDC0, 11 /* ALetter */],
                [/*start*/ 0xDC7, 0 /* Other */],
                [/*start*/ 0xDCA, 14 /* Extend */],
                [/*start*/ 0xDCB, 0 /* Other */],
                [/*start*/ 0xDCF, 14 /* Extend */],
                [/*start*/ 0xDD5, 0 /* Other */],
                [/*start*/ 0xDD6, 14 /* Extend */],
                [/*start*/ 0xDD7, 0 /* Other */],
                [/*start*/ 0xDD8, 14 /* Extend */],
                [/*start*/ 0xDE0, 0 /* Other */],
                [/*start*/ 0xDE6, 9 /* Numeric */],
                [/*start*/ 0xDF0, 0 /* Other */],
                [/*start*/ 0xDF2, 14 /* Extend */],
                [/*start*/ 0xDF4, 0 /* Other */],
                [/*start*/ 0xE31, 14 /* Extend */],
                [/*start*/ 0xE32, 0 /* Other */],
                [/*start*/ 0xE34, 14 /* Extend */],
                [/*start*/ 0xE3B, 0 /* Other */],
                [/*start*/ 0xE47, 14 /* Extend */],
                [/*start*/ 0xE4F, 0 /* Other */],
                [/*start*/ 0xE50, 9 /* Numeric */],
                [/*start*/ 0xE5A, 0 /* Other */],
                [/*start*/ 0xEB1, 14 /* Extend */],
                [/*start*/ 0xEB2, 0 /* Other */],
                [/*start*/ 0xEB4, 14 /* Extend */],
                [/*start*/ 0xEBD, 0 /* Other */],
                [/*start*/ 0xEC8, 14 /* Extend */],
                [/*start*/ 0xECE, 0 /* Other */],
                [/*start*/ 0xED0, 9 /* Numeric */],
                [/*start*/ 0xEDA, 0 /* Other */],
                [/*start*/ 0xF00, 11 /* ALetter */],
                [/*start*/ 0xF01, 0 /* Other */],
                [/*start*/ 0xF18, 14 /* Extend */],
                [/*start*/ 0xF1A, 0 /* Other */],
                [/*start*/ 0xF20, 9 /* Numeric */],
                [/*start*/ 0xF2A, 0 /* Other */],
                [/*start*/ 0xF35, 14 /* Extend */],
                [/*start*/ 0xF36, 0 /* Other */],
                [/*start*/ 0xF37, 14 /* Extend */],
                [/*start*/ 0xF38, 0 /* Other */],
                [/*start*/ 0xF39, 14 /* Extend */],
                [/*start*/ 0xF3A, 0 /* Other */],
                [/*start*/ 0xF3E, 14 /* Extend */],
                [/*start*/ 0xF40, 11 /* ALetter */],
                [/*start*/ 0xF48, 0 /* Other */],
                [/*start*/ 0xF49, 11 /* ALetter */],
                [/*start*/ 0xF6D, 0 /* Other */],
                [/*start*/ 0xF71, 14 /* Extend */],
                [/*start*/ 0xF85, 0 /* Other */],
                [/*start*/ 0xF86, 14 /* Extend */],
                [/*start*/ 0xF88, 11 /* ALetter */],
                [/*start*/ 0xF8D, 14 /* Extend */],
                [/*start*/ 0xF98, 0 /* Other */],
                [/*start*/ 0xF99, 14 /* Extend */],
                [/*start*/ 0xFBD, 0 /* Other */],
                [/*start*/ 0xFC6, 14 /* Extend */],
                [/*start*/ 0xFC7, 0 /* Other */],
                [/*start*/ 0x102B, 14 /* Extend */],
                [/*start*/ 0x103F, 0 /* Other */],
                [/*start*/ 0x1040, 9 /* Numeric */],
                [/*start*/ 0x104A, 0 /* Other */],
                [/*start*/ 0x1056, 14 /* Extend */],
                [/*start*/ 0x105A, 0 /* Other */],
                [/*start*/ 0x105E, 14 /* Extend */],
                [/*start*/ 0x1061, 0 /* Other */],
                [/*start*/ 0x1062, 14 /* Extend */],
                [/*start*/ 0x1065, 0 /* Other */],
                [/*start*/ 0x1067, 14 /* Extend */],
                [/*start*/ 0x106E, 0 /* Other */],
                [/*start*/ 0x1071, 14 /* Extend */],
                [/*start*/ 0x1075, 0 /* Other */],
                [/*start*/ 0x1082, 14 /* Extend */],
                [/*start*/ 0x108E, 0 /* Other */],
                [/*start*/ 0x108F, 14 /* Extend */],
                [/*start*/ 0x1090, 9 /* Numeric */],
                [/*start*/ 0x109A, 14 /* Extend */],
                [/*start*/ 0x109E, 0 /* Other */],
                [/*start*/ 0x10A0, 11 /* ALetter */],
                [/*start*/ 0x10C6, 0 /* Other */],
                [/*start*/ 0x10C7, 11 /* ALetter */],
                [/*start*/ 0x10C8, 0 /* Other */],
                [/*start*/ 0x10CD, 11 /* ALetter */],
                [/*start*/ 0x10CE, 0 /* Other */],
                [/*start*/ 0x10D0, 11 /* ALetter */],
                [/*start*/ 0x10FB, 0 /* Other */],
                [/*start*/ 0x10FC, 11 /* ALetter */],
                [/*start*/ 0x1249, 0 /* Other */],
                [/*start*/ 0x124A, 11 /* ALetter */],
                [/*start*/ 0x124E, 0 /* Other */],
                [/*start*/ 0x1250, 11 /* ALetter */],
                [/*start*/ 0x1257, 0 /* Other */],
                [/*start*/ 0x1258, 11 /* ALetter */],
                [/*start*/ 0x1259, 0 /* Other */],
                [/*start*/ 0x125A, 11 /* ALetter */],
                [/*start*/ 0x125E, 0 /* Other */],
                [/*start*/ 0x1260, 11 /* ALetter */],
                [/*start*/ 0x1289, 0 /* Other */],
                [/*start*/ 0x128A, 11 /* ALetter */],
                [/*start*/ 0x128E, 0 /* Other */],
                [/*start*/ 0x1290, 11 /* ALetter */],
                [/*start*/ 0x12B1, 0 /* Other */],
                [/*start*/ 0x12B2, 11 /* ALetter */],
                [/*start*/ 0x12B6, 0 /* Other */],
                [/*start*/ 0x12B8, 11 /* ALetter */],
                [/*start*/ 0x12BF, 0 /* Other */],
                [/*start*/ 0x12C0, 11 /* ALetter */],
                [/*start*/ 0x12C1, 0 /* Other */],
                [/*start*/ 0x12C2, 11 /* ALetter */],
                [/*start*/ 0x12C6, 0 /* Other */],
                [/*start*/ 0x12C8, 11 /* ALetter */],
                [/*start*/ 0x12D7, 0 /* Other */],
                [/*start*/ 0x12D8, 11 /* ALetter */],
                [/*start*/ 0x1311, 0 /* Other */],
                [/*start*/ 0x1312, 11 /* ALetter */],
                [/*start*/ 0x1316, 0 /* Other */],
                [/*start*/ 0x1318, 11 /* ALetter */],
                [/*start*/ 0x135B, 0 /* Other */],
                [/*start*/ 0x135D, 14 /* Extend */],
                [/*start*/ 0x1360, 0 /* Other */],
                [/*start*/ 0x1380, 11 /* ALetter */],
                [/*start*/ 0x1390, 0 /* Other */],
                [/*start*/ 0x13A0, 11 /* ALetter */],
                [/*start*/ 0x13F6, 0 /* Other */],
                [/*start*/ 0x13F8, 11 /* ALetter */],
                [/*start*/ 0x13FE, 0 /* Other */],
                [/*start*/ 0x1401, 11 /* ALetter */],
                [/*start*/ 0x166D, 0 /* Other */],
                [/*start*/ 0x166F, 11 /* ALetter */],
                [/*start*/ 0x1680, 4 /* WSegSpace */],
                [/*start*/ 0x1681, 11 /* ALetter */],
                [/*start*/ 0x169B, 0 /* Other */],
                [/*start*/ 0x16A0, 11 /* ALetter */],
                [/*start*/ 0x16EB, 0 /* Other */],
                [/*start*/ 0x16EE, 11 /* ALetter */],
                [/*start*/ 0x16F9, 0 /* Other */],
                [/*start*/ 0x1700, 11 /* ALetter */],
                [/*start*/ 0x170D, 0 /* Other */],
                [/*start*/ 0x170E, 11 /* ALetter */],
                [/*start*/ 0x1712, 14 /* Extend */],
                [/*start*/ 0x1715, 0 /* Other */],
                [/*start*/ 0x1720, 11 /* ALetter */],
                [/*start*/ 0x1732, 14 /* Extend */],
                [/*start*/ 0x1735, 0 /* Other */],
                [/*start*/ 0x1740, 11 /* ALetter */],
                [/*start*/ 0x1752, 14 /* Extend */],
                [/*start*/ 0x1754, 0 /* Other */],
                [/*start*/ 0x1760, 11 /* ALetter */],
                [/*start*/ 0x176D, 0 /* Other */],
                [/*start*/ 0x176E, 11 /* ALetter */],
                [/*start*/ 0x1771, 0 /* Other */],
                [/*start*/ 0x1772, 14 /* Extend */],
                [/*start*/ 0x1774, 0 /* Other */],
                [/*start*/ 0x17B4, 14 /* Extend */],
                [/*start*/ 0x17D4, 0 /* Other */],
                [/*start*/ 0x17DD, 14 /* Extend */],
                [/*start*/ 0x17DE, 0 /* Other */],
                [/*start*/ 0x17E0, 9 /* Numeric */],
                [/*start*/ 0x17EA, 0 /* Other */],
                [/*start*/ 0x180B, 14 /* Extend */],
                [/*start*/ 0x180E, 13 /* Format */],
                [/*start*/ 0x180F, 0 /* Other */],
                [/*start*/ 0x1810, 9 /* Numeric */],
                [/*start*/ 0x181A, 0 /* Other */],
                [/*start*/ 0x1820, 11 /* ALetter */],
                [/*start*/ 0x1879, 0 /* Other */],
                [/*start*/ 0x1880, 11 /* ALetter */],
                [/*start*/ 0x1885, 14 /* Extend */],
                [/*start*/ 0x1887, 11 /* ALetter */],
                [/*start*/ 0x18A9, 14 /* Extend */],
                [/*start*/ 0x18AA, 11 /* ALetter */],
                [/*start*/ 0x18AB, 0 /* Other */],
                [/*start*/ 0x18B0, 11 /* ALetter */],
                [/*start*/ 0x18F6, 0 /* Other */],
                [/*start*/ 0x1900, 11 /* ALetter */],
                [/*start*/ 0x191F, 0 /* Other */],
                [/*start*/ 0x1920, 14 /* Extend */],
                [/*start*/ 0x192C, 0 /* Other */],
                [/*start*/ 0x1930, 14 /* Extend */],
                [/*start*/ 0x193C, 0 /* Other */],
                [/*start*/ 0x1946, 9 /* Numeric */],
                [/*start*/ 0x1950, 0 /* Other */],
                [/*start*/ 0x19D0, 9 /* Numeric */],
                [/*start*/ 0x19DA, 0 /* Other */],
                [/*start*/ 0x1A00, 11 /* ALetter */],
                [/*start*/ 0x1A17, 14 /* Extend */],
                [/*start*/ 0x1A1C, 0 /* Other */],
                [/*start*/ 0x1A55, 14 /* Extend */],
                [/*start*/ 0x1A5F, 0 /* Other */],
                [/*start*/ 0x1A60, 14 /* Extend */],
                [/*start*/ 0x1A7D, 0 /* Other */],
                [/*start*/ 0x1A7F, 14 /* Extend */],
                [/*start*/ 0x1A80, 9 /* Numeric */],
                [/*start*/ 0x1A8A, 0 /* Other */],
                [/*start*/ 0x1A90, 9 /* Numeric */],
                [/*start*/ 0x1A9A, 0 /* Other */],
                [/*start*/ 0x1AB0, 14 /* Extend */],
                [/*start*/ 0x1AC1, 0 /* Other */],
                [/*start*/ 0x1B00, 14 /* Extend */],
                [/*start*/ 0x1B05, 11 /* ALetter */],
                [/*start*/ 0x1B34, 14 /* Extend */],
                [/*start*/ 0x1B45, 11 /* ALetter */],
                [/*start*/ 0x1B4C, 0 /* Other */],
                [/*start*/ 0x1B50, 9 /* Numeric */],
                [/*start*/ 0x1B5A, 0 /* Other */],
                [/*start*/ 0x1B6B, 14 /* Extend */],
                [/*start*/ 0x1B74, 0 /* Other */],
                [/*start*/ 0x1B80, 14 /* Extend */],
                [/*start*/ 0x1B83, 11 /* ALetter */],
                [/*start*/ 0x1BA1, 14 /* Extend */],
                [/*start*/ 0x1BAE, 11 /* ALetter */],
                [/*start*/ 0x1BB0, 9 /* Numeric */],
                [/*start*/ 0x1BBA, 11 /* ALetter */],
                [/*start*/ 0x1BE6, 14 /* Extend */],
                [/*start*/ 0x1BF4, 0 /* Other */],
                [/*start*/ 0x1C00, 11 /* ALetter */],
                [/*start*/ 0x1C24, 14 /* Extend */],
                [/*start*/ 0x1C38, 0 /* Other */],
                [/*start*/ 0x1C40, 9 /* Numeric */],
                [/*start*/ 0x1C4A, 0 /* Other */],
                [/*start*/ 0x1C4D, 11 /* ALetter */],
                [/*start*/ 0x1C50, 9 /* Numeric */],
                [/*start*/ 0x1C5A, 11 /* ALetter */],
                [/*start*/ 0x1C7E, 0 /* Other */],
                [/*start*/ 0x1C80, 11 /* ALetter */],
                [/*start*/ 0x1C89, 0 /* Other */],
                [/*start*/ 0x1C90, 11 /* ALetter */],
                [/*start*/ 0x1CBB, 0 /* Other */],
                [/*start*/ 0x1CBD, 11 /* ALetter */],
                [/*start*/ 0x1CC0, 0 /* Other */],
                [/*start*/ 0x1CD0, 14 /* Extend */],
                [/*start*/ 0x1CD3, 0 /* Other */],
                [/*start*/ 0x1CD4, 14 /* Extend */],
                [/*start*/ 0x1CE9, 11 /* ALetter */],
                [/*start*/ 0x1CED, 14 /* Extend */],
                [/*start*/ 0x1CEE, 11 /* ALetter */],
                [/*start*/ 0x1CF4, 14 /* Extend */],
                [/*start*/ 0x1CF5, 11 /* ALetter */],
                [/*start*/ 0x1CF7, 14 /* Extend */],
                [/*start*/ 0x1CFA, 11 /* ALetter */],
                [/*start*/ 0x1CFB, 0 /* Other */],
                [/*start*/ 0x1D00, 11 /* ALetter */],
                [/*start*/ 0x1DC0, 14 /* Extend */],
                [/*start*/ 0x1DFA, 0 /* Other */],
                [/*start*/ 0x1DFB, 14 /* Extend */],
                [/*start*/ 0x1E00, 11 /* ALetter */],
                [/*start*/ 0x1F16, 0 /* Other */],
                [/*start*/ 0x1F18, 11 /* ALetter */],
                [/*start*/ 0x1F1E, 0 /* Other */],
                [/*start*/ 0x1F20, 11 /* ALetter */],
                [/*start*/ 0x1F46, 0 /* Other */],
                [/*start*/ 0x1F48, 11 /* ALetter */],
                [/*start*/ 0x1F4E, 0 /* Other */],
                [/*start*/ 0x1F50, 11 /* ALetter */],
                [/*start*/ 0x1F58, 0 /* Other */],
                [/*start*/ 0x1F59, 11 /* ALetter */],
                [/*start*/ 0x1F5A, 0 /* Other */],
                [/*start*/ 0x1F5B, 11 /* ALetter */],
                [/*start*/ 0x1F5C, 0 /* Other */],
                [/*start*/ 0x1F5D, 11 /* ALetter */],
                [/*start*/ 0x1F5E, 0 /* Other */],
                [/*start*/ 0x1F5F, 11 /* ALetter */],
                [/*start*/ 0x1F7E, 0 /* Other */],
                [/*start*/ 0x1F80, 11 /* ALetter */],
                [/*start*/ 0x1FB5, 0 /* Other */],
                [/*start*/ 0x1FB6, 11 /* ALetter */],
                [/*start*/ 0x1FBD, 0 /* Other */],
                [/*start*/ 0x1FBE, 11 /* ALetter */],
                [/*start*/ 0x1FBF, 0 /* Other */],
                [/*start*/ 0x1FC2, 11 /* ALetter */],
                [/*start*/ 0x1FC5, 0 /* Other */],
                [/*start*/ 0x1FC6, 11 /* ALetter */],
                [/*start*/ 0x1FCD, 0 /* Other */],
                [/*start*/ 0x1FD0, 11 /* ALetter */],
                [/*start*/ 0x1FD4, 0 /* Other */],
                [/*start*/ 0x1FD6, 11 /* ALetter */],
                [/*start*/ 0x1FDC, 0 /* Other */],
                [/*start*/ 0x1FE0, 11 /* ALetter */],
                [/*start*/ 0x1FED, 0 /* Other */],
                [/*start*/ 0x1FF2, 11 /* ALetter */],
                [/*start*/ 0x1FF5, 0 /* Other */],
                [/*start*/ 0x1FF6, 11 /* ALetter */],
                [/*start*/ 0x1FFD, 0 /* Other */],
                [/*start*/ 0x2000, 4 /* WSegSpace */],
                [/*start*/ 0x2007, 0 /* Other */],
                [/*start*/ 0x2008, 4 /* WSegSpace */],
                [/*start*/ 0x200B, 0 /* Other */],
                [/*start*/ 0x200C, 14 /* Extend */],
                [/*start*/ 0x200D, 16 /* ZWJ */],
                [/*start*/ 0x200E, 13 /* Format */],
                [/*start*/ 0x2010, 0 /* Other */],
                [/*start*/ 0x2018, 8 /* MidNumLet */],
                [/*start*/ 0x201A, 0 /* Other */],
                [/*start*/ 0x2024, 8 /* MidNumLet */],
                [/*start*/ 0x2025, 0 /* Other */],
                [/*start*/ 0x2027, 10 /* MidLetter */],
                [/*start*/ 0x2028, 2 /* Newline */],
                [/*start*/ 0x202A, 13 /* Format */],
                [/*start*/ 0x202F, 12 /* ExtendNumLet */],
                [/*start*/ 0x2030, 0 /* Other */],
                [/*start*/ 0x203F, 12 /* ExtendNumLet */],
                [/*start*/ 0x2041, 0 /* Other */],
                [/*start*/ 0x2044, 7 /* MidNum */],
                [/*start*/ 0x2045, 0 /* Other */],
                [/*start*/ 0x2054, 12 /* ExtendNumLet */],
                [/*start*/ 0x2055, 0 /* Other */],
                [/*start*/ 0x205F, 4 /* WSegSpace */],
                [/*start*/ 0x2060, 13 /* Format */],
                [/*start*/ 0x2065, 0 /* Other */],
                [/*start*/ 0x2066, 13 /* Format */],
                [/*start*/ 0x2070, 0 /* Other */],
                [/*start*/ 0x2071, 11 /* ALetter */],
                [/*start*/ 0x2072, 0 /* Other */],
                [/*start*/ 0x207F, 11 /* ALetter */],
                [/*start*/ 0x2080, 0 /* Other */],
                [/*start*/ 0x2090, 11 /* ALetter */],
                [/*start*/ 0x209D, 0 /* Other */],
                [/*start*/ 0x20D0, 14 /* Extend */],
                [/*start*/ 0x20F1, 0 /* Other */],
                [/*start*/ 0x2102, 11 /* ALetter */],
                [/*start*/ 0x2103, 0 /* Other */],
                [/*start*/ 0x2107, 11 /* ALetter */],
                [/*start*/ 0x2108, 0 /* Other */],
                [/*start*/ 0x210A, 11 /* ALetter */],
                [/*start*/ 0x2114, 0 /* Other */],
                [/*start*/ 0x2115, 11 /* ALetter */],
                [/*start*/ 0x2116, 0 /* Other */],
                [/*start*/ 0x2119, 11 /* ALetter */],
                [/*start*/ 0x211E, 0 /* Other */],
                [/*start*/ 0x2124, 11 /* ALetter */],
                [/*start*/ 0x2125, 0 /* Other */],
                [/*start*/ 0x2126, 11 /* ALetter */],
                [/*start*/ 0x2127, 0 /* Other */],
                [/*start*/ 0x2128, 11 /* ALetter */],
                [/*start*/ 0x2129, 0 /* Other */],
                [/*start*/ 0x212A, 11 /* ALetter */],
                [/*start*/ 0x212E, 0 /* Other */],
                [/*start*/ 0x212F, 11 /* ALetter */],
                [/*start*/ 0x213A, 0 /* Other */],
                [/*start*/ 0x213C, 11 /* ALetter */],
                [/*start*/ 0x2140, 0 /* Other */],
                [/*start*/ 0x2145, 11 /* ALetter */],
                [/*start*/ 0x214A, 0 /* Other */],
                [/*start*/ 0x214E, 11 /* ALetter */],
                [/*start*/ 0x214F, 0 /* Other */],
                [/*start*/ 0x2160, 11 /* ALetter */],
                [/*start*/ 0x2189, 0 /* Other */],
                [/*start*/ 0x24B6, 11 /* ALetter */],
                [/*start*/ 0x24EA, 0 /* Other */],
                [/*start*/ 0x2C00, 11 /* ALetter */],
                [/*start*/ 0x2C2F, 0 /* Other */],
                [/*start*/ 0x2C30, 11 /* ALetter */],
                [/*start*/ 0x2C5F, 0 /* Other */],
                [/*start*/ 0x2C60, 11 /* ALetter */],
                [/*start*/ 0x2CE5, 0 /* Other */],
                [/*start*/ 0x2CEB, 11 /* ALetter */],
                [/*start*/ 0x2CEF, 14 /* Extend */],
                [/*start*/ 0x2CF2, 11 /* ALetter */],
                [/*start*/ 0x2CF4, 0 /* Other */],
                [/*start*/ 0x2D00, 11 /* ALetter */],
                [/*start*/ 0x2D26, 0 /* Other */],
                [/*start*/ 0x2D27, 11 /* ALetter */],
                [/*start*/ 0x2D28, 0 /* Other */],
                [/*start*/ 0x2D2D, 11 /* ALetter */],
                [/*start*/ 0x2D2E, 0 /* Other */],
                [/*start*/ 0x2D30, 11 /* ALetter */],
                [/*start*/ 0x2D68, 0 /* Other */],
                [/*start*/ 0x2D6F, 11 /* ALetter */],
                [/*start*/ 0x2D70, 0 /* Other */],
                [/*start*/ 0x2D7F, 14 /* Extend */],
                [/*start*/ 0x2D80, 11 /* ALetter */],
                [/*start*/ 0x2D97, 0 /* Other */],
                [/*start*/ 0x2DA0, 11 /* ALetter */],
                [/*start*/ 0x2DA7, 0 /* Other */],
                [/*start*/ 0x2DA8, 11 /* ALetter */],
                [/*start*/ 0x2DAF, 0 /* Other */],
                [/*start*/ 0x2DB0, 11 /* ALetter */],
                [/*start*/ 0x2DB7, 0 /* Other */],
                [/*start*/ 0x2DB8, 11 /* ALetter */],
                [/*start*/ 0x2DBF, 0 /* Other */],
                [/*start*/ 0x2DC0, 11 /* ALetter */],
                [/*start*/ 0x2DC7, 0 /* Other */],
                [/*start*/ 0x2DC8, 11 /* ALetter */],
                [/*start*/ 0x2DCF, 0 /* Other */],
                [/*start*/ 0x2DD0, 11 /* ALetter */],
                [/*start*/ 0x2DD7, 0 /* Other */],
                [/*start*/ 0x2DD8, 11 /* ALetter */],
                [/*start*/ 0x2DDF, 0 /* Other */],
                [/*start*/ 0x2DE0, 14 /* Extend */],
                [/*start*/ 0x2E00, 0 /* Other */],
                [/*start*/ 0x2E2F, 11 /* ALetter */],
                [/*start*/ 0x2E30, 0 /* Other */],
                [/*start*/ 0x3000, 4 /* WSegSpace */],
                [/*start*/ 0x3001, 0 /* Other */],
                [/*start*/ 0x3005, 11 /* ALetter */],
                [/*start*/ 0x3006, 0 /* Other */],
                [/*start*/ 0x302A, 14 /* Extend */],
                [/*start*/ 0x3030, 0 /* Other */],
                [/*start*/ 0x3031, 17 /* Katakana */],
                [/*start*/ 0x3036, 0 /* Other */],
                [/*start*/ 0x303B, 11 /* ALetter */],
                [/*start*/ 0x303D, 0 /* Other */],
                [/*start*/ 0x3099, 14 /* Extend */],
                [/*start*/ 0x309B, 17 /* Katakana */],
                [/*start*/ 0x309D, 0 /* Other */],
                [/*start*/ 0x30A0, 17 /* Katakana */],
                [/*start*/ 0x30FB, 0 /* Other */],
                [/*start*/ 0x30FC, 17 /* Katakana */],
                [/*start*/ 0x3100, 0 /* Other */],
                [/*start*/ 0x3105, 11 /* ALetter */],
                [/*start*/ 0x3130, 0 /* Other */],
                [/*start*/ 0x3131, 11 /* ALetter */],
                [/*start*/ 0x318F, 0 /* Other */],
                [/*start*/ 0x31A0, 11 /* ALetter */],
                [/*start*/ 0x31C0, 0 /* Other */],
                [/*start*/ 0x31F0, 17 /* Katakana */],
                [/*start*/ 0x3200, 0 /* Other */],
                [/*start*/ 0x32D0, 17 /* Katakana */],
                [/*start*/ 0x32FF, 0 /* Other */],
                [/*start*/ 0x3300, 17 /* Katakana */],
                [/*start*/ 0x3358, 0 /* Other */],
                [/*start*/ 0xA000, 11 /* ALetter */],
                [/*start*/ 0xA48D, 0 /* Other */],
                [/*start*/ 0xA4D0, 11 /* ALetter */],
                [/*start*/ 0xA4FE, 0 /* Other */],
                [/*start*/ 0xA500, 11 /* ALetter */],
                [/*start*/ 0xA60D, 0 /* Other */],
                [/*start*/ 0xA610, 11 /* ALetter */],
                [/*start*/ 0xA620, 9 /* Numeric */],
                [/*start*/ 0xA62A, 11 /* ALetter */],
                [/*start*/ 0xA62C, 0 /* Other */],
                [/*start*/ 0xA640, 11 /* ALetter */],
                [/*start*/ 0xA66F, 14 /* Extend */],
                [/*start*/ 0xA673, 0 /* Other */],
                [/*start*/ 0xA674, 14 /* Extend */],
                [/*start*/ 0xA67E, 0 /* Other */],
                [/*start*/ 0xA67F, 11 /* ALetter */],
                [/*start*/ 0xA69E, 14 /* Extend */],
                [/*start*/ 0xA6A0, 11 /* ALetter */],
                [/*start*/ 0xA6F0, 14 /* Extend */],
                [/*start*/ 0xA6F2, 0 /* Other */],
                [/*start*/ 0xA708, 11 /* ALetter */],
                [/*start*/ 0xA7C0, 0 /* Other */],
                [/*start*/ 0xA7C2, 11 /* ALetter */],
                [/*start*/ 0xA7CB, 0 /* Other */],
                [/*start*/ 0xA7F5, 11 /* ALetter */],
                [/*start*/ 0xA802, 14 /* Extend */],
                [/*start*/ 0xA803, 11 /* ALetter */],
                [/*start*/ 0xA806, 14 /* Extend */],
                [/*start*/ 0xA807, 11 /* ALetter */],
                [/*start*/ 0xA80B, 14 /* Extend */],
                [/*start*/ 0xA80C, 11 /* ALetter */],
                [/*start*/ 0xA823, 14 /* Extend */],
                [/*start*/ 0xA828, 0 /* Other */],
                [/*start*/ 0xA82C, 14 /* Extend */],
                [/*start*/ 0xA82D, 0 /* Other */],
                [/*start*/ 0xA840, 11 /* ALetter */],
                [/*start*/ 0xA874, 0 /* Other */],
                [/*start*/ 0xA880, 14 /* Extend */],
                [/*start*/ 0xA882, 11 /* ALetter */],
                [/*start*/ 0xA8B4, 14 /* Extend */],
                [/*start*/ 0xA8C6, 0 /* Other */],
                [/*start*/ 0xA8D0, 9 /* Numeric */],
                [/*start*/ 0xA8DA, 0 /* Other */],
                [/*start*/ 0xA8E0, 14 /* Extend */],
                [/*start*/ 0xA8F2, 11 /* ALetter */],
                [/*start*/ 0xA8F8, 0 /* Other */],
                [/*start*/ 0xA8FB, 11 /* ALetter */],
                [/*start*/ 0xA8FC, 0 /* Other */],
                [/*start*/ 0xA8FD, 11 /* ALetter */],
                [/*start*/ 0xA8FF, 14 /* Extend */],
                [/*start*/ 0xA900, 9 /* Numeric */],
                [/*start*/ 0xA90A, 11 /* ALetter */],
                [/*start*/ 0xA926, 14 /* Extend */],
                [/*start*/ 0xA92E, 0 /* Other */],
                [/*start*/ 0xA930, 11 /* ALetter */],
                [/*start*/ 0xA947, 14 /* Extend */],
                [/*start*/ 0xA954, 0 /* Other */],
                [/*start*/ 0xA960, 11 /* ALetter */],
                [/*start*/ 0xA97D, 0 /* Other */],
                [/*start*/ 0xA980, 14 /* Extend */],
                [/*start*/ 0xA984, 11 /* ALetter */],
                [/*start*/ 0xA9B3, 14 /* Extend */],
                [/*start*/ 0xA9C1, 0 /* Other */],
                [/*start*/ 0xA9CF, 11 /* ALetter */],
                [/*start*/ 0xA9D0, 9 /* Numeric */],
                [/*start*/ 0xA9DA, 0 /* Other */],
                [/*start*/ 0xA9E5, 14 /* Extend */],
                [/*start*/ 0xA9E6, 0 /* Other */],
                [/*start*/ 0xA9F0, 9 /* Numeric */],
                [/*start*/ 0xA9FA, 0 /* Other */],
                [/*start*/ 0xAA00, 11 /* ALetter */],
                [/*start*/ 0xAA29, 14 /* Extend */],
                [/*start*/ 0xAA37, 0 /* Other */],
                [/*start*/ 0xAA40, 11 /* ALetter */],
                [/*start*/ 0xAA43, 14 /* Extend */],
                [/*start*/ 0xAA44, 11 /* ALetter */],
                [/*start*/ 0xAA4C, 14 /* Extend */],
                [/*start*/ 0xAA4E, 0 /* Other */],
                [/*start*/ 0xAA50, 9 /* Numeric */],
                [/*start*/ 0xAA5A, 0 /* Other */],
                [/*start*/ 0xAA7B, 14 /* Extend */],
                [/*start*/ 0xAA7E, 0 /* Other */],
                [/*start*/ 0xAAB0, 14 /* Extend */],
                [/*start*/ 0xAAB1, 0 /* Other */],
                [/*start*/ 0xAAB2, 14 /* Extend */],
                [/*start*/ 0xAAB5, 0 /* Other */],
                [/*start*/ 0xAAB7, 14 /* Extend */],
                [/*start*/ 0xAAB9, 0 /* Other */],
                [/*start*/ 0xAABE, 14 /* Extend */],
                [/*start*/ 0xAAC0, 0 /* Other */],
                [/*start*/ 0xAAC1, 14 /* Extend */],
                [/*start*/ 0xAAC2, 0 /* Other */],
                [/*start*/ 0xAAE0, 11 /* ALetter */],
                [/*start*/ 0xAAEB, 14 /* Extend */],
                [/*start*/ 0xAAF0, 0 /* Other */],
                [/*start*/ 0xAAF2, 11 /* ALetter */],
                [/*start*/ 0xAAF5, 14 /* Extend */],
                [/*start*/ 0xAAF7, 0 /* Other */],
                [/*start*/ 0xAB01, 11 /* ALetter */],
                [/*start*/ 0xAB07, 0 /* Other */],
                [/*start*/ 0xAB09, 11 /* ALetter */],
                [/*start*/ 0xAB0F, 0 /* Other */],
                [/*start*/ 0xAB11, 11 /* ALetter */],
                [/*start*/ 0xAB17, 0 /* Other */],
                [/*start*/ 0xAB20, 11 /* ALetter */],
                [/*start*/ 0xAB27, 0 /* Other */],
                [/*start*/ 0xAB28, 11 /* ALetter */],
                [/*start*/ 0xAB2F, 0 /* Other */],
                [/*start*/ 0xAB30, 11 /* ALetter */],
                [/*start*/ 0xAB6A, 0 /* Other */],
                [/*start*/ 0xAB70, 11 /* ALetter */],
                [/*start*/ 0xABE3, 14 /* Extend */],
                [/*start*/ 0xABEB, 0 /* Other */],
                [/*start*/ 0xABEC, 14 /* Extend */],
                [/*start*/ 0xABEE, 0 /* Other */],
                [/*start*/ 0xABF0, 9 /* Numeric */],
                [/*start*/ 0xABFA, 0 /* Other */],
                [/*start*/ 0xAC00, 11 /* ALetter */],
                [/*start*/ 0xD7A4, 0 /* Other */],
                [/*start*/ 0xD7B0, 11 /* ALetter */],
                [/*start*/ 0xD7C7, 0 /* Other */],
                [/*start*/ 0xD7CB, 11 /* ALetter */],
                [/*start*/ 0xD7FC, 0 /* Other */],
                [/*start*/ 0xFB00, 11 /* ALetter */],
                [/*start*/ 0xFB07, 0 /* Other */],
                [/*start*/ 0xFB13, 11 /* ALetter */],
                [/*start*/ 0xFB18, 0 /* Other */],
                [/*start*/ 0xFB1D, 15 /* Hebrew_Letter */],
                [/*start*/ 0xFB1E, 14 /* Extend */],
                [/*start*/ 0xFB1F, 15 /* Hebrew_Letter */],
                [/*start*/ 0xFB29, 0 /* Other */],
                [/*start*/ 0xFB2A, 15 /* Hebrew_Letter */],
                [/*start*/ 0xFB37, 0 /* Other */],
                [/*start*/ 0xFB38, 15 /* Hebrew_Letter */],
                [/*start*/ 0xFB3D, 0 /* Other */],
                [/*start*/ 0xFB3E, 15 /* Hebrew_Letter */],
                [/*start*/ 0xFB3F, 0 /* Other */],
                [/*start*/ 0xFB40, 15 /* Hebrew_Letter */],
                [/*start*/ 0xFB42, 0 /* Other */],
                [/*start*/ 0xFB43, 15 /* Hebrew_Letter */],
                [/*start*/ 0xFB45, 0 /* Other */],
                [/*start*/ 0xFB46, 15 /* Hebrew_Letter */],
                [/*start*/ 0xFB50, 11 /* ALetter */],
                [/*start*/ 0xFBB2, 0 /* Other */],
                [/*start*/ 0xFBD3, 11 /* ALetter */],
                [/*start*/ 0xFD3E, 0 /* Other */],
                [/*start*/ 0xFD50, 11 /* ALetter */],
                [/*start*/ 0xFD90, 0 /* Other */],
                [/*start*/ 0xFD92, 11 /* ALetter */],
                [/*start*/ 0xFDC8, 0 /* Other */],
                [/*start*/ 0xFDF0, 11 /* ALetter */],
                [/*start*/ 0xFDFC, 0 /* Other */],
                [/*start*/ 0xFE00, 14 /* Extend */],
                [/*start*/ 0xFE10, 7 /* MidNum */],
                [/*start*/ 0xFE11, 0 /* Other */],
                [/*start*/ 0xFE13, 10 /* MidLetter */],
                [/*start*/ 0xFE14, 7 /* MidNum */],
                [/*start*/ 0xFE15, 0 /* Other */],
                [/*start*/ 0xFE20, 14 /* Extend */],
                [/*start*/ 0xFE30, 0 /* Other */],
                [/*start*/ 0xFE33, 12 /* ExtendNumLet */],
                [/*start*/ 0xFE35, 0 /* Other */],
                [/*start*/ 0xFE4D, 12 /* ExtendNumLet */],
                [/*start*/ 0xFE50, 7 /* MidNum */],
                [/*start*/ 0xFE51, 0 /* Other */],
                [/*start*/ 0xFE52, 8 /* MidNumLet */],
                [/*start*/ 0xFE53, 0 /* Other */],
                [/*start*/ 0xFE54, 7 /* MidNum */],
                [/*start*/ 0xFE55, 10 /* MidLetter */],
                [/*start*/ 0xFE56, 0 /* Other */],
                [/*start*/ 0xFE70, 11 /* ALetter */],
                [/*start*/ 0xFE75, 0 /* Other */],
                [/*start*/ 0xFE76, 11 /* ALetter */],
                [/*start*/ 0xFEFD, 0 /* Other */],
                [/*start*/ 0xFEFF, 13 /* Format */],
                [/*start*/ 0xFF00, 0 /* Other */],
                [/*start*/ 0xFF07, 8 /* MidNumLet */],
                [/*start*/ 0xFF08, 0 /* Other */],
                [/*start*/ 0xFF0C, 7 /* MidNum */],
                [/*start*/ 0xFF0D, 0 /* Other */],
                [/*start*/ 0xFF0E, 8 /* MidNumLet */],
                [/*start*/ 0xFF0F, 0 /* Other */],
                [/*start*/ 0xFF10, 9 /* Numeric */],
                [/*start*/ 0xFF1A, 10 /* MidLetter */],
                [/*start*/ 0xFF1B, 7 /* MidNum */],
                [/*start*/ 0xFF1C, 0 /* Other */],
                [/*start*/ 0xFF21, 11 /* ALetter */],
                [/*start*/ 0xFF3B, 0 /* Other */],
                [/*start*/ 0xFF3F, 12 /* ExtendNumLet */],
                [/*start*/ 0xFF40, 0 /* Other */],
                [/*start*/ 0xFF41, 11 /* ALetter */],
                [/*start*/ 0xFF5B, 0 /* Other */],
                [/*start*/ 0xFF66, 17 /* Katakana */],
                [/*start*/ 0xFF9E, 14 /* Extend */],
                [/*start*/ 0xFFA0, 11 /* ALetter */],
                [/*start*/ 0xFFBF, 0 /* Other */],
                [/*start*/ 0xFFC2, 11 /* ALetter */],
                [/*start*/ 0xFFC8, 0 /* Other */],
                [/*start*/ 0xFFCA, 11 /* ALetter */],
                [/*start*/ 0xFFD0, 0 /* Other */],
                [/*start*/ 0xFFD2, 11 /* ALetter */],
                [/*start*/ 0xFFD8, 0 /* Other */],
                [/*start*/ 0xFFDA, 11 /* ALetter */],
                [/*start*/ 0xFFDD, 0 /* Other */],
                [/*start*/ 0xFFF9, 13 /* Format */],
                [/*start*/ 0xFFFC, 0 /* Other */],
                [/*start*/ 0x10000, 11 /* ALetter */],
                [/*start*/ 0x1000C, 0 /* Other */],
                [/*start*/ 0x1000D, 11 /* ALetter */],
                [/*start*/ 0x10027, 0 /* Other */],
                [/*start*/ 0x10028, 11 /* ALetter */],
                [/*start*/ 0x1003B, 0 /* Other */],
                [/*start*/ 0x1003C, 11 /* ALetter */],
                [/*start*/ 0x1003E, 0 /* Other */],
                [/*start*/ 0x1003F, 11 /* ALetter */],
                [/*start*/ 0x1004E, 0 /* Other */],
                [/*start*/ 0x10050, 11 /* ALetter */],
                [/*start*/ 0x1005E, 0 /* Other */],
                [/*start*/ 0x10080, 11 /* ALetter */],
                [/*start*/ 0x100FB, 0 /* Other */],
                [/*start*/ 0x10140, 11 /* ALetter */],
                [/*start*/ 0x10175, 0 /* Other */],
                [/*start*/ 0x101FD, 14 /* Extend */],
                [/*start*/ 0x101FE, 0 /* Other */],
                [/*start*/ 0x10280, 11 /* ALetter */],
                [/*start*/ 0x1029D, 0 /* Other */],
                [/*start*/ 0x102A0, 11 /* ALetter */],
                [/*start*/ 0x102D1, 0 /* Other */],
                [/*start*/ 0x102E0, 14 /* Extend */],
                [/*start*/ 0x102E1, 0 /* Other */],
                [/*start*/ 0x10300, 11 /* ALetter */],
                [/*start*/ 0x10320, 0 /* Other */],
                [/*start*/ 0x1032D, 11 /* ALetter */],
                [/*start*/ 0x1034B, 0 /* Other */],
                [/*start*/ 0x10350, 11 /* ALetter */],
                [/*start*/ 0x10376, 14 /* Extend */],
                [/*start*/ 0x1037B, 0 /* Other */],
                [/*start*/ 0x10380, 11 /* ALetter */],
                [/*start*/ 0x1039E, 0 /* Other */],
                [/*start*/ 0x103A0, 11 /* ALetter */],
                [/*start*/ 0x103C4, 0 /* Other */],
                [/*start*/ 0x103C8, 11 /* ALetter */],
                [/*start*/ 0x103D0, 0 /* Other */],
                [/*start*/ 0x103D1, 11 /* ALetter */],
                [/*start*/ 0x103D6, 0 /* Other */],
                [/*start*/ 0x10400, 11 /* ALetter */],
                [/*start*/ 0x1049E, 0 /* Other */],
                [/*start*/ 0x104A0, 9 /* Numeric */],
                [/*start*/ 0x104AA, 0 /* Other */],
                [/*start*/ 0x104B0, 11 /* ALetter */],
                [/*start*/ 0x104D4, 0 /* Other */],
                [/*start*/ 0x104D8, 11 /* ALetter */],
                [/*start*/ 0x104FC, 0 /* Other */],
                [/*start*/ 0x10500, 11 /* ALetter */],
                [/*start*/ 0x10528, 0 /* Other */],
                [/*start*/ 0x10530, 11 /* ALetter */],
                [/*start*/ 0x10564, 0 /* Other */],
                [/*start*/ 0x10600, 11 /* ALetter */],
                [/*start*/ 0x10737, 0 /* Other */],
                [/*start*/ 0x10740, 11 /* ALetter */],
                [/*start*/ 0x10756, 0 /* Other */],
                [/*start*/ 0x10760, 11 /* ALetter */],
                [/*start*/ 0x10768, 0 /* Other */],
                [/*start*/ 0x10800, 11 /* ALetter */],
                [/*start*/ 0x10806, 0 /* Other */],
                [/*start*/ 0x10808, 11 /* ALetter */],
                [/*start*/ 0x10809, 0 /* Other */],
                [/*start*/ 0x1080A, 11 /* ALetter */],
                [/*start*/ 0x10836, 0 /* Other */],
                [/*start*/ 0x10837, 11 /* ALetter */],
                [/*start*/ 0x10839, 0 /* Other */],
                [/*start*/ 0x1083C, 11 /* ALetter */],
                [/*start*/ 0x1083D, 0 /* Other */],
                [/*start*/ 0x1083F, 11 /* ALetter */],
                [/*start*/ 0x10856, 0 /* Other */],
                [/*start*/ 0x10860, 11 /* ALetter */],
                [/*start*/ 0x10877, 0 /* Other */],
                [/*start*/ 0x10880, 11 /* ALetter */],
                [/*start*/ 0x1089F, 0 /* Other */],
                [/*start*/ 0x108E0, 11 /* ALetter */],
                [/*start*/ 0x108F3, 0 /* Other */],
                [/*start*/ 0x108F4, 11 /* ALetter */],
                [/*start*/ 0x108F6, 0 /* Other */],
                [/*start*/ 0x10900, 11 /* ALetter */],
                [/*start*/ 0x10916, 0 /* Other */],
                [/*start*/ 0x10920, 11 /* ALetter */],
                [/*start*/ 0x1093A, 0 /* Other */],
                [/*start*/ 0x10980, 11 /* ALetter */],
                [/*start*/ 0x109B8, 0 /* Other */],
                [/*start*/ 0x109BE, 11 /* ALetter */],
                [/*start*/ 0x109C0, 0 /* Other */],
                [/*start*/ 0x10A00, 11 /* ALetter */],
                [/*start*/ 0x10A01, 14 /* Extend */],
                [/*start*/ 0x10A04, 0 /* Other */],
                [/*start*/ 0x10A05, 14 /* Extend */],
                [/*start*/ 0x10A07, 0 /* Other */],
                [/*start*/ 0x10A0C, 14 /* Extend */],
                [/*start*/ 0x10A10, 11 /* ALetter */],
                [/*start*/ 0x10A14, 0 /* Other */],
                [/*start*/ 0x10A15, 11 /* ALetter */],
                [/*start*/ 0x10A18, 0 /* Other */],
                [/*start*/ 0x10A19, 11 /* ALetter */],
                [/*start*/ 0x10A36, 0 /* Other */],
                [/*start*/ 0x10A38, 14 /* Extend */],
                [/*start*/ 0x10A3B, 0 /* Other */],
                [/*start*/ 0x10A3F, 14 /* Extend */],
                [/*start*/ 0x10A40, 0 /* Other */],
                [/*start*/ 0x10A60, 11 /* ALetter */],
                [/*start*/ 0x10A7D, 0 /* Other */],
                [/*start*/ 0x10A80, 11 /* ALetter */],
                [/*start*/ 0x10A9D, 0 /* Other */],
                [/*start*/ 0x10AC0, 11 /* ALetter */],
                [/*start*/ 0x10AC8, 0 /* Other */],
                [/*start*/ 0x10AC9, 11 /* ALetter */],
                [/*start*/ 0x10AE5, 14 /* Extend */],
                [/*start*/ 0x10AE7, 0 /* Other */],
                [/*start*/ 0x10B00, 11 /* ALetter */],
                [/*start*/ 0x10B36, 0 /* Other */],
                [/*start*/ 0x10B40, 11 /* ALetter */],
                [/*start*/ 0x10B56, 0 /* Other */],
                [/*start*/ 0x10B60, 11 /* ALetter */],
                [/*start*/ 0x10B73, 0 /* Other */],
                [/*start*/ 0x10B80, 11 /* ALetter */],
                [/*start*/ 0x10B92, 0 /* Other */],
                [/*start*/ 0x10C00, 11 /* ALetter */],
                [/*start*/ 0x10C49, 0 /* Other */],
                [/*start*/ 0x10C80, 11 /* ALetter */],
                [/*start*/ 0x10CB3, 0 /* Other */],
                [/*start*/ 0x10CC0, 11 /* ALetter */],
                [/*start*/ 0x10CF3, 0 /* Other */],
                [/*start*/ 0x10D00, 11 /* ALetter */],
                [/*start*/ 0x10D24, 14 /* Extend */],
                [/*start*/ 0x10D28, 0 /* Other */],
                [/*start*/ 0x10D30, 9 /* Numeric */],
                [/*start*/ 0x10D3A, 0 /* Other */],
                [/*start*/ 0x10E80, 11 /* ALetter */],
                [/*start*/ 0x10EAA, 0 /* Other */],
                [/*start*/ 0x10EAB, 14 /* Extend */],
                [/*start*/ 0x10EAD, 0 /* Other */],
                [/*start*/ 0x10EB0, 11 /* ALetter */],
                [/*start*/ 0x10EB2, 0 /* Other */],
                [/*start*/ 0x10F00, 11 /* ALetter */],
                [/*start*/ 0x10F1D, 0 /* Other */],
                [/*start*/ 0x10F27, 11 /* ALetter */],
                [/*start*/ 0x10F28, 0 /* Other */],
                [/*start*/ 0x10F30, 11 /* ALetter */],
                [/*start*/ 0x10F46, 14 /* Extend */],
                [/*start*/ 0x10F51, 0 /* Other */],
                [/*start*/ 0x10FB0, 11 /* ALetter */],
                [/*start*/ 0x10FC5, 0 /* Other */],
                [/*start*/ 0x10FE0, 11 /* ALetter */],
                [/*start*/ 0x10FF7, 0 /* Other */],
                [/*start*/ 0x11000, 14 /* Extend */],
                [/*start*/ 0x11003, 11 /* ALetter */],
                [/*start*/ 0x11038, 14 /* Extend */],
                [/*start*/ 0x11047, 0 /* Other */],
                [/*start*/ 0x11066, 9 /* Numeric */],
                [/*start*/ 0x11070, 0 /* Other */],
                [/*start*/ 0x1107F, 14 /* Extend */],
                [/*start*/ 0x11083, 11 /* ALetter */],
                [/*start*/ 0x110B0, 14 /* Extend */],
                [/*start*/ 0x110BB, 0 /* Other */],
                [/*start*/ 0x110BD, 13 /* Format */],
                [/*start*/ 0x110BE, 0 /* Other */],
                [/*start*/ 0x110CD, 13 /* Format */],
                [/*start*/ 0x110CE, 0 /* Other */],
                [/*start*/ 0x110D0, 11 /* ALetter */],
                [/*start*/ 0x110E9, 0 /* Other */],
                [/*start*/ 0x110F0, 9 /* Numeric */],
                [/*start*/ 0x110FA, 0 /* Other */],
                [/*start*/ 0x11100, 14 /* Extend */],
                [/*start*/ 0x11103, 11 /* ALetter */],
                [/*start*/ 0x11127, 14 /* Extend */],
                [/*start*/ 0x11135, 0 /* Other */],
                [/*start*/ 0x11136, 9 /* Numeric */],
                [/*start*/ 0x11140, 0 /* Other */],
                [/*start*/ 0x11144, 11 /* ALetter */],
                [/*start*/ 0x11145, 14 /* Extend */],
                [/*start*/ 0x11147, 11 /* ALetter */],
                [/*start*/ 0x11148, 0 /* Other */],
                [/*start*/ 0x11150, 11 /* ALetter */],
                [/*start*/ 0x11173, 14 /* Extend */],
                [/*start*/ 0x11174, 0 /* Other */],
                [/*start*/ 0x11176, 11 /* ALetter */],
                [/*start*/ 0x11177, 0 /* Other */],
                [/*start*/ 0x11180, 14 /* Extend */],
                [/*start*/ 0x11183, 11 /* ALetter */],
                [/*start*/ 0x111B3, 14 /* Extend */],
                [/*start*/ 0x111C1, 11 /* ALetter */],
                [/*start*/ 0x111C5, 0 /* Other */],
                [/*start*/ 0x111C9, 14 /* Extend */],
                [/*start*/ 0x111CD, 0 /* Other */],
                [/*start*/ 0x111CE, 14 /* Extend */],
                [/*start*/ 0x111D0, 9 /* Numeric */],
                [/*start*/ 0x111DA, 11 /* ALetter */],
                [/*start*/ 0x111DB, 0 /* Other */],
                [/*start*/ 0x111DC, 11 /* ALetter */],
                [/*start*/ 0x111DD, 0 /* Other */],
                [/*start*/ 0x11200, 11 /* ALetter */],
                [/*start*/ 0x11212, 0 /* Other */],
                [/*start*/ 0x11213, 11 /* ALetter */],
                [/*start*/ 0x1122C, 14 /* Extend */],
                [/*start*/ 0x11238, 0 /* Other */],
                [/*start*/ 0x1123E, 14 /* Extend */],
                [/*start*/ 0x1123F, 0 /* Other */],
                [/*start*/ 0x11280, 11 /* ALetter */],
                [/*start*/ 0x11287, 0 /* Other */],
                [/*start*/ 0x11288, 11 /* ALetter */],
                [/*start*/ 0x11289, 0 /* Other */],
                [/*start*/ 0x1128A, 11 /* ALetter */],
                [/*start*/ 0x1128E, 0 /* Other */],
                [/*start*/ 0x1128F, 11 /* ALetter */],
                [/*start*/ 0x1129E, 0 /* Other */],
                [/*start*/ 0x1129F, 11 /* ALetter */],
                [/*start*/ 0x112A9, 0 /* Other */],
                [/*start*/ 0x112B0, 11 /* ALetter */],
                [/*start*/ 0x112DF, 14 /* Extend */],
                [/*start*/ 0x112EB, 0 /* Other */],
                [/*start*/ 0x112F0, 9 /* Numeric */],
                [/*start*/ 0x112FA, 0 /* Other */],
                [/*start*/ 0x11300, 14 /* Extend */],
                [/*start*/ 0x11304, 0 /* Other */],
                [/*start*/ 0x11305, 11 /* ALetter */],
                [/*start*/ 0x1130D, 0 /* Other */],
                [/*start*/ 0x1130F, 11 /* ALetter */],
                [/*start*/ 0x11311, 0 /* Other */],
                [/*start*/ 0x11313, 11 /* ALetter */],
                [/*start*/ 0x11329, 0 /* Other */],
                [/*start*/ 0x1132A, 11 /* ALetter */],
                [/*start*/ 0x11331, 0 /* Other */],
                [/*start*/ 0x11332, 11 /* ALetter */],
                [/*start*/ 0x11334, 0 /* Other */],
                [/*start*/ 0x11335, 11 /* ALetter */],
                [/*start*/ 0x1133A, 0 /* Other */],
                [/*start*/ 0x1133B, 14 /* Extend */],
                [/*start*/ 0x1133D, 11 /* ALetter */],
                [/*start*/ 0x1133E, 14 /* Extend */],
                [/*start*/ 0x11345, 0 /* Other */],
                [/*start*/ 0x11347, 14 /* Extend */],
                [/*start*/ 0x11349, 0 /* Other */],
                [/*start*/ 0x1134B, 14 /* Extend */],
                [/*start*/ 0x1134E, 0 /* Other */],
                [/*start*/ 0x11350, 11 /* ALetter */],
                [/*start*/ 0x11351, 0 /* Other */],
                [/*start*/ 0x11357, 14 /* Extend */],
                [/*start*/ 0x11358, 0 /* Other */],
                [/*start*/ 0x1135D, 11 /* ALetter */],
                [/*start*/ 0x11362, 14 /* Extend */],
                [/*start*/ 0x11364, 0 /* Other */],
                [/*start*/ 0x11366, 14 /* Extend */],
                [/*start*/ 0x1136D, 0 /* Other */],
                [/*start*/ 0x11370, 14 /* Extend */],
                [/*start*/ 0x11375, 0 /* Other */],
                [/*start*/ 0x11400, 11 /* ALetter */],
                [/*start*/ 0x11435, 14 /* Extend */],
                [/*start*/ 0x11447, 11 /* ALetter */],
                [/*start*/ 0x1144B, 0 /* Other */],
                [/*start*/ 0x11450, 9 /* Numeric */],
                [/*start*/ 0x1145A, 0 /* Other */],
                [/*start*/ 0x1145E, 14 /* Extend */],
                [/*start*/ 0x1145F, 11 /* ALetter */],
                [/*start*/ 0x11462, 0 /* Other */],
                [/*start*/ 0x11480, 11 /* ALetter */],
                [/*start*/ 0x114B0, 14 /* Extend */],
                [/*start*/ 0x114C4, 11 /* ALetter */],
                [/*start*/ 0x114C6, 0 /* Other */],
                [/*start*/ 0x114C7, 11 /* ALetter */],
                [/*start*/ 0x114C8, 0 /* Other */],
                [/*start*/ 0x114D0, 9 /* Numeric */],
                [/*start*/ 0x114DA, 0 /* Other */],
                [/*start*/ 0x11580, 11 /* ALetter */],
                [/*start*/ 0x115AF, 14 /* Extend */],
                [/*start*/ 0x115B6, 0 /* Other */],
                [/*start*/ 0x115B8, 14 /* Extend */],
                [/*start*/ 0x115C1, 0 /* Other */],
                [/*start*/ 0x115D8, 11 /* ALetter */],
                [/*start*/ 0x115DC, 14 /* Extend */],
                [/*start*/ 0x115DE, 0 /* Other */],
                [/*start*/ 0x11600, 11 /* ALetter */],
                [/*start*/ 0x11630, 14 /* Extend */],
                [/*start*/ 0x11641, 0 /* Other */],
                [/*start*/ 0x11644, 11 /* ALetter */],
                [/*start*/ 0x11645, 0 /* Other */],
                [/*start*/ 0x11650, 9 /* Numeric */],
                [/*start*/ 0x1165A, 0 /* Other */],
                [/*start*/ 0x11680, 11 /* ALetter */],
                [/*start*/ 0x116AB, 14 /* Extend */],
                [/*start*/ 0x116B8, 11 /* ALetter */],
                [/*start*/ 0x116B9, 0 /* Other */],
                [/*start*/ 0x116C0, 9 /* Numeric */],
                [/*start*/ 0x116CA, 0 /* Other */],
                [/*start*/ 0x1171D, 14 /* Extend */],
                [/*start*/ 0x1172C, 0 /* Other */],
                [/*start*/ 0x11730, 9 /* Numeric */],
                [/*start*/ 0x1173A, 0 /* Other */],
                [/*start*/ 0x11800, 11 /* ALetter */],
                [/*start*/ 0x1182C, 14 /* Extend */],
                [/*start*/ 0x1183B, 0 /* Other */],
                [/*start*/ 0x118A0, 11 /* ALetter */],
                [/*start*/ 0x118E0, 9 /* Numeric */],
                [/*start*/ 0x118EA, 0 /* Other */],
                [/*start*/ 0x118FF, 11 /* ALetter */],
                [/*start*/ 0x11907, 0 /* Other */],
                [/*start*/ 0x11909, 11 /* ALetter */],
                [/*start*/ 0x1190A, 0 /* Other */],
                [/*start*/ 0x1190C, 11 /* ALetter */],
                [/*start*/ 0x11914, 0 /* Other */],
                [/*start*/ 0x11915, 11 /* ALetter */],
                [/*start*/ 0x11917, 0 /* Other */],
                [/*start*/ 0x11918, 11 /* ALetter */],
                [/*start*/ 0x11930, 14 /* Extend */],
                [/*start*/ 0x11936, 0 /* Other */],
                [/*start*/ 0x11937, 14 /* Extend */],
                [/*start*/ 0x11939, 0 /* Other */],
                [/*start*/ 0x1193B, 14 /* Extend */],
                [/*start*/ 0x1193F, 11 /* ALetter */],
                [/*start*/ 0x11940, 14 /* Extend */],
                [/*start*/ 0x11941, 11 /* ALetter */],
                [/*start*/ 0x11942, 14 /* Extend */],
                [/*start*/ 0x11944, 0 /* Other */],
                [/*start*/ 0x11950, 9 /* Numeric */],
                [/*start*/ 0x1195A, 0 /* Other */],
                [/*start*/ 0x119A0, 11 /* ALetter */],
                [/*start*/ 0x119A8, 0 /* Other */],
                [/*start*/ 0x119AA, 11 /* ALetter */],
                [/*start*/ 0x119D1, 14 /* Extend */],
                [/*start*/ 0x119D8, 0 /* Other */],
                [/*start*/ 0x119DA, 14 /* Extend */],
                [/*start*/ 0x119E1, 11 /* ALetter */],
                [/*start*/ 0x119E2, 0 /* Other */],
                [/*start*/ 0x119E3, 11 /* ALetter */],
                [/*start*/ 0x119E4, 14 /* Extend */],
                [/*start*/ 0x119E5, 0 /* Other */],
                [/*start*/ 0x11A00, 11 /* ALetter */],
                [/*start*/ 0x11A01, 14 /* Extend */],
                [/*start*/ 0x11A0B, 11 /* ALetter */],
                [/*start*/ 0x11A33, 14 /* Extend */],
                [/*start*/ 0x11A3A, 11 /* ALetter */],
                [/*start*/ 0x11A3B, 14 /* Extend */],
                [/*start*/ 0x11A3F, 0 /* Other */],
                [/*start*/ 0x11A47, 14 /* Extend */],
                [/*start*/ 0x11A48, 0 /* Other */],
                [/*start*/ 0x11A50, 11 /* ALetter */],
                [/*start*/ 0x11A51, 14 /* Extend */],
                [/*start*/ 0x11A5C, 11 /* ALetter */],
                [/*start*/ 0x11A8A, 14 /* Extend */],
                [/*start*/ 0x11A9A, 0 /* Other */],
                [/*start*/ 0x11A9D, 11 /* ALetter */],
                [/*start*/ 0x11A9E, 0 /* Other */],
                [/*start*/ 0x11AC0, 11 /* ALetter */],
                [/*start*/ 0x11AF9, 0 /* Other */],
                [/*start*/ 0x11C00, 11 /* ALetter */],
                [/*start*/ 0x11C09, 0 /* Other */],
                [/*start*/ 0x11C0A, 11 /* ALetter */],
                [/*start*/ 0x11C2F, 14 /* Extend */],
                [/*start*/ 0x11C37, 0 /* Other */],
                [/*start*/ 0x11C38, 14 /* Extend */],
                [/*start*/ 0x11C40, 11 /* ALetter */],
                [/*start*/ 0x11C41, 0 /* Other */],
                [/*start*/ 0x11C50, 9 /* Numeric */],
                [/*start*/ 0x11C5A, 0 /* Other */],
                [/*start*/ 0x11C72, 11 /* ALetter */],
                [/*start*/ 0x11C90, 0 /* Other */],
                [/*start*/ 0x11C92, 14 /* Extend */],
                [/*start*/ 0x11CA8, 0 /* Other */],
                [/*start*/ 0x11CA9, 14 /* Extend */],
                [/*start*/ 0x11CB7, 0 /* Other */],
                [/*start*/ 0x11D00, 11 /* ALetter */],
                [/*start*/ 0x11D07, 0 /* Other */],
                [/*start*/ 0x11D08, 11 /* ALetter */],
                [/*start*/ 0x11D0A, 0 /* Other */],
                [/*start*/ 0x11D0B, 11 /* ALetter */],
                [/*start*/ 0x11D31, 14 /* Extend */],
                [/*start*/ 0x11D37, 0 /* Other */],
                [/*start*/ 0x11D3A, 14 /* Extend */],
                [/*start*/ 0x11D3B, 0 /* Other */],
                [/*start*/ 0x11D3C, 14 /* Extend */],
                [/*start*/ 0x11D3E, 0 /* Other */],
                [/*start*/ 0x11D3F, 14 /* Extend */],
                [/*start*/ 0x11D46, 11 /* ALetter */],
                [/*start*/ 0x11D47, 14 /* Extend */],
                [/*start*/ 0x11D48, 0 /* Other */],
                [/*start*/ 0x11D50, 9 /* Numeric */],
                [/*start*/ 0x11D5A, 0 /* Other */],
                [/*start*/ 0x11D60, 11 /* ALetter */],
                [/*start*/ 0x11D66, 0 /* Other */],
                [/*start*/ 0x11D67, 11 /* ALetter */],
                [/*start*/ 0x11D69, 0 /* Other */],
                [/*start*/ 0x11D6A, 11 /* ALetter */],
                [/*start*/ 0x11D8A, 14 /* Extend */],
                [/*start*/ 0x11D8F, 0 /* Other */],
                [/*start*/ 0x11D90, 14 /* Extend */],
                [/*start*/ 0x11D92, 0 /* Other */],
                [/*start*/ 0x11D93, 14 /* Extend */],
                [/*start*/ 0x11D98, 11 /* ALetter */],
                [/*start*/ 0x11D99, 0 /* Other */],
                [/*start*/ 0x11DA0, 9 /* Numeric */],
                [/*start*/ 0x11DAA, 0 /* Other */],
                [/*start*/ 0x11EE0, 11 /* ALetter */],
                [/*start*/ 0x11EF3, 14 /* Extend */],
                [/*start*/ 0x11EF7, 0 /* Other */],
                [/*start*/ 0x11FB0, 11 /* ALetter */],
                [/*start*/ 0x11FB1, 0 /* Other */],
                [/*start*/ 0x12000, 11 /* ALetter */],
                [/*start*/ 0x1239A, 0 /* Other */],
                [/*start*/ 0x12400, 11 /* ALetter */],
                [/*start*/ 0x1246F, 0 /* Other */],
                [/*start*/ 0x12480, 11 /* ALetter */],
                [/*start*/ 0x12544, 0 /* Other */],
                [/*start*/ 0x13000, 11 /* ALetter */],
                [/*start*/ 0x1342F, 0 /* Other */],
                [/*start*/ 0x13430, 13 /* Format */],
                [/*start*/ 0x13439, 0 /* Other */],
                [/*start*/ 0x14400, 11 /* ALetter */],
                [/*start*/ 0x14647, 0 /* Other */],
                [/*start*/ 0x16800, 11 /* ALetter */],
                [/*start*/ 0x16A39, 0 /* Other */],
                [/*start*/ 0x16A40, 11 /* ALetter */],
                [/*start*/ 0x16A5F, 0 /* Other */],
                [/*start*/ 0x16A60, 9 /* Numeric */],
                [/*start*/ 0x16A6A, 0 /* Other */],
                [/*start*/ 0x16AD0, 11 /* ALetter */],
                [/*start*/ 0x16AEE, 0 /* Other */],
                [/*start*/ 0x16AF0, 14 /* Extend */],
                [/*start*/ 0x16AF5, 0 /* Other */],
                [/*start*/ 0x16B00, 11 /* ALetter */],
                [/*start*/ 0x16B30, 14 /* Extend */],
                [/*start*/ 0x16B37, 0 /* Other */],
                [/*start*/ 0x16B40, 11 /* ALetter */],
                [/*start*/ 0x16B44, 0 /* Other */],
                [/*start*/ 0x16B50, 9 /* Numeric */],
                [/*start*/ 0x16B5A, 0 /* Other */],
                [/*start*/ 0x16B63, 11 /* ALetter */],
                [/*start*/ 0x16B78, 0 /* Other */],
                [/*start*/ 0x16B7D, 11 /* ALetter */],
                [/*start*/ 0x16B90, 0 /* Other */],
                [/*start*/ 0x16E40, 11 /* ALetter */],
                [/*start*/ 0x16E80, 0 /* Other */],
                [/*start*/ 0x16F00, 11 /* ALetter */],
                [/*start*/ 0x16F4B, 0 /* Other */],
                [/*start*/ 0x16F4F, 14 /* Extend */],
                [/*start*/ 0x16F50, 11 /* ALetter */],
                [/*start*/ 0x16F51, 14 /* Extend */],
                [/*start*/ 0x16F88, 0 /* Other */],
                [/*start*/ 0x16F8F, 14 /* Extend */],
                [/*start*/ 0x16F93, 11 /* ALetter */],
                [/*start*/ 0x16FA0, 0 /* Other */],
                [/*start*/ 0x16FE0, 11 /* ALetter */],
                [/*start*/ 0x16FE2, 0 /* Other */],
                [/*start*/ 0x16FE3, 11 /* ALetter */],
                [/*start*/ 0x16FE4, 14 /* Extend */],
                [/*start*/ 0x16FE5, 0 /* Other */],
                [/*start*/ 0x16FF0, 14 /* Extend */],
                [/*start*/ 0x16FF2, 0 /* Other */],
                [/*start*/ 0x1B000, 17 /* Katakana */],
                [/*start*/ 0x1B001, 0 /* Other */],
                [/*start*/ 0x1B164, 17 /* Katakana */],
                [/*start*/ 0x1B168, 0 /* Other */],
                [/*start*/ 0x1BC00, 11 /* ALetter */],
                [/*start*/ 0x1BC6B, 0 /* Other */],
                [/*start*/ 0x1BC70, 11 /* ALetter */],
                [/*start*/ 0x1BC7D, 0 /* Other */],
                [/*start*/ 0x1BC80, 11 /* ALetter */],
                [/*start*/ 0x1BC89, 0 /* Other */],
                [/*start*/ 0x1BC90, 11 /* ALetter */],
                [/*start*/ 0x1BC9A, 0 /* Other */],
                [/*start*/ 0x1BC9D, 14 /* Extend */],
                [/*start*/ 0x1BC9F, 0 /* Other */],
                [/*start*/ 0x1BCA0, 13 /* Format */],
                [/*start*/ 0x1BCA4, 0 /* Other */],
                [/*start*/ 0x1D165, 14 /* Extend */],
                [/*start*/ 0x1D16A, 0 /* Other */],
                [/*start*/ 0x1D16D, 14 /* Extend */],
                [/*start*/ 0x1D173, 13 /* Format */],
                [/*start*/ 0x1D17B, 14 /* Extend */],
                [/*start*/ 0x1D183, 0 /* Other */],
                [/*start*/ 0x1D185, 14 /* Extend */],
                [/*start*/ 0x1D18C, 0 /* Other */],
                [/*start*/ 0x1D1AA, 14 /* Extend */],
                [/*start*/ 0x1D1AE, 0 /* Other */],
                [/*start*/ 0x1D242, 14 /* Extend */],
                [/*start*/ 0x1D245, 0 /* Other */],
                [/*start*/ 0x1D400, 11 /* ALetter */],
                [/*start*/ 0x1D455, 0 /* Other */],
                [/*start*/ 0x1D456, 11 /* ALetter */],
                [/*start*/ 0x1D49D, 0 /* Other */],
                [/*start*/ 0x1D49E, 11 /* ALetter */],
                [/*start*/ 0x1D4A0, 0 /* Other */],
                [/*start*/ 0x1D4A2, 11 /* ALetter */],
                [/*start*/ 0x1D4A3, 0 /* Other */],
                [/*start*/ 0x1D4A5, 11 /* ALetter */],
                [/*start*/ 0x1D4A7, 0 /* Other */],
                [/*start*/ 0x1D4A9, 11 /* ALetter */],
                [/*start*/ 0x1D4AD, 0 /* Other */],
                [/*start*/ 0x1D4AE, 11 /* ALetter */],
                [/*start*/ 0x1D4BA, 0 /* Other */],
                [/*start*/ 0x1D4BB, 11 /* ALetter */],
                [/*start*/ 0x1D4BC, 0 /* Other */],
                [/*start*/ 0x1D4BD, 11 /* ALetter */],
                [/*start*/ 0x1D4C4, 0 /* Other */],
                [/*start*/ 0x1D4C5, 11 /* ALetter */],
                [/*start*/ 0x1D506, 0 /* Other */],
                [/*start*/ 0x1D507, 11 /* ALetter */],
                [/*start*/ 0x1D50B, 0 /* Other */],
                [/*start*/ 0x1D50D, 11 /* ALetter */],
                [/*start*/ 0x1D515, 0 /* Other */],
                [/*start*/ 0x1D516, 11 /* ALetter */],
                [/*start*/ 0x1D51D, 0 /* Other */],
                [/*start*/ 0x1D51E, 11 /* ALetter */],
                [/*start*/ 0x1D53A, 0 /* Other */],
                [/*start*/ 0x1D53B, 11 /* ALetter */],
                [/*start*/ 0x1D53F, 0 /* Other */],
                [/*start*/ 0x1D540, 11 /* ALetter */],
                [/*start*/ 0x1D545, 0 /* Other */],
                [/*start*/ 0x1D546, 11 /* ALetter */],
                [/*start*/ 0x1D547, 0 /* Other */],
                [/*start*/ 0x1D54A, 11 /* ALetter */],
                [/*start*/ 0x1D551, 0 /* Other */],
                [/*start*/ 0x1D552, 11 /* ALetter */],
                [/*start*/ 0x1D6A6, 0 /* Other */],
                [/*start*/ 0x1D6A8, 11 /* ALetter */],
                [/*start*/ 0x1D6C1, 0 /* Other */],
                [/*start*/ 0x1D6C2, 11 /* ALetter */],
                [/*start*/ 0x1D6DB, 0 /* Other */],
                [/*start*/ 0x1D6DC, 11 /* ALetter */],
                [/*start*/ 0x1D6FB, 0 /* Other */],
                [/*start*/ 0x1D6FC, 11 /* ALetter */],
                [/*start*/ 0x1D715, 0 /* Other */],
                [/*start*/ 0x1D716, 11 /* ALetter */],
                [/*start*/ 0x1D735, 0 /* Other */],
                [/*start*/ 0x1D736, 11 /* ALetter */],
                [/*start*/ 0x1D74F, 0 /* Other */],
                [/*start*/ 0x1D750, 11 /* ALetter */],
                [/*start*/ 0x1D76F, 0 /* Other */],
                [/*start*/ 0x1D770, 11 /* ALetter */],
                [/*start*/ 0x1D789, 0 /* Other */],
                [/*start*/ 0x1D78A, 11 /* ALetter */],
                [/*start*/ 0x1D7A9, 0 /* Other */],
                [/*start*/ 0x1D7AA, 11 /* ALetter */],
                [/*start*/ 0x1D7C3, 0 /* Other */],
                [/*start*/ 0x1D7C4, 11 /* ALetter */],
                [/*start*/ 0x1D7CC, 0 /* Other */],
                [/*start*/ 0x1D7CE, 9 /* Numeric */],
                [/*start*/ 0x1D800, 0 /* Other */],
                [/*start*/ 0x1DA00, 14 /* Extend */],
                [/*start*/ 0x1DA37, 0 /* Other */],
                [/*start*/ 0x1DA3B, 14 /* Extend */],
                [/*start*/ 0x1DA6D, 0 /* Other */],
                [/*start*/ 0x1DA75, 14 /* Extend */],
                [/*start*/ 0x1DA76, 0 /* Other */],
                [/*start*/ 0x1DA84, 14 /* Extend */],
                [/*start*/ 0x1DA85, 0 /* Other */],
                [/*start*/ 0x1DA9B, 14 /* Extend */],
                [/*start*/ 0x1DAA0, 0 /* Other */],
                [/*start*/ 0x1DAA1, 14 /* Extend */],
                [/*start*/ 0x1DAB0, 0 /* Other */],
                [/*start*/ 0x1E000, 14 /* Extend */],
                [/*start*/ 0x1E007, 0 /* Other */],
                [/*start*/ 0x1E008, 14 /* Extend */],
                [/*start*/ 0x1E019, 0 /* Other */],
                [/*start*/ 0x1E01B, 14 /* Extend */],
                [/*start*/ 0x1E022, 0 /* Other */],
                [/*start*/ 0x1E023, 14 /* Extend */],
                [/*start*/ 0x1E025, 0 /* Other */],
                [/*start*/ 0x1E026, 14 /* Extend */],
                [/*start*/ 0x1E02B, 0 /* Other */],
                [/*start*/ 0x1E100, 11 /* ALetter */],
                [/*start*/ 0x1E12D, 0 /* Other */],
                [/*start*/ 0x1E130, 14 /* Extend */],
                [/*start*/ 0x1E137, 11 /* ALetter */],
                [/*start*/ 0x1E13E, 0 /* Other */],
                [/*start*/ 0x1E140, 9 /* Numeric */],
                [/*start*/ 0x1E14A, 0 /* Other */],
                [/*start*/ 0x1E14E, 11 /* ALetter */],
                [/*start*/ 0x1E14F, 0 /* Other */],
                [/*start*/ 0x1E2C0, 11 /* ALetter */],
                [/*start*/ 0x1E2EC, 14 /* Extend */],
                [/*start*/ 0x1E2F0, 9 /* Numeric */],
                [/*start*/ 0x1E2FA, 0 /* Other */],
                [/*start*/ 0x1E800, 11 /* ALetter */],
                [/*start*/ 0x1E8C5, 0 /* Other */],
                [/*start*/ 0x1E8D0, 14 /* Extend */],
                [/*start*/ 0x1E8D7, 0 /* Other */],
                [/*start*/ 0x1E900, 11 /* ALetter */],
                [/*start*/ 0x1E944, 14 /* Extend */],
                [/*start*/ 0x1E94B, 11 /* ALetter */],
                [/*start*/ 0x1E94C, 0 /* Other */],
                [/*start*/ 0x1E950, 9 /* Numeric */],
                [/*start*/ 0x1E95A, 0 /* Other */],
                [/*start*/ 0x1EE00, 11 /* ALetter */],
                [/*start*/ 0x1EE04, 0 /* Other */],
                [/*start*/ 0x1EE05, 11 /* ALetter */],
                [/*start*/ 0x1EE20, 0 /* Other */],
                [/*start*/ 0x1EE21, 11 /* ALetter */],
                [/*start*/ 0x1EE23, 0 /* Other */],
                [/*start*/ 0x1EE24, 11 /* ALetter */],
                [/*start*/ 0x1EE25, 0 /* Other */],
                [/*start*/ 0x1EE27, 11 /* ALetter */],
                [/*start*/ 0x1EE28, 0 /* Other */],
                [/*start*/ 0x1EE29, 11 /* ALetter */],
                [/*start*/ 0x1EE33, 0 /* Other */],
                [/*start*/ 0x1EE34, 11 /* ALetter */],
                [/*start*/ 0x1EE38, 0 /* Other */],
                [/*start*/ 0x1EE39, 11 /* ALetter */],
                [/*start*/ 0x1EE3A, 0 /* Other */],
                [/*start*/ 0x1EE3B, 11 /* ALetter */],
                [/*start*/ 0x1EE3C, 0 /* Other */],
                [/*start*/ 0x1EE42, 11 /* ALetter */],
                [/*start*/ 0x1EE43, 0 /* Other */],
                [/*start*/ 0x1EE47, 11 /* ALetter */],
                [/*start*/ 0x1EE48, 0 /* Other */],
                [/*start*/ 0x1EE49, 11 /* ALetter */],
                [/*start*/ 0x1EE4A, 0 /* Other */],
                [/*start*/ 0x1EE4B, 11 /* ALetter */],
                [/*start*/ 0x1EE4C, 0 /* Other */],
                [/*start*/ 0x1EE4D, 11 /* ALetter */],
                [/*start*/ 0x1EE50, 0 /* Other */],
                [/*start*/ 0x1EE51, 11 /* ALetter */],
                [/*start*/ 0x1EE53, 0 /* Other */],
                [/*start*/ 0x1EE54, 11 /* ALetter */],
                [/*start*/ 0x1EE55, 0 /* Other */],
                [/*start*/ 0x1EE57, 11 /* ALetter */],
                [/*start*/ 0x1EE58, 0 /* Other */],
                [/*start*/ 0x1EE59, 11 /* ALetter */],
                [/*start*/ 0x1EE5A, 0 /* Other */],
                [/*start*/ 0x1EE5B, 11 /* ALetter */],
                [/*start*/ 0x1EE5C, 0 /* Other */],
                [/*start*/ 0x1EE5D, 11 /* ALetter */],
                [/*start*/ 0x1EE5E, 0 /* Other */],
                [/*start*/ 0x1EE5F, 11 /* ALetter */],
                [/*start*/ 0x1EE60, 0 /* Other */],
                [/*start*/ 0x1EE61, 11 /* ALetter */],
                [/*start*/ 0x1EE63, 0 /* Other */],
                [/*start*/ 0x1EE64, 11 /* ALetter */],
                [/*start*/ 0x1EE65, 0 /* Other */],
                [/*start*/ 0x1EE67, 11 /* ALetter */],
                [/*start*/ 0x1EE6B, 0 /* Other */],
                [/*start*/ 0x1EE6C, 11 /* ALetter */],
                [/*start*/ 0x1EE73, 0 /* Other */],
                [/*start*/ 0x1EE74, 11 /* ALetter */],
                [/*start*/ 0x1EE78, 0 /* Other */],
                [/*start*/ 0x1EE79, 11 /* ALetter */],
                [/*start*/ 0x1EE7D, 0 /* Other */],
                [/*start*/ 0x1EE7E, 11 /* ALetter */],
                [/*start*/ 0x1EE7F, 0 /* Other */],
                [/*start*/ 0x1EE80, 11 /* ALetter */],
                [/*start*/ 0x1EE8A, 0 /* Other */],
                [/*start*/ 0x1EE8B, 11 /* ALetter */],
                [/*start*/ 0x1EE9C, 0 /* Other */],
                [/*start*/ 0x1EEA1, 11 /* ALetter */],
                [/*start*/ 0x1EEA4, 0 /* Other */],
                [/*start*/ 0x1EEA5, 11 /* ALetter */],
                [/*start*/ 0x1EEAA, 0 /* Other */],
                [/*start*/ 0x1EEAB, 11 /* ALetter */],
                [/*start*/ 0x1EEBC, 0 /* Other */],
                [/*start*/ 0x1F130, 11 /* ALetter */],
                [/*start*/ 0x1F14A, 0 /* Other */],
                [/*start*/ 0x1F150, 11 /* ALetter */],
                [/*start*/ 0x1F16A, 0 /* Other */],
                [/*start*/ 0x1F170, 11 /* ALetter */],
                [/*start*/ 0x1F18A, 0 /* Other */],
                [/*start*/ 0x1F1E6, 18 /* Regional_Indicator */],
                [/*start*/ 0x1F200, 0 /* Other */],
                [/*start*/ 0x1F3FB, 14 /* Extend */],
                [/*start*/ 0x1F400, 0 /* Other */],
                [/*start*/ 0x1FBF0, 9 /* Numeric */],
                [/*start*/ 0x1FBFA, 0 /* Other */],
                [/*start*/ 0xE0001, 13 /* Format */],
                [/*start*/ 0xE0002, 0 /* Other */],
                [/*start*/ 0xE0020, 14 /* Extend */],
                [/*start*/ 0xE0080, 0 /* Other */],
                [/*start*/ 0xE0100, 14 /* Extend */],
                [/*start*/ 0xE01F0, 0 /* Other */],
            ];
        })(data = wordBreakers.data || (wordBreakers.data = {}));
    })(wordBreakers || (wordBreakers = {}));
    var __read = (this && this.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    };
    // Include the word-breaking data here:
    /// <reference path="./data.ts" />
    var wordBreakers;
    (function (wordBreakers) {
        /**
         * Word breaker based on Unicode Standard Annex #29, Section 4.1:
         * Default Word Boundary Specification.
         *
         * @see http://unicode.org/reports/tr29/#Word_Boundaries
         * @see https://github.com/eddieantonio/unicode-default-word-boundary/tree/v12.0.0
         */
        function default_(text) {
            var boundaries = findBoundaries(text);
            if (boundaries.length == 0) {
                return [];
            }
            // All non-empty strings have at least TWO boundaries at the start and end of
            // the string.
            var spans = [];
            for (var i = 0; i < boundaries.length - 1; i++) {
                var start = boundaries[i];
                var end = boundaries[i + 1];
                var span = new LazySpan(text, start, end);
                if (isNonSpace(span.text)) {
                    spans.push(span);
                    // Preserve a sequence-final space if it exists.  Needed to signal "end of word".
                }
                else if (i == boundaries.length - 2) { // if "we just checked the final boundary"...
                    // We don't want to return the whitespace itself; the correct token is simply ''.
                    span = new LazySpan(text, end, end);
                    spans.push(span);
                }
            }
            return spans;
        }
        wordBreakers.default_ = default_;
        var WORD_BREAK_PROPERTY = wordBreakers.data.WORD_BREAK_PROPERTY;
        /**
         * A span that does not cut out the substring until it absolutely has to!
         */
        var LazySpan = /** @class */ (function () {
            function LazySpan(source, start, end) {
                this._source = source;
                this.start = start;
                this.end = end;
            }
            Object.defineProperty(LazySpan.prototype, "text", {
                get: function () {
                    return this._source.substring(this.start, this.end);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LazySpan.prototype, "length", {
                get: function () {
                    return this.end - this.start;
                },
                enumerable: true,
                configurable: true
            });
            return LazySpan;
        }());
        /**
         * Returns true when the chunk does not solely consist of whitespace.
         *
         * @param chunk a chunk of text. Starts and ends at word boundaries.
         */
        function isNonSpace(chunk) {
            return !Array.from(chunk).map(property).every(function (wb) {
                return (wb === 3 /* CR */ ||
                    wb === 1 /* LF */ ||
                    wb === 2 /* Newline */ ||
                    wb === 4 /* WSegSpace */);
            });
        }
        /**
         * Yields a series of string indices where a word break should
         * occur. That is, there should be a break BEFORE each string
         * index yielded by this generator.
         *
         * @param text Text to find word boundaries in.
         */
        function findBoundaries(text) {
            var _a, _b, _c;
            // WB1 and WB2: no boundaries if given an empty string.
            if (text.length === 0) {
                // There are no boundaries in an empty string!
                return [];
            }
            // This algorithm works by maintaining a sliding window of four SCALAR VALUES.
            //
            //  - Scalar values? JavaScript strings are NOT actually a string of
            //    Unicode code points; some characters are made up of TWO
            //    JavaScript indices. e.g.,
            //        "💩".length === 2;
            //        "💩"[0] === '\uD83D';
            //        "💩"[1] === '\uDCA9';
            //
            //    These characters that are represented by TWO indices are
            //    called "surrogate pairs". Since we don't want to be in the
            //    "middle" of a character, make sure we're always advancing
            //    by scalar values, and NOT indices. That means, we sometimes
            //    need to advance by TWO indices, not just one.
            //  - Four values? Some rules look at what's to the left of
            //    left, and some look at what's to the right of right. So
            //    keep track of this!
            var boundaries = [];
            var rightPos;
            var lookaheadPos = 0; // lookahead, one scalar value to the right of right.
            // Before the start of the string is also the start of the string.
            var lookbehind;
            var left = 19 /* sot */;
            var right = 19 /* sot */;
            var lookahead = wordbreakPropertyAt(0);
            // Count RIs to make sure we're not splitting emoji flags:
            var nConsecutiveRegionalIndicators = 0;
            do {
                // Shift all positions, one scalar value to the right.
                rightPos = lookaheadPos;
                lookaheadPos = positionAfter(lookaheadPos);
                // Shift all properties, one scalar value to the right.
                _a = __read([left, right, lookahead, wordbreakPropertyAt(lookaheadPos)], 4), lookbehind = _a[0], left = _a[1], right = _a[2], lookahead = _a[3];
                // Break at the start and end of text, unless the text is empty.
                // WB1: Break at start of text...
                if (left === 19 /* sot */) {
                    boundaries.push(rightPos);
                    continue;
                }
                // WB2: Break at the end of text...
                if (right === 20 /* eot */) {
                    boundaries.push(rightPos);
                    break; // Reached the end of the string. We're done!
                }
                // WB3: Do not break within CRLF:
                if (left === 3 /* CR */ && right === 1 /* LF */)
                    continue;
                // WB3b: Otherwise, break after...
                if (left === 2 /* Newline */ ||
                    left === 3 /* CR */ ||
                    left === 1 /* LF */) {
                    boundaries.push(rightPos);
                    continue;
                }
                // WB3a: ...and before newlines
                if (right === 2 /* Newline */ ||
                    right === 3 /* CR */ ||
                    right === 1 /* LF */) {
                    boundaries.push(rightPos);
                    continue;
                }
                // TODO: WB3c is not implemented, due to its complex, error-prone
                // implementation, requiring a ginormous regexp, and the fact that
                // the only thing it does is prevent big emoji sequences from being
                // split up, like 🧚🏼‍♂️
                // https://www.unicode.org/Public/emoji/12.0/emoji-zwj-sequences.txt
                // WB3d: Keep horizontal whitespace together
                if (left === 4 /* WSegSpace */ && right == 4 /* WSegSpace */)
                    continue;
                // WB4: Ignore format and extend characters
                // This is to keep grapheme clusters together!
                // See: Section 6.2: https://unicode.org/reports/tr29/#Grapheme_Cluster_and_Format_Rules
                // N.B.: The rule about "except after sot, CR, LF, and
                // Newline" already been by WB1, WB2, WB3a, and WB3b above.
                while (right === 13 /* Format */ ||
                    right === 14 /* Extend */ ||
                    right === 16 /* ZWJ */) {
                    // Continue advancing in the string, as if these
                    // characters do not exist. DO NOT update left and
                    // lookbehind however!
                    _b = __read([lookaheadPos, positionAfter(lookaheadPos)], 2), rightPos = _b[0], lookaheadPos = _b[1];
                    _c = __read([lookahead, wordbreakPropertyAt(lookaheadPos)], 2), right = _c[0], lookahead = _c[1];
                }
                // In ignoring the characters in the previous loop, we could
                // have fallen off the end of the string, so end the loop
                // prematurely if that happens!
                if (right === 20 /* eot */) {
                    boundaries.push(rightPos);
                    break;
                }
                // WB4 (continued): Lookahead must ALSO ignore these format,
                // extend, ZWJ characters!
                while (lookahead === 13 /* Format */ ||
                    lookahead === 14 /* Extend */ ||
                    lookahead === 16 /* ZWJ */) {
                    // Continue advancing in the string, as if these
                    // characters do not exist. DO NOT update left and right,
                    // however!
                    lookaheadPos = positionAfter(lookaheadPos);
                    lookahead = wordbreakPropertyAt(lookaheadPos);
                }
                // WB5: Do not break between most letters.
                if (isAHLetter(left) && isAHLetter(right))
                    continue;
                // Do not break across certain punctuation
                // WB6: (Don't break before apostrophes in contractions)
                if (isAHLetter(left) && isAHLetter(lookahead) &&
                    (right === 10 /* MidLetter */ || isMidNumLetQ(right)))
                    continue;
                // WB7: (Don't break after apostrophes in contractions)
                if (isAHLetter(lookbehind) && isAHLetter(right) &&
                    (left === 10 /* MidLetter */ || isMidNumLetQ(left)))
                    continue;
                // WB7a
                if (left === 15 /* Hebrew_Letter */ && right === 6 /* Single_Quote */)
                    continue;
                // WB7b
                if (left === 15 /* Hebrew_Letter */ && right === 5 /* Double_Quote */ &&
                    lookahead === 15 /* Hebrew_Letter */)
                    continue;
                // WB7c
                if (lookbehind === 15 /* Hebrew_Letter */ && left === 5 /* Double_Quote */ &&
                    right === 15 /* Hebrew_Letter */)
                    continue;
                // Do not break within sequences of digits, or digits adjacent to letters.
                // e.g., "3a" or "A3"
                // WB8
                if (left === 9 /* Numeric */ && right === 9 /* Numeric */)
                    continue;
                // WB9
                if (isAHLetter(left) && right === 9 /* Numeric */)
                    continue;
                // WB10
                if (left === 9 /* Numeric */ && isAHLetter(right))
                    continue;
                // Do not break within sequences, such as 3.2, 3,456.789
                // WB11
                if (lookbehind === 9 /* Numeric */ && right === 9 /* Numeric */ &&
                    (left === 7 /* MidNum */ || isMidNumLetQ(left)))
                    continue;
                // WB12
                if (left === 9 /* Numeric */ && lookahead === 9 /* Numeric */ &&
                    (right === 7 /* MidNum */ || isMidNumLetQ(right)))
                    continue;
                // WB13: Do not break between Katakana
                if (left === 17 /* Katakana */ && right === 17 /* Katakana */)
                    continue;
                // Do not break from extenders (e.g., U+202F NARROW NO-BREAK SPACE)
                // WB13a
                if ((isAHLetter(left) ||
                    left === 9 /* Numeric */ ||
                    left === 17 /* Katakana */ ||
                    left === 12 /* ExtendNumLet */) &&
                    right === 12 /* ExtendNumLet */)
                    continue;
                // WB13b
                if ((isAHLetter(right) ||
                    right === 9 /* Numeric */ ||
                    right === 17 /* Katakana */) && left === 12 /* ExtendNumLet */)
                    continue;
                // WB15 & WB16:
                // Do not break within emoji flag sequences. That is, do not break between
                // regional indicator (RI) symbols if there is an odd number of RI
                // characters before the break point.
                if (right === 18 /* Regional_Indicator */) {
                    // Emoji flags are actually composed of TWO scalar values, each being a
                    // "regional indicator". These indicators correspond to Latin letters. Put
                    // two of them together, and they spell out an ISO 3166-1-alpha-2 country
                    // code. Since these always come in pairs, NEVER split the pairs! So, if
                    // we happen to be inside the middle of an odd numbered of
                    // Regional_Indicators, DON'T SPLIT IT!
                    nConsecutiveRegionalIndicators += 1;
                    if ((nConsecutiveRegionalIndicators % 2) == 1) {
                        continue;
                    }
                }
                else {
                    nConsecutiveRegionalIndicators = 0;
                }
                // WB999: Otherwise, break EVERYWHERE (including around ideographs)
                boundaries.push(rightPos);
            } while (rightPos < text.length);
            return boundaries;
            ///// Internal utility functions /////
            /**
             * Returns the position of the start of the next scalar value. This jumps
             * over surrogate pairs.
             *
             * If asked for the character AFTER the end of the string, this always
             * returns the length of the string.
             */
            function positionAfter(pos) {
                if (pos >= text.length) {
                    return text.length;
                }
                else if (isStartOfSurrogatePair(text[pos])) {
                    return pos + 2;
                }
                return pos + 1;
            }
            /**
             * Return the value of the Word_Break property at the given string index.
             * @param pos position in the text.
             */
            function wordbreakPropertyAt(pos) {
                if (pos < 0) {
                    return 19 /* sot */; // Always "start of string" before the string starts!
                }
                else if (pos >= text.length) {
                    return 20 /* eot */; // Always "end of string" after the string ends!
                }
                else if (isStartOfSurrogatePair(text[pos])) {
                    // Surrogate pairs the next TWO items from the string!
                    return property(text[pos] + text[pos + 1]);
                }
                return property(text[pos]);
            }
            // Word_Break rule macros
            // See: https://unicode.org/reports/tr29/#WB_Rule_Macros
            function isAHLetter(prop) {
                return prop === 11 /* ALetter */ ||
                    prop === 15 /* Hebrew_Letter */;
            }
            function isMidNumLetQ(prop) {
                return prop === 8 /* MidNumLet */ ||
                    prop === 6 /* Single_Quote */;
            }
        }
        function isStartOfSurrogatePair(character) {
            var codeUnit = character.charCodeAt(0);
            return codeUnit >= 0xD800 && codeUnit <= 0xDBFF;
        }
        /**
         * Return the Word_Break property value for a character.
         * Note that
         * @param character a scalar value
         */
        function property(character) {
            // This MUST be a scalar value.
            // TODO: remove dependence on character.codepointAt()?
            var codepoint = character.codePointAt(0);
            return searchForProperty(codepoint, 0, WORD_BREAK_PROPERTY.length - 1);
        }
        /**
         * Binary search for the word break property of a given CODE POINT.
         */
        function searchForProperty(codePoint, left, right) {
            // All items that are not found in the array are assigned the 'Other' property.
            if (right < left) {
                return 0 /* Other */;
            }
            var midpoint = left + ~~((right - left) / 2);
            var candidate = WORD_BREAK_PROPERTY[midpoint];
            var nextRange = WORD_BREAK_PROPERTY[midpoint + 1];
            var startOfNextRange = nextRange ? nextRange[0 /* Start */] : Infinity;
            if (codePoint < candidate[0 /* Start */]) {
                return searchForProperty(codePoint, left, midpoint - 1);
            }
            else if (codePoint >= startOfNextRange) {
                return searchForProperty(codePoint, midpoint + 1, right);
            }
            // We found it!
            return candidate[1 /* Value */];
        }
    })(wordBreakers || (wordBreakers = {}));
    // We cannot export a member whose name is a reserved word when
    // implementing a namespace, BUT we can manually make the
    // assignment and **declare** it as part of the namespace.
    wordBreakers['default'] = wordBreakers.default_;
    var wordBreakers;
    (function (wordBreakers) {
        /**
         * A **VERY** dumb word breaker that simply splits at words. Do not use this
         * word breaker!
         *
         * @param phrase The phrase in which to break words.
         * @deprecated Use a word breaker tailored to your language instead!
         */
        function placeholder(phrase) {
            var nextStart = 0;
            return phrase.split(/\s+/).map(function (utterance) {
                // XXX: The indices are NOT accurate to the original phrase!
                var span = {
                    start: nextStart,
                    end: nextStart + utterance.length,
                    text: utterance,
                    length: utterance.length
                };
                nextStart = span.end;
                return span;
            });
        }
        wordBreakers.placeholder = placeholder;
    })(wordBreakers || (wordBreakers = {}));
    /// <reference path="./ascii.ts" />
    /// <reference path="./default/index.ts" />
    /// <reference path="./placeholder.ts" />
    // Let the word breakers be available both in the browser and in Node.
    if (typeof module !== "undefined" && module.exports) {
        module.exports['wordBreakers'] = wordBreakers;
    }
    var models;
    (function (models) {
        models.SENTINEL_CODE_UNIT = '\uFDD0';
        function applyTransform(transform, context) {
            // First, get the current context
            var fullLeftContext = context.left || '';
            var lLen = fullLeftContext.kmwLength();
            var lDel = lLen < transform.deleteLeft ? lLen : transform.deleteLeft;
            var leftContext = fullLeftContext.kmwSubstr(0, lLen - lDel) + (transform.insert || '');
            var fullRightContext = context.right || '';
            var rLen = fullRightContext.kmwLength();
            var rDel = rLen < transform.deleteRight ? rLen : transform.deleteRight;
            var rightContext = fullRightContext.kmwSubstr(rDel);
            return {
                left: leftContext,
                right: rightContext,
                startOfBuffer: context.startOfBuffer,
                endOfBuffer: context.endOfBuffer
            };
        }
        models.applyTransform = applyTransform;
        /**
         * Merges two Transforms as if they were applied to a `Context` successively.
         * @param first
         * @param second
         */
        function buildMergedTransform(first, second) {
            // These exist to avoid parameter mutation.
            var mergedFirstInsert = first.insert;
            var mergedSecondDelete = second.deleteLeft;
            // The 'fun' case:  the second Transform wants to delete something from the first.
            if (second.deleteLeft) {
                var firstLength = first.insert.kmwLength();
                if (firstLength <= second.deleteLeft) {
                    mergedFirstInsert = '';
                    mergedSecondDelete = second.deleteLeft - firstLength;
                }
                else {
                    mergedFirstInsert = first.insert.kmwSubstr(0, firstLength - second.deleteLeft);
                    mergedSecondDelete = 0;
                }
            }
            return {
                insert: mergedFirstInsert + second.insert,
                deleteLeft: first.deleteLeft + mergedSecondDelete,
                // As `first` would affect the context before `second` could take effect,
                // this is the correct way to merge `deleteRight`.
                deleteRight: (first.deleteRight || 0) + (second.deleteRight || 0)
            };
        }
        models.buildMergedTransform = buildMergedTransform;
        function isHighSurrogate(codeUnit) {
            if (typeof codeUnit == 'string') {
                codeUnit = codeUnit.charCodeAt(0);
            }
            return codeUnit >= 0xD800 && codeUnit <= 0xDBFF;
        }
        models.isHighSurrogate = isHighSurrogate;
        function isLowSurrogate(codeUnit) {
            if (typeof codeUnit == 'string') {
                codeUnit = codeUnit.charCodeAt(0);
            }
            return codeUnit >= 0xDC00 && codeUnit <= 0xDFFF;
        }
        models.isLowSurrogate = isLowSurrogate;
        function isSentinel(char) {
            return char == models.SENTINEL_CODE_UNIT;
        }
        models.isSentinel = isSentinel;
        function transformToSuggestion(transform, p) {
            var suggestion = {
                transform: transform,
                transformId: transform.id,
                displayAs: transform.insert
            };
            if (p === 0 || p) {
                suggestion.p = p;
            }
            return suggestion;
        }
        models.transformToSuggestion = transformToSuggestion;
        function defaultApplyCasing(casing, text) {
            switch (casing) {
                case 'lower':
                    return text.toLowerCase();
                case 'upper':
                    return text.toUpperCase();
                case 'initial':
                    // The length of the first code unit, as measured in code points.
                    var headUnitLength = 1;
                    // Is the first character a high surrogate, indicating possible use of UTF-16 
                    // surrogate pairs?  Also, is the string long enough for there to BE a pair?
                    if (text.length > 1 && isHighSurrogate(text.charAt(0))) {
                        // It's possible, so now we check for low surrogates.
                        if (isLowSurrogate(text.charCodeAt(1))) {
                            // We have a surrogate pair; this pair is the 'first' character.
                            headUnitLength = 2;
                        }
                    }
                    // Capitalizes the first code unit of the string, leaving the rest intact.
                    return text.substring(0, headUnitLength).toUpperCase().concat(text.substring(headUnitLength));
            }
        }
        models.defaultApplyCasing = defaultApplyCasing;
    })(models || (models = {}));
    /**
     * @file priority-queue.ts
     *
     * Defines a mildly abstracted priority queue implementation.
     */
    var models;
    (function (models) {
        var PriorityQueue = /** @class */ (function () {
            /**
             * Constructs an empty priority queue.
             * @param comparator A `Comparator` returning negative values when and only when
             * the first parameter should precede the second parameter.
             */
            function PriorityQueue(comparator, initialEntries) {
                if (initialEntries === void 0) {
                    initialEntries = [];
                }
                // TODO: We may wish to allow options specifying a limit or threshold for adding
                // items to the priority queue.  Possibly both.
                //
                // When that time comes, consider a min-max heap.
                // https://en.wikipedia.org/wiki/Min-max_heap
                this.comparator = comparator;
                this.heap = Array.from(initialEntries);
                this.heapify();
            }
            PriorityQueue.leftChildIndex = function (index) {
                return index * 2 + 1;
            };
            PriorityQueue.rightChildIndex = function (index) {
                return index * 2 + 2;
            };
            PriorityQueue.parentIndex = function (index) {
                return Math.floor((index - 1) / 2);
            };
            PriorityQueue.prototype.heapify = function (start, end) {
                if (start == undefined || end == undefined) {
                    this.heapify(0, this.count - 1);
                }
                // Use of 'indices' here is a bit of a customization.
                // At the cost of (temporary) extra storage space, we can more efficiently enqueue
                // multiple elements simultaneously.
                var queuedIndices = [];
                var lastParent = -1;
                for (var i = end; i >= start; i--) {
                    var parent = PriorityQueue.parentIndex(i);
                    if (this.siftDown(i) && parent < start && lastParent != parent) {
                        // We only need to queue examination for a heap node if its children have changed
                        // and it isn't already being examined.
                        queuedIndices.push(parent);
                        lastParent = parent;
                    }
                }
                lastParent = -1;
                while (queuedIndices.length > 0) {
                    var index = queuedIndices.shift();
                    var parent = PriorityQueue.parentIndex(index);
                    if (this.siftDown(index) && parent >= 0 && lastParent != parent) {
                        // We only need to queue examination for a heap node if its children have changed.
                        queuedIndices.push(parent);
                        lastParent = parent;
                    }
                }
            };
            Object.defineProperty(PriorityQueue.prototype, "count", {
                /**
                 * Returns the number of elements currently held by the priority queue.
                 */
                get: function () {
                    return this.heap.length;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Returns the highest-priority item within the priority queue.
             * <p>
             * Is O(1).
             */
            PriorityQueue.prototype.peek = function () {
                return this.heap[0]; // undefined if it doesn't exist... which is completely correct.
            };
            /**
             * Inserts a new element into the priority queue, placing it in order.
             * <p>
             * Is O(log N), where N = # of items in the priority queue.
             * @param element
             */
            PriorityQueue.prototype.enqueue = function (element) {
                var index = this.heap.length;
                this.heap.push(element);
                var parent = PriorityQueue.parentIndex;
                var parentIndex = parent(index);
                while (index !== 0 && this.comparator(this.heap[index], this.heap[parentIndex]) < 0) {
                    var a = this.heap[index];
                    this.heap[index] = this.heap[parentIndex];
                    this.heap[parentIndex] = a;
                    index = parentIndex;
                    parentIndex = parent(index);
                }
            };
            /**
             * Efficiently batch-enqueues multiple elements.
             * Worst-case is the _better_ of the following:
             * - O(`elements.count` + `heap.count`) - large element counts will trigger in-place
             * heap reconstruction.
             * - O(`elements.count` * log(`heap.count`)) - logarithmic when elements.count << heap.count
             * @param elements A group of elements to enqueue simultaneously.
             */
            PriorityQueue.prototype.enqueueAll = function (elements) {
                if (elements.length == 0) {
                    return;
                }
                var firstIndex = this.count;
                this.heap = this.heap.concat(elements);
                var firstParent = PriorityQueue.parentIndex(firstIndex);
                // The 'parent' of index 0 will return -1, which is illegal.
                this.heapify(firstParent >= 0 ? firstParent : 0, PriorityQueue.parentIndex(this.count - 1));
            };
            /**
             * Removes the highest-priority element from the queue, returning it.
             * <p>
             * Is O(log N), where N = number of items in the priority queue.
             */
            PriorityQueue.prototype.dequeue = function () {
                if (this.count == 0) {
                    return undefined;
                }
                var root = this.heap[0];
                var tail = this.heap.pop();
                if (this.heap.length > 0) {
                    this.heap[0] = tail;
                    this.siftDown(0);
                }
                return root;
            };
            /**
             * Compares the entry at the specified index against its children,
             * propagating it downward within the heap until heap requirements are specified.
             * <p>
             * Is O(log N), where N = number of items in the priority queue.
             *
             * @param index The index of the top-most node that must be examined
             * for repositioning.
             * @returns `true` if a swap occurred, `false` otherwise.
             */
            PriorityQueue.prototype.siftDown = function (index) {
                var leftIndex = PriorityQueue.leftChildIndex(index);
                var rightIndex = PriorityQueue.rightChildIndex(index);
                var topMostIndex = index;
                if (leftIndex < this.heap.length && this.comparator(this.heap[leftIndex], this.heap[topMostIndex]) < 0) {
                    topMostIndex = leftIndex;
                }
                if (rightIndex < this.heap.length && this.comparator(this.heap[rightIndex], this.heap[topMostIndex]) < 0) {
                    topMostIndex = rightIndex;
                }
                if (topMostIndex != index) {
                    var a = this.heap[index];
                    this.heap[index] = this.heap[topMostIndex];
                    this.heap[topMostIndex] = a;
                    this.siftDown(topMostIndex);
                    return true;
                }
                else {
                    return false;
                }
            };
            /**
             * Returns an array containing all entries of the priority queue.
             * Altering the returned array will not affect the queue, but mutating
             * the array's elements can cause unintended side effects.
             *
             * This function makes no guarantees on the ordering of the returned elements;
             * they will almost certainly be unsorted.
             */
            PriorityQueue.prototype.toArray = function () {
                return Array.from(this.heap);
            };
            return PriorityQueue;
        }());
        models.PriorityQueue = PriorityQueue;
    })(models || (models = {}));
    // While we _could_ define this within @keymanapp/models-wordbreakers instead, it's probably
    // better to leave that package as _just_ the wordbreakers.  
    var models;
    (function (models) {
        function tokenize(wordBreaker, context) {
            context = context || {
                left: undefined,
                startOfBuffer: undefined,
                endOfBuffer: undefined
            };
            var leftSpans = wordBreaker(context.left || '') || [];
            var rightSpans = wordBreaker(context.right || '') || [];
            var tokenization = {
                left: leftSpans.map(function (span) { return span.text; }),
                right: rightSpans.map(function (span) { return span.text; }),
                // A default initialization of the value.
                caretSplitsToken: false
            };
            // Now the hard part - determining whether or not the caret caused a token split.
            if (leftSpans.length > 0 && rightSpans.length > 0) {
                var leftTail = leftSpans[leftSpans.length - 1];
                var rightHead = rightSpans[0];
                // If tokenization includes all characters on each side of the caret,
                // we have a good candidate for a caret-splitting scenario.
                var leftSuffixWordbreak = leftTail.end != context.left.length;
                var rightPrefixWordbreak = rightHead.start != 0;
                if (leftSuffixWordbreak || rightPrefixWordbreak) {
                    // Bypass the final test, as we already know the caret didn't split a token.
                    // (The tokenization process already removed characters between the two.)
                    return tokenization;
                }
                // Worth note - some languages don't use wordbreaking characters.  So, a final check:
                //
                // Does the wordbreaker split a merge of the 'two center' tokens?
                // If not, then the caret is responsible for the split.
                if (wordBreaker(leftTail.text + rightHead.text).length == 1) {
                    tokenization.caretSplitsToken = true;
                }
            }
            return tokenization;
        }
        models.tokenize = tokenize;
        /**
         * Get the last word of the phrase before the caret or nothing.
         * @param fullLeftContext the entire left context of the string.
         */
        function getLastPreCaretToken(wordBreaker, context) {
            var tokenization = tokenize(wordBreaker, context);
            if (tokenization.left.length > 0) {
                return tokenization.left.pop();
            }
            return '';
        }
        models.getLastPreCaretToken = getLastPreCaretToken;
        // While it is currently identical to getLastWord, this may change in the future.
        // It's best not to write ourselves into a corner on this one, as disambiguating later
        // would likely be pretty painful.
        function wordbreak(wordBreaker, context) {
            return getLastPreCaretToken(wordBreaker, context);
        }
        models.wordbreak = wordbreak;
    })(models || (models = {}));
    /*
     * Copyright (c) 2019 National Research Council Canada (author: Eddie A. Santos)
     * Copyright (c) 2019 SIL International
     * Copyright (c) 2015–2017 Conrad Irwin
     * Copyright (c) 2011–2015 Marc Campbell
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of
     * this software and associated documentation files (the "Software"), to deal in
     * the Software without restriction, including without limitation the rights to
     * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
     * the Software, and to permit persons to whom the Software is furnished to do so,
     * subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    // Worth noting:  we're starting to get quite a 'library' of common model/LMLayer functionality.
    // Should probably make a 'lm-utils' submodule.
    /// <reference path="common.ts" />
    /// <reference path="priority-queue.ts" />
    /// <reference path="tokenization.ts" />
    /**
     * @file trie-model.ts
     *
     * Defines a simple word list (unigram) model.
     */
    var models;
    (function (models) {
        /** Upper bound on the amount of suggestions to generate. */
        var MAX_SUGGESTIONS = 12;
        /**
         * @class TrieModel
         *
         * Defines a trie-backed word list model, or the unigram model.
         * Unigram models throw away all preceding words, and search
         * for the next word exclusively. As such, they can perform simple
         * prefix searches within words, however they are not very good
         * at predicting the next word.
         */
        var TrieModel = /** @class */ (function () {
            function TrieModel(trieData, options) {
                if (options === void 0) {
                    options = {};
                }
                this.languageUsesCasing = options.languageUsesCasing;
                this.applyCasing = options.applyCasing;
                this._trie = new Trie(trieData['root'], trieData['totalWeight'], options.searchTermToKey || defaultSearchTermToKey);
                this.breakWords = options.wordBreaker || getDefaultWordBreaker();
                this.punctuation = options.punctuation;
            }
            TrieModel.prototype.configure = function (capabilities) {
                return this.configuration = {
                    leftContextCodePoints: capabilities.maxLeftContextCodePoints,
                    rightContextCodePoints: capabilities.maxRightContextCodePoints
                };
            };
            TrieModel.prototype.toKey = function (text) {
                return this._trie.toKey(text);
            };
            TrieModel.prototype.predict = function (transform, context) {
                // Special-case the empty buffer/transform: return the top suggestions.
                if (!transform.insert && !context.left && !context.right && context.startOfBuffer && context.endOfBuffer) {
                    return makeDistribution(this._trie.firstN(MAX_SUGGESTIONS).map(function (_a) {
                        var text = _a.text, p = _a.p;
                        return ({
                            transform: {
                                insert: text,
                                deleteLeft: 0
                            },
                            displayAs: text,
                            p: p
                        });
                    }));
                }
                // Compute the results of the keystroke:
                var newContext = models.applyTransform(transform, context);
                // Computes the different in word length after applying the transform above.
                var leftDelOffset = transform.deleteLeft - transform.insert.kmwLength();
                // All text to the left of the cursor INCLUDING anything that has
                // just been typed.
                var prefix = models.getLastPreCaretToken(this.breakWords, newContext);
                // Return suggestions from the trie.
                return makeDistribution(this._trie.lookup(prefix).map(function (_a) {
                    var text = _a.text, p = _a.p;
                    return models.transformToSuggestion({
                        insert: text,
                        // Delete whatever the prefix that the user wrote.
                        deleteLeft: leftDelOffset + prefix.kmwLength()
                        // Note: a separate capitalization/orthography engine can take this
                        // result and transform it as needed.
                    }, p);
                }));
                /* Helper */
                function makeDistribution(suggestions) {
                    var e_2, _a;
                    var distribution = [];
                    try {
                        for (var suggestions_2 = __values(suggestions), suggestions_2_1 = suggestions_2.next(); !suggestions_2_1.done; suggestions_2_1 = suggestions_2.next()) {
                            var s = suggestions_2_1.value;
                            distribution.push({ sample: s, p: s.p });
                        }
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (suggestions_2_1 && !suggestions_2_1.done && (_a = suggestions_2.return))
                                _a.call(suggestions_2);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                    return distribution;
                }
            };
            Object.defineProperty(TrieModel.prototype, "wordbreaker", {
                get: function () {
                    return this.breakWords;
                },
                enumerable: true,
                configurable: true
            });
            TrieModel.prototype.traverseFromRoot = function () {
                return new TrieModel.Traversal(this._trie['root'], '');
            };
            TrieModel.Traversal = /** @class */ (function () {
                function class_1(root, prefix) {
                    this.root = root;
                    this.prefix = prefix;
                }
                class_1.prototype.children = function () {
                    var root, _loop_1, this_1, _a, _b, entry, e_3_1, prefix_1, children, _loop_2, children_1, children_1_1, key, e_4_1;
                    var e_3, _c, e_4, _d;
                    return __generator(this, function (_e) {
                        switch (_e.label) {
                            case 0:
                                root = this.root;
                                if (!(root.type == 'internal'))
                                    return [3 /*break*/, 9];
                                _loop_1 = function (entry) {
                                    var entryNode, internalNode_1, _loop_3, _a, _b, lowSurrogate, e_5_1, fullText, prefix_2, prefix_3;
                                    var e_5, _c;
                                    return __generator(this, function (_d) {
                                        switch (_d.label) {
                                            case 0:
                                                entryNode = root.children[entry];
                                                if (!models.isHighSurrogate(entry))
                                                    return [3 /*break*/, 12];
                                                if (!(entryNode.type == 'internal'))
                                                    return [3 /*break*/, 9];
                                                internalNode_1 = entryNode;
                                                _loop_3 = function (lowSurrogate) {
                                                    var prefix;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                prefix = this_1.prefix + entry + lowSurrogate;
                                                                return [4 /*yield*/, {
                                                                        char: entry + lowSurrogate,
                                                                        traversal: function () { return new TrieModel.Traversal(internalNode_1.children[lowSurrogate], prefix); }
                                                                    }];
                                                            case 1:
                                                                _a.sent();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                };
                                                _d.label = 1;
                                            case 1:
                                                _d.trys.push([1, 6, 7, 8]);
                                                _a = (e_5 = void 0, __values(internalNode_1.values)), _b = _a.next();
                                                _d.label = 2;
                                            case 2:
                                                if (!!_b.done)
                                                    return [3 /*break*/, 5];
                                                lowSurrogate = _b.value;
                                                return [5 /*yield**/, _loop_3(lowSurrogate)];
                                            case 3:
                                                _d.sent();
                                                _d.label = 4;
                                            case 4:
                                                _b = _a.next();
                                                return [3 /*break*/, 2];
                                            case 5: return [3 /*break*/, 8];
                                            case 6:
                                                e_5_1 = _d.sent();
                                                e_5 = { error: e_5_1 };
                                                return [3 /*break*/, 8];
                                            case 7:
                                                try {
                                                    if (_b && !_b.done && (_c = _a.return))
                                                        _c.call(_a);
                                                }
                                                finally {
                                                    if (e_5)
                                                        throw e_5.error;
                                                }
                                                return [7 /*endfinally*/];
                                            case 8: return [3 /*break*/, 11];
                                            case 9:
                                                fullText = entryNode.entries[0].key;
                                                entry = entry + fullText[this_1.prefix.length + 1]; // The other half of the non-BMP char.
                                                prefix_2 = this_1.prefix + entry;
                                                return [4 /*yield*/, {
                                                        char: entry,
                                                        traversal: function () { return new TrieModel.Traversal(entryNode, prefix_2); }
                                                    }];
                                            case 10:
                                                _d.sent();
                                                _d.label = 11;
                                            case 11: return [3 /*break*/, 16];
                                            case 12:
                                                if (!models.isSentinel(entry))
                                                    return [3 /*break*/, 13];
                                                return [2 /*return*/, "continue"];
                                            case 13:
                                                if (!!entry)
                                                    return [3 /*break*/, 14];
                                                return [2 /*return*/, "continue"];
                                            case 14:
                                                prefix_3 = this_1.prefix + entry;
                                                return [4 /*yield*/, {
                                                        char: entry,
                                                        traversal: function () { return new TrieModel.Traversal(entryNode, prefix_3); }
                                                    }];
                                            case 15:
                                                _d.sent();
                                                _d.label = 16;
                                            case 16: return [2 /*return*/];
                                        }
                                    });
                                };
                                this_1 = this;
                                _e.label = 1;
                            case 1:
                                _e.trys.push([1, 6, 7, 8]);
                                _a = __values(root.values), _b = _a.next();
                                _e.label = 2;
                            case 2:
                                if (!!_b.done)
                                    return [3 /*break*/, 5];
                                entry = _b.value;
                                return [5 /*yield**/, _loop_1(entry)];
                            case 3:
                                _e.sent();
                                _e.label = 4;
                            case 4:
                                _b = _a.next();
                                return [3 /*break*/, 2];
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                e_3_1 = _e.sent();
                                e_3 = { error: e_3_1 };
                                return [3 /*break*/, 8];
                            case 7:
                                try {
                                    if (_b && !_b.done && (_c = _a.return))
                                        _c.call(_a);
                                }
                                finally {
                                    if (e_3)
                                        throw e_3.error;
                                }
                                return [7 /*endfinally*/];
                            case 8: return [2 /*return*/];
                            case 9:
                                prefix_1 = this.prefix;
                                children = root.entries.filter(function (entry) {
                                    return entry.key != prefix_1 && prefix_1.length < entry.key.length;
                                });
                                _loop_2 = function (key) {
                                    var nodeKey;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                nodeKey = key[prefix_1.length];
                                                if (models.isHighSurrogate(nodeKey)) {
                                                    // Merge the other half of an SMP char in!
                                                    nodeKey = nodeKey + key[prefix_1.length + 1];
                                                }
                                                return [4 /*yield*/, {
                                                        char: nodeKey,
                                                        traversal: function () { return new TrieModel.Traversal(root, prefix_1 + nodeKey); }
                                                    }];
                                            case 1:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                };
                                _e.label = 10;
                            case 10:
                                _e.trys.push([10, 15, 16, 17]);
                                children_1 = __values(children), children_1_1 = children_1.next();
                                _e.label = 11;
                            case 11:
                                if (!!children_1_1.done)
                                    return [3 /*break*/, 14];
                                key = children_1_1.value.key;
                                return [5 /*yield**/, _loop_2(key)];
                            case 12:
                                _e.sent();
                                _e.label = 13;
                            case 13:
                                children_1_1 = children_1.next();
                                return [3 /*break*/, 11];
                            case 14: return [3 /*break*/, 17];
                            case 15:
                                e_4_1 = _e.sent();
                                e_4 = { error: e_4_1 };
                                return [3 /*break*/, 17];
                            case 16:
                                try {
                                    if (children_1_1 && !children_1_1.done && (_d = children_1.return))
                                        _d.call(children_1);
                                }
                                finally {
                                    if (e_4)
                                        throw e_4.error;
                                }
                                return [7 /*endfinally*/];
                            case 17:
                                ;
                                return [2 /*return*/];
                        }
                    });
                };
                Object.defineProperty(class_1.prototype, "entries", {
                    get: function () {
                        if (this.root.type == 'leaf') {
                            var prefix_4 = this.prefix;
                            var matches = this.root.entries.filter(function (entry) {
                                return entry.key == prefix_4;
                            });
                            return matches.map(function (value) { return value.content; });
                        }
                        else {
                            var matchingLeaf = this.root.children[models.SENTINEL_CODE_UNIT];
                            if (matchingLeaf && matchingLeaf.type == 'leaf') {
                                return matchingLeaf.entries.map(function (value) { return value.content; });
                            }
                            else {
                                return [];
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return class_1;
            }());
            return TrieModel;
        }());
        models.TrieModel = TrieModel;
        ;
        /**
         * Wrapper class for the trie and its nodes.
         */
        var Trie = /** @class */ (function () {
            function Trie(root, totalWeight, wordform2key) {
                this.root = root;
                this.toKey = wordform2key;
                this.totalWeight = totalWeight;
            }
            /**
             * Lookups an arbitrary prefix (a query) in the trie. Returns the top 3
             * results in sorted order.
             *
             * @param prefix
             */
            Trie.prototype.lookup = function (prefix) {
                var searchKey = this.toKey(prefix);
                var lowestCommonNode = findPrefix(this.root, searchKey);
                if (lowestCommonNode === null) {
                    return [];
                }
                return getSortedResults(lowestCommonNode, searchKey, this.totalWeight);
            };
            /**
             * Returns the top N suggestions from the trie.
             * @param n How many suggestions, maximum, to return.
             */
            Trie.prototype.firstN = function (n) {
                return getSortedResults(this.root, '', this.totalWeight, n);
            };
            return Trie;
        }());
        /**
         * Finds the deepest descendent in the trie with the given prefix key.
         *
         * This means that a search in the trie for a given prefix has a best-case
         * complexity of O(m) where m is the length of the prefix.
         *
         * @param key The prefix to search for.
         * @param index The index in the prefix. Initially 0.
         */
        function findPrefix(node, key, index) {
            if (index === void 0) {
                index = 0;
            }
            // An important note - the Trie itself is built on a per-JS-character basis,
            // not on a UTF-8 character-code basis.
            if (node.type === 'leaf' || index === key.length) {
                return node;
            }
            // So, for SMP models, we need to match each char of the supplementary pair
            // in sequence.  Each has its own node in the Trie.
            var char = key[index];
            if (node.children[char]) {
                return findPrefix(node.children[char], key, index + 1);
            }
            return null;
        }
        /**
         * Returns all entries matching the given prefix, in descending order of
         * weight.
         *
         * @param prefix  the prefix to match.
         * @param results the current results
         * @param queue
         */
        function getSortedResults(node, prefix, N, limit) {
            var e_6, _a;
            if (limit === void 0) {
                limit = MAX_SUGGESTIONS;
            }
            var queue = new models.PriorityQueue(function (a, b) {
                // In case of Trie compilation issues that emit `null` or `undefined`
                return (b ? b.weight : 0) - (a ? a.weight : 0);
            });
            var results = [];
            if (node.type === 'leaf') {
                try {
                    // Assuming the values are sorted, we can just add all of the values in the
                    // leaf, until we reach the limit.
                    for (var _b = __values(node.entries), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (item.key.startsWith(prefix)) {
                            var content = item.content, weight = item.weight;
                            results.push({
                                text: content,
                                p: weight / N
                            });
                            if (results.length >= limit) {
                                return results;
                            }
                        }
                    }
                }
                catch (e_6_1) {
                    e_6 = { error: e_6_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_6)
                            throw e_6.error;
                    }
                }
            }
            else {
                queue.enqueue(node);
                var next = void 0;
                var _loop_4 = function () {
                    if (isNode(next)) {
                        // When a node is next up in the queue, that means that next least
                        // likely suggestion is among its decsendants.
                        // So we search all of its descendants!
                        if (next.type === 'leaf') {
                            queue.enqueueAll(next.entries);
                        }
                        else {
                            // XXX: alias `next` so that TypeScript can be SURE that internal is
                            // in fact an internal node. Because of the callback binding to the
                            // original definition of node (i.e., a Node | Entry), this will not
                            // type-check otherwise.
                            var internal_1 = next;
                            queue.enqueueAll(next.values.map(function (char) {
                                return internal_1.children[char];
                            }));
                        }
                    }
                    else {
                        // When an entry is up next in the queue, we just add its contents to
                        // the results!
                        results.push({
                            text: next.content,
                            p: next.weight / N
                        });
                        if (results.length >= limit) {
                            return { value: results };
                        }
                    }
                };
                while (next = queue.dequeue()) {
                    var state_1 = _loop_4();
                    if (typeof state_1 === "object")
                        return state_1.value;
                }
            }
            return results;
        }
        /** TypeScript type guard that returns whether the thing is a Node. */
        function isNode(x) {
            return 'type' in x;
        }
        /**
         * Converts wordforms into an indexable form. It does this by
         * normalizing into NFD, removing diacritics, and then converting
         * the result to lowercase.
         *
         * This is a very naïve implementation, that I only think will work on
         * some languages that use the Latin script. As of 2020-04-08, only
         * 4 out of 11 (36%) of published language models use the Latin script,
         * so this might not actually be a great default.
         *
         * This uses String.prototype.normalize() to convert normalize into NFD.
         * NFD is an easy way to separate a Latin character from its diacritics;
         * Even then, some Latin-based orthographies use code points that,
         * under NFD normalization, do NOT decompose into an ASCII letter and a
         * combining diacritical mark (e.g., SENĆOŦEN).
         *
         * Use this only in early iterations of the model. For a production lexical
         * model, you SHOULD write/generate your own key function, tailored to your
         * language.
         */
        function defaultSearchTermToKey(wordform) {
            /**
             * N.B.: this is (slightly) DIFFERENT than the version in
             * keymanapp/lexical-model-compiler/build-trie
             * as this is for compatibility for models built
             * BEFORE the searchTermToKey function was bundled with
             * all models.
             *
             * This compatibility version lowercases AFTER removing diacritics;
             * the new version (bundled in future models) lowercases,
             * NFD normalizes, THEN removes diacritics.
             */
            return wordform
                .normalize('NFD')
                // Remove all combining diacritics (if input is in NFD)
                // common to Latin-orthographies.
                .replace(/[\u0300-\u036f]/g, '')
                .toLowerCase();
        }
        function getDefaultWordBreaker() {
            var namespace;
            // @ts-ignore
            if (typeof wordBreakers !== 'undefined') {
                // @ts-ignore
                namespace = wordBreakers;
            }
            else {
                namespace = require('@keymanapp/models-wordBreakers').wordBreakers;
            }
            return namespace['default'];
        }
    })(models || (models = {}));
    var models;
    (function (models) {
        var QuoteBehavior;
        (function (QuoteBehavior) {
            QuoteBehavior["noQuotes"] = "no-quotes";
            QuoteBehavior["useQuotes"] = "use-quotes";
            QuoteBehavior["default"] = "default-quotes";
        })(QuoteBehavior = models.QuoteBehavior || (models.QuoteBehavior = {}));
        // For an "enum/namespace merge".  See https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-namespaces-with-classes
        (function (QuoteBehavior) {
            /**
             * Applies the specified quote behavior to the provided `Transform`, mutating it as appropriate.
             * @param transform    The Transform to be mutated
             * @param punctuation  The active `LexicalModelPunctuation` settings
             * @param defaultTo    The default quote behavior to use (in case the current value is `.default`)
             */
            function apply(behavior, text, punctuation, defaultTo) {
                if (defaultTo == QuoteBehavior.default || !defaultTo) {
                    throw "Specified quote behavior may be ambiguous - default behavior not specified (may not be .default)";
                }
                if (behavior == QuoteBehavior.default) {
                    behavior = defaultTo;
                }
                switch (behavior) {
                    case QuoteBehavior.noQuotes:
                        return text;
                    case QuoteBehavior.useQuotes:
                        var _a = punctuation.quotesForKeepSuggestion, open = _a.open, close_1 = _a.close;
                        // This part's simple enough, at least.
                        return open + text + close_1;
                    default:
                        throw "Unsupported quote behavior state detected; implementation missing!";
                }
            }
            QuoteBehavior.apply = apply;
        })(QuoteBehavior = models.QuoteBehavior || (models.QuoteBehavior = {}));
    })(models || (models = {}));
    /// <reference path="./trie-model.ts" />
    /// <reference path="./quote-behavior.ts" />
    // Add all namespaces defined here to the global scope:
    if (typeof module != 'undefined' && typeof module.exports != 'undefined') {
        module.exports['models'] = models;
    }
    var correction;
    (function (correction) {
        // A semi-optimized 'online'/iterative Damerau-Levenshtein calculator with the following features:
        // - may add new character to the 'input' string or to the 'match' string, reusing all old calculations efficiently.
        // - allows a 'focused' evaluation that seeks if the edit distance is within a specific range.  Designed for use in match-searching,
        //   where we want to find the 'closest' matching strings in a lexicon.
        // - towards such a match-searching algorithm/heuristic: should nothing be found within that range, all prior calculations may be reused
        //   to search across the lexicon with an incremented edit distance.
        // - minimized memory footprint: O(m) memory footprint (where m = length of 'input' string), rather than O(mn) (where n = length of 'match' string)
        //   - guaranteed to use a smaller footprint than DiagonalizedIterativeDamerauLevenshteinCalculation.
        //
        // In short:  Used to optimize calculations for low edit-distance checks, then expanded if/as necessary
        //            if a greater edit distance is requested.
        //
        // Reference: https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm#Possible_modifications
        //    - Motivating statement:  "if we are only interested in the distance if it is smaller than a threshold..."  
        var ClassicalDistanceCalculation = /** @class */ (function () {
            function ClassicalDistanceCalculation(other) {
                /**
                 * Specifies how far off-diagonal calculations should be performed.  A value of 0 only evaluates cells with matching
                 * row and column indicies.
                 *
                 * The resulting value from .getFinalCost() is only guaranteed correct if it is less than or equal to this value.
                 * Otherwise, this object represents a heuristic that _may_ overestimate the true edit distance.  Note that it will
                 * never underestimate.
                 */
                this.diagonalWidth = 2; // TODO: Ideally, should start at 1... but we'll start at 2 for now
                // as a naive workaround for multi-char transform limitations.
                // The sequence of characters input so far.
                this.inputSequence = [];
                this.matchSequence = [];
                if (other) {
                    // Clone class properties.
                    var rowCount = other.resolvedDistances.length;
                    this.resolvedDistances = Array(rowCount);
                    for (var r = 0; r < rowCount; r++) {
                        this.resolvedDistances[r] = Array.from(other.resolvedDistances[r]);
                    }
                    this.inputSequence = Array.from(other.inputSequence);
                    this.matchSequence = Array.from(other.matchSequence);
                    this.diagonalWidth = other.diagonalWidth;
                }
                else {
                    this.resolvedDistances = [];
                }
            }
            ClassicalDistanceCalculation.prototype.getTrueIndex = function (r, c, width) {
                var retVal = {
                    row: r,
                    col: c - r + width,
                    sparse: false
                };
                if (retVal.col < 0 || retVal.col > 2 * width) {
                    retVal.sparse = true;
                }
                return retVal;
            };
            ClassicalDistanceCalculation.prototype.getCostAt = function (i, j, width) {
                if (width === void 0) {
                    width = this.diagonalWidth;
                }
                // Check for and handle the set of fixed-value virtualized indices.
                if (i < 0 || j < 0) {
                    if (i == -1 && j >= -1) {
                        return j + 1;
                    }
                    else if (j == -1 && i >= -1) {
                        return i + 1;
                    }
                    return Number.MAX_VALUE;
                }
                var index = this.getTrueIndex(i, j, width);
                return index.sparse ? Number.MAX_VALUE : this.resolvedDistances[index.row][index.col];
            };
            /**
             * Noting the above link's statement prefixed "By examining diagonals instead of rows, and by using lazy evaluation...",
             * this function will return the actual edit distance between the strings, temporarily increasing the computed
             * diagonal's size if necessary.
             *
             * Does not actually mutate the instance.
             */
            ClassicalDistanceCalculation.prototype.getFinalCost = function () {
                var buffer = this;
                var val = buffer.getHeuristicFinalCost();
                while (val > buffer.diagonalWidth) {
                    // A consequence of treating this class as immutable.
                    buffer = buffer.increaseMaxDistance();
                    val = buffer.getHeuristicFinalCost();
                }
                return val;
            };
            /**
             * Returns this instance's computed edit distance.  If greater than the diagonal's width value, note that it may be an overestimate.
             */
            ClassicalDistanceCalculation.prototype.getHeuristicFinalCost = function () {
                return this.getCostAt(this.inputSequence.length - 1, this.matchSequence.length - 1);
            };
            /**
             * Returns `true` if the represented edit distance is less than or equal to the specified threshold, minimizing the amount of calculations
             * needed to meet the specified limit.
             *
             * Does not mutate the instance.
             * @param threshold
             */
            ClassicalDistanceCalculation.prototype.hasFinalCostWithin = function (threshold) {
                var buffer = this;
                var val = buffer.getHeuristicFinalCost();
                var guaranteedBound = this.diagonalWidth;
                do {
                    // val will never exceed the length of the longer string, no matter how large the threshold.
                    if (val <= threshold) {
                        return true;
                    }
                    else if (guaranteedBound < threshold) {
                        buffer = buffer.increaseMaxDistance();
                        guaranteedBound++;
                        val = buffer.getHeuristicFinalCost();
                    }
                    else {
                        break;
                    }
                } while (true);
                return false;
            };
            /**
             * Determines the edit path used to obtain the optimal cost, distinguishing between zero-cost
             * substitutions ('match' operations) and actual substitutions.
             * @param row
             * @param col
             */
            ClassicalDistanceCalculation.prototype.editPath = function (row, col) {
                if (row === void 0) {
                    row = this.inputSequence.length - 1;
                }
                if (col === void 0) {
                    col = this.matchSequence.length - 1;
                }
                var currentCost = this.getCostAt(row, col);
                var ops = null;
                var parent = null;
                var insertParentCost = this.getCostAt(row, col - 1);
                var deleteParentCost = this.getCostAt(row - 1, col);
                var substitutionParentCost = this.getCostAt(row - 1, col - 1);
                var _a = __read(ClassicalDistanceCalculation.getTransposeParent(this, row, col), 2), lastInputIndex = _a[0], lastMatchIndex = _a[1];
                if (lastInputIndex >= 0 && lastMatchIndex >= 0) {
                    // OK, a transposition source is quite possible.  Still need to do more vetting, to be sure.
                    var expectedCost = 1;
                    // This transposition includes either 'transpose-insert' or 'transpose-delete' operations.
                    ops = ['transpose-start']; // always needs a 'start'.
                    if (lastInputIndex != row - 1) {
                        var count = row - lastInputIndex - 1;
                        ops = ops.concat(Array(count).fill('transpose-delete'));
                        expectedCost += count;
                    }
                    else {
                        var count = col - lastMatchIndex - 1;
                        ops = ops.concat(Array(count).fill('transpose-insert'));
                        expectedCost += count;
                    }
                    ops.push('transpose-end');
                    // Double-check our expectations.
                    if (this.getCostAt(lastInputIndex - 1, lastMatchIndex - 1) != currentCost - expectedCost) {
                        ops = null;
                    }
                    parent = [lastInputIndex - 1, lastMatchIndex - 1];
                }
                if (ops) {
                    // bypass the ladder.
                }
                else if (substitutionParentCost == currentCost - 1) {
                    ops = ['substitute'];
                    parent = [row - 1, col - 1];
                }
                else if (insertParentCost == currentCost - 1) {
                    ops = ['insert'];
                    parent = [row, col - 1];
                }
                else if (deleteParentCost == currentCost - 1) {
                    ops = ['delete'];
                    parent = [row - 1, col];
                }
                else { //if(substitutionParentCost == currentCost) {
                    ops = ['match'];
                    parent = [row - 1, col - 1];
                }
                // Recursively build the edit path.
                if (parent[0] >= 0 && parent[1] >= 0) {
                    return this.editPath(parent[0], parent[1]).concat(ops);
                }
                else {
                    if (parent[0] > -1) {
                        // There are initial deletions.
                        return Array(parent[0] + 1).fill('delete').concat(ops);
                    }
                    else if (parent[1] > -1) {
                        // There are initial insertions.
                        return Array(parent[1] + 1).fill('insert').concat(ops);
                    }
                    else {
                        return ops;
                    }
                }
            };
            ClassicalDistanceCalculation.getTransposeParent = function (buffer, r, c) {
                // Block any transpositions where the tokens are identical.
                // Other operations will be cheaper.  Also, block cases where 'parents' are impossible.
                if (r < 0 || c < 0 || buffer.inputSequence[r].key == buffer.matchSequence[c].key) {
                    return [-1, -1];
                }
                // Transposition checks
                var lastInputIndex = -1;
                for (var i = r - 1; i >= 0; i--) {
                    if (buffer.inputSequence[i].key == buffer.matchSequence[c].key) {
                        lastInputIndex = i;
                        break;
                    }
                }
                var lastMatchIndex = -1;
                for (var i = c - 1; i >= 0; i--) {
                    if (buffer.matchSequence[i].key == buffer.inputSequence[r].key) {
                        lastMatchIndex = i;
                        break;
                    }
                }
                return [lastInputIndex, lastMatchIndex];
            };
            ClassicalDistanceCalculation.initialCostAt = function (buffer, r, c, insertCost, deleteCost) {
                var baseSubstitutionCost = buffer.inputSequence[r].key == buffer.matchSequence[c].key ? 0 : 1;
                var substitutionCost = buffer.getCostAt(r - 1, c - 1) + baseSubstitutionCost;
                var insertionCost = insertCost || buffer.getCostAt(r, c - 1) + 1; // If set meaningfully, will never equal zero.
                var deletionCost = deleteCost || buffer.getCostAt(r - 1, c) + 1; // If set meaningfully, will never equal zero.
                var transpositionCost = Number.MAX_VALUE;
                if (r > 0 && c > 0) { // bypass when transpositions are known to be impossible.
                    var _a = __read(ClassicalDistanceCalculation.getTransposeParent(buffer, r, c), 2), lastInputIndex = _a[0], lastMatchIndex = _a[1];
                    transpositionCost = buffer.getCostAt(lastInputIndex - 1, lastMatchIndex - 1) + (r - lastInputIndex - 1) + 1 + (c - lastMatchIndex - 1);
                }
                return Math.min(substitutionCost, deletionCost, insertionCost, transpositionCost);
            };
            ClassicalDistanceCalculation.prototype.getSubset = function (inputLength, matchLength) {
                var trimmedInstance = new ClassicalDistanceCalculation(this);
                if (inputLength > this.inputSequence.length || matchLength > this.matchSequence.length) {
                    throw "Invalid dimensions specified for trim operation";
                }
                // Trim our tracked input & match sequences.
                trimmedInstance.inputSequence.splice(inputLength);
                trimmedInstance.matchSequence.splice(matchLength);
                // Major index corresponds to input length.
                trimmedInstance.resolvedDistances.splice(inputLength);
                // The real fun:  trimming off columns. (Minor index, corresponds to match length)
                var finalTrueIndex = this.getTrueIndex(inputLength - 1, matchLength - 1, this.diagonalWidth);
                // The diagonal index increases as the row index decreases.
                for (var diagonalIndex = finalTrueIndex.col; diagonalIndex <= 2 * this.diagonalWidth; diagonalIndex++) {
                    var row = finalTrueIndex.row - (diagonalIndex - finalTrueIndex.col);
                    if (row < 0) {
                        break;
                    }
                    if (diagonalIndex < 0) {
                        trimmedInstance.resolvedDistances[row] = Array(2 * trimmedInstance.diagonalWidth + 1).fill(Number.MAX_VALUE);
                    }
                    else {
                        var newCount = 2 * this.diagonalWidth - diagonalIndex;
                        var keptEntries = trimmedInstance.resolvedDistances[row].splice(0, diagonalIndex + 1);
                        var newEntries = Array(newCount).fill(Number.MAX_VALUE);
                        trimmedInstance.resolvedDistances[row] = keptEntries.concat(newEntries);
                    }
                }
                return trimmedInstance;
            };
            ClassicalDistanceCalculation.forDiagonalOfAxis = function (diagonalWidth, centerIndex, axisCap, closure) {
                var diagonalCap = axisCap - centerIndex < diagonalWidth ? axisCap - centerIndex + diagonalWidth : 2 * diagonalWidth;
                var startOffset = centerIndex - diagonalWidth; // The axis's index for diagonal entry 0.  May be negative.
                var diagonalStart = startOffset < 0 ? 0 : startOffset;
                for (var diagonalIndex = diagonalStart - startOffset; diagonalIndex <= diagonalCap; diagonalIndex++) {
                    closure(startOffset + diagonalIndex, diagonalIndex);
                }
            };
            // Inputs add an extra row / first index entry.
            ClassicalDistanceCalculation.prototype.addInputChar = function (token) {
                var returnBuffer = new ClassicalDistanceCalculation(this);
                var r = returnBuffer.inputSequence.length;
                returnBuffer.inputSequence.push(token);
                // Insert a row, even if we don't actually do anything with it yet.
                // Initialize all entries with Number.MAX_VALUE, as `undefined` use leads to JS math issues.
                var row = Array(2 * returnBuffer.diagonalWidth + 1).fill(Number.MAX_VALUE);
                returnBuffer.resolvedDistances[r] = row;
                // If there isn't a 'match' entry yet, there are no values to compute.  Exit immediately.
                if (returnBuffer.matchSequence.length == 0) {
                    return returnBuffer;
                }
                ClassicalDistanceCalculation.forDiagonalOfAxis(returnBuffer.diagonalWidth, r, returnBuffer.matchSequence.length - 1, function (c, diagIndex) {
                    row[diagIndex] = ClassicalDistanceCalculation.initialCostAt(returnBuffer, r, c);
                });
                return returnBuffer;
            };
            ClassicalDistanceCalculation.prototype.addMatchChar = function (token) {
                var returnBuffer = new ClassicalDistanceCalculation(this);
                var c = returnBuffer.matchSequence.length;
                returnBuffer.matchSequence.push(token);
                // If there isn't a 'match' entry yet, there are no values to compute.  Exit immediately.
                if (returnBuffer.inputSequence.length == 0) {
                    return returnBuffer;
                }
                ClassicalDistanceCalculation.forDiagonalOfAxis(returnBuffer.diagonalWidth, c, returnBuffer.inputSequence.length - 1, function (r, diagIndex) {
                    var row = returnBuffer.resolvedDistances[r];
                    // Since diagIndex is from the perspective of the row, it must be inverted to properly index the column.
                    row[2 * returnBuffer.diagonalWidth - diagIndex] = ClassicalDistanceCalculation.initialCostAt(returnBuffer, r, c);
                });
                return returnBuffer;
            };
            ClassicalDistanceCalculation.prototype.increaseMaxDistance = function () {
                var returnBuffer = new ClassicalDistanceCalculation(this);
                returnBuffer.diagonalWidth++;
                if (returnBuffer.inputSequence.length < 1 || returnBuffer.matchSequence.length < 1) {
                    return returnBuffer;
                }
                // An abstraction of the common aspects of transposition handling during diagonal extensions.
                function forPossibleTranspositionsInDiagonal(startPos, fixedChar, lookupString, closure) {
                    var diagonalCap = 2 * (returnBuffer.diagonalWidth - 1); // The maximum diagonal index permitted
                    var axisCap = lookupString.length - 1; // The maximum index supported by the axis of iteration
                    // Ensures that diagonal iteration only occurs within the axis's supported range
                    diagonalCap = diagonalCap < axisCap - startPos ? diagonalCap : axisCap - startPos;
                    // Iterate within the diagonal and call our closure for any potential transpositions.
                    for (var diagonalIndex = 0; diagonalIndex <= diagonalCap; diagonalIndex++) {
                        if (fixedChar == lookupString[startPos + diagonalIndex].key) {
                            closure(startPos + diagonalIndex, diagonalIndex);
                        }
                    }
                }
                var _loop_5 = function (r) {
                    var leftCell = Number.MAX_VALUE;
                    var c = r - returnBuffer.diagonalWidth; // External index of the left-most entry, which we will now calculate.
                    if (c >= 0) {
                        // If c == 0, cell is at edge, thus a known value for insertions exists.
                        // Base cost: r+1, +1 for inserting.
                        var insertionCost_1 = c == 0 ? r + 2 : Number.MAX_VALUE;
                        // compute new left cell
                        leftCell = ClassicalDistanceCalculation.initialCostAt(returnBuffer, r, c, insertionCost_1, undefined);
                        var addedCost_1 = leftCell;
                        // daisy-chain possible updates
                        // cell (r, c+1):  new insertion source
                        if (c < returnBuffer.matchSequence.length - 1) {
                            // We propagate the new added cost (via insertion) to the old left-most cell, which is one to our right.
                            ClassicalDistanceCalculation.propagateUpdateFrom(returnBuffer, r, c + 1, addedCost_1 + 1, 0);
                            // Only possible if insertions are also possible AND more conditions are met.
                            // cells (r+2, * > c+2):  new transposition source
                            var transposeRow_1 = r + 2;
                            if (r + 2 < this_2.inputSequence.length) { // Row to check for transposes must exist.
                                var rowChar = returnBuffer.inputSequence[r + 1].key;
                                // First possible match in input could be at index c + 2, which adjusts col c+2's cost.  Except that entry in r+2
                                // doesn't exist yet - so we start with c+3 instead.
                                forPossibleTranspositionsInDiagonal(c + 3, rowChar, returnBuffer.matchSequence, function (axisIndex, diagIndex) {
                                    // Because (r+2, c+3) is root, not (r+2, c+2).  Min cost of 2.
                                    ClassicalDistanceCalculation.propagateUpdateFrom(returnBuffer, transposeRow_1, axisIndex, addedCost_1 + diagIndex + 2, diagIndex);
                                });
                            }
                        }
                    }
                    var rightCell = Number.MAX_VALUE;
                    c = r + returnBuffer.diagonalWidth;
                    if (c < returnBuffer.matchSequence.length) {
                        // If r == 0, cell is at edge, thus a known value for insertions exists.
                        // Base cost: c+1, +1 for inserting.
                        var deletionCost = r == 0 ? c + 2 : Number.MAX_VALUE;
                        // the current row wants to use adjusted diagonal width; we must specify use of the old width & its mapping instead.
                        insertionCost = returnBuffer.getCostAt(r, c - 1, this_2.diagonalWidth) + 1;
                        // compute new right cell
                        rightCell = ClassicalDistanceCalculation.initialCostAt(returnBuffer, r, c, insertionCost, deletionCost);
                        var addedCost_2 = rightCell;
                        // daisy-chain possible updates
                        // cell (r+1, c):  new deletion source
                        if (r < returnBuffer.inputSequence.length - 1) {
                            // We propagate the new added cost (via deletion) to the old right-most cell, which is one to our right.
                            ClassicalDistanceCalculation.propagateUpdateFrom(returnBuffer, r + 1, c, addedCost_2 + 1, 2 * this_2.diagonalWidth);
                            // Only possible if deletions are also possible AND more conditions are met.
                            // cells(* > r+2, c+2): new transposition source
                            var transposeCol_1 = c + 2;
                            if (c + 2 < this_2.matchSequence.length) { // Row to check for transposes must exist.
                                var colChar = returnBuffer.matchSequence[r + 1].key;
                                // First possible match in input could be at index r + 2, which adjusts row r+2's cost.  Except that entry in c+2
                                // doesn't exist yet - so we start with r+3 instead.
                                forPossibleTranspositionsInDiagonal(r + 3, colChar, returnBuffer.inputSequence, function (axisIndex, diagIndex) {
                                    var diagColIndex = 2 * (returnBuffer.diagonalWidth - 1) - diagIndex;
                                    // Because (r+3, c+2) is root, not (r+2, c+2).  Min cost of 2.
                                    ClassicalDistanceCalculation.propagateUpdateFrom(returnBuffer, axisIndex, transposeCol_1, addedCost_2 + diagIndex + 2, diagColIndex);
                                });
                            }
                        }
                    }
                    // Constructs the final expanded diagonal for the row.
                    returnBuffer.resolvedDistances[r] = [leftCell].concat(returnBuffer.resolvedDistances[r], rightCell);
                };
                var this_2 = this, insertionCost;
                for (var r = 0; r < returnBuffer.inputSequence.length; r++) {
                    _loop_5(r);
                }
                return returnBuffer;
            };
            ClassicalDistanceCalculation.propagateUpdateFrom = function (buffer, r, c, value, diagonalIndex) {
                // Note:  this function does not actually need the `c` parameter!
                //        That said, it's very useful when tracing stack traces & debugging.
                if (value < buffer.resolvedDistances[r][diagonalIndex]) {
                    buffer.resolvedDistances[r][diagonalIndex] = value;
                }
                else {
                    return;
                }
                var internalRow = r < buffer.inputSequence.length - 1;
                var internalCol = c < buffer.matchSequence.length - 1;
                // We have to compensate for the current & following rows not having been expanded yet.
                if (diagonalIndex < 2 * (buffer.diagonalWidth - 1) && internalCol) {
                    // We've inserted to the left of an existing calculation - check for propagation via insertion.
                    var updateCost = value + 1;
                    this.propagateUpdateFrom(buffer, r, c + 1, updateCost, diagonalIndex + 1);
                }
                if (diagonalIndex > 0 && internalRow) {
                    // We've inserted above an existing calculation - check for propagation via deletion
                    var updateCost = value + 1;
                    this.propagateUpdateFrom(buffer, r + 1, c, updateCost, diagonalIndex - 1);
                }
                // If both, check for propagation via substitution and possible transpositions
                if (internalRow && internalCol) {
                    var updateCost = value + (buffer.inputSequence[r + 1].key == buffer.matchSequence[c + 1].key ? 0 : 1);
                    this.propagateUpdateFrom(buffer, r + 1, c + 1, updateCost, diagonalIndex);
                    // Propagating transpositions (only possible if 'internal'.)
                    var nextInputIndex = -1;
                    for (var i = r + 2; i < buffer.inputSequence.length; i++) {
                        if (buffer.inputSequence[i].key == buffer.matchSequence[c + 1].key) {
                            nextInputIndex = i;
                            break;
                        }
                    }
                    var nextMatchIndex = -1;
                    for (var i = c + 2; i < buffer.matchSequence.length; i++) {
                        if (buffer.matchSequence[i].key == buffer.inputSequence[r + 1].key) {
                            nextMatchIndex = i;
                            break;
                        }
                    }
                    if (nextInputIndex > 0 && nextMatchIndex > 0) {
                        var transpositionCost = value + (nextInputIndex - r - 2) + 1 + (nextMatchIndex - c - 2);
                        this.propagateUpdateFrom(buffer, nextInputIndex, nextMatchIndex, transpositionCost, (buffer.diagonalWidth - 1) + nextMatchIndex - nextInputIndex);
                    }
                }
            };
            Object.defineProperty(ClassicalDistanceCalculation.prototype, "mapKey", {
                get: function () {
                    var inputString = this.inputSequence.map(function (value) { return value.key; }).join('');
                    var matchString = this.matchSequence.map(function (value) { return value.key; }).join('');
                    return inputString + models.SENTINEL_CODE_UNIT + matchString + models.SENTINEL_CODE_UNIT + this.diagonalWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ClassicalDistanceCalculation.prototype, "lastInputEntry", {
                get: function () {
                    return this.inputSequence[this.inputSequence.length - 1];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ClassicalDistanceCalculation.prototype, "lastMatchEntry", {
                get: function () {
                    return this.matchSequence[this.matchSequence.length - 1];
                },
                enumerable: true,
                configurable: true
            });
            ClassicalDistanceCalculation.computeDistance = function (input, match, bandSize) {
                if (bandSize === void 0) {
                    bandSize = 1;
                }
                // Initialize the calculation buffer, setting the diagonal width (as appropriate) in advance.
                var buffer = new ClassicalDistanceCalculation();
                bandSize = bandSize || 1;
                buffer.diagonalWidth = bandSize;
                for (var i = 0; i < input.length; i++) {
                    buffer = buffer.addInputChar(input[i]);
                }
                for (var j = 0; j < match.length; j++) {
                    buffer = buffer.addMatchChar(match[j]);
                }
                return buffer;
            };
            return ClassicalDistanceCalculation;
        }());
        correction.ClassicalDistanceCalculation = ClassicalDistanceCalculation;
    })(correction || (correction = {}));
    /// <reference path="classical-calculation.ts" />
    var correction;
    (function (correction) {
        correction.QUEUE_NODE_COMPARATOR = function (arg1, arg2) {
            return arg1.currentCost - arg2.currentCost;
        };
        // Represents a processed node for the correction-search's search-space's tree-like graph.  May represent
        // internal and 'leaf' nodes on said graph, as well as the overall root of the search.  Also used to represent
        // edges on the graph TO said nodes - there's a bit of overloading here.  Either way, it stores the cost of the 
        // optimum path used to reach the ndoe.
        //
        // The stored path cost may be an overestimate when the edit distance is greater than the current search threshold.  The
        // first version of the node to be dequeued from SearchSpace's priority queue hierarchy 'wins' and is taken as the absolute
        // minimum; subsequent versions are ignored as suboptimal.
        //
        // Provides functions usable to enumerate across the node's outward edges to new nodes for continued search.
        // Most of the actual calculations occur as part of this process.
        //
        // For nodes with raw edit-distance cost within the current threshold for correction searches, we do have admissibility.
        // If not enough nodes are available within that threshold, however, admissibility may be lost, leaving our search as a
        // heuristic.
        //
        var SearchNode = /** @class */ (function () {
            function SearchNode(rootTraversal, toKey) {
                this.toKey = function (str) { return str; };
                toKey = toKey || (function (x) { return x; });
                if (rootTraversal instanceof SearchNode) {
                    var priorNode = rootTraversal;
                    this.calculation = priorNode.calculation;
                    this.currentTraversal = priorNode.currentTraversal;
                    this.priorInput = priorNode.priorInput;
                    this.toKey = priorNode.toKey;
                }
                else {
                    this.calculation = new correction.ClassicalDistanceCalculation();
                    this.currentTraversal = rootTraversal;
                    this.priorInput = [];
                    this.toKey = toKey;
                }
            }
            Object.defineProperty(SearchNode.prototype, "knownCost", {
                get: function () {
                    return this.calculation.getHeuristicFinalCost();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchNode.prototype, "inputSamplingCost", {
                get: function () {
                    if (this._inputCost !== undefined) {
                        return this._inputCost;
                    }
                    else {
                        var MIN_P_1 = SearchSpace.MIN_KEYSTROKE_PROBABILITY;
                        // Should technically re-normalize the sampling distribution.
                        // -ln(p) is smaller for larger probabilities, as ln(p) is always <= 0.  Approaches infinity as p => 0.
                        // TODO:  probably more efficient to instead use actual 'probability space'... but that'll involve extra changes.
                        this._inputCost = this.priorInput.map(function (mass) { return mass.p > MIN_P_1 ? mass.p : MIN_P_1; }).reduce(function (previous, current) { return previous - Math.log(current); }, 0);
                        return this._inputCost;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchNode.prototype, "currentCost", {
                // The part used to prioritize our search.
                get: function () {
                    // - We reintrepret 'known cost' as a psuedo-probability.
                    //   - Noting that 1/e = 0.367879441, an edit-distance cost of 1 may be intepreted as -ln(1/e) - a log-space 'likelihood'.
                    //     - Not exactly normalized, though.
                    // That's a really, really high likelihood, thoough.
                    //
                    // At any rate, we can linearly scale the known-cost to have about whatever probability we want.
                    // If we can state it as p = 1 / (c * e), note then that ln(c * e) = ln(c) + 1.  So, scale * (ln(c) + 1).
                    // If we can state it as e^x, note that ln(e^x) = x * ln(e) = x - just scale by 'x'!
                    // p = 1 / (e^4) = 0.01831563888.  This still exceeds many neighboring keys!
                    // p = 1 / (e^5) = 0.00673794699.  Strikes a good balance.
                    // Should easily give priority to neighboring keys before edit-distance kicks in (when keys are a bit ambiguous)
                    return SearchSpace.EDIT_DISTANCE_COST_SCALE * this.knownCost + this.inputSamplingCost;
                },
                enumerable: true,
                configurable: true
            });
            SearchNode.prototype.buildInsertionEdges = function () {
                var e_7, _a;
                var edges = [];
                try {
                    for (var _b = __values(this.currentTraversal.children()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var lexicalChild = _c.value;
                        var traversal = lexicalChild.traversal();
                        var matchToken = {
                            key: lexicalChild.char,
                            traversal: traversal
                        };
                        var childCalc = this.calculation.addMatchChar(matchToken);
                        var searchChild = new SearchNode(this);
                        searchChild.calculation = childCalc;
                        searchChild.priorInput = this.priorInput;
                        searchChild.currentTraversal = traversal;
                        edges.push(searchChild);
                    }
                }
                catch (e_7_1) {
                    e_7 = { error: e_7_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_7)
                            throw e_7.error;
                    }
                }
                return edges;
            };
            SearchNode.prototype.buildDeletionEdges = function (inputDistribution) {
                var e_8, _a;
                var edges = [];
                try {
                    /*
                     * If the probability of an input is less than the highest probability * the base edit-distance likelihood,
                     * don't build an edge for it; just rely on edits from the highest-probability edge.
                     *
                     * We may be able to be stricter, but this should be a decent start.
                     *
                     * Note:  thanks to ModelCompositor.predict, we know the distribution is pre-sorted.
                     */
                    for (var inputDistribution_1 = __values(inputDistribution), inputDistribution_1_1 = inputDistribution_1.next(); !inputDistribution_1_1.done; inputDistribution_1_1 = inputDistribution_1.next()) {
                        var probMass = inputDistribution_1_1.value;
                        if (probMass.p < inputDistribution[0].p * Math.exp(-SearchSpace.EDIT_DISTANCE_COST_SCALE)) {
                            // Again, we're pre-sorted.  All further entries will be too low-cost to consider.
                            break;
                        }
                        var edgeCalc = this.calculation;
                        var transform = probMass.sample;
                        if (transform.deleteLeft) {
                            edgeCalc = edgeCalc.getSubset(edgeCalc.inputSequence.length - transform.deleteLeft, edgeCalc.matchSequence.length);
                        }
                        // TODO:  transform.deleteRight currently not supported.
                        var inputPath = Array.from(this.priorInput);
                        inputPath.push(probMass);
                        // Tokenize and iterate over input chars, adding them into the calc.
                        for (var i = 0; i < transform.insert.length; i++) {
                            var char = transform.insert[i];
                            if (models.isHighSurrogate(char)) {
                                i++;
                                char = char + transform.insert[i];
                            }
                            // In case of NFD input, filter out any empty-strings that may arise
                            // when 'keying' raw diacritics.
                            var keyedChar = this.toKey(char);
                            if (keyedChar) {
                                edgeCalc = edgeCalc.addInputChar({ key: keyedChar });
                            }
                        }
                        var childEdge = new SearchNode(this);
                        childEdge.calculation = edgeCalc;
                        childEdge.priorInput = inputPath;
                        edges.push(childEdge);
                    }
                }
                catch (e_8_1) {
                    e_8 = { error: e_8_1 };
                }
                finally {
                    try {
                        if (inputDistribution_1_1 && !inputDistribution_1_1.done && (_a = inputDistribution_1.return))
                            _a.call(inputDistribution_1);
                    }
                    finally {
                        if (e_8)
                            throw e_8.error;
                    }
                }
                return edges;
            };
            // While this may SEEM to be unnecessary, note that sometimes substitutions (which are computed
            // via insert + delete) may be lower cost than both just-insert and just-delete.
            SearchNode.prototype.buildSubstitutionEdges = function (inputDistribution) {
                var e_9, _a, e_10, _b;
                // Handles the 'input' component.
                var intermediateEdges = this.buildDeletionEdges(inputDistribution);
                var edges = [];
                try {
                    for (var _c = __values(this.currentTraversal.children()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var lexicalChild = _d.value;
                        try {
                            for (var intermediateEdges_1 = (e_10 = void 0, __values(intermediateEdges)), intermediateEdges_1_1 = intermediateEdges_1.next(); !intermediateEdges_1_1.done; intermediateEdges_1_1 = intermediateEdges_1.next()) {
                                var edge = intermediateEdges_1_1.value;
                                var traversal = lexicalChild.traversal();
                                var matchToken = {
                                    key: lexicalChild.char,
                                    traversal: traversal
                                };
                                var childCalc = edge.calculation.addMatchChar(matchToken);
                                var searchChild = new SearchNode(this);
                                searchChild.calculation = childCalc;
                                searchChild.priorInput = edge.priorInput;
                                searchChild.currentTraversal = traversal;
                                edges.push(searchChild);
                            }
                        }
                        catch (e_10_1) {
                            e_10 = { error: e_10_1 };
                        }
                        finally {
                            try {
                                if (intermediateEdges_1_1 && !intermediateEdges_1_1.done && (_b = intermediateEdges_1.return))
                                    _b.call(intermediateEdges_1);
                            }
                            finally {
                                if (e_10)
                                    throw e_10.error;
                            }
                        }
                    }
                }
                catch (e_9_1) {
                    e_9 = { error: e_9_1 };
                }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return))
                            _a.call(_c);
                    }
                    finally {
                        if (e_9)
                            throw e_9.error;
                    }
                }
                return edges;
            };
            Object.defineProperty(SearchNode.prototype, "mapKey", {
                get: function () {
                    var inputString = this.priorInput.map(function (value) { return '+' + value.sample.insert + '-' + value.sample.deleteLeft; }).join('');
                    var matchString = this.calculation.matchSequence.map(function (value) { return value.key; }).join('');
                    // TODO:  might should also track diagonalWidth.
                    return inputString + models.SENTINEL_CODE_UNIT + matchString;
                },
                enumerable: true,
                configurable: true
            });
            return SearchNode;
        }());
        correction.SearchNode = SearchNode;
        var SearchSpaceTier = /** @class */ (function () {
            function SearchSpaceTier(index, initialEdges) {
                this.processed = [];
                this.index = index;
                this.correctionQueue = new models.PriorityQueue(correction.QUEUE_NODE_COMPARATOR, initialEdges);
            }
            SearchSpaceTier.prototype.increaseMaxEditDistance = function () {
                // By extracting the entries from the priority queue and increasing distance outside of it as a batch job,
                // we get an O(N) implementation, rather than the O(N log N) that would result from maintaining the original queue.
                var entries = this.correctionQueue.toArray();
                entries.forEach(function (edge) { edge.calculation = edge.calculation.increaseMaxDistance(); });
                // Since we just modified the stored instances, and the costs may have shifted, we need to re-heapify.
                this.correctionQueue = new models.PriorityQueue(correction.QUEUE_NODE_COMPARATOR, entries);
            };
            return SearchSpaceTier;
        }());
        var SearchResult = /** @class */ (function () {
            function SearchResult(node) {
                this.resultNode = node;
            }
            Object.defineProperty(SearchResult.prototype, "inputSequence", {
                get: function () {
                    return this.resultNode.priorInput;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchResult.prototype, "matchSequence", {
                get: function () {
                    return this.resultNode.calculation.matchSequence;
                },
                enumerable: true,
                configurable: true
            });
            ;
            Object.defineProperty(SearchResult.prototype, "matchString", {
                get: function () {
                    return this.matchSequence.map(function (value) { return value.key; }).join('');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchResult.prototype, "knownCost", {
                get: function () {
                    return this.resultNode.knownCost;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchResult.prototype, "inputSamplingCost", {
                get: function () {
                    return this.resultNode.inputSamplingCost;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchResult.prototype, "totalCost", {
                get: function () {
                    return this.resultNode.currentCost;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SearchResult.prototype, "finalTraversal", {
                get: function () {
                    return this.resultNode.currentTraversal;
                },
                enumerable: true,
                configurable: true
            });
            return SearchResult;
        }());
        correction.SearchResult = SearchResult;
        // The set of search spaces corresponding to the same 'context' for search.
        // Whenever a wordbreak boundary is crossed, a new instance should be made.
        var SearchSpace = /** @class */ (function () {
            function SearchSpace(model) {
                this.tierOrdering = [];
                this.inputSequence = [];
                this.minInputCost = [];
                // Marks all results that have already been returned since the last input was received.
                this.returnedValues = {};
                // Signals that the edge has already been processed.
                this.processedEdgeSet = {};
                if (!model) {
                    throw "The LexicalModel parameter must not be null / undefined.";
                }
                else if (!model.traverseFromRoot) {
                    throw "The provided model does not implement the `traverseFromRoot` function, which is needed to support robust correction searching.";
                }
                // Constructs the comparator needed for the following line.
                this.buildQueueSpaceComparator();
                this.selectionQueue = new models.PriorityQueue(this.QUEUE_SPACE_COMPARATOR);
                this.rootNode = new SearchNode(model.traverseFromRoot(), model.toKey ? model.toKey.bind(model) : null);
                this.completedPaths = [this.rootNode];
                // Adds a base level queue to handle initial insertions.
                // Start with _just_ the root node.  Necessary for proper empty-token, empty-input handling!
                var baseTier = new SearchSpaceTier(0, [this.rootNode]);
                this.tierOrdering.push(baseTier);
                this.selectionQueue.enqueue(baseTier);
            }
            SearchSpace.prototype.buildQueueSpaceComparator = function () {
                var searchSpace = this;
                this.QUEUE_SPACE_COMPARATOR = function (space1, space2) {
                    var node1 = space1.correctionQueue.peek();
                    var node2 = space2.correctionQueue.peek();
                    var index1 = space1.index;
                    var index2 = space2.index;
                    var tierMinCost = 0;
                    var sign = 1;
                    if (index2 < index1) {
                        var temp = index2;
                        index2 = index1;
                        index1 = temp;
                        sign = -1;
                    }
                    // Boost the cost of the lower tier by the minimum cost possible for the missing inputs between them.
                    // In essence, compare the nodes as if the lower tier had the most likely input appended for each such 
                    // input missing at the lower tier.
                    //
                    // A 100% admissible heuristic to favor a deeper search, since the added cost is guaranteed if the path
                    // is traversed further.
                    //
                    // Remember, tier index i's last used input was from input index i-1.  
                    // As a result, i is the first needed input index, with index2 - 1 the last entry needed to match them.
                    for (var i = index1; i < index2; i++) {
                        tierMinCost = tierMinCost + searchSpace.minInputCost[i];
                    }
                    // Guards, just in case one of the search spaces ever has an empty node.
                    if (node1 && node2) {
                        // If node1 is lower-tier, node1 is the one in need of boosted cost.
                        // `sign` flips it when node2 is lower tier.
                        return node1.currentCost - node2.currentCost + sign * tierMinCost;
                    }
                    else if (node2) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                };
            };
            SearchSpace.prototype.increaseMaxEditDistance = function () {
                this.tierOrdering.forEach(function (tier) { tier.increaseMaxEditDistance(); });
            };
            SearchSpace.prototype.addInput = function (inputDistribution) {
                this.inputSequence.push(inputDistribution);
                // Assumes that `inputDistribution` is already sorted.
                this.minInputCost.push(-Math.log(inputDistribution[0].p));
                // With a newly-available input, we can extend new input-dependent paths from 
                // our previously-reached 'extractedResults' nodes.
                var newlyAvailableEdges = [];
                var batches = this.completedPaths.map(function (node) {
                    var deletions = node.buildDeletionEdges(inputDistribution);
                    var substitutions = node.buildSubstitutionEdges(inputDistribution);
                    return deletions.concat(substitutions);
                });
                // Don't forget to reset the array; the contained nodes no longer reach the search's end.
                this.completedPaths = [];
                this.returnedValues = {};
                batches.forEach(function (batch) {
                    newlyAvailableEdges = newlyAvailableEdges.concat(batch);
                });
                // Now that we've built the new edges, we can efficiently construct the new search tier.
                var tier = new SearchSpaceTier(this.tierOrdering.length, newlyAvailableEdges);
                this.tierOrdering.push(tier);
                this.selectionQueue.enqueue(tier);
            };
            // TODO: will want eventually for reversions and/or backspaces
            SearchSpace.prototype.removeLastInput = function () {
                // 1.  truncate all entries from that search tier; we need to 'restore' extractedResults to match
                //     the state that would have existed without the last search tier.
                // 2.  remove the last search tier.  Which may necessitate reconstructing the tier queue, but oh well.
            };
            SearchSpace.prototype.hasNextMatchEntry = function () {
                var topQueue = this.selectionQueue.peek();
                if (topQueue) {
                    return topQueue.correctionQueue.count > 0;
                }
                else {
                    return false;
                }
            };
            SearchSpace.prototype.handleNextNode = function () {
                if (!this.hasNextMatchEntry()) {
                    return { type: 'none' };
                }
                var bestTier = this.selectionQueue.dequeue();
                var currentNode = bestTier.correctionQueue.dequeue();
                var unmatchedResult = {
                    type: 'intermediate',
                    cost: currentNode.currentCost
                };
                // Have we already processed a matching edge?  If so, skip it.
                // We already know the previous edge is of lower cost.
                if (this.processedEdgeSet[currentNode.mapKey]) {
                    this.selectionQueue.enqueue(bestTier);
                    return unmatchedResult;
                }
                else {
                    this.processedEdgeSet[currentNode.mapKey] = true;
                }
                // Stage 1:  filter out nodes/edges we want to prune
                // Forbid a raw edit-distance of greater than 2.
                // Note:  .knownCost is not scaled, while its contribution to .currentCost _is_ scaled.
                var substitutionsOnly = false;
                if (currentNode.knownCost > 2) {
                    return unmatchedResult;
                }
                else if (currentNode.knownCost == 2) {
                    // Hard restriction:  no further edits will be supported.  This helps keep the search
                    // more narrowly focused.
                    substitutionsOnly = true;
                }
                var tierMinCost = 0;
                for (var i = 0; i <= bestTier.index; i++) {
                    tierMinCost += this.minInputCost[i];
                }
                // Thresholds _any_ path, partially based on currently-traversed distance.
                // Allows a little 'wiggle room' + 2 "hard" edits.
                // Can be important if needed characters don't actually exist on the keyboard 
                // ... or even just not the then-current layer of the keyboard.
                if (currentNode.currentCost > tierMinCost + 2.5 * SearchSpace.EDIT_DISTANCE_COST_SCALE) {
                    return unmatchedResult;
                }
                // Stage 2:  build remaining edges
                // Always possible, as this does not require any new input.
                if (!substitutionsOnly) {
                    var insertionEdges = currentNode.buildInsertionEdges();
                    bestTier.correctionQueue.enqueueAll(insertionEdges);
                }
                if (bestTier.index == this.tierOrdering.length - 1) {
                    // It was the final tier - store the node for future reference.
                    this.completedPaths.push(currentNode);
                    // Since we don't modify any other tier, we may simply reinsert the removed tier.
                    this.selectionQueue.enqueue(bestTier);
                    return {
                        type: 'complete',
                        cost: currentNode.currentCost,
                        finalNode: currentNode
                    };
                }
                else {
                    // Time to construct new edges for the next tier!
                    var nextTier = this.tierOrdering[bestTier.index + 1];
                    var inputIndex = nextTier.index;
                    var deletionEdges = [];
                    if (!substitutionsOnly) {
                        deletionEdges = currentNode.buildDeletionEdges(this.inputSequence[inputIndex - 1]);
                    }
                    var substitutionEdges = currentNode.buildSubstitutionEdges(this.inputSequence[inputIndex - 1]);
                    // Note:  we're live-modifying the tier's cost here!  The priority queue loses its guarantees as a result.
                    nextTier.correctionQueue.enqueueAll(deletionEdges.concat(substitutionEdges));
                    // So, we simply rebuild the selection queue.
                    this.selectionQueue = new models.PriorityQueue(this.QUEUE_SPACE_COMPARATOR, this.tierOrdering);
                    // We didn't reach an end-node, so we just end the iteration and continue the search.
                }
                // If we've somehow fully exhausted all search options, indicate that none remain.
                return unmatchedResult;
            };
            // Current best guesstimate of how compositor will retrieve ideal corrections.
            SearchSpace.prototype.getBestMatches = function (waitMillis) {
                var searchSpace, currentReturns, timeStart, maxTime, BatchingAssistant, batcher, returnedValues, preprocessedQueue, entry, batch_1, batch_2, timedOut, newResult, now, batch_3, batch;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            searchSpace = this;
                            currentReturns = {};
                            timeStart = Date.now();
                            if (waitMillis == 0) {
                                maxTime = Infinity;
                            }
                            else if (waitMillis == undefined || Number.isNaN(waitMillis)) { // also covers null.
                                maxTime = SearchSpace.DEFAULT_ALLOTTED_CORRECTION_TIME_INTERVAL;
                            }
                            else {
                                maxTime = waitMillis;
                            }
                            BatchingAssistant = /** @class */ (function () {
                                function BatchingAssistant() {
                                    this.currentCost = Number.MIN_SAFE_INTEGER;
                                    this.entries = [];
                                }
                                BatchingAssistant.prototype.checkAndAdd = function (entry) {
                                    var result = null;
                                    if (entry.currentCost > this.currentCost) {
                                        result = this.tryFinalize();
                                        this.currentCost = entry.currentCost;
                                    }
                                    // Filter out any duplicated match sequences.  The same match sequence may be reached via
                                    // different input sequences, after all.
                                    var outputMapKey = entry.calculation.matchSequence.map(function (value) { return value.key; }).join('');
                                    // First, ensure the edge has an existing 'shared' cache entry.
                                    if (!searchSpace.returnedValues[outputMapKey]) {
                                        searchSpace.returnedValues[outputMapKey] = entry;
                                    }
                                    // Check the generator's local returned-value cache - this determines whether or not we
                                    // need to add a new 'return' to the batch.
                                    if (!currentReturns[outputMapKey]) {
                                        this.entries.push(new SearchResult(entry));
                                        currentReturns[outputMapKey] = entry;
                                    }
                                    return result;
                                };
                                BatchingAssistant.prototype.tryFinalize = function () {
                                    var result = null;
                                    if (this.entries.length > 0) {
                                        result = this.entries;
                                        this.entries = [];
                                    }
                                    return result;
                                };
                                return BatchingAssistant;
                            }());
                            batcher = new BatchingAssistant();
                            returnedValues = Object.values(this.returnedValues);
                            if (!(returnedValues.length > 0))
                                return [3 /*break*/, 6];
                            preprocessedQueue = new models.PriorityQueue(correction.QUEUE_NODE_COMPARATOR, returnedValues);
                            _a.label = 1;
                        case 1:
                            if (!(preprocessedQueue.count > 0))
                                return [3 /*break*/, 4];
                            entry = preprocessedQueue.dequeue();
                            batch_1 = batcher.checkAndAdd(entry);
                            if (!batch_1)
                                return [3 /*break*/, 3];
                            return [4 /*yield*/, batch_1];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [3 /*break*/, 1];
                        case 4:
                            batch_2 = batcher.tryFinalize();
                            if (!batch_2)
                                return [3 /*break*/, 6];
                            return [4 /*yield*/, batch_2];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6:
                            timedOut = false;
                            _a.label = 7;
                        case 7:
                            newResult = void 0;
                            // Search for a 'complete' path, skipping all partial paths as long as time remains.
                            do {
                                newResult = this.handleNextNode();
                                now = Date.now();
                                if (now - timeStart > maxTime) {
                                    timedOut = true;
                                }
                            } while (!timedOut && newResult.type == 'intermediate');
                            batch_3 = void 0;
                            if (newResult.type == 'none') {
                                return [3 /*break*/, 10];
                            }
                            else if (newResult.type == 'complete') {
                                batch_3 = batcher.checkAndAdd(newResult.finalNode);
                            }
                            if (!batch_3)
                                return [3 /*break*/, 9];
                            return [4 /*yield*/, batch_3];
                        case 8:
                            _a.sent();
                            _a.label = 9;
                        case 9:
                            if (!timedOut && this.hasNextMatchEntry())
                                return [3 /*break*/, 7];
                            _a.label = 10;
                        case 10:
                            batch = batcher.tryFinalize();
                            if (!batch)
                                return [3 /*break*/, 12];
                            return [4 /*yield*/, batch];
                        case 11:
                            _a.sent();
                            _a.label = 12;
                        case 12: return [2 /*return*/, null];
                    }
                });
            };
            // p = 1 / (e^4) = 0.01831563888.  This still exceeds many neighboring keys!
            // p = 1 / (e^5) = 0.00673794699.  Strikes a good balance.
            // Should easily give priority to neighboring keys before edit-distance kicks in (when keys are a bit ambiguous)
            SearchSpace.EDIT_DISTANCE_COST_SCALE = 5;
            SearchSpace.MIN_KEYSTROKE_PROBABILITY = 0.0001;
            SearchSpace.DEFAULT_ALLOTTED_CORRECTION_TIME_INTERVAL = 33; // in milliseconds.
            return SearchSpace;
        }());
        correction.SearchSpace = SearchSpace;
    })(correction || (correction = {}));
    /// <reference path="distance-modeler.ts" />
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b)
                    if (b.hasOwnProperty(p))
                        d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var correction;
    (function (correction) {
        function textToCharTransforms(text, transformId) {
            var perCharTransforms = [];
            for (var i = 0; i < text.kmwLength(); i++) {
                var char = text.kmwCharAt(i); // is SMP-aware
                var transform = {
                    insert: char,
                    deleteLeft: 0,
                    id: transformId
                };
                perCharTransforms.push(transform);
            }
            return perCharTransforms;
        }
        var TrackedContextSuggestion = /** @class */ (function () {
            function TrackedContextSuggestion() {
            }
            return TrackedContextSuggestion;
        }());
        correction.TrackedContextSuggestion = TrackedContextSuggestion;
        var TrackedContextToken = /** @class */ (function () {
            function TrackedContextToken() {
                this.transformDistributions = [];
                this.activeReplacementId = -1;
            }
            Object.defineProperty(TrackedContextToken.prototype, "isNew", {
                get: function () {
                    return this.transformDistributions.length == 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TrackedContextToken.prototype, "currentText", {
                get: function () {
                    if (this.replacementText === undefined || this.replacementText === null) {
                        return this.raw;
                    }
                    else {
                        return this.replacementText;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TrackedContextToken.prototype, "replacement", {
                get: function () {
                    var replacementId = this.activeReplacementId;
                    return this.replacements.find(function (replacement) {
                        return replacement.suggestion.id == replacementId;
                    });
                },
                enumerable: true,
                configurable: true
            });
            TrackedContextToken.prototype.revert = function () {
                delete this.activeReplacementId;
            };
            return TrackedContextToken;
        }());
        correction.TrackedContextToken = TrackedContextToken;
        var TrackedContextState = /** @class */ (function () {
            function TrackedContextState(obj) {
                // Tracks all search spaces starting at the current token.
                // In the lm-layer's current form, this should only ever have one entry.
                // Leaves 'design space' for if/when we add support for phrase-level corrections/predictions.
                this.searchSpace = [];
                if (obj instanceof TrackedContextState) {
                    var source = obj;
                    // Be sure to deep-copy the tokens!  Pointer-aliasing is bad here.
                    this.tokens = source.tokens.map(function (token) {
                        var copy = new TrackedContextToken();
                        copy.raw = token.raw;
                        copy.replacements = token.replacements;
                        copy.activeReplacementId = token.activeReplacementId;
                        copy.transformDistributions = token.transformDistributions;
                        if (token.replacementText) {
                            copy.replacementText = token.replacementText;
                        }
                        return copy;
                    });
                    this.searchSpace = obj.searchSpace;
                    this.indexOffset = 0;
                    this.model = obj.model;
                }
                else {
                    var lexicalModel = obj;
                    this.tokens = [];
                    this.indexOffset = Number.MIN_SAFE_INTEGER;
                    this.model = lexicalModel;
                    if (lexicalModel && lexicalModel.traverseFromRoot) {
                        this.searchSpace = [new correction.SearchSpace(lexicalModel)];
                    }
                }
            }
            Object.defineProperty(TrackedContextState.prototype, "head", {
                get: function () {
                    return this.tokens[0];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TrackedContextState.prototype, "tail", {
                get: function () {
                    return this.tokens[this.tokens.length - 1];
                },
                enumerable: true,
                configurable: true
            });
            TrackedContextState.prototype.popHead = function () {
                this.tokens.splice(0, 2);
                this.indexOffset -= 1;
            };
            TrackedContextState.prototype.pushTail = function (token) {
                if (this.model && this.model.traverseFromRoot) {
                    this.searchSpace = [new correction.SearchSpace(this.model)]; // yeah, need to update SearchSpace for compatibility
                }
                else {
                    this.searchSpace = [];
                }
                this.tokens.push(token);
                var state = this;
                if (state.searchSpace.length > 0) {
                    token.transformDistributions.forEach(function (distrib) { return state.searchSpace[0].addInput(distrib); });
                }
            };
            TrackedContextState.prototype.pushWhitespaceToTail = function (transformDistribution) {
                if (transformDistribution === void 0) {
                    transformDistribution = null;
                }
                var whitespaceToken = new TrackedContextToken();
                // Track the Transform that resulted in the whitespace 'token'.
                // Will be needed for phrase-level correction/prediction.
                whitespaceToken.transformDistributions = [transformDistribution];
                whitespaceToken.raw = null;
                this.tokens.push(whitespaceToken);
            };
            /**
             * Used for 14.0's backspace workaround, which flattens all previous Distribution<Transform>
             * entries because of limitations with direct use of backspace transforms.
             * @param tokenText
             * @param transformId
             */
            TrackedContextState.prototype.replaceTailForBackspace = function (tokenText, transformId) {
                this.tokens.pop();
                // It's a backspace transform; time for special handling!
                //
                // For now, with 14.0, we simply compress all remaining Transforms for the token into 
                // multiple single-char transforms.  Probabalistically modeling BKSP is quite complex, 
                // so we simplify by assuming everything remaining after a BKSP is 'true' and 'intended' text.
                //
                // Note that we cannot just use a single, monolithic transform at this point b/c
                // of our current edit-distance optimization strategy; diagonalization is currently... 
                // not very compatible with that.
                var backspacedTokenContext = textToCharTransforms(tokenText, transformId).map(function (transform) {
                    return [{ sample: transform, p: 1.0 }];
                });
                var compactedToken = new TrackedContextToken();
                compactedToken.raw = tokenText;
                compactedToken.transformDistributions = backspacedTokenContext;
                this.pushTail(compactedToken);
            };
            TrackedContextState.prototype.updateTail = function (transformDistribution, tokenText) {
                var editedToken = this.tail;
                // Preserve existing text if new text isn't specified.
                tokenText = tokenText || (tokenText === '' ? '' : editedToken.raw);
                if (transformDistribution && transformDistribution.length > 0) {
                    editedToken.transformDistributions.push(transformDistribution);
                    if (this.searchSpace) {
                        this.searchSpace.forEach(function (space) { return space.addInput(transformDistribution); });
                    }
                }
                // Replace old token's raw-text with new token's raw-text.
                editedToken.raw = tokenText;
            };
            TrackedContextState.prototype.toRawTokenization = function () {
                var e_11, _a;
                var sequence = [];
                try {
                    for (var _b = __values(this.tokens), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var token = _c.value;
                        // Hide any tokens representing wordbreaks.  (Thinking ahead to phrase-level possibilities)
                        if (token.currentText !== null) {
                            sequence.push(token.currentText);
                        }
                    }
                }
                catch (e_11_1) {
                    e_11 = { error: e_11_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_11)
                            throw e_11.error;
                    }
                }
                return sequence;
            };
            return TrackedContextState;
        }());
        correction.TrackedContextState = TrackedContextState;
        var CircularArray = /** @class */ (function () {
            function CircularArray(size) {
                if (size === void 0) {
                    size = CircularArray.DEFAULT_ARRAY_SIZE;
                }
                this.currentHead = 0;
                this.currentTail = 0;
                this.circle = Array(size);
            }
            Object.defineProperty(CircularArray.prototype, "count", {
                get: function () {
                    var diff = this.currentHead - this.currentTail;
                    if (diff < 0) {
                        diff = diff + this.circle.length;
                    }
                    return diff;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CircularArray.prototype, "maxCount", {
                get: function () {
                    return this.circle.length;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CircularArray.prototype, "oldest", {
                get: function () {
                    if (this.count == 0) {
                        return undefined;
                    }
                    return this.item(0);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CircularArray.prototype, "newest", {
                get: function () {
                    if (this.count == 0) {
                        return undefined;
                    }
                    return this.item(this.count - 1);
                },
                enumerable: true,
                configurable: true
            });
            CircularArray.prototype.enqueue = function (item) {
                var prevItem = null;
                var nextHead = (this.currentHead + 1) % this.maxCount;
                if (nextHead == this.currentTail) {
                    prevItem = this.circle[this.currentTail];
                    this.currentTail = (this.currentTail + 1) % this.maxCount;
                }
                this.circle[this.currentHead] = item;
                this.currentHead = nextHead;
                return prevItem;
            };
            CircularArray.prototype.dequeue = function () {
                if (this.currentTail == this.currentHead) {
                    return null;
                }
                else {
                    var item = this.circle[this.currentTail];
                    this.currentTail = (this.currentTail + 1) % this.maxCount;
                    return item;
                }
            };
            CircularArray.prototype.popNewest = function () {
                if (this.currentTail == this.currentHead) {
                    return null;
                }
                else {
                    var item = this.circle[this.currentHead];
                    this.currentHead = (this.currentHead - 1 + this.maxCount) % this.maxCount;
                    return item;
                }
            };
            /**
             * Returns items contained within the circular array, ordered from 'oldest' to 'newest' -
             * the same order in which the items will be dequeued.
             * @param index
             */
            CircularArray.prototype.item = function (index) {
                if (index >= this.count) {
                    throw "Invalid array index";
                }
                var mappedIndex = (this.currentTail + index) % this.maxCount;
                return this.circle[mappedIndex];
            };
            CircularArray.DEFAULT_ARRAY_SIZE = 5;
            return CircularArray;
        }());
        var ContextTracker = /** @class */ (function (_super) {
            __extends(ContextTracker, _super);
            function ContextTracker() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ContextTracker.attemptMatchContext = function (tokenizedContext, matchState, transformDistribution) {
                // Map the previous tokenized state to an edit-distance friendly version.
                var matchContext = matchState.toRawTokenization();
                // Inverted order, since 'match' existed before our new context.
                var mapping = correction.ClassicalDistanceCalculation.computeDistance(matchContext.map(function (value) { return ({ key: value }); }), tokenizedContext.map(function (value) { return ({ key: value }); }), 1);
                var editPath = mapping.editPath();
                var poppedHead = false;
                var pushedTail = false;
                // Matters greatly when starting from a nil context.
                if (editPath.length > 1) {
                    // First entry:  may not be an 'insert' or a 'transpose' op.
                    // 'insert' allowed if the next token is 'substitute', as this may occur with an edit path of length 2.
                    if ((editPath[0] == 'insert' && !(editPath[1] == 'substitute' && editPath.length == 2)) || editPath[0].indexOf('transpose') >= 0) {
                        return null;
                    }
                    else if (editPath[0] == 'delete') {
                        poppedHead = true; // a token from the previous state has been wholly removed.
                    }
                }
                // Last entry:  may not be a 'delete' or a 'transpose' op.
                var tailIndex = editPath.length - 1;
                var ignorePenultimateMatch = false;
                if (editPath[tailIndex] == 'delete' || editPath[0].indexOf('transpose') >= 0) {
                    return null;
                }
                else if (editPath[tailIndex] == 'insert') {
                    pushedTail = true;
                }
                else if (tailIndex > 0 && editPath[tailIndex - 1] == 'insert' && editPath[tailIndex] == 'substitute') {
                    // Tends to happen when accepting suggestions.
                    pushedTail = true;
                    ignorePenultimateMatch = true;
                }
                // Now to check everything in-between:  should be exclusively 'match'es.
                for (var index = 1; index < editPath.length - (ignorePenultimateMatch ? 2 : 1); index++) {
                    if (editPath[index] != 'match') {
                        return null;
                    }
                }
                // If we've made it here... success!  We have a context match!
                var state;
                if (pushedTail) {
                    // On suggestion acceptance, we should update the previous final token.
                    // We do it first so that the acceptance is replicated in the new TrackedContextState
                    // as well.
                    if (ignorePenultimateMatch) {
                        // For this case, we were likely called by ModelCompositor.acceptSuggestion(), which
                        // would have marked the accepted suggestion.
                        matchState.tail.replacementText = tokenizedContext[tokenizedContext.length - 2];
                    }
                    state = new TrackedContextState(matchState);
                }
                else {
                    // Since we're continuing a previously-cached context, we can reuse the same SearchSpace
                    // to continue making predictions.
                    state = matchState;
                }
                var hasDistribution = transformDistribution && Array.isArray(transformDistribution);
                var primaryInput = hasDistribution ? transformDistribution[0].sample : null;
                if (primaryInput && primaryInput.insert == "" && primaryInput.deleteLeft == 0 && !primaryInput.deleteRight) {
                    primaryInput = null;
                }
                var isBackspace = primaryInput && primaryInput.insert == "" && primaryInput.deleteLeft > 0 && !primaryInput.deleteRight;
                var finalToken = tokenizedContext[tokenizedContext.length - 1];
                /* Assumption:  This is an adequate check for its two sub-branches.
                 *
                 * Basis:
                 * - Assumption: one keystroke may only cause a single token to rotate out of context.
                 *   - That is, no "reasonable" keystroke would emit enough code points to 'bump' two words simultaneously.
                 *   - ... This one may need to be loosened a bit... but it should be enough for initial correction testing as-is.
                 * - Assumption:  one keystroke may only cause a single token to be appended to the context
                 *   - That is, no "reasonable" keystroke would emit a Transform adding two separate word tokens
                 *     - For languages using whitespace to word-break, said keystroke would have to include said whitespace to break the assumption.
                 */
                // If there is/was more than one context token available...
                if (editPath.length > 1) {
                    // We're removing a context token, but at least one remains.
                    if (poppedHead) {
                        state.popHead();
                    }
                    // We're adding an additional context token.
                    if (pushedTail) {
                        // ASSUMPTION:  any transform that triggers this case is a pure-whitespace Transform, as we
                        //              need a word-break before beginning a new word's context.
                        //              Worth note:  when invalid, the lm-layer already has problems in other aspects too.
                        state.pushWhitespaceToTail(transformDistribution);
                        var emptyToken = new TrackedContextToken();
                        emptyToken.raw = '';
                        // Continuing the earlier assumption, that 'pure-whitespace Transform' does not emit any initial characters
                        // for the new word (token), so the input keystrokes do not correspond to the new text token.
                        emptyToken.transformDistributions = [];
                        state.pushTail(emptyToken);
                    }
                    else { // We're editing the final context token.
                        // TODO:  Assumption:  we didn't 'miss' any inputs somehow.
                        //        As is, may be prone to fragility should the lm-layer's tracked context 'desync' from its host's.
                        if (isBackspace) {
                            state.replaceTailForBackspace(finalToken, primaryInput.id);
                        }
                        else {
                            state.updateTail(primaryInput ? transformDistribution : null, finalToken);
                        }
                    }
                    // There is only one word in the context.
                }
                else {
                    // TODO:  Assumption:  we didn't 'miss' any inputs somehow.
                    //        As is, may be prone to fragility should the lm-layer's tracked context 'desync' from its host's.
                    if (editPath[tailIndex] == 'insert') {
                        // Construct appropriate initial token.
                        var token = new TrackedContextToken();
                        token.raw = tokenizedContext[0];
                        token.transformDistributions = [transformDistribution];
                        state.pushTail(token);
                    }
                    else { // Edit the lone context token.
                        // Consider backspace entry for this case?
                        if (isBackspace) {
                            state.replaceTailForBackspace(finalToken, primaryInput.id);
                        }
                        else {
                            state.updateTail(primaryInput ? transformDistribution : null, finalToken);
                        }
                    }
                }
                return state;
            };
            ContextTracker.modelContextState = function (tokenizedContext, lexicalModel) {
                var baseTokens = tokenizedContext.map(function (entry) {
                    var token = new TrackedContextToken();
                    token.raw = entry;
                    if (token.raw) {
                        token.transformDistributions = textToCharTransforms(token.raw).map(function (transform) {
                            return [{ sample: transform, p: 1.0 }];
                        });
                    }
                    else {
                        // Helps model context-final wordbreaks.
                        token.transformDistributions = [];
                    }
                    return token;
                });
                // And now build the final context state object, which includes whitespace 'tokens'.
                var state = new TrackedContextState(lexicalModel);
                if (baseTokens.length > 0) {
                    state.pushTail(baseTokens.splice(0, 1)[0]);
                }
                while (baseTokens.length > 0) {
                    state.pushWhitespaceToTail();
                    state.pushTail(baseTokens.splice(0, 1)[0]);
                }
                if (state.tokens.length == 0) {
                    var token = new TrackedContextToken();
                    token.raw = '';
                    state.pushTail(token);
                }
                return state;
            };
            /**
             * Compares the current, post-input context against the most recently-seen contexts from previous prediction calls, returning
             * the most information-rich `TrackedContextState` possible.  If a match is found, the state will be annotated with the
             * input information provided to previous prediction calls and persisted correction-search calculations for re-use.
             *
             * @param model
             * @param context
             * @param mainTransform
             * @param transformDistribution
             */
            ContextTracker.prototype.analyzeState = function (model, context, transformDistribution) {
                if (!model.traverseFromRoot) {
                    // Assumption:  LexicalModel provides a valid traverseFromRoot function.  (Is technically optional)
                    // Without it, no 'corrections' may be made; the model can only be used to predict, not correct.
                    throw "This lexical model does not provide adequate data for correction algorithms and context reuse";
                }
                var tokenizedContext = models.tokenize(model.wordbreaker || wordBreakers.default, context);
                if (tokenizedContext.left.length > 0) {
                    for (var i = this.count - 1; i >= 0; i--) {
                        var resultState = ContextTracker.attemptMatchContext(tokenizedContext.left, this.item(i), transformDistribution);
                        if (resultState) {
                            resultState.taggedContext = context;
                            if (resultState != this.item(i)) {
                                this.enqueue(resultState);
                            }
                            return resultState;
                        }
                    }
                }
                // Else:  either empty OR we've detected a 'new context'.  Initialize from scratch; no prior input information is
                // available.  Only the results of the prior inputs are known.
                //
                // Assumption:  as a caret needs to move to context before any actual transform distributions occur,
                // this state is only reached on caret moves; thus, transformDistribution is actually just a single null transform.
                var state = ContextTracker.modelContextState(tokenizedContext.left, model);
                state.taggedContext = context;
                this.enqueue(state);
                return state;
            };
            return ContextTracker;
        }(CircularArray));
        correction.ContextTracker = ContextTracker;
    })(correction || (correction = {}));
    /// <reference path="../node_modules/@keymanapp/models-templates/src/index.ts" />
    /// <reference path="correction/context-tracker.ts" />
    var __assign = (this && this.__assign) || function () {
        __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var ModelCompositor = /** @class */ (function () {
        function ModelCompositor(lexicalModel) {
            this.SUGGESTION_ID_SEED = 0;
            this.lexicalModel = lexicalModel;
            if (lexicalModel.traverseFromRoot) {
                this.contextTracker = new correction.ContextTracker();
            }
            this.punctuation = ModelCompositor.determinePunctuationFromModel(lexicalModel);
        }
        ModelCompositor.prototype.isWhitespace = function (transform) {
            // Matches prefixed text + any instance of a character with Unicode general property Z* or the following: CR, LF, and Tab.
            var whitespaceRemover = /.*[\u0009\u000A\u000D\u0020\u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u202f\u205f\u3000]/i;
            // Filter out null-inserts; their high probability can cause issues.
            if (transform.insert == '') { // Can actually register as 'whitespace'.
                return false;
            }
            var insert = transform.insert;
            insert = insert.replace(whitespaceRemover, '');
            return insert == '';
        };
        ModelCompositor.prototype.isBackspace = function (transform) {
            return transform.insert == "" && transform.deleteLeft > 0;
        };
        ModelCompositor.prototype.isEmpty = function (transform) {
            return transform.insert == '' && transform.deleteLeft == 0;
        };
        ModelCompositor.prototype.predictFromCorrections = function (corrections, context) {
            var e_12, _a;
            var returnedPredictions = [];
            var _loop_6 = function (correction_1) {
                var predictions = this_3.lexicalModel.predict(correction_1.sample, context);
                var predictionSet = predictions.map(function (pair) {
                    var transform = correction_1.sample;
                    var inputProb = correction_1.p;
                    // Let's not rely on the model to copy transform IDs.
                    // Only bother is there IS an ID to copy.
                    if (transform.id !== undefined) {
                        pair.sample.transformId = transform.id;
                    }
                    var prediction = { sample: pair.sample, p: pair.p * inputProb };
                    return prediction;
                }, this_3);
                returnedPredictions = returnedPredictions.concat(predictionSet);
            };
            var this_3 = this;
            try {
                for (var corrections_1 = __values(corrections), corrections_1_1 = corrections_1.next(); !corrections_1_1.done; corrections_1_1 = corrections_1.next()) {
                    var correction_1 = corrections_1_1.value;
                    _loop_6(correction_1);
                }
            }
            catch (e_12_1) {
                e_12 = { error: e_12_1 };
            }
            finally {
                try {
                    if (corrections_1_1 && !corrections_1_1.done && (_a = corrections_1.return))
                        _a.call(corrections_1);
                }
                finally {
                    if (e_12)
                        throw e_12.error;
                }
            }
            return returnedPredictions;
        };
        ModelCompositor.prototype.predict = function (transformDistribution, context) {
            var e_13, _a, e_14, _b;
            var suggestionDistribution = [];
            var lexicalModel = this.lexicalModel;
            var punctuation = this.punctuation;
            if (!(transformDistribution instanceof Array)) {
                transformDistribution = [{ sample: transformDistribution, p: 1.0 }];
            }
            else if (transformDistribution.length == 0) {
                /*
                   Robust stop-gap: if our other filters somehow fail, this fixes the
                   zero-length array by making it match the form of the array that
                   would result if it were instead called with the other legal
                   parameter type - a single Transform.
          
                   Unfortunately, the method will lack all data about even
                   the original keystroke that resulted in the call... but this way,
                   we can at least get some predictions rather than shortcutting
                   and producing none whatsoever.
                */
                transformDistribution.push({
                    sample: {
                        insert: '',
                        deleteLeft: 0
                    },
                    p: 1.0
                });
            }
            var inputTransform = transformDistribution.sort(function (a, b) {
                return b.p - a.p;
            })[0].sample;
            // Only allow new-word suggestions if space was the most likely keypress.
            var allowSpace = this.isWhitespace(inputTransform);
            var allowBksp = this.isBackspace(inputTransform);
            var postContext = models.applyTransform(inputTransform, context);
            var keepOptionText = this.wordbreak(postContext);
            var keepOption = null;
            var rawPredictions = [];
            // Used to restore whitespaces if operations would remove them.
            var prefixTransform;
            var contextState = null;
            // Section 1:  determining 'prediction roots'.
            if (!this.contextTracker) {
                var predictionRoots = void 0;
                // Generates raw prediction distributions for each valid input.  Can only 'correct'
                // against the final input.
                //
                // This is the old, 12.0-13.0 'correction' style.
                if (allowSpace) {
                    // Detect start of new word; prevent whitespace loss here.
                    predictionRoots = [{ sample: inputTransform, p: 1.0 }];
                    prefixTransform = inputTransform;
                }
                else {
                    predictionRoots = transformDistribution.map(function (alt) {
                        var transform = alt.sample;
                        // Filter out special keys unless they're expected.
                        if (this.isWhitespace(transform) && !allowSpace) {
                            return null;
                        }
                        else if (this.isBackspace(transform) && !allowBksp) {
                            return null;
                        }
                        return alt;
                    }, this);
                }
                // Remove `null` entries.
                predictionRoots = predictionRoots.filter(function (tuple) { return !!tuple; });
                // Running in bulk over all suggestions, duplicate entries may be possible.
                rawPredictions = this.predictFromCorrections(predictionRoots, context);
            }
            else {
                contextState = this.contextTracker.analyzeState(this.lexicalModel, postContext, !this.isEmpty(inputTransform) ?
                    transformDistribution :
                    null);
                // TODO:  Should we filter backspaces & whitespaces out of the transform distribution?
                //        Ideally, the answer (in the future) will be no, but leaving it in right now may pose an issue.
                // Rather than go "full hog" and make a priority queue out of the eventual, future competing search spaces...
                // let's just note that right now, there will only ever be one.
                //
                // The 'eventual' logic will be significantly more complex, though still manageable.
                var searchSpace = contextState.searchSpace[0];
                var newEmptyToken_1 = false;
                // Detect if we're starting a new context state.
                var contextTokens = contextState.tokens;
                if (contextTokens.length == 0 || contextTokens[contextTokens.length - 1].isNew) {
                    if (this.isEmpty(inputTransform) || this.isWhitespace(inputTransform)) {
                        newEmptyToken_1 = true;
                        prefixTransform = inputTransform;
                        context = postContext; // Ensure the whitespace token is preapplied!
                    }
                }
                // TODO:  whitespace, backspace filtering.  Do it here.
                //        Whitespace is probably fine, actually.  Less sure about backspace.
                var bestCorrectionCost = void 0;
                try {
                    for (var _c = __values(searchSpace.getBestMatches()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var matches = _d.value;
                        // Corrections obtained:  now to predict from them!
                        var predictionRoots = matches.map(function (match) {
                            var correction = match.matchString;
                            // Worth considering:  extend Traversal to allow direct prediction lookups?
                            // let traversal = match.finalTraversal;
                            // Find a proper Transform ID to map the correction to.
                            // Without it, we can't apply the suggestion.
                            var finalInput;
                            if (match.inputSequence.length > 0) {
                                finalInput = match.inputSequence[match.inputSequence.length - 1].sample;
                            }
                            else {
                                finalInput = inputTransform; // A fallback measure.  Greatly matters for empty contexts.
                            }
                            var deleteLeft = 0;
                            // remove actual token string.  If new token, there should be nothing to delete.
                            if (!newEmptyToken_1) {
                                // If this is triggered from a backspace, make sure to use its results
                                // and also include its left-deletions!  It's the one post-input context case.
                                if (allowBksp) {
                                    deleteLeft = this.wordbreak(postContext).kmwLength() + inputTransform.deleteLeft;
                                }
                                else {
                                    // Normal case - use the pre-input context.
                                    deleteLeft = this.wordbreak(context).kmwLength();
                                }
                            }
                            // Replace the existing context with the correction.
                            var correctionTransform = {
                                insert: correction,
                                deleteLeft: deleteLeft,
                                id: inputTransform.id // The correction should always be based on the most recent external transform/transcription ID.
                            };
                            return {
                                sample: correctionTransform,
                                p: Math.exp(-match.totalCost)
                            };
                        }, this);
                        // Running in bulk over all suggestions, duplicate entries may be possible.
                        var predictions = this.predictFromCorrections(predictionRoots, context);
                        // Only set 'best correction' cost when a correction ACTUALLY YIELDS predictions.
                        if (predictions.length > 0 && bestCorrectionCost === undefined) {
                            bestCorrectionCost = -Math.log(predictionRoots[0].p);
                        }
                        rawPredictions = rawPredictions.concat(predictions);
                        // TODO:  We don't currently de-duplicate predictions at this point quite yet, so
                        // it's technically possible that we return too few.
                        var correctionCost = matches[0].totalCost;
                        // Searching a bit longer is permitted when no predictions have been found.
                        if (correctionCost >= bestCorrectionCost + 8) {
                            break;
                            // If enough have been found, we're safe to terminate earlier.
                        }
                        else if (rawPredictions.length >= ModelCompositor.MAX_SUGGESTIONS) {
                            if (correctionCost >= bestCorrectionCost + 4) { // e^-4 = 0.0183156388.  Allows "80%" of an extra edit.
                                // Very useful for stopping 'sooner' when words reach a sufficient length.
                                break;
                            }
                            else {
                                // Sort the prediction list; we need them in descending order for the next check.
                                rawPredictions.sort(function (a, b) {
                                    return b.p - a.p;
                                });
                                // If the best suggestion from the search's current tier fails to beat the worst
                                // pending suggestion from previous tiers, assume all further corrections will 
                                // similarly fail to win; terminate the search-loop.
                                if (rawPredictions[ModelCompositor.MAX_SUGGESTIONS - 1].p > Math.exp(-correctionCost)) {
                                    break;
                                }
                            }
                        }
                    }
                }
                catch (e_13_1) {
                    e_13 = { error: e_13_1 };
                }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return))
                            _a.call(_c);
                    }
                    finally {
                        if (e_13)
                            throw e_13.error;
                    }
                }
            }
            // Section 2 - post-analysis for our generated predictions, managing 'keep'.
            // Assumption:  Duplicated 'displayAs' properties indicate duplicated Suggestions.
            // When true, we can use an 'associative array' to de-duplicate everything.
            var suggestionDistribMap = {};
            var currentCasing = null;
            if (lexicalModel.languageUsesCasing) {
                currentCasing = this.detectCurrentCasing(postContext);
            }
            var baseWord = this.wordbreak(context);
            try {
                // Deduplicator + annotator of 'keep' suggestions.
                for (var rawPredictions_1 = __values(rawPredictions), rawPredictions_1_1 = rawPredictions_1.next(); !rawPredictions_1_1.done; rawPredictions_1_1 = rawPredictions_1.next()) {
                    var prediction = rawPredictions_1_1.value;
                    // Combine duplicate samples.
                    var displayText = prediction.sample.displayAs;
                    var preserveAsKeep = displayText == keepOptionText;
                    // De-duplication should be case-insensitive, but NOT
                    // diacritic-insensitive.
                    if (this.lexicalModel.languageUsesCasing) {
                        preserveAsKeep = preserveAsKeep || displayText == this.lexicalModel.applyCasing('lower', keepOptionText);
                    }
                    if (preserveAsKeep) {
                        // Preserve the original, pre-keyed version of the text.
                        if (!keepOption) {
                            var baseTransform = prediction.sample.transform;
                            var keepTransform = {
                                insert: keepOptionText,
                                deleteLeft: baseTransform.deleteLeft,
                                deleteRight: baseTransform.deleteRight,
                                id: baseTransform.id
                            };
                            var intermediateKeep = models.transformToSuggestion(keepTransform, prediction.p);
                            keepOption = this.toAnnotatedSuggestion(intermediateKeep, 'keep', models.QuoteBehavior.noQuotes);
                            keepOption.matchesModel = true;
                            // Since we replaced the original Suggestion with a keep-annotated one,
                            // we must manually preserve the transform ID.
                            keepOption.transformId = prediction.sample.transformId;
                        }
                        else if (keepOption.p && prediction.p) {
                            keepOption.p += prediction.p;
                        }
                    }
                    else {
                        // Apply capitalization rules now; facilitates de-duplication of suggestions
                        // that may be caused as a result.
                        //
                        // Example:  "apple" and "Apple" are separate when 'lower', but identical for 'initial' and 'upper'.
                        if (currentCasing && currentCasing != 'lower') {
                            this.applySuggestionCasing(prediction.sample, baseWord, currentCasing);
                            // update the mapping string, too.
                            displayText = prediction.sample.displayAs;
                        }
                        var existingSuggestion = suggestionDistribMap[displayText];
                        if (existingSuggestion) {
                            existingSuggestion.p += prediction.p;
                        }
                        else {
                            suggestionDistribMap[displayText] = prediction;
                        }
                    }
                }
            }
            catch (e_14_1) {
                e_14 = { error: e_14_1 };
            }
            finally {
                try {
                    if (rawPredictions_1_1 && !rawPredictions_1_1.done && (_b = rawPredictions_1.return))
                        _b.call(rawPredictions_1);
                }
                finally {
                    if (e_14)
                        throw e_14.error;
                }
            }
            // Generate a default 'keep' option if one was not otherwise produced.
            if (!keepOption && keepOptionText != '') {
                // IMPORTANT:  duplicate the original transform.  Causes nasty side-effects
                // for context-tracking otherwise!
                var keepTransform = __assign({}, inputTransform);
                // 1 is a filler value; goes unused b/c is for a 'keep'.
                var keepSuggestion = models.transformToSuggestion(keepTransform, 1);
                // This is the one case where the transform doesn't insert the full word; we need to override the displayAs param.
                keepSuggestion.displayAs = keepOptionText;
                keepOption = this.toAnnotatedSuggestion(keepSuggestion, 'keep');
                keepOption.matchesModel = false;
            }
            // Section 3:  Finalize suggestions, truncate list to the N (MAX_SUGGESTIONS) most optimal, return.
            // Now that we've calculated a unique set of probability masses, time to make them into a proper
            // distribution and prep for return.
            for (var key in suggestionDistribMap) {
                var pair = suggestionDistribMap[key];
                suggestionDistribution.push(pair);
            }
            suggestionDistribution = suggestionDistribution.sort(function (a, b) {
                return b.p - a.p; // Use descending order - we want the largest probabilty suggestions first!
            });
            var suggestions = suggestionDistribution.splice(0, ModelCompositor.MAX_SUGGESTIONS).map(function (value) {
                if (value.sample['p']) {
                    // For analysis / debugging
                    value.sample['lexical-p'] = value.sample['p'];
                    value.sample['correction-p'] = value.p / value.sample['p'];
                    // Use of the Trie model always exposed the lexical model's probability for a word to KMW.
                    // It's useful for debugging right now, so may as well repurpose it as the posterior.
                    //
                    // We still condition on 'p' existing so that test cases aren't broken.
                    value.sample['p'] = value.p;
                }
                //
                return value.sample;
            });
            if (keepOption) {
                suggestions = [keepOption].concat(suggestions);
            }
            // Apply 'after word' punctuation and casing (when applicable).  Also, set suggestion IDs.  
            // We delay until now so that utility functions relying on the unmodified Transform may execute properly.
            var compositor = this;
            suggestions.forEach(function (suggestion) {
                // Valid 'keep' suggestions may have zero length; we still need to evaluate the following code
                // for such cases.
                // Do we need to manipulate the suggestion's transform based on the current state of the context?
                if (!context.right) {
                    suggestion.transform.insert += punctuation.insertAfterWord;
                }
                else {
                    // If we're mid-word, delete its original post-caret text.
                    var tokenization = compositor.tokenize(context);
                    if (tokenization && tokenization.caretSplitsToken) {
                        // While we wait on the ability to provide a more 'ideal' solution, let's at least
                        // go with a more stable, if slightly less ideal, solution for now.
                        // 
                        // A predictive text default (on iOS, at least) - immediately wordbreak 
                        // on suggestions accepted mid-word.
                        suggestion.transform.insert += punctuation.insertAfterWord;
                    }
                }
                // If this is a suggestion after wordbreak input, make sure we preserve the wordbreak transform!
                if (prefixTransform) {
                    var mergedTransform = models.buildMergedTransform(prefixTransform, suggestion.transform);
                    mergedTransform.id = suggestion.transformId;
                    // Temporarily and locally drops 'readonly' semantics so that we can reassign the transform.
                    // See https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#improved-control-over-mapped-type-modifiers
                    var mutableSuggestion = suggestion;
                    // Assignment via by-reference behavior, as suggestion is an object
                    mutableSuggestion.transform = mergedTransform;
                }
                suggestion.id = compositor.SUGGESTION_ID_SEED;
                compositor.SUGGESTION_ID_SEED++;
            });
            // Store the suggestions on the final token of the current context state (if it exists).
            // Or, once phrase-level suggestions are possible, on whichever token serves as each prediction's root.
            if (contextState) {
                contextState.tail.replacements = suggestions.map(function (suggestion) {
                    return {
                        suggestion: suggestion,
                        tokenWidth: 1
                    };
                });
            }
            return suggestions;
        };
        // Responsible for applying casing rules to suggestions.
        ModelCompositor.prototype.applySuggestionCasing = function (suggestion, baseWord, casingForm) {
            // Step 1:  does the suggestion replace the whole word?  If not, we should extend the suggestion to do so.
            var unchangedLength = baseWord.kmwLength() - suggestion.transform.deleteLeft;
            if (unchangedLength > 0) {
                suggestion.transform.deleteLeft += unchangedLength;
                suggestion.transform.insert = baseWord.kmwSubstr(0, unchangedLength) + suggestion.transform.insert;
            }
            // Step 2: Now that the transform affects the whole word, we may safely apply casing rules.
            suggestion.transform.insert = this.lexicalModel.applyCasing(casingForm, suggestion.transform.insert);
            suggestion.displayAs = this.lexicalModel.applyCasing(casingForm, suggestion.displayAs);
        };
        ModelCompositor.prototype.toAnnotatedSuggestion = function (suggestion, annotationType, quoteBehavior) {
            if (quoteBehavior === void 0) {
                quoteBehavior = models.QuoteBehavior.default;
            }
            // A method-internal 'import' of the enum.
            var QuoteBehavior = models.QuoteBehavior;
            var defaultQuoteBehavior = QuoteBehavior.noQuotes;
            if (annotationType == 'keep' || annotationType == 'revert') {
                defaultQuoteBehavior = QuoteBehavior.useQuotes;
            }
            return {
                transform: suggestion.transform,
                transformId: suggestion.transformId,
                displayAs: QuoteBehavior.apply(quoteBehavior, suggestion.displayAs, this.punctuation, defaultQuoteBehavior),
                tag: annotationType,
                p: suggestion.p
            };
        };
        /**
         * Returns the punctuation used for this model, filling out unspecified fields
         */
        ModelCompositor.determinePunctuationFromModel = function (model) {
            var defaults = DEFAULT_PUNCTUATION;
            // Use the defaults of the model does not provide any punctuation at all.
            if (!model.punctuation)
                return defaults;
            var specifiedPunctuation = model.punctuation;
            var insertAfterWord = specifiedPunctuation.insertAfterWord;
            if (insertAfterWord !== '' && !insertAfterWord) {
                insertAfterWord = defaults.insertAfterWord;
            }
            var quotesForKeepSuggestion = specifiedPunctuation.quotesForKeepSuggestion;
            if (!quotesForKeepSuggestion) {
                quotesForKeepSuggestion = defaults.quotesForKeepSuggestion;
            }
            var isRTL = specifiedPunctuation.isRTL;
            // Default:  false / undefined, so no need to directly specify it.
            return {
                insertAfterWord: insertAfterWord, quotesForKeepSuggestion: quotesForKeepSuggestion, isRTL: isRTL
            };
        };
        ModelCompositor.prototype.acceptSuggestion = function (suggestion, context, postTransform) {
            // Step 1:  generate and save the reversion's Transform.
            var sourceTransform = suggestion.transform;
            var deletedLeftChars = context.left.kmwSubstr(-sourceTransform.deleteLeft, sourceTransform.deleteLeft);
            var insertedLength = sourceTransform.insert.kmwLength();
            var reversionTransform = {
                insert: deletedLeftChars,
                deleteLeft: insertedLength
            };
            // Step 2:  building the proper 'displayAs' string for the Reversion
            var postContext = context;
            if (postTransform) {
                // The code above restores the state to the context at the time the `Suggestion` was created.
                // `postTransform` handles any missing context that came later.
                reversionTransform = models.buildMergedTransform(reversionTransform, postTransform);
                // Now that we've built the reversion based upon the Suggestion's original context,
                // we manipulate it in order to get a proper 'displayAs' string.
                postContext = models.applyTransform(postTransform, postContext);
            }
            var revertedPrefix;
            var postContextTokenization = this.tokenize(postContext);
            if (postContextTokenization) {
                // Handles display string for reversions triggered by accepting a suggestion mid-token.
                if (postContextTokenization.left.length > 0) {
                    revertedPrefix = postContextTokenization.left[postContextTokenization.left.length - 1];
                }
                else {
                    revertedPrefix = '';
                }
                revertedPrefix += postContextTokenization.caretSplitsToken ? postContextTokenization.right[0] : '';
            }
            else {
                revertedPrefix = this.wordbreak(postContext);
            }
            var firstConversion = models.transformToSuggestion(reversionTransform);
            firstConversion.displayAs = revertedPrefix;
            // Build the actual Reversion, which is technically an annotated Suggestion.
            // Since we're outside of the standard `predict` control path, we'll need to
            // set the Reversion's ID directly.
            var reversion = this.toAnnotatedSuggestion(firstConversion, 'revert');
            if (suggestion.transformId != null) {
                reversion.transformId = -suggestion.transformId;
            }
            if (suggestion.id != null) {
                // Since a reversion inverts its source suggestion, we set its ID to be the 
                // additive inverse of the source suggestion's ID.  Makes easy mapping /
                // verification later.
                reversion.id = -suggestion.id;
            }
            else {
                reversion.id = -this.SUGGESTION_ID_SEED;
                this.SUGGESTION_ID_SEED++;
            }
            // Step 3:  if we track Contexts, update the tracking data as appropriate.
            if (this.contextTracker) {
                var contextState = this.contextTracker.newest;
                if (!contextState) {
                    contextState = this.contextTracker.analyzeState(this.lexicalModel, context);
                }
                contextState.tail.activeReplacementId = suggestion.id;
                var acceptedContext = models.applyTransform(suggestion.transform, context);
                this.contextTracker.analyzeState(this.lexicalModel, acceptedContext);
            }
            return reversion;
        };
        ModelCompositor.prototype.applyReversion = function (reversion, context) {
            // If we are unable to track context (because the model does not support LexiconTraversal),
            // we need a "fallback" strategy.
            var compositor = this;
            var fallbackSuggestions = function () {
                var revertedContext = models.applyTransform(reversion.transform, context);
                var suggestions = compositor.predict({ insert: '', deleteLeft: 0 }, revertedContext);
                suggestions.forEach(function (suggestion) {
                    // A reversion's transform ID is the additive inverse of its original suggestion;
                    // we revert to the state of said original suggestion.
                    suggestion.transformId = -reversion.transformId;
                });
                return suggestions;
            };
            if (!this.contextTracker) {
                return fallbackSuggestions();
            }
            // When the context is tracked, we prefer the tracked information.
            var contextMatchFound = false;
            for (var c = this.contextTracker.count - 1; c >= 0; c--) {
                var contextState = this.contextTracker.item(c);
                if (contextState.tail.activeReplacementId == -reversion.id) {
                    contextMatchFound = true;
                    break;
                }
            }
            if (!contextMatchFound) {
                return fallbackSuggestions();
            }
            // Remove all contexts more recent than the one we're reverting to.
            while (this.contextTracker.newest.tail.activeReplacementId != -reversion.id) {
                this.contextTracker.popNewest();
            }
            this.contextTracker.newest.tail.revert();
            // Will need to be modified a bit if/when phrase-level suggestions are implemented.
            // Those will be tracked on the first token of the phrase, which won't be the tail
            // if they cover multiple tokens.
            var suggestions = this.contextTracker.newest.tail.replacements.map(function (trackedSuggestion) {
                return trackedSuggestion.suggestion;
            });
            suggestions.forEach(function (suggestion) {
                // A reversion's transform ID is the additive inverse of its original suggestion;
                // we revert to the state of said original suggestion.
                suggestion.transformId = -reversion.transformId;
            });
            return suggestions;
        };
        ModelCompositor.prototype.wordbreak = function (context) {
            var model = this.lexicalModel;
            if (model.wordbreaker || !model.wordbreak) {
                // We don't need a 12.0 / 13.0 compatibility mode here.
                // We're either relying on defaults or on the 14.0+ wordbreaker spec.
                var wordbreaker = model.wordbreaker || wordBreakers.default;
                return models.wordbreak(wordbreaker, context);
            }
            else {
                // 1.  This model does not provide a model following the 14.0+ wordbreaking spec
                // 2.  This model DOES define a custom wordbreaker following the 12.0-13.0 spec.
                // Since the model relies on custom wordbreaking behavior, we need to use the
                // old, deprecated wordbreaking pattern.
                return model.wordbreak(context);
            }
        };
        ModelCompositor.prototype.tokenize = function (context) {
            var model = this.lexicalModel;
            if (model.wordbreaker) {
                return models.tokenize(model.wordbreaker, context);
            }
            else {
                return null;
            }
        };
        ModelCompositor.prototype.resetContext = function (context) {
            // Force-resets the context, throwing out any previous fat-finger data, etc.
            // Designed for use when the caret has been directly moved and/or the context sourced from a different control
            // than before.
            if (this.contextTracker) {
                var tokenizedContext = models.tokenize(this.lexicalModel.wordbreaker || wordBreakers.default, context);
                var contextState = correction.ContextTracker.modelContextState(tokenizedContext.left, this.lexicalModel);
                this.contextTracker.enqueue(contextState);
            }
        };
        ModelCompositor.prototype.detectCurrentCasing = function (context) {
            var model = this.lexicalModel;
            var text = this.wordbreak(context);
            if (!model.languageUsesCasing) {
                throw "Invalid attempt to detect casing: languageUsesCasing is set to false";
            }
            if (!model.applyCasing) {
                // The worker should automatically 'sub in' default behavior during the model's load if that
                // function isn't defined explicitly as part of the model.
                throw "Invalid LMLayer state:  languageUsesCasing is set to true, but no applyCasing function exists";
            }
            if (model.applyCasing('lower', text) == text) {
                return 'lower';
            }
            else if (model.applyCasing('upper', text) == text) {
                // If only a single character has been input, assume we're in 'initial' mode.
                return text.kmwLength() > 1 ? 'upper' : 'initial';
            }
            else if (model.applyCasing('initial', text) == text) {
                // We check 'initial' last, as upper-case input is indistinguishable.
                return 'initial';
            }
            else {
                // 'null' is returned when no casing pattern matches the input.
                return null;
            }
        };
        ModelCompositor.MAX_SUGGESTIONS = 12;
        return ModelCompositor;
    }());
    /**
     * The default punctuation and spacing produced by the model.
     */
    var DEFAULT_PUNCTUATION = {
        quotesForKeepSuggestion: { open: "\u201C", close: "\u201D" },
        insertAfterWord: " ",
    };
    /*
     * Copyright (c) 2018 National Research Council Canada (author: Eddie A. Santos)
     * Copyright (c) 2018 SIL International
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of
     * this software and associated documentation files (the "Software"), to deal in
     * the Software without restriction, including without limitation the rights to
     * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
     * the Software, and to permit persons to whom the Software is furnished to do so,
     * subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */
    /**
     * @file index.ts
     *
     * The main LMLayerWorker class, the top-level class within the Web Worker.
     * The LMLayerWorker handles the keyboard/worker communication
     * protocol, delegating prediction requests to the language
     * model implementations.
     */
    /// <reference path="../message.d.ts" />
    /// <reference path="models/dummy-model.ts" />
    /// <reference path="../node_modules/@keymanapp/models-wordbreakers/src/index.ts" />
    /// <reference path="./model-compositor.ts" />
    /**
     * Encapsulates all the state required for the LMLayer's worker thread.
     *
     * Implements the state pattern. There are three states:
     *
     *  - `unconfigured`  (initial state before configuration)
     *  - `modelless`     (state without model loaded)
     *  - `ready`         (state with model loaded, accepts prediction requests)
     *
     * Transitions are initiated by valid messages. Invalid
     * messages are errors, and do not lead to transitions.
     *
     *          +-------------+    load    +---------+
     *   config |             |----------->|         |
     *  +------->  modelless  +            +  ready  +---+
     *          |             |<-----------|         |   |
     *          +-------------+   unload   +----^----+   | predict
     *                                          |        |
     *                                          +--------+
     *
     * The model and the configuration are ONLY relevant in the `ready` state;
     * as such, they are NOT direct properties of the LMLayerWorker.
     */
    var LMLayerWorker = /** @class */ (function () {
        function LMLayerWorker(options) {
            if (options === void 0) {
                options = {
                    importScripts: null,
                    postMessage: null
                };
            }
            this._postMessage = options.postMessage || postMessage;
            this._importScripts = options.importScripts || importScripts;
            this.setupConfigState();
        }
        LMLayerWorker.prototype.error = function (message, error) {
            // error isn't a fan of being cloned across the worker boundary.
            this.cast('error', {
                log: message,
                error: (error && error.stack) ? error.stack : undefined
            });
        };
        /**
         * A function that can be set as self.onmessage (the Worker
         * message handler).
         * NOTE! You must bind it to a specific instance, e.g.:
         *
         *   // Do this!
         *   self.onmessage = worker.onMessage.bind(worker);
         *
         * Incorrect:
         *
         *   // Don't do this!
         *   self.onmessage = worker.onMessage;
         *
         * See: .install();
         */
        LMLayerWorker.prototype.onMessage = function (event) {
            var message = event.data.message;
            // Ensure the message is tagged with a valid message tag.
            if (!message) {
                throw new Error("Missing required 'message' property: " + event.data);
            }
            // If last load was for this exact model file, squash the message.
            // (Though not if we've had an unload since.)
            var im = event.data;
            if (im.message == 'load') {
                var data = im;
                var duplicated = false;
                if (this._currentModelSource && data.source.type == this._currentModelSource.type) {
                    if (data.source.type == 'file' && data.source.file == this._currentModelSource.file) {
                        duplicated = true;
                    }
                    else if (data.source.type == 'raw' && data.source.code == this._currentModelSource.code) {
                        duplicated = true;
                    }
                }
                if (duplicated) {
                    // Some JS implementations don't allow web workers access to the console.
                    if (typeof console !== 'undefined') {
                        console.warn("Duplicate model load message detected - squashing!");
                    }
                    return;
                }
                else {
                    this._currentModelSource = data.source;
                }
            }
            else if (im.message == 'unload') {
                this._currentModelSource = null;
            }
            // We got a message! Delegate to the current state.
            this.state.handleMessage(im);
        };
        /**
         * Sends back a message structured according to the protocol.
         * @param message A message type.
         * @param payload The message's payload. Can have any properties, except 'message'.
         */
        LMLayerWorker.prototype.cast = function (message, payload) {
            // Chrome raises "TypeError: invalid invocation" if postMessage is called
            // with any non-default value for `this`, i.e., this won't work:
            //
            //  this._postMessage({ foo: 'bar' });
            //
            // Yank it postMessage() off of `this` so that it's called on the
            // "global" context, and everything works again.
            var postMessage = this._postMessage;
            postMessage(__assign({ message: message }, payload));
        };
        /**
         * Loads a model by executing the given source code, and
         * passing in the appropriate configuration.
         *
         * @param desc         Type of the model to instantiate and its parameters.
         * @param capabilities Capabilities on offer from the keyboard.
         */
        LMLayerWorker.prototype.loadModel = function (model) {
            // TODO:  pass _platformConfig to model so that it can self-configure to the platform,
            // returning a Configuration.
            /* Note that this function is typically called from within an `importScripts` call.
             * For meaningful error messages to be successfully logged, we must catch what we can here
             * and pass a message to outside the worker - otherwise a generic "Script error" occurs.
             */
            try {
                var configuration = model.configure(this._platformCapabilities);
                // Handle deprecations.
                if (!configuration.leftContextCodePoints) {
                    configuration.leftContextCodePoints = configuration.leftContextCodeUnits;
                }
                if (!configuration.rightContextCodePoints) {
                    configuration.rightContextCodePoints = configuration.rightContextCodeUnits;
                }
                // Set reasonable defaults for the configuration.
                if (!configuration.leftContextCodePoints) {
                    configuration.leftContextCodePoints = this._platformCapabilities.maxLeftContextCodePoints;
                }
                if (!configuration.rightContextCodePoints) {
                    configuration.rightContextCodePoints = this._platformCapabilities.maxRightContextCodePoints || 0;
                }
                // Ensures that default casing rules exist for custom models that request casing rules but don't define them.
                if (model.languageUsesCasing && !model.applyCasing) {
                    model.applyCasing = models.defaultApplyCasing;
                }
                var compositor = this.transitionToReadyState(model);
                // This test allows models to directly specify the property without it being auto-overridden by
                // this default.
                if (configuration.wordbreaksAfterSuggestions === undefined) {
                    configuration.wordbreaksAfterSuggestions = (compositor.punctuation.insertAfterWord != '');
                }
                this.cast('ready', { configuration: configuration });
            }
            catch (err) {
                this.error("loadModel failed!", err);
            }
        };
        LMLayerWorker.prototype.loadModelFile = function (url) {
            // The self/global WebWorker method, allowing us to directly import another script file into WebWorker scope.
            // If built correctly, the model's script file will auto-register the model with loadModel() above.
            try {
                this._importScripts(url);
            }
            catch (err) {
                this.error("Error occurred when attempting to load dictionary", err);
            }
        };
        LMLayerWorker.prototype.unloadModel = function () {
            // Right now, this seems sufficient to clear out the old model.
            // The only existing reference to a loaded model is held by 
            // transitionToReadyState's `handleMessage` closure. (The `model` var)
            this.transitionToLoadingState();
        };
        /**
         * Sets the initial state, i.e., `unconfigured`.
         * This state only handles `config` messages, and will
         * transition to the `modelless` state once it receives
         * the config data from the host platform.
         */
        LMLayerWorker.prototype.setupConfigState = function () {
            var _this_1 = this;
            this.state = {
                name: 'unconfigured',
                handleMessage: function (payload) {
                    // ... that message must have been 'config'!
                    if (payload.message !== 'config') {
                        throw new Error("invalid message; expected 'config' but got " + payload.message);
                    }
                    _this_1._platformCapabilities = payload.capabilities;
                    _this_1.transitionToLoadingState();
                }
            };
        };
        /**
         * Sets the model-loading state, i.e., `modelless`.
         * This state only handles `load` messages, and will
         * transition to the `ready` state once it receives a model
         * description and capabilities.
         */
        LMLayerWorker.prototype.transitionToLoadingState = function () {
            var _this = this;
            this.state = {
                name: 'modelless',
                handleMessage: function (payload) {
                    // ...that message must have been 'load'!
                    if (payload.message !== 'load') {
                        throw new Error("invalid message; expected 'load' but got " + payload.message);
                    }
                    // TODO: validate configuration?
                    if (payload.source.type == 'file') {
                        _this.loadModelFile(payload.source.file);
                    }
                    else {
                        // Creates a closure capturing all top-level names that the model must be able to reference.
                        // `eval` runs by scope rules; our virtualized worker needs a special scope for this to work.
                        //
                        // Reference: https://stackoverflow.com/a/40108685
                        // Note that we don't need `this`, but we do need the namespaces seen below. 
                        var code_1 = payload.source.code;
                        var evalInContext = function (LMLayerWorker, models, correction, wordBreakers) {
                            eval(code_1);
                        };
                        evalInContext(_this, models, correction, wordBreakers);
                    }
                }
            };
        };
        /**
         * Sets the state to `ready`. This requires a
         * fully-instantiated model. The `ready` state only responds
         * to `predict` message, and is an accepting state.
         *
         * @param model The loaded language model.
         */
        LMLayerWorker.prototype.transitionToReadyState = function (model) {
            var _this_1 = this;
            var compositor = new ModelCompositor(model);
            this.state = {
                name: 'ready',
                handleMessage: function (payload) {
                    switch (payload.message) {
                        case 'predict':
                            var transform = payload.transform, context = payload.context;
                            var suggestions = compositor.predict(transform, context);
                            // Now that the suggestions are ready, send them out!
                            _this_1.cast('suggestions', {
                                token: payload.token,
                                suggestions: suggestions
                            });
                            break;
                        case 'wordbreak':
                            var brokenWord = models.wordbreak(model.wordbreaker || wordBreakers.default, payload.context);
                            _this_1.cast('currentword', {
                                token: payload.token,
                                word: brokenWord
                            });
                            break;
                        case 'unload':
                            _this_1.unloadModel();
                            break;
                        case 'accept':
                            var suggestion = payload.suggestion, context = payload.context, postTransform = payload.postTransform;
                            var reversion = compositor.acceptSuggestion(suggestion, context, postTransform);
                            _this_1.cast('postaccept', {
                                token: payload.token,
                                reversion: reversion
                            });
                            break;
                        case 'revert':
                            var reversion = payload.reversion, context = payload.context;
                            var suggestions = compositor.applyReversion(reversion, context);
                            _this_1.cast('postrevert', {
                                token: payload.token,
                                suggestions: suggestions
                            });
                            break;
                        case 'reset-context':
                            var context = payload.context;
                            compositor.resetContext(context);
                            break;
                        default:
                            throw new Error("invalid message; expected one of {'predict', 'wordbreak', 'accept', 'revert', 'reset-context', 'unload'} but got " + payload.message);
                    }
                },
                compositor: compositor
            };
            return compositor;
        };
        /**
         * Creates a new instance of the LMLayerWorker, and installs all its
         * functions within the provided Worker global scope.
         *
         * In production, this is called within the Worker's scope as:
         *
         *    LMLayerWorker.install(self);
         *
         * ...and this will setup onmessage and postMessage() appropriately.
         *
         * During testing, this method is useful to mock an entire global scope,
         *
         *    var fakeScope = { postMessage: ... };
         *    LMLayerWorker.install(fakeScope);
         *    // now we can spy on methods in fakeScope!
         *
         * @param scope A global scope to install upon.
         */
        LMLayerWorker.install = function (scope) {
            var worker = new LMLayerWorker({ postMessage: scope.postMessage, importScripts: scope.importScripts.bind(scope) });
            scope.onmessage = worker.onMessage.bind(worker);
            worker.self = scope;
            // Ensures that the worker instance is accessible for loaded model scripts.
            // Assists unit-testing.
            scope['LMLayerWorker'] = worker;
            scope['models'] = models;
            scope['correction'] = correction;
            scope['wordBreakers'] = wordBreakers;
            return worker;
        };
        return LMLayerWorker;
    }());
    // Let LMLayerWorker be available both in the browser and in Node.
    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
        module.exports = LMLayerWorker;
        module.exports['correction'] = correction;
        module.exports['models'] = models;
        module.exports['wordBreakers'] = wordBreakers;
        /// XXX: export the ModelCompositor for testing.
        module.exports['ModelCompositor'] = ModelCompositor;
    }
    else if (typeof self !== 'undefined' && 'postMessage' in self) {
        // Automatically install if we're in a Web Worker.
        LMLayerWorker.install(self); // really, 'as typeof globalThis', but we're currently getting TS errors from use of that.
    }
    else {
        //@ts-ignore
        window.LMLayerWorker = LMLayerWorker;
    }
    /*
     * Copyright (c) 2018 National Research Council Canada (author: Eddie A. Santos)
     * Copyright (c) 2018 SIL International
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of
     * this software and associated documentation files (the "Software"), to deal in
     * the Software without restriction, including without limitation the rights to
     * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
     * the Software, and to permit persons to whom the Software is furnished to do so,
     * subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */
    //# sourceMappingURL=index.js.map
}
/*!
 * https://github.com/paulmillr/es6-shim
 * @license es6-shim Copyright 2013-2016 by Paul Miller (http://paulmillr.com)
 *   and contributors,  MIT License
 * es6-shim: v0.35.4
 * see https://github.com/paulmillr/es6-shim/blob/0.35.3/LICENSE
 * Details and documentation:
 * https://github.com/paulmillr/es6-shim/
 */
(function (e, t) { if (typeof define === "function" && define.amd) {
    define(t);
}
else if (typeof exports === "object") {
    module.exports = t();
}
else {
    e.returnExports = t();
} })(this, function () {
    "use strict";
    var e = Function.call.bind(Function.apply);
    var t = Function.call.bind(Function.call);
    var r = Array.isArray;
    var n = Object.keys;
    var o = function notThunker(t) { return function notThunk() { return !e(t, this, arguments); }; };
    var i = function (e) { try {
        e();
        return false;
    }
    catch (t) {
        return true;
    } };
    var a = function valueOrFalseIfThrows(e) { try {
        return e();
    }
    catch (t) {
        return false;
    } };
    var u = o(i);
    var f = function () { return !i(function () { return Object.defineProperty({}, "x", { get: function () { } }); }); };
    var s = !!Object.defineProperty && f();
    var c = function foo() { }.name === "foo";
    var l = Function.call.bind(Array.prototype.forEach);
    var p = Function.call.bind(Array.prototype.reduce);
    var v = Function.call.bind(Array.prototype.filter);
    var y = Function.call.bind(Array.prototype.some);
    var h = function (e, t, r, n) { if (!n && t in e) {
        return;
    } if (s) {
        Object.defineProperty(e, t, { configurable: true, enumerable: false, writable: true, value: r });
    }
    else {
        e[t] = r;
    } };
    var b = function (e, t, r) { l(n(t), function (n) { var o = t[n]; h(e, n, o, !!r); }); };
    var g = Function.call.bind(Object.prototype.toString);
    var d = typeof /abc/ === "function" ? function IsCallableSlow(e) { return typeof e === "function" && g(e) === "[object Function]"; } : function IsCallableFast(e) { return typeof e === "function"; };
    var m = { getter: function (e, t, r) { if (!s) {
            throw new TypeError("getters require true ES5 support");
        } Object.defineProperty(e, t, { configurable: true, enumerable: false, get: r }); }, proxy: function (e, t, r) { if (!s) {
            throw new TypeError("getters require true ES5 support");
        } var n = Object.getOwnPropertyDescriptor(e, t); Object.defineProperty(r, t, { configurable: n.configurable, enumerable: n.enumerable, get: function getKey() { return e[t]; }, set: function setKey(r) { e[t] = r; } }); }, redefine: function (e, t, r) { if (s) {
            var n = Object.getOwnPropertyDescriptor(e, t);
            n.value = r;
            Object.defineProperty(e, t, n);
        }
        else {
            e[t] = r;
        } }, defineByDescriptor: function (e, t, r) { if (s) {
            Object.defineProperty(e, t, r);
        }
        else if ("value" in r) {
            e[t] = r.value;
        } }, preserveToString: function (e, t) { if (t && d(t.toString)) {
            h(e, "toString", t.toString.bind(t), true);
        } } };
    var O = Object.create || function (e, t) { var r = function Prototype() { }; r.prototype = e; var o = new r; if (typeof t !== "undefined") {
        n(t).forEach(function (e) { m.defineByDescriptor(o, e, t[e]); });
    } return o; };
    var w = function (e, t) { if (!Object.setPrototypeOf) {
        return false;
    } return a(function () { var r = function Subclass(t) { var r = new e(t); Object.setPrototypeOf(r, Subclass.prototype); return r; }; Object.setPrototypeOf(r, e); r.prototype = O(e.prototype, { constructor: { value: r } }); return t(r); }); };
    var j = function () { if (typeof self !== "undefined") {
        return self;
    } if (typeof window !== "undefined") {
        return window;
    } if (typeof global !== "undefined") {
        return global;
    } throw new Error("unable to locate global object"); };
    var S = j();
    var T = S.isFinite;
    var I = Function.call.bind(String.prototype.indexOf);
    var E = Function.apply.bind(Array.prototype.indexOf);
    var P = Function.call.bind(Array.prototype.concat);
    var C = Function.call.bind(String.prototype.slice);
    var M = Function.call.bind(Array.prototype.push);
    var x = Function.apply.bind(Array.prototype.push);
    var N = Function.call.bind(Array.prototype.shift);
    var A = Math.max;
    var R = Math.min;
    var _ = Math.floor;
    var k = Math.abs;
    var L = Math.exp;
    var F = Math.log;
    var D = Math.sqrt;
    var z = Function.call.bind(Object.prototype.hasOwnProperty);
    var q;
    var W = function () { };
    var G = S.Map;
    var H = G && G.prototype["delete"];
    var V = G && G.prototype.get;
    var B = G && G.prototype.has;
    var U = G && G.prototype.set;
    var $ = S.Symbol || {};
    var J = $.species || "@@species";
    var X = Number.isNaN || function isNaN(e) { return e !== e; };
    var K = Number.isFinite || function isFinite(e) { return typeof e === "number" && T(e); };
    var Z = d(Math.sign) ? Math.sign : function sign(e) { var t = Number(e); if (t === 0) {
        return t;
    } if (X(t)) {
        return t;
    } return t < 0 ? -1 : 1; };
    var Y = function log1p(e) { var t = Number(e); if (t < -1 || X(t)) {
        return NaN;
    } if (t === 0 || t === Infinity) {
        return t;
    } if (t === -1) {
        return -Infinity;
    } return 1 + t - 1 === 0 ? t : t * (F(1 + t) / (1 + t - 1)); };
    var Q = function isArguments(e) { return g(e) === "[object Arguments]"; };
    var ee = function isArguments(e) { return e !== null && typeof e === "object" && typeof e.length === "number" && e.length >= 0 && g(e) !== "[object Array]" && g(e.callee) === "[object Function]"; };
    var te = Q(arguments) ? Q : ee;
    var re = { primitive: function (e) { return e === null || typeof e !== "function" && typeof e !== "object"; }, string: function (e) { return g(e) === "[object String]"; }, regex: function (e) { return g(e) === "[object RegExp]"; }, symbol: function (e) { return typeof S.Symbol === "function" && typeof e === "symbol"; } };
    var ne = function overrideNative(e, t, r) { var n = e[t]; h(e, t, r, true); m.preserveToString(e[t], n); };
    var oe = typeof $ === "function" && typeof $["for"] === "function" && re.symbol($());
    var ie = re.symbol($.iterator) ? $.iterator : "_es6-shim iterator_";
    if (S.Set && typeof (new S.Set)["@@iterator"] === "function") {
        ie = "@@iterator";
    }
    if (!S.Reflect) {
        h(S, "Reflect", {}, true);
    }
    var ae = S.Reflect;
    var ue = String;
    var fe = typeof document === "undefined" || !document ? null : document.all;
    var se = fe == null ? function isNullOrUndefined(e) { return e == null; } : function isNullOrUndefinedAndNotDocumentAll(e) { return e == null && e !== fe; };
    var ce = { Call: function Call(t, r) { var n = arguments.length > 2 ? arguments[2] : []; if (!ce.IsCallable(t)) {
            throw new TypeError(t + " is not a function");
        } return e(t, r, n); }, RequireObjectCoercible: function (e, t) { if (se(e)) {
            throw new TypeError(t || "Cannot call method on " + e);
        } return e; }, TypeIsObject: function (e) { if (e === void 0 || e === null || e === true || e === false) {
            return false;
        } return typeof e === "function" || typeof e === "object" || e === fe; }, ToObject: function (e, t) { return Object(ce.RequireObjectCoercible(e, t)); }, IsCallable: d, IsConstructor: function (e) { return ce.IsCallable(e); }, ToInt32: function (e) { return ce.ToNumber(e) >> 0; }, ToUint32: function (e) { return ce.ToNumber(e) >>> 0; }, ToNumber: function (e) { if (g(e) === "[object Symbol]") {
            throw new TypeError("Cannot convert a Symbol value to a number");
        } return +e; }, ToInteger: function (e) { var t = ce.ToNumber(e); if (X(t)) {
            return 0;
        } if (t === 0 || !K(t)) {
            return t;
        } return (t > 0 ? 1 : -1) * _(k(t)); }, ToLength: function (e) { var t = ce.ToInteger(e); if (t <= 0) {
            return 0;
        } if (t > Number.MAX_SAFE_INTEGER) {
            return Number.MAX_SAFE_INTEGER;
        } return t; }, SameValue: function (e, t) { if (e === t) {
            if (e === 0) {
                return 1 / e === 1 / t;
            }
            return true;
        } return X(e) && X(t); }, SameValueZero: function (e, t) { return e === t || X(e) && X(t); }, IsIterable: function (e) { return ce.TypeIsObject(e) && (typeof e[ie] !== "undefined" || te(e)); }, GetIterator: function (e) { if (te(e)) {
            return new q(e, "value");
        } var t = ce.GetMethod(e, ie); if (!ce.IsCallable(t)) {
            throw new TypeError("value is not an iterable");
        } var r = ce.Call(t, e); if (!ce.TypeIsObject(r)) {
            throw new TypeError("bad iterator");
        } return r; }, GetMethod: function (e, t) { var r = ce.ToObject(e)[t]; if (se(r)) {
            return void 0;
        } if (!ce.IsCallable(r)) {
            throw new TypeError("Method not callable: " + t);
        } return r; }, IteratorComplete: function (e) { return !!e.done; }, IteratorClose: function (e, t) { var r = ce.GetMethod(e, "return"); if (r === void 0) {
            return;
        } var n, o; try {
            n = ce.Call(r, e);
        }
        catch (i) {
            o = i;
        } if (t) {
            return;
        } if (o) {
            throw o;
        } if (!ce.TypeIsObject(n)) {
            throw new TypeError("Iterator's return method returned a non-object.");
        } }, IteratorNext: function (e) { var t = arguments.length > 1 ? e.next(arguments[1]) : e.next(); if (!ce.TypeIsObject(t)) {
            throw new TypeError("bad iterator");
        } return t; }, IteratorStep: function (e) { var t = ce.IteratorNext(e); var r = ce.IteratorComplete(t); return r ? false : t; }, Construct: function (e, t, r, n) { var o = typeof r === "undefined" ? e : r; if (!n && ae.construct) {
            return ae.construct(e, t, o);
        } var i = o.prototype; if (!ce.TypeIsObject(i)) {
            i = Object.prototype;
        } var a = O(i); var u = ce.Call(e, a, t); return ce.TypeIsObject(u) ? u : a; }, SpeciesConstructor: function (e, t) { var r = e.constructor; if (r === void 0) {
            return t;
        } if (!ce.TypeIsObject(r)) {
            throw new TypeError("Bad constructor");
        } var n = r[J]; if (se(n)) {
            return t;
        } if (!ce.IsConstructor(n)) {
            throw new TypeError("Bad @@species");
        } return n; }, CreateHTML: function (e, t, r, n) { var o = ce.ToString(e); var i = "<" + t; if (r !== "") {
            var a = ce.ToString(n);
            var u = a.replace(/"/g, "&quot;");
            i += " " + r + '="' + u + '"';
        } var f = i + ">"; var s = f + o; return s + "</" + t + ">"; }, IsRegExp: function IsRegExp(e) { if (!ce.TypeIsObject(e)) {
            return false;
        } var t = e[$.match]; if (typeof t !== "undefined") {
            return !!t;
        } return re.regex(e); }, ToString: function ToString(e) { return ue(e); } };
    if (s && oe) {
        var le = function defineWellKnownSymbol(e) { if (re.symbol($[e])) {
            return $[e];
        } var t = $["for"]("Symbol." + e); Object.defineProperty($, e, { configurable: false, enumerable: false, writable: false, value: t }); return t; };
        if (!re.symbol($.search)) {
            var pe = le("search");
            var ve = String.prototype.search;
            h(RegExp.prototype, pe, function search(e) { return ce.Call(ve, e, [this]); });
            var ye = function search(e) { var t = ce.RequireObjectCoercible(this); if (!se(e)) {
                var r = ce.GetMethod(e, pe);
                if (typeof r !== "undefined") {
                    return ce.Call(r, e, [t]);
                }
            } return ce.Call(ve, t, [ce.ToString(e)]); };
            ne(String.prototype, "search", ye);
        }
        if (!re.symbol($.replace)) {
            var he = le("replace");
            var be = String.prototype.replace;
            h(RegExp.prototype, he, function replace(e, t) { return ce.Call(be, e, [this, t]); });
            var ge = function replace(e, t) { var r = ce.RequireObjectCoercible(this); if (!se(e)) {
                var n = ce.GetMethod(e, he);
                if (typeof n !== "undefined") {
                    return ce.Call(n, e, [r, t]);
                }
            } return ce.Call(be, r, [ce.ToString(e), t]); };
            ne(String.prototype, "replace", ge);
        }
        if (!re.symbol($.split)) {
            var de = le("split");
            var me = String.prototype.split;
            h(RegExp.prototype, de, function split(e, t) { return ce.Call(me, e, [this, t]); });
            var Oe = function split(e, t) { var r = ce.RequireObjectCoercible(this); if (!se(e)) {
                var n = ce.GetMethod(e, de);
                if (typeof n !== "undefined") {
                    return ce.Call(n, e, [r, t]);
                }
            } return ce.Call(me, r, [ce.ToString(e), t]); };
            ne(String.prototype, "split", Oe);
        }
        var we = re.symbol($.match);
        var je = we && function () { var e = {}; e[$.match] = function () { return 42; }; return "a".match(e) !== 42; }();
        if (!we || je) {
            var Se = le("match");
            var Te = String.prototype.match;
            h(RegExp.prototype, Se, function match(e) { return ce.Call(Te, e, [this]); });
            var Ie = function match(e) { var t = ce.RequireObjectCoercible(this); if (!se(e)) {
                var r = ce.GetMethod(e, Se);
                if (typeof r !== "undefined") {
                    return ce.Call(r, e, [t]);
                }
            } return ce.Call(Te, t, [ce.ToString(e)]); };
            ne(String.prototype, "match", Ie);
        }
    }
    var Ee = function wrapConstructor(e, t, r) { m.preserveToString(t, e); if (Object.setPrototypeOf) {
        Object.setPrototypeOf(e, t);
    } if (s) {
        l(Object.getOwnPropertyNames(e), function (n) { if (n in W || r[n]) {
            return;
        } m.proxy(e, n, t); });
    }
    else {
        l(Object.keys(e), function (n) { if (n in W || r[n]) {
            return;
        } t[n] = e[n]; });
    } t.prototype = e.prototype; m.redefine(e.prototype, "constructor", t); };
    var Pe = function () { return this; };
    var Ce = function (e) { if (s && !z(e, J)) {
        m.getter(e, J, Pe);
    } };
    var Me = function (e, t) { var r = t || function iterator() { return this; }; h(e, ie, r); if (!e[ie] && re.symbol(ie)) {
        e[ie] = r;
    } };
    var xe = function createDataProperty(e, t, r) { if (s) {
        Object.defineProperty(e, t, { configurable: true, enumerable: true, writable: true, value: r });
    }
    else {
        e[t] = r;
    } };
    var Ne = function createDataPropertyOrThrow(e, t, r) { xe(e, t, r); if (!ce.SameValue(e[t], r)) {
        throw new TypeError("property is nonconfigurable");
    } };
    var Ae = function (e, t, r, n) { if (!ce.TypeIsObject(e)) {
        throw new TypeError("Constructor requires `new`: " + t.name);
    } var o = t.prototype; if (!ce.TypeIsObject(o)) {
        o = r;
    } var i = O(o); for (var a in n) {
        if (z(n, a)) {
            var u = n[a];
            h(i, a, u, true);
        }
    } return i; };
    if (String.fromCodePoint && String.fromCodePoint.length !== 1) {
        var Re = String.fromCodePoint;
        ne(String, "fromCodePoint", function fromCodePoint(e) { return ce.Call(Re, this, arguments); });
    }
    var _e = { fromCodePoint: function fromCodePoint(e) { var t = []; var r; for (var n = 0, o = arguments.length; n < o; n++) {
            r = Number(arguments[n]);
            if (!ce.SameValue(r, ce.ToInteger(r)) || r < 0 || r > 1114111) {
                throw new RangeError("Invalid code point " + r);
            }
            if (r < 65536) {
                M(t, String.fromCharCode(r));
            }
            else {
                r -= 65536;
                M(t, String.fromCharCode((r >> 10) + 55296));
                M(t, String.fromCharCode(r % 1024 + 56320));
            }
        } return t.join(""); }, raw: function raw(e) { var t = ce.ToObject(e, "bad callSite"); var r = ce.ToObject(t.raw, "bad raw value"); var n = r.length; var o = ce.ToLength(n); if (o <= 0) {
            return "";
        } var i = []; var a = 0; var u, f, s, c; while (a < o) {
            u = ce.ToString(a);
            s = ce.ToString(r[u]);
            M(i, s);
            if (a + 1 >= o) {
                break;
            }
            f = a + 1 < arguments.length ? arguments[a + 1] : "";
            c = ce.ToString(f);
            M(i, c);
            a += 1;
        } return i.join(""); } };
    if (String.raw && String.raw({ raw: { 0: "x", 1: "y", length: 2 } }) !== "xy") {
        ne(String, "raw", _e.raw);
    }
    b(String, _e);
    var ke = function repeat(e, t) { if (t < 1) {
        return "";
    } if (t % 2) {
        return repeat(e, t - 1) + e;
    } var r = repeat(e, t / 2); return r + r; };
    var Le = Infinity;
    var Fe = { repeat: function repeat(e) { var t = ce.ToString(ce.RequireObjectCoercible(this)); var r = ce.ToInteger(e); if (r < 0 || r >= Le) {
            throw new RangeError("repeat count must be less than infinity and not overflow maximum string size");
        } return ke(t, r); }, startsWith: function startsWith(e) { var t = ce.ToString(ce.RequireObjectCoercible(this)); if (ce.IsRegExp(e)) {
            throw new TypeError('Cannot call method "startsWith" with a regex');
        } var r = ce.ToString(e); var n; if (arguments.length > 1) {
            n = arguments[1];
        } var o = A(ce.ToInteger(n), 0); return C(t, o, o + r.length) === r; }, endsWith: function endsWith(e) { var t = ce.ToString(ce.RequireObjectCoercible(this)); if (ce.IsRegExp(e)) {
            throw new TypeError('Cannot call method "endsWith" with a regex');
        } var r = ce.ToString(e); var n = t.length; var o; if (arguments.length > 1) {
            o = arguments[1];
        } var i = typeof o === "undefined" ? n : ce.ToInteger(o); var a = R(A(i, 0), n); return C(t, a - r.length, a) === r; }, includes: function includes(e) { if (ce.IsRegExp(e)) {
            throw new TypeError('"includes" does not accept a RegExp');
        } var t = ce.ToString(e); var r; if (arguments.length > 1) {
            r = arguments[1];
        } return I(this, t, r) !== -1; }, codePointAt: function codePointAt(e) { var t = ce.ToString(ce.RequireObjectCoercible(this)); var r = ce.ToInteger(e); var n = t.length; if (r >= 0 && r < n) {
            var o = t.charCodeAt(r);
            var i = r + 1 === n;
            if (o < 55296 || o > 56319 || i) {
                return o;
            }
            var a = t.charCodeAt(r + 1);
            if (a < 56320 || a > 57343) {
                return o;
            }
            return (o - 55296) * 1024 + (a - 56320) + 65536;
        } } };
    if (String.prototype.includes && "a".includes("a", Infinity) !== false) {
        ne(String.prototype, "includes", Fe.includes);
    }
    if (String.prototype.startsWith && String.prototype.endsWith) {
        var De = i(function () { return "/a/".startsWith(/a/); });
        var ze = a(function () { return "abc".startsWith("a", Infinity) === false; });
        if (!De || !ze) {
            ne(String.prototype, "startsWith", Fe.startsWith);
            ne(String.prototype, "endsWith", Fe.endsWith);
        }
    }
    if (oe) {
        var qe = a(function () { var e = /a/; e[$.match] = false; return "/a/".startsWith(e); });
        if (!qe) {
            ne(String.prototype, "startsWith", Fe.startsWith);
        }
        var We = a(function () { var e = /a/; e[$.match] = false; return "/a/".endsWith(e); });
        if (!We) {
            ne(String.prototype, "endsWith", Fe.endsWith);
        }
        var Ge = a(function () { var e = /a/; e[$.match] = false; return "/a/".includes(e); });
        if (!Ge) {
            ne(String.prototype, "includes", Fe.includes);
        }
    }
    b(String.prototype, Fe);
    var He = ["\t\n\x0B\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003", "\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028", "\u2029\ufeff"].join("");
    var Ve = new RegExp("(^[" + He + "]+)|([" + He + "]+$)", "g");
    var Be = function trim() { return ce.ToString(ce.RequireObjectCoercible(this)).replace(Ve, ""); };
    var Ue = ["\x85", "\u200b", "\ufffe"].join("");
    var $e = new RegExp("[" + Ue + "]", "g");
    var Je = /^[-+]0x[0-9a-f]+$/i;
    var Xe = Ue.trim().length !== Ue.length;
    h(String.prototype, "trim", Be, Xe);
    var Ke = function (e) { return { value: e, done: arguments.length === 0 }; };
    var Ze = function (e) { ce.RequireObjectCoercible(e); this._s = ce.ToString(e); this._i = 0; };
    Ze.prototype.next = function () { var e = this._s; var t = this._i; if (typeof e === "undefined" || t >= e.length) {
        this._s = void 0;
        return Ke();
    } var r = e.charCodeAt(t); var n, o; if (r < 55296 || r > 56319 || t + 1 === e.length) {
        o = 1;
    }
    else {
        n = e.charCodeAt(t + 1);
        o = n < 56320 || n > 57343 ? 1 : 2;
    } this._i = t + o; return Ke(e.substr(t, o)); };
    Me(Ze.prototype);
    Me(String.prototype, function () { return new Ze(this); });
    var Ye = { from: function from(e) { var r = this; var n; if (arguments.length > 1) {
            n = arguments[1];
        } var o, i; if (typeof n === "undefined") {
            o = false;
        }
        else {
            if (!ce.IsCallable(n)) {
                throw new TypeError("Array.from: when provided, the second argument must be a function");
            }
            if (arguments.length > 2) {
                i = arguments[2];
            }
            o = true;
        } var a = typeof (te(e) || ce.GetMethod(e, ie)) !== "undefined"; var u, f, s; if (a) {
            f = ce.IsConstructor(r) ? Object(new r) : [];
            var c = ce.GetIterator(e);
            var l, p;
            s = 0;
            while (true) {
                l = ce.IteratorStep(c);
                if (l === false) {
                    break;
                }
                p = l.value;
                try {
                    if (o) {
                        p = typeof i === "undefined" ? n(p, s) : t(n, i, p, s);
                    }
                    f[s] = p;
                }
                catch (v) {
                    ce.IteratorClose(c, true);
                    throw v;
                }
                s += 1;
            }
            u = s;
        }
        else {
            var y = ce.ToObject(e);
            u = ce.ToLength(y.length);
            f = ce.IsConstructor(r) ? Object(new r(u)) : new Array(u);
            var h;
            for (s = 0; s < u; ++s) {
                h = y[s];
                if (o) {
                    h = typeof i === "undefined" ? n(h, s) : t(n, i, h, s);
                }
                Ne(f, s, h);
            }
        } f.length = u; return f; }, of: function of() { var e = arguments.length; var t = this; var n = r(t) || !ce.IsCallable(t) ? new Array(e) : ce.Construct(t, [e]); for (var o = 0; o < e; ++o) {
            Ne(n, o, arguments[o]);
        } n.length = e; return n; } };
    b(Array, Ye);
    Ce(Array);
    q = function (e, t) { this.i = 0; this.array = e; this.kind = t; };
    b(q.prototype, { next: function () { var e = this.i; var t = this.array; if (!(this instanceof q)) {
            throw new TypeError("Not an ArrayIterator");
        } if (typeof t !== "undefined") {
            var r = ce.ToLength(t.length);
            for (; e < r; e++) {
                var n = this.kind;
                var o;
                if (n === "key") {
                    o = e;
                }
                else if (n === "value") {
                    o = t[e];
                }
                else if (n === "entry") {
                    o = [e, t[e]];
                }
                this.i = e + 1;
                return Ke(o);
            }
        } this.array = void 0; return Ke(); } });
    Me(q.prototype);
    var Qe = Array.of === Ye.of || function () { var e = function Foo(e) { this.length = e; }; e.prototype = []; var t = Array.of.apply(e, [1, 2]); return t instanceof e && t.length === 2; }();
    if (!Qe) {
        ne(Array, "of", Ye.of);
    }
    var et = { copyWithin: function copyWithin(e, t) { var r = ce.ToObject(this); var n = ce.ToLength(r.length); var o = ce.ToInteger(e); var i = ce.ToInteger(t); var a = o < 0 ? A(n + o, 0) : R(o, n); var u = i < 0 ? A(n + i, 0) : R(i, n); var f; if (arguments.length > 2) {
            f = arguments[2];
        } var s = typeof f === "undefined" ? n : ce.ToInteger(f); var c = s < 0 ? A(n + s, 0) : R(s, n); var l = R(c - u, n - a); var p = 1; if (u < a && a < u + l) {
            p = -1;
            u += l - 1;
            a += l - 1;
        } while (l > 0) {
            if (u in r) {
                r[a] = r[u];
            }
            else {
                delete r[a];
            }
            u += p;
            a += p;
            l -= 1;
        } return r; }, fill: function fill(e) { var t; if (arguments.length > 1) {
            t = arguments[1];
        } var r; if (arguments.length > 2) {
            r = arguments[2];
        } var n = ce.ToObject(this); var o = ce.ToLength(n.length); t = ce.ToInteger(typeof t === "undefined" ? 0 : t); r = ce.ToInteger(typeof r === "undefined" ? o : r); var i = t < 0 ? A(o + t, 0) : R(t, o); var a = r < 0 ? o + r : r; for (var u = i; u < o && u < a; ++u) {
            n[u] = e;
        } return n; }, find: function find(e) { var r = ce.ToObject(this); var n = ce.ToLength(r.length); if (!ce.IsCallable(e)) {
            throw new TypeError("Array#find: predicate must be a function");
        } var o = arguments.length > 1 ? arguments[1] : null; for (var i = 0, a; i < n; i++) {
            a = r[i];
            if (o) {
                if (t(e, o, a, i, r)) {
                    return a;
                }
            }
            else if (e(a, i, r)) {
                return a;
            }
        } }, findIndex: function findIndex(e) { var r = ce.ToObject(this); var n = ce.ToLength(r.length); if (!ce.IsCallable(e)) {
            throw new TypeError("Array#findIndex: predicate must be a function");
        } var o = arguments.length > 1 ? arguments[1] : null; for (var i = 0; i < n; i++) {
            if (o) {
                if (t(e, o, r[i], i, r)) {
                    return i;
                }
            }
            else if (e(r[i], i, r)) {
                return i;
            }
        } return -1; }, keys: function keys() { return new q(this, "key"); }, values: function values() { return new q(this, "value"); }, entries: function entries() { return new q(this, "entry"); } };
    if (Array.prototype.keys && !ce.IsCallable([1].keys().next)) {
        delete Array.prototype.keys;
    }
    if (Array.prototype.entries && !ce.IsCallable([1].entries().next)) {
        delete Array.prototype.entries;
    }
    if (Array.prototype.keys && Array.prototype.entries && !Array.prototype.values && Array.prototype[ie]) {
        b(Array.prototype, { values: Array.prototype[ie] });
        if (re.symbol($.unscopables)) {
            Array.prototype[$.unscopables].values = true;
        }
    }
    if (c && Array.prototype.values && Array.prototype.values.name !== "values") {
        var tt = Array.prototype.values;
        ne(Array.prototype, "values", function values() { return ce.Call(tt, this, arguments); });
        h(Array.prototype, ie, Array.prototype.values, true);
    }
    b(Array.prototype, et);
    if (1 / [true].indexOf(true, -0) < 0) {
        h(Array.prototype, "indexOf", function indexOf(e) { var t = E(this, arguments); if (t === 0 && 1 / t < 0) {
            return 0;
        } return t; }, true);
    }
    Me(Array.prototype, function () { return this.values(); });
    if (Object.getPrototypeOf) {
        Me(Object.getPrototypeOf([].values()));
    }
    var rt = function () { return a(function () { return Array.from({ length: -1 }).length === 0; }); }();
    var nt = function () { var e = Array.from([0].entries()); return e.length === 1 && r(e[0]) && e[0][0] === 0 && e[0][1] === 0; }();
    if (!rt || !nt) {
        ne(Array, "from", Ye.from);
    }
    var ot = function () { return a(function () { return Array.from([0], void 0); }); }();
    if (!ot) {
        var it = Array.from;
        ne(Array, "from", function from(e) { if (arguments.length > 1 && typeof arguments[1] !== "undefined") {
            return ce.Call(it, this, arguments);
        }
        else {
            return t(it, this, e);
        } });
    }
    var at = -(Math.pow(2, 32) - 1);
    var ut = function (e, r) { var n = { length: at }; n[r ? (n.length >>> 0) - 1 : 0] = true; return a(function () { t(e, n, function () { throw new RangeError("should not reach here"); }, []); return true; }); };
    if (!ut(Array.prototype.forEach)) {
        var ft = Array.prototype.forEach;
        ne(Array.prototype, "forEach", function forEach(e) { return ce.Call(ft, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.map)) {
        var st = Array.prototype.map;
        ne(Array.prototype, "map", function map(e) { return ce.Call(st, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.filter)) {
        var ct = Array.prototype.filter;
        ne(Array.prototype, "filter", function filter(e) { return ce.Call(ct, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.some)) {
        var lt = Array.prototype.some;
        ne(Array.prototype, "some", function some(e) { return ce.Call(lt, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.every)) {
        var pt = Array.prototype.every;
        ne(Array.prototype, "every", function every(e) { return ce.Call(pt, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.reduce)) {
        var vt = Array.prototype.reduce;
        ne(Array.prototype, "reduce", function reduce(e) { return ce.Call(vt, this.length >= 0 ? this : [], arguments); }, true);
    }
    if (!ut(Array.prototype.reduceRight, true)) {
        var yt = Array.prototype.reduceRight;
        ne(Array.prototype, "reduceRight", function reduceRight(e) { return ce.Call(yt, this.length >= 0 ? this : [], arguments); }, true);
    }
    var ht = Number("0o10") !== 8;
    var bt = Number("0b10") !== 2;
    var gt = y(Ue, function (e) { return Number(e + 0 + e) === 0; });
    if (ht || bt || gt) {
        var dt = Number;
        var mt = /^0b[01]+$/i;
        var Ot = /^0o[0-7]+$/i;
        var wt = mt.test.bind(mt);
        var jt = Ot.test.bind(Ot);
        var St = function (e) { var t; if (typeof e.valueOf === "function") {
            t = e.valueOf();
            if (re.primitive(t)) {
                return t;
            }
        } if (typeof e.toString === "function") {
            t = e.toString();
            if (re.primitive(t)) {
                return t;
            }
        } throw new TypeError("No default value"); };
        var Tt = $e.test.bind($e);
        var It = Je.test.bind(Je);
        var Et = function () { var e = function Number(t) { var r; if (arguments.length > 0) {
            r = re.primitive(t) ? t : St(t, "number");
        }
        else {
            r = 0;
        } if (typeof r === "string") {
            r = ce.Call(Be, r);
            if (wt(r)) {
                r = parseInt(C(r, 2), 2);
            }
            else if (jt(r)) {
                r = parseInt(C(r, 2), 8);
            }
            else if (Tt(r) || It(r)) {
                r = NaN;
            }
        } var n = this; var o = a(function () { dt.prototype.valueOf.call(n); return true; }); if (n instanceof e && !o) {
            return new dt(r);
        } return dt(r); }; return e; }();
        Ee(dt, Et, {});
        b(Et, { NaN: dt.NaN, MAX_VALUE: dt.MAX_VALUE, MIN_VALUE: dt.MIN_VALUE, NEGATIVE_INFINITY: dt.NEGATIVE_INFINITY, POSITIVE_INFINITY: dt.POSITIVE_INFINITY });
        Number = Et;
        m.redefine(S, "Number", Et);
    }
    var Pt = Math.pow(2, 53) - 1;
    b(Number, { MAX_SAFE_INTEGER: Pt, MIN_SAFE_INTEGER: -Pt, EPSILON: 2.220446049250313e-16, parseInt: S.parseInt, parseFloat: S.parseFloat, isFinite: K, isInteger: function isInteger(e) { return K(e) && ce.ToInteger(e) === e; }, isSafeInteger: function isSafeInteger(e) { return Number.isInteger(e) && k(e) <= Number.MAX_SAFE_INTEGER; }, isNaN: X });
    h(Number, "parseInt", S.parseInt, Number.parseInt !== S.parseInt);
    if ([, 1].find(function () { return true; }) === 1) {
        ne(Array.prototype, "find", et.find);
    }
    if ([, 1].findIndex(function () { return true; }) !== 0) {
        ne(Array.prototype, "findIndex", et.findIndex);
    }
    var Ct = Function.bind.call(Function.bind, Object.prototype.propertyIsEnumerable);
    var Mt = function ensureEnumerable(e, t) { if (s && Ct(e, t)) {
        Object.defineProperty(e, t, { enumerable: false });
    } };
    var xt = function sliceArgs() { var e = Number(this); var t = arguments.length; var r = t - e; var n = new Array(r < 0 ? 0 : r); for (var o = e; o < t; ++o) {
        n[o - e] = arguments[o];
    } return n; };
    var Nt = function assignTo(e) { return function assignToSource(t, r) { t[r] = e[r]; return t; }; };
    var At = function (e, t) { var r = n(Object(t)); var o; if (ce.IsCallable(Object.getOwnPropertySymbols)) {
        o = v(Object.getOwnPropertySymbols(Object(t)), Ct(t));
    } return p(P(r, o || []), Nt(t), e); };
    var Rt = { assign: function (e, t) { var r = ce.ToObject(e, "Cannot convert undefined or null to object"); return p(ce.Call(xt, 1, arguments), At, r); }, is: function is(e, t) { return ce.SameValue(e, t); } };
    var _t = Object.assign && Object.preventExtensions && function () { var e = Object.preventExtensions({ 1: 2 }); try {
        Object.assign(e, "xy");
    }
    catch (t) {
        return e[1] === "y";
    } }();
    if (_t) {
        ne(Object, "assign", Rt.assign);
    }
    b(Object, Rt);
    if (s) {
        var kt = { setPrototypeOf: function (e, r) { var n; var o = function (e, t) { if (!ce.TypeIsObject(e)) {
                throw new TypeError("cannot set prototype on a non-object");
            } if (!(t === null || ce.TypeIsObject(t))) {
                throw new TypeError("can only set prototype to an object or null" + t);
            } }; var i = function (e, r) { o(e, r); t(n, e, r); return e; }; try {
                n = e.getOwnPropertyDescriptor(e.prototype, r).set;
                t(n, {}, null);
            }
            catch (a) {
                if (e.prototype !== {}[r]) {
                    return;
                }
                n = function (e) { this[r] = e; };
                i.polyfill = i(i({}, null), e.prototype) instanceof e;
            } return i; }(Object, "__proto__") };
        b(Object, kt);
    }
    if (Object.setPrototypeOf && Object.getPrototypeOf && Object.getPrototypeOf(Object.setPrototypeOf({}, null)) !== null && Object.getPrototypeOf(Object.create(null)) === null) {
        (function () { var e = Object.create(null); var t = Object.getPrototypeOf; var r = Object.setPrototypeOf; Object.getPrototypeOf = function (r) { var n = t(r); return n === e ? null : n; }; Object.setPrototypeOf = function (t, n) { var o = n === null ? e : n; return r(t, o); }; Object.setPrototypeOf.polyfill = false; })();
    }
    var Lt = !i(function () { return Object.keys("foo"); });
    if (!Lt) {
        var Ft = Object.keys;
        ne(Object, "keys", function keys(e) { return Ft(ce.ToObject(e)); });
        n = Object.keys;
    }
    var Dt = i(function () { return Object.keys(/a/g); });
    if (Dt) {
        var zt = Object.keys;
        ne(Object, "keys", function keys(e) { if (re.regex(e)) {
            var t = [];
            for (var r in e) {
                if (z(e, r)) {
                    M(t, r);
                }
            }
            return t;
        } return zt(e); });
        n = Object.keys;
    }
    if (Object.getOwnPropertyNames) {
        var qt = !i(function () { return Object.getOwnPropertyNames("foo"); });
        if (!qt) {
            var Wt = typeof window === "object" ? Object.getOwnPropertyNames(window) : [];
            var Gt = Object.getOwnPropertyNames;
            ne(Object, "getOwnPropertyNames", function getOwnPropertyNames(e) { var t = ce.ToObject(e); if (g(t) === "[object Window]") {
                try {
                    return Gt(t);
                }
                catch (r) {
                    return P([], Wt);
                }
            } return Gt(t); });
        }
    }
    if (Object.getOwnPropertyDescriptor) {
        var Ht = !i(function () { return Object.getOwnPropertyDescriptor("foo", "bar"); });
        if (!Ht) {
            var Vt = Object.getOwnPropertyDescriptor;
            ne(Object, "getOwnPropertyDescriptor", function getOwnPropertyDescriptor(e, t) { return Vt(ce.ToObject(e), t); });
        }
    }
    if (Object.seal) {
        var Bt = !i(function () { return Object.seal("foo"); });
        if (!Bt) {
            var Ut = Object.seal;
            ne(Object, "seal", function seal(e) { if (!ce.TypeIsObject(e)) {
                return e;
            } return Ut(e); });
        }
    }
    if (Object.isSealed) {
        var $t = !i(function () { return Object.isSealed("foo"); });
        if (!$t) {
            var Jt = Object.isSealed;
            ne(Object, "isSealed", function isSealed(e) { if (!ce.TypeIsObject(e)) {
                return true;
            } return Jt(e); });
        }
    }
    if (Object.freeze) {
        var Xt = !i(function () { return Object.freeze("foo"); });
        if (!Xt) {
            var Kt = Object.freeze;
            ne(Object, "freeze", function freeze(e) { if (!ce.TypeIsObject(e)) {
                return e;
            } return Kt(e); });
        }
    }
    if (Object.isFrozen) {
        var Zt = !i(function () { return Object.isFrozen("foo"); });
        if (!Zt) {
            var Yt = Object.isFrozen;
            ne(Object, "isFrozen", function isFrozen(e) { if (!ce.TypeIsObject(e)) {
                return true;
            } return Yt(e); });
        }
    }
    if (Object.preventExtensions) {
        var Qt = !i(function () { return Object.preventExtensions("foo"); });
        if (!Qt) {
            var er = Object.preventExtensions;
            ne(Object, "preventExtensions", function preventExtensions(e) { if (!ce.TypeIsObject(e)) {
                return e;
            } return er(e); });
        }
    }
    if (Object.isExtensible) {
        var tr = !i(function () { return Object.isExtensible("foo"); });
        if (!tr) {
            var rr = Object.isExtensible;
            ne(Object, "isExtensible", function isExtensible(e) { if (!ce.TypeIsObject(e)) {
                return false;
            } return rr(e); });
        }
    }
    if (Object.getPrototypeOf) {
        var nr = !i(function () { return Object.getPrototypeOf("foo"); });
        if (!nr) {
            var or = Object.getPrototypeOf;
            ne(Object, "getPrototypeOf", function getPrototypeOf(e) { return or(ce.ToObject(e)); });
        }
    }
    var ir = s && function () { var e = Object.getOwnPropertyDescriptor(RegExp.prototype, "flags"); return e && ce.IsCallable(e.get); }();
    if (s && !ir) {
        var ar = function flags() { if (!ce.TypeIsObject(this)) {
            throw new TypeError("Method called on incompatible type: must be an object.");
        } var e = ""; if (this.global) {
            e += "g";
        } if (this.ignoreCase) {
            e += "i";
        } if (this.multiline) {
            e += "m";
        } if (this.unicode) {
            e += "u";
        } if (this.sticky) {
            e += "y";
        } return e; };
        m.getter(RegExp.prototype, "flags", ar);
    }
    var ur = s && a(function () { return String(new RegExp(/a/g, "i")) === "/a/i"; });
    var fr = oe && s && function () { var e = /./; e[$.match] = false; return RegExp(e) === e; }();
    var sr = a(function () { return RegExp.prototype.toString.call({ source: "abc" }) === "/abc/"; });
    var cr = sr && a(function () { return RegExp.prototype.toString.call({ source: "a", flags: "b" }) === "/a/b"; });
    if (!sr || !cr) {
        var lr = RegExp.prototype.toString;
        h(RegExp.prototype, "toString", function toString() { var e = ce.RequireObjectCoercible(this); if (re.regex(e)) {
            return t(lr, e);
        } var r = ue(e.source); var n = ue(e.flags); return "/" + r + "/" + n; }, true);
        m.preserveToString(RegExp.prototype.toString, lr);
    }
    if (s && (!ur || fr)) {
        var pr = Object.getOwnPropertyDescriptor(RegExp.prototype, "flags").get;
        var vr = Object.getOwnPropertyDescriptor(RegExp.prototype, "source") || {};
        var yr = function () { return this.source; };
        var hr = ce.IsCallable(vr.get) ? vr.get : yr;
        var br = RegExp;
        var gr = function () { return function RegExp(e, t) { var r = ce.IsRegExp(e); var n = this instanceof RegExp; if (!n && r && typeof t === "undefined" && e.constructor === RegExp) {
            return e;
        } var o = e; var i = t; if (re.regex(e)) {
            o = ce.Call(hr, e);
            i = typeof t === "undefined" ? ce.Call(pr, e) : t;
            return new RegExp(o, i);
        }
        else if (r) {
            o = e.source;
            i = typeof t === "undefined" ? e.flags : t;
        } return new br(e, t); }; }();
        Ee(br, gr, { $input: true });
        RegExp = gr;
        m.redefine(S, "RegExp", gr);
    }
    if (s) {
        var dr = { input: "$_", lastMatch: "$&", lastParen: "$+", leftContext: "$`", rightContext: "$'" };
        l(n(dr), function (e) { if (e in RegExp && !(dr[e] in RegExp)) {
            m.getter(RegExp, dr[e], function get() { return RegExp[e]; });
        } });
    }
    Ce(RegExp);
    var mr = 1 / Number.EPSILON;
    var Or = function roundTiesToEven(e) { return e + mr - mr; };
    var wr = Math.pow(2, -23);
    var jr = Math.pow(2, 127) * (2 - wr);
    var Sr = Math.pow(2, -126);
    var Tr = Math.E;
    var Ir = Math.LOG2E;
    var Er = Math.LOG10E;
    var Pr = Number.prototype.clz;
    delete Number.prototype.clz;
    var Cr = { acosh: function acosh(e) { var t = Number(e); if (X(t) || e < 1) {
            return NaN;
        } if (t === 1) {
            return 0;
        } if (t === Infinity) {
            return t;
        } var r = 1 / (t * t); if (t < 2) {
            return Y(t - 1 + D(1 - r) * t);
        } var n = t / 2; return Y(n + D(1 - r) * n - 1) + 1 / Ir; }, asinh: function asinh(e) { var t = Number(e); if (t === 0 || !T(t)) {
            return t;
        } var r = k(t); var n = r * r; var o = Z(t); if (r < 1) {
            return o * Y(r + n / (D(n + 1) + 1));
        } return o * (Y(r / 2 + D(1 + 1 / n) * r / 2 - 1) + 1 / Ir); }, atanh: function atanh(e) { var t = Number(e); if (t === 0) {
            return t;
        } if (t === -1) {
            return -Infinity;
        } if (t === 1) {
            return Infinity;
        } if (X(t) || t < -1 || t > 1) {
            return NaN;
        } var r = k(t); return Z(t) * Y(2 * r / (1 - r)) / 2; }, cbrt: function cbrt(e) { var t = Number(e); if (t === 0) {
            return t;
        } var r = t < 0; var n; if (r) {
            t = -t;
        } if (t === Infinity) {
            n = Infinity;
        }
        else {
            n = L(F(t) / 3);
            n = (t / (n * n) + 2 * n) / 3;
        } return r ? -n : n; }, clz32: function clz32(e) { var t = Number(e); var r = ce.ToUint32(t); if (r === 0) {
            return 32;
        } return Pr ? ce.Call(Pr, r) : 31 - _(F(r + .5) * Ir); }, cosh: function cosh(e) { var t = Number(e); if (t === 0) {
            return 1;
        } if (X(t)) {
            return NaN;
        } if (!T(t)) {
            return Infinity;
        } var r = L(k(t) - 1); return (r + 1 / (r * Tr * Tr)) * (Tr / 2); }, expm1: function expm1(e) { var t = Number(e); if (t === -Infinity) {
            return -1;
        } if (!T(t) || t === 0) {
            return t;
        } if (k(t) > .5) {
            return L(t) - 1;
        } var r = t; var n = 0; var o = 1; while (n + r !== n) {
            n += r;
            o += 1;
            r *= t / o;
        } return n; }, hypot: function hypot(e, t) { var r = 0; var n = 0; for (var o = 0; o < arguments.length; ++o) {
            var i = k(Number(arguments[o]));
            if (n < i) {
                r *= n / i * (n / i);
                r += 1;
                n = i;
            }
            else {
                r += i > 0 ? i / n * (i / n) : i;
            }
        } return n === Infinity ? Infinity : n * D(r); }, log2: function log2(e) { return F(e) * Ir; }, log10: function log10(e) { return F(e) * Er; }, log1p: Y, sign: Z, sinh: function sinh(e) { var t = Number(e); if (!T(t) || t === 0) {
            return t;
        } var r = k(t); if (r < 1) {
            var n = Math.expm1(r);
            return Z(t) * n * (1 + 1 / (n + 1)) / 2;
        } var o = L(r - 1); return Z(t) * (o - 1 / (o * Tr * Tr)) * (Tr / 2); }, tanh: function tanh(e) { var t = Number(e); if (X(t) || t === 0) {
            return t;
        } if (t >= 20) {
            return 1;
        } if (t <= -20) {
            return -1;
        } return (Math.expm1(t) - Math.expm1(-t)) / (L(t) + L(-t)); }, trunc: function trunc(e) { var t = Number(e); return t < 0 ? -_(-t) : _(t); }, imul: function imul(e, t) { var r = ce.ToUint32(e); var n = ce.ToUint32(t); var o = r >>> 16 & 65535; var i = r & 65535; var a = n >>> 16 & 65535; var u = n & 65535; return i * u + (o * u + i * a << 16 >>> 0) | 0; }, fround: function fround(e) { var t = Number(e); if (t === 0 || t === Infinity || t === -Infinity || X(t)) {
            return t;
        } var r = Z(t); var n = k(t); if (n < Sr) {
            return r * Or(n / Sr / wr) * Sr * wr;
        } var o = (1 + wr / Number.EPSILON) * n; var i = o - (o - n); if (i > jr || X(i)) {
            return r * Infinity;
        } return r * i; } };
    var Mr = function withinULPDistance(e, t, r) { return k(1 - e / t) / Number.EPSILON < (r || 8); };
    b(Math, Cr);
    h(Math, "sinh", Cr.sinh, Math.sinh(710) === Infinity);
    h(Math, "cosh", Cr.cosh, Math.cosh(710) === Infinity);
    h(Math, "log1p", Cr.log1p, Math.log1p(-1e-17) !== -1e-17);
    h(Math, "asinh", Cr.asinh, Math.asinh(-1e7) !== -Math.asinh(1e7));
    h(Math, "asinh", Cr.asinh, Math.asinh(1e300) === Infinity);
    h(Math, "atanh", Cr.atanh, Math.atanh(1e-300) === 0);
    h(Math, "tanh", Cr.tanh, Math.tanh(-2e-17) !== -2e-17);
    h(Math, "acosh", Cr.acosh, Math.acosh(Number.MAX_VALUE) === Infinity);
    h(Math, "acosh", Cr.acosh, !Mr(Math.acosh(1 + Number.EPSILON), Math.sqrt(2 * Number.EPSILON)));
    h(Math, "cbrt", Cr.cbrt, !Mr(Math.cbrt(1e-300), 1e-100));
    h(Math, "sinh", Cr.sinh, Math.sinh(-2e-17) !== -2e-17);
    var xr = Math.expm1(10);
    h(Math, "expm1", Cr.expm1, xr > 22025.465794806718 || xr < 22025.465794806718);
    var Nr = Math.round;
    var Ar = Math.round(.5 - Number.EPSILON / 4) === 0 && Math.round(-.5 + Number.EPSILON / 3.99) === 1;
    var Rr = mr + 1;
    var _r = 2 * mr - 1;
    var kr = [Rr, _r].every(function (e) { return Math.round(e) === e; });
    h(Math, "round", function round(e) { var t = _(e); var r = t === -1 ? -0 : t + 1; return e - t < .5 ? t : r; }, !Ar || !kr);
    m.preserveToString(Math.round, Nr);
    var Lr = Math.imul;
    if (Math.imul(4294967295, 5) !== -5) {
        Math.imul = Cr.imul;
        m.preserveToString(Math.imul, Lr);
    }
    if (Math.imul.length !== 2) {
        ne(Math, "imul", function imul(e, t) { return ce.Call(Lr, Math, arguments); });
    }
    var Fr = function () { var e = S.setTimeout; if (typeof e !== "function" && typeof e !== "object") {
        return;
    } ce.IsPromise = function (e) { if (!ce.TypeIsObject(e)) {
        return false;
    } if (typeof e._promise === "undefined") {
        return false;
    } return true; }; var r = function (e) { if (!ce.IsConstructor(e)) {
        throw new TypeError("Bad promise constructor");
    } var t = this; var r = function (e, r) { if (t.resolve !== void 0 || t.reject !== void 0) {
        throw new TypeError("Bad Promise implementation!");
    } t.resolve = e; t.reject = r; }; t.resolve = void 0; t.reject = void 0; t.promise = new e(r); if (!(ce.IsCallable(t.resolve) && ce.IsCallable(t.reject))) {
        throw new TypeError("Bad promise constructor");
    } }; var n; if (typeof window !== "undefined" && ce.IsCallable(window.postMessage)) {
        n = function () { var e = []; var t = "zero-timeout-message"; var r = function (r) { M(e, r); window.postMessage(t, "*"); }; var n = function (r) { if (r.source === window && r.data === t) {
            r.stopPropagation();
            if (e.length === 0) {
                return;
            }
            var n = N(e);
            n();
        } }; window.addEventListener("message", n, true); return r; };
    } var o = function () { var e = S.Promise; var t = e && e.resolve && e.resolve(); return t && function (e) { return t.then(e); }; }; var i = ce.IsCallable(S.setImmediate) ? S.setImmediate : typeof process === "object" && process.nextTick ? process.nextTick : o() || (ce.IsCallable(n) ? n() : function (t) { e(t, 0); }); var a = function (e) { return e; }; var u = function (e) { throw e; }; var f = 0; var s = 1; var c = 2; var l = 0; var p = 1; var v = 2; var y = {}; var h = function (e, t, r) { i(function () { g(e, t, r); }); }; var g = function (e, t, r) { var n, o; if (t === y) {
        return e(r);
    } try {
        n = e(r);
        o = t.resolve;
    }
    catch (i) {
        n = i;
        o = t.reject;
    } o(n); }; var d = function (e, t) { var r = e._promise; var n = r.reactionLength; if (n > 0) {
        h(r.fulfillReactionHandler0, r.reactionCapability0, t);
        r.fulfillReactionHandler0 = void 0;
        r.rejectReactions0 = void 0;
        r.reactionCapability0 = void 0;
        if (n > 1) {
            for (var o = 1, i = 0; o < n; o++, i += 3) {
                h(r[i + l], r[i + v], t);
                e[i + l] = void 0;
                e[i + p] = void 0;
                e[i + v] = void 0;
            }
        }
    } r.result = t; r.state = s; r.reactionLength = 0; }; var m = function (e, t) { var r = e._promise; var n = r.reactionLength; if (n > 0) {
        h(r.rejectReactionHandler0, r.reactionCapability0, t);
        r.fulfillReactionHandler0 = void 0;
        r.rejectReactions0 = void 0;
        r.reactionCapability0 = void 0;
        if (n > 1) {
            for (var o = 1, i = 0; o < n; o++, i += 3) {
                h(r[i + p], r[i + v], t);
                e[i + l] = void 0;
                e[i + p] = void 0;
                e[i + v] = void 0;
            }
        }
    } r.result = t; r.state = c; r.reactionLength = 0; }; var O = function (e) { var t = false; var r = function (r) { var n; if (t) {
        return;
    } t = true; if (r === e) {
        return m(e, new TypeError("Self resolution"));
    } if (!ce.TypeIsObject(r)) {
        return d(e, r);
    } try {
        n = r.then;
    }
    catch (o) {
        return m(e, o);
    } if (!ce.IsCallable(n)) {
        return d(e, r);
    } i(function () { j(e, r, n); }); }; var n = function (r) { if (t) {
        return;
    } t = true; return m(e, r); }; return { resolve: r, reject: n }; }; var w = function (e, r, n, o) { if (e === I) {
        t(e, r, n, o, y);
    }
    else {
        t(e, r, n, o);
    } }; var j = function (e, t, r) { var n = O(e); var o = n.resolve; var i = n.reject; try {
        w(r, t, o, i);
    }
    catch (a) {
        i(a);
    } }; var T, I; var E = function () { var e = function Promise(t) { if (!(this instanceof e)) {
        throw new TypeError('Constructor Promise requires "new"');
    } if (this && this._promise) {
        throw new TypeError("Bad construction");
    } if (!ce.IsCallable(t)) {
        throw new TypeError("not a valid resolver");
    } var r = Ae(this, e, T, { _promise: { result: void 0, state: f, reactionLength: 0, fulfillReactionHandler0: void 0, rejectReactionHandler0: void 0, reactionCapability0: void 0 } }); var n = O(r); var o = n.reject; try {
        t(n.resolve, o);
    }
    catch (i) {
        o(i);
    } return r; }; return e; }(); T = E.prototype; var P = function (e, t, r, n) { var o = false; return function (i) { if (o) {
        return;
    } o = true; t[e] = i; if (--n.count === 0) {
        var a = r.resolve;
        a(t);
    } }; }; var C = function (e, t, r) { var n = e.iterator; var o = []; var i = { count: 1 }; var a, u; var f = 0; while (true) {
        try {
            a = ce.IteratorStep(n);
            if (a === false) {
                e.done = true;
                break;
            }
            u = a.value;
        }
        catch (s) {
            e.done = true;
            throw s;
        }
        o[f] = void 0;
        var c = t.resolve(u);
        var l = P(f, o, r, i);
        i.count += 1;
        w(c.then, c, l, r.reject);
        f += 1;
    } if (--i.count === 0) {
        var p = r.resolve;
        p(o);
    } return r.promise; }; var x = function (e, t, r) { var n = e.iterator; var o, i, a; while (true) {
        try {
            o = ce.IteratorStep(n);
            if (o === false) {
                e.done = true;
                break;
            }
            i = o.value;
        }
        catch (u) {
            e.done = true;
            throw u;
        }
        a = t.resolve(i);
        w(a.then, a, r.resolve, r.reject);
    } return r.promise; }; b(E, { all: function all(e) { var t = this; if (!ce.TypeIsObject(t)) {
            throw new TypeError("Promise is not object");
        } var n = new r(t); var o, i; try {
            o = ce.GetIterator(e);
            i = { iterator: o, done: false };
            return C(i, t, n);
        }
        catch (a) {
            var u = a;
            if (i && !i.done) {
                try {
                    ce.IteratorClose(o, true);
                }
                catch (f) {
                    u = f;
                }
            }
            var s = n.reject;
            s(u);
            return n.promise;
        } }, race: function race(e) { var t = this; if (!ce.TypeIsObject(t)) {
            throw new TypeError("Promise is not object");
        } var n = new r(t); var o, i; try {
            o = ce.GetIterator(e);
            i = { iterator: o, done: false };
            return x(i, t, n);
        }
        catch (a) {
            var u = a;
            if (i && !i.done) {
                try {
                    ce.IteratorClose(o, true);
                }
                catch (f) {
                    u = f;
                }
            }
            var s = n.reject;
            s(u);
            return n.promise;
        } }, reject: function reject(e) { var t = this; if (!ce.TypeIsObject(t)) {
            throw new TypeError("Bad promise constructor");
        } var n = new r(t); var o = n.reject; o(e); return n.promise; }, resolve: function resolve(e) { var t = this; if (!ce.TypeIsObject(t)) {
            throw new TypeError("Bad promise constructor");
        } if (ce.IsPromise(e)) {
            var n = e.constructor;
            if (n === t) {
                return e;
            }
        } var o = new r(t); var i = o.resolve; i(e); return o.promise; } }); b(T, { "catch": function (e) { return this.then(null, e); }, then: function then(e, t) { var n = this; if (!ce.IsPromise(n)) {
            throw new TypeError("not a promise");
        } var o = ce.SpeciesConstructor(n, E); var i; var b = arguments.length > 2 && arguments[2] === y; if (b && o === E) {
            i = y;
        }
        else {
            i = new r(o);
        } var g = ce.IsCallable(e) ? e : a; var d = ce.IsCallable(t) ? t : u; var m = n._promise; var O; if (m.state === f) {
            if (m.reactionLength === 0) {
                m.fulfillReactionHandler0 = g;
                m.rejectReactionHandler0 = d;
                m.reactionCapability0 = i;
            }
            else {
                var w = 3 * (m.reactionLength - 1);
                m[w + l] = g;
                m[w + p] = d;
                m[w + v] = i;
            }
            m.reactionLength += 1;
        }
        else if (m.state === s) {
            O = m.result;
            h(g, i, O);
        }
        else if (m.state === c) {
            O = m.result;
            h(d, i, O);
        }
        else {
            throw new TypeError("unexpected Promise state");
        } return i.promise; } }); y = new r(E); I = T.then; return E; }();
    if (S.Promise) {
        delete S.Promise.accept;
        delete S.Promise.defer;
        delete S.Promise.prototype.chain;
    }
    if (typeof Fr === "function") {
        b(S, { Promise: Fr });
        var Dr = w(S.Promise, function (e) { return e.resolve(42).then(function () { }) instanceof e; });
        var zr = !i(function () { return S.Promise.reject(42).then(null, 5).then(null, W); });
        var qr = i(function () { return S.Promise.call(3, W); });
        var Wr = function (e) { var t = e.resolve(5); t.constructor = {}; var r = e.resolve(t); try {
            r.then(null, W).then(null, W);
        }
        catch (n) {
            return true;
        } return t === r; }(S.Promise);
        var Gr = s && function () { var e = 0; var t = Object.defineProperty({}, "then", { get: function () { e += 1; } }); Promise.resolve(t); return e === 1; }();
        var Hr = function BadResolverPromise(e) { var t = new Promise(e); e(3, function () { }); this.then = t.then; this.constructor = BadResolverPromise_2; };
        Hr.prototype = Promise.prototype;
        Hr.all = Promise.all;
        var Vr = a(function () { return !!Hr.all([1, 2]); });
        if (!Dr || !zr || !qr || Wr || !Gr || Vr) {
            Promise = Fr;
            ne(S, "Promise", Fr);
        }
        if (Promise.all.length !== 1) {
            var Br = Promise.all;
            ne(Promise, "all", function all(e) { return ce.Call(Br, this, arguments); });
        }
        if (Promise.race.length !== 1) {
            var Ur = Promise.race;
            ne(Promise, "race", function race(e) { return ce.Call(Ur, this, arguments); });
        }
        if (Promise.resolve.length !== 1) {
            var $r = Promise.resolve;
            ne(Promise, "resolve", function resolve(e) { return ce.Call($r, this, arguments); });
        }
        if (Promise.reject.length !== 1) {
            var Jr = Promise.reject;
            ne(Promise, "reject", function reject(e) { return ce.Call(Jr, this, arguments); });
        }
        Mt(Promise, "all");
        Mt(Promise, "race");
        Mt(Promise, "resolve");
        Mt(Promise, "reject");
        Ce(Promise);
    }
    var Xr = function (e) { var t = n(p(e, function (e, t) { e[t] = true; return e; }, {})); return e.join(":") === t.join(":"); };
    var Kr = Xr(["z", "a", "bb"]);
    var Zr = Xr(["z", 1, "a", "3", 2]);
    if (s) {
        var Yr = function fastkey(e, t) { if (!t && !Kr) {
            return null;
        } if (se(e)) {
            return "^" + ce.ToString(e);
        }
        else if (typeof e === "string") {
            return "$" + e;
        }
        else if (typeof e === "number") {
            if (!Zr) {
                return "n" + e;
            }
            return e;
        }
        else if (typeof e === "boolean") {
            return "b" + e;
        } return null; };
        var Qr = function emptyObject() { return Object.create ? Object.create(null) : {}; };
        var en = function addIterableToMap(e, n, o) { if (r(o) || re.string(o)) {
            l(o, function (e) { if (!ce.TypeIsObject(e)) {
                throw new TypeError("Iterator value " + e + " is not an entry object");
            } n.set(e[0], e[1]); });
        }
        else if (o instanceof e) {
            t(e.prototype.forEach, o, function (e, t) { n.set(t, e); });
        }
        else {
            var i, a;
            if (!se(o)) {
                a = n.set;
                if (!ce.IsCallable(a)) {
                    throw new TypeError("bad map");
                }
                i = ce.GetIterator(o);
            }
            if (typeof i !== "undefined") {
                while (true) {
                    var u = ce.IteratorStep(i);
                    if (u === false) {
                        break;
                    }
                    var f = u.value;
                    try {
                        if (!ce.TypeIsObject(f)) {
                            throw new TypeError("Iterator value " + f + " is not an entry object");
                        }
                        t(a, n, f[0], f[1]);
                    }
                    catch (s) {
                        ce.IteratorClose(i, true);
                        throw s;
                    }
                }
            }
        } };
        var tn = function addIterableToSet(e, n, o) { if (r(o) || re.string(o)) {
            l(o, function (e) { n.add(e); });
        }
        else if (o instanceof e) {
            t(e.prototype.forEach, o, function (e) { n.add(e); });
        }
        else {
            var i, a;
            if (!se(o)) {
                a = n.add;
                if (!ce.IsCallable(a)) {
                    throw new TypeError("bad set");
                }
                i = ce.GetIterator(o);
            }
            if (typeof i !== "undefined") {
                while (true) {
                    var u = ce.IteratorStep(i);
                    if (u === false) {
                        break;
                    }
                    var f = u.value;
                    try {
                        t(a, n, f);
                    }
                    catch (s) {
                        ce.IteratorClose(i, true);
                        throw s;
                    }
                }
            }
        } };
        var rn = { Map: function () { var e = {}; var r = function MapEntry(e, t) { this.key = e; this.value = t; this.next = null; this.prev = null; }; r.prototype.isRemoved = function isRemoved() { return this.key === e; }; var n = function isMap(e) { return !!e._es6map; }; var o = function requireMapSlot(e, t) { if (!ce.TypeIsObject(e) || !n(e)) {
                throw new TypeError("Method Map.prototype." + t + " called on incompatible receiver " + ce.ToString(e));
            } }; var i = function MapIterator(e, t) { o(e, "[[MapIterator]]"); this.head = e._head; this.i = this.head; this.kind = t; }; i.prototype = { isMapIterator: true, next: function next() { if (!this.isMapIterator) {
                    throw new TypeError("Not a MapIterator");
                } var e = this.i; var t = this.kind; var r = this.head; if (typeof this.i === "undefined") {
                    return Ke();
                } while (e.isRemoved() && e !== r) {
                    e = e.prev;
                } var n; while (e.next !== r) {
                    e = e.next;
                    if (!e.isRemoved()) {
                        if (t === "key") {
                            n = e.key;
                        }
                        else if (t === "value") {
                            n = e.value;
                        }
                        else {
                            n = [e.key, e.value];
                        }
                        this.i = e;
                        return Ke(n);
                    }
                } this.i = void 0; return Ke(); } }; Me(i.prototype); var a; var u = function Map() { if (!(this instanceof Map)) {
                throw new TypeError('Constructor Map requires "new"');
            } if (this && this._es6map) {
                throw new TypeError("Bad construction");
            } var e = Ae(this, Map, a, { _es6map: true, _head: null, _map: G ? new G : null, _size: 0, _storage: Qr() }); var t = new r(null, null); t.next = t.prev = t; e._head = t; if (arguments.length > 0) {
                en(Map, e, arguments[0]);
            } return e; }; a = u.prototype; m.getter(a, "size", function () { if (typeof this._size === "undefined") {
                throw new TypeError("size method called on incompatible Map");
            } return this._size; }); b(a, { get: function get(e) { o(this, "get"); var t; var r = Yr(e, true); if (r !== null) {
                    t = this._storage[r];
                    if (t) {
                        return t.value;
                    }
                    else {
                        return;
                    }
                } if (this._map) {
                    t = V.call(this._map, e);
                    if (t) {
                        return t.value;
                    }
                    else {
                        return;
                    }
                } var n = this._head; var i = n; while ((i = i.next) !== n) {
                    if (ce.SameValueZero(i.key, e)) {
                        return i.value;
                    }
                } }, has: function has(e) { o(this, "has"); var t = Yr(e, true); if (t !== null) {
                    return typeof this._storage[t] !== "undefined";
                } if (this._map) {
                    return B.call(this._map, e);
                } var r = this._head; var n = r; while ((n = n.next) !== r) {
                    if (ce.SameValueZero(n.key, e)) {
                        return true;
                    }
                } return false; }, set: function set(e, t) { o(this, "set"); var n = this._head; var i = n; var a; var u = Yr(e, true); if (u !== null) {
                    if (typeof this._storage[u] !== "undefined") {
                        this._storage[u].value = t;
                        return this;
                    }
                    else {
                        a = this._storage[u] = new r(e, t);
                        i = n.prev;
                    }
                }
                else if (this._map) {
                    if (B.call(this._map, e)) {
                        V.call(this._map, e).value = t;
                    }
                    else {
                        a = new r(e, t);
                        U.call(this._map, e, a);
                        i = n.prev;
                    }
                } while ((i = i.next) !== n) {
                    if (ce.SameValueZero(i.key, e)) {
                        i.value = t;
                        return this;
                    }
                } a = a || new r(e, t); if (ce.SameValue(-0, e)) {
                    a.key = +0;
                } a.next = this._head; a.prev = this._head.prev; a.prev.next = a; a.next.prev = a; this._size += 1; return this; }, "delete": function (t) { o(this, "delete"); var r = this._head; var n = r; var i = Yr(t, true); if (i !== null) {
                    if (typeof this._storage[i] === "undefined") {
                        return false;
                    }
                    n = this._storage[i].prev;
                    delete this._storage[i];
                }
                else if (this._map) {
                    if (!B.call(this._map, t)) {
                        return false;
                    }
                    n = V.call(this._map, t).prev;
                    H.call(this._map, t);
                } while ((n = n.next) !== r) {
                    if (ce.SameValueZero(n.key, t)) {
                        n.key = e;
                        n.value = e;
                        n.prev.next = n.next;
                        n.next.prev = n.prev;
                        this._size -= 1;
                        return true;
                    }
                } return false; }, clear: function clear() { o(this, "clear"); this._map = G ? new G : null; this._size = 0; this._storage = Qr(); var t = this._head; var r = t; var n = r.next; while ((r = n) !== t) {
                    r.key = e;
                    r.value = e;
                    n = r.next;
                    r.next = r.prev = t;
                } t.next = t.prev = t; }, keys: function keys() { o(this, "keys"); return new i(this, "key"); }, values: function values() { o(this, "values"); return new i(this, "value"); }, entries: function entries() { o(this, "entries"); return new i(this, "key+value"); }, forEach: function forEach(e) { o(this, "forEach"); var r = arguments.length > 1 ? arguments[1] : null; var n = this.entries(); for (var i = n.next(); !i.done; i = n.next()) {
                    if (r) {
                        t(e, r, i.value[1], i.value[0], this);
                    }
                    else {
                        e(i.value[1], i.value[0], this);
                    }
                } } }); Me(a, a.entries); return u; }(), Set: function () { var e = function isSet(e) { return e._es6set && typeof e._storage !== "undefined"; }; var r = function requireSetSlot(t, r) { if (!ce.TypeIsObject(t) || !e(t)) {
                throw new TypeError("Set.prototype." + r + " called on incompatible receiver " + ce.ToString(t));
            } }; var o; var i = function Set() { if (!(this instanceof Set)) {
                throw new TypeError('Constructor Set requires "new"');
            } if (this && this._es6set) {
                throw new TypeError("Bad construction");
            } var e = Ae(this, Set, o, { _es6set: true, "[[SetData]]": null, _storage: Qr() }); if (!e._es6set) {
                throw new TypeError("bad set");
            } if (arguments.length > 0) {
                tn(Set, e, arguments[0]);
            } return e; }; o = i.prototype; var a = function (e) { var t = e; if (t === "^null") {
                return null;
            }
            else if (t === "^undefined") {
                return void 0;
            }
            else {
                var r = t.charAt(0);
                if (r === "$") {
                    return C(t, 1);
                }
                else if (r === "n") {
                    return +C(t, 1);
                }
                else if (r === "b") {
                    return t === "btrue";
                }
            } return +t; }; var u = function ensureMap(e) { if (!e["[[SetData]]"]) {
                var t = new rn.Map;
                e["[[SetData]]"] = t;
                l(n(e._storage), function (e) { var r = a(e); t.set(r, r); });
                e["[[SetData]]"] = t;
            } e._storage = null; }; m.getter(i.prototype, "size", function () { r(this, "size"); if (this._storage) {
                return n(this._storage).length;
            } u(this); return this["[[SetData]]"].size; }); b(i.prototype, { has: function has(e) { r(this, "has"); var t; if (this._storage && (t = Yr(e)) !== null) {
                    return !!this._storage[t];
                } u(this); return this["[[SetData]]"].has(e); }, add: function add(e) { r(this, "add"); var t; if (this._storage && (t = Yr(e)) !== null) {
                    this._storage[t] = true;
                    return this;
                } u(this); this["[[SetData]]"].set(e, e); return this; }, "delete": function (e) { r(this, "delete"); var t; if (this._storage && (t = Yr(e)) !== null) {
                    var n = z(this._storage, t);
                    return delete this._storage[t] && n;
                } u(this); return this["[[SetData]]"]["delete"](e); }, clear: function clear() { r(this, "clear"); if (this._storage) {
                    this._storage = Qr();
                } if (this["[[SetData]]"]) {
                    this["[[SetData]]"].clear();
                } }, values: function values() { r(this, "values"); u(this); return new f(this["[[SetData]]"].values()); }, entries: function entries() { r(this, "entries"); u(this); return new f(this["[[SetData]]"].entries()); }, forEach: function forEach(e) { r(this, "forEach"); var n = arguments.length > 1 ? arguments[1] : null; var o = this; u(o); this["[[SetData]]"].forEach(function (r, i) { if (n) {
                    t(e, n, i, i, o);
                }
                else {
                    e(i, i, o);
                } }); } }); h(i.prototype, "keys", i.prototype.values, true); Me(i.prototype, i.prototype.values); var f = function SetIterator(e) { this.it = e; }; f.prototype = { isSetIterator: true, next: function next() { if (!this.isSetIterator) {
                    throw new TypeError("Not a SetIterator");
                } return this.it.next(); } }; Me(f.prototype); return i; }() };
        var nn = S.Set && !Set.prototype["delete"] && Set.prototype.remove && Set.prototype.items && Set.prototype.map && Array.isArray((new Set).keys);
        if (nn) {
            S.Set = rn.Set;
        }
        if (S.Map || S.Set) {
            var on = a(function () { return new Map([[1, 2]]).get(1) === 2; });
            if (!on) {
                S.Map = function Map() { if (!(this instanceof Map)) {
                    throw new TypeError('Constructor Map requires "new"');
                } var e = new G; if (arguments.length > 0) {
                    en(Map, e, arguments[0]);
                } delete e.constructor; Object.setPrototypeOf(e, S.Map.prototype); return e; };
                S.Map.prototype = O(G.prototype);
                h(S.Map.prototype, "constructor", S.Map, true);
                m.preserveToString(S.Map, G);
            }
            var an = new Map;
            var un = function () { var e = new Map([[1, 0], [2, 0], [3, 0], [4, 0]]); e.set(-0, e); return e.get(0) === e && e.get(-0) === e && e.has(0) && e.has(-0); }();
            var fn = an.set(1, 2) === an;
            if (!un || !fn) {
                ne(Map.prototype, "set", function set(e, r) { t(U, this, e === 0 ? 0 : e, r); return this; });
            }
            if (!un) {
                b(Map.prototype, { get: function get(e) { return t(V, this, e === 0 ? 0 : e); }, has: function has(e) { return t(B, this, e === 0 ? 0 : e); } }, true);
                m.preserveToString(Map.prototype.get, V);
                m.preserveToString(Map.prototype.has, B);
            }
            var sn = new Set;
            var cn = Set.prototype["delete"] && Set.prototype.add && Set.prototype.has && function (e) { e["delete"](0); e.add(-0); return !e.has(0); }(sn);
            var ln = sn.add(1) === sn;
            if (!cn || !ln) {
                var pn = Set.prototype.add;
                Set.prototype.add = function add(e) { t(pn, this, e === 0 ? 0 : e); return this; };
                m.preserveToString(Set.prototype.add, pn);
            }
            if (!cn) {
                var vn = Set.prototype.has;
                Set.prototype.has = function has(e) { return t(vn, this, e === 0 ? 0 : e); };
                m.preserveToString(Set.prototype.has, vn);
                var yn = Set.prototype["delete"];
                Set.prototype["delete"] = function SetDelete(e) { return t(yn, this, e === 0 ? 0 : e); };
                m.preserveToString(Set.prototype["delete"], yn);
            }
            var hn = w(S.Map, function (e) { var t = new e([]); t.set(42, 42); return t instanceof e; });
            var bn = Object.setPrototypeOf && !hn;
            var gn = function () { try {
                return !(S.Map() instanceof S.Map);
            }
            catch (e) {
                return e instanceof TypeError;
            } }();
            if (S.Map.length !== 0 || bn || !gn) {
                S.Map = function Map() { if (!(this instanceof Map)) {
                    throw new TypeError('Constructor Map requires "new"');
                } var e = new G; if (arguments.length > 0) {
                    en(Map, e, arguments[0]);
                } delete e.constructor; Object.setPrototypeOf(e, Map.prototype); return e; };
                S.Map.prototype = G.prototype;
                h(S.Map.prototype, "constructor", S.Map, true);
                m.preserveToString(S.Map, G);
            }
            var dn = w(S.Set, function (e) { var t = new e([]); t.add(42, 42); return t instanceof e; });
            var mn = Object.setPrototypeOf && !dn;
            var On = function () { try {
                return !(S.Set() instanceof S.Set);
            }
            catch (e) {
                return e instanceof TypeError;
            } }();
            if (S.Set.length !== 0 || mn || !On) {
                var wn = S.Set;
                S.Set = function Set() { if (!(this instanceof Set)) {
                    throw new TypeError('Constructor Set requires "new"');
                } var e = new wn; if (arguments.length > 0) {
                    tn(Set, e, arguments[0]);
                } delete e.constructor; Object.setPrototypeOf(e, Set.prototype); return e; };
                S.Set.prototype = wn.prototype;
                h(S.Set.prototype, "constructor", S.Set, true);
                m.preserveToString(S.Set, wn);
            }
            var jn = new S.Map;
            var Sn = !a(function () { return jn.keys().next().done; });
            if (typeof S.Map.prototype.clear !== "function" || (new S.Set).size !== 0 || jn.size !== 0 || typeof S.Map.prototype.keys !== "function" || typeof S.Set.prototype.keys !== "function" || typeof S.Map.prototype.forEach !== "function" || typeof S.Set.prototype.forEach !== "function" || u(S.Map) || u(S.Set) || typeof jn.keys().next !== "function" || Sn || !hn) {
                b(S, { Map: rn.Map, Set: rn.Set }, true);
            }
            if (S.Set.prototype.keys !== S.Set.prototype.values) {
                h(S.Set.prototype, "keys", S.Set.prototype.values, true);
            }
            Me(Object.getPrototypeOf((new S.Map).keys()));
            Me(Object.getPrototypeOf((new S.Set).keys()));
            if (c && S.Set.prototype.has.name !== "has") {
                var Tn = S.Set.prototype.has;
                ne(S.Set.prototype, "has", function has(e) { return t(Tn, this, e); });
            }
        }
        b(S, rn);
        Ce(S.Map);
        Ce(S.Set);
    }
    var In = function throwUnlessTargetIsObject(e) { if (!ce.TypeIsObject(e)) {
        throw new TypeError("target must be an object");
    } };
    var En = { apply: function apply() { return ce.Call(ce.Call, null, arguments); }, construct: function construct(e, t) { if (!ce.IsConstructor(e)) {
            throw new TypeError("First argument must be a constructor.");
        } var r = arguments.length > 2 ? arguments[2] : e; if (!ce.IsConstructor(r)) {
            throw new TypeError("new.target must be a constructor.");
        } return ce.Construct(e, t, r, "internal"); }, deleteProperty: function deleteProperty(e, t) { In(e); if (s) {
            var r = Object.getOwnPropertyDescriptor(e, t);
            if (r && !r.configurable) {
                return false;
            }
        } return delete e[t]; }, has: function has(e, t) { In(e); return t in e; } };
    if (Object.getOwnPropertyNames) {
        Object.assign(En, { ownKeys: function ownKeys(e) { In(e); var t = Object.getOwnPropertyNames(e); if (ce.IsCallable(Object.getOwnPropertySymbols)) {
                x(t, Object.getOwnPropertySymbols(e));
            } return t; } });
    }
    var Pn = function ConvertExceptionToBoolean(e) { return !i(e); };
    if (Object.preventExtensions) {
        Object.assign(En, { isExtensible: function isExtensible(e) { In(e); return Object.isExtensible(e); }, preventExtensions: function preventExtensions(e) { In(e); return Pn(function () { return Object.preventExtensions(e); }); } });
    }
    if (s) {
        var Cn = function get(e, t, r) { var n = Object.getOwnPropertyDescriptor(e, t); if (!n) {
            var o = Object.getPrototypeOf(e);
            if (o === null) {
                return void 0;
            }
            return Cn(o, t, r);
        } if ("value" in n) {
            return n.value;
        } if (n.get) {
            return ce.Call(n.get, r);
        } return void 0; };
        var Mn = function set(e, r, n, o) { var i = Object.getOwnPropertyDescriptor(e, r); if (!i) {
            var a = Object.getPrototypeOf(e);
            if (a !== null) {
                return Mn(a, r, n, o);
            }
            i = { value: void 0, writable: true, enumerable: true, configurable: true };
        } if ("value" in i) {
            if (!i.writable) {
                return false;
            }
            if (!ce.TypeIsObject(o)) {
                return false;
            }
            var u = Object.getOwnPropertyDescriptor(o, r);
            if (u) {
                return ae.defineProperty(o, r, { value: n });
            }
            else {
                return ae.defineProperty(o, r, { value: n, writable: true, enumerable: true, configurable: true });
            }
        } if (i.set) {
            t(i.set, o, n);
            return true;
        } return false; };
        Object.assign(En, { defineProperty: function defineProperty(e, t, r) { In(e); return Pn(function () { return Object.defineProperty(e, t, r); }); }, getOwnPropertyDescriptor: function getOwnPropertyDescriptor(e, t) { In(e); return Object.getOwnPropertyDescriptor(e, t); }, get: function get(e, t) { In(e); var r = arguments.length > 2 ? arguments[2] : e; return Cn(e, t, r); }, set: function set(e, t, r) { In(e); var n = arguments.length > 3 ? arguments[3] : e; return Mn(e, t, r, n); } });
    }
    if (Object.getPrototypeOf) {
        var xn = Object.getPrototypeOf;
        En.getPrototypeOf = function getPrototypeOf(e) { In(e); return xn(e); };
    }
    if (Object.setPrototypeOf && En.getPrototypeOf) {
        var Nn = function (e, t) { var r = t; while (r) {
            if (e === r) {
                return true;
            }
            r = En.getPrototypeOf(r);
        } return false; };
        Object.assign(En, { setPrototypeOf: function setPrototypeOf(e, t) { In(e); if (t !== null && !ce.TypeIsObject(t)) {
                throw new TypeError("proto must be an object or null");
            } if (t === ae.getPrototypeOf(e)) {
                return true;
            } if (ae.isExtensible && !ae.isExtensible(e)) {
                return false;
            } if (Nn(e, t)) {
                return false;
            } Object.setPrototypeOf(e, t); return true; } });
    }
    var An = function (e, t) { if (!ce.IsCallable(S.Reflect[e])) {
        h(S.Reflect, e, t);
    }
    else {
        var r = a(function () { S.Reflect[e](1); S.Reflect[e](NaN); S.Reflect[e](true); return true; });
        if (r) {
            ne(S.Reflect, e, t);
        }
    } };
    Object.keys(En).forEach(function (e) { An(e, En[e]); });
    var Rn = S.Reflect.getPrototypeOf;
    if (c && Rn && Rn.name !== "getPrototypeOf") {
        ne(S.Reflect, "getPrototypeOf", function getPrototypeOf(e) { return t(Rn, S.Reflect, e); });
    }
    if (S.Reflect.setPrototypeOf) {
        if (a(function () { S.Reflect.setPrototypeOf(1, {}); return true; })) {
            ne(S.Reflect, "setPrototypeOf", En.setPrototypeOf);
        }
    }
    if (S.Reflect.defineProperty) {
        if (!a(function () { var e = !S.Reflect.defineProperty(1, "test", { value: 1 }); var t = typeof Object.preventExtensions !== "function" || !S.Reflect.defineProperty(Object.preventExtensions({}), "test", {}); return e && t; })) {
            ne(S.Reflect, "defineProperty", En.defineProperty);
        }
    }
    if (S.Reflect.construct) {
        if (!a(function () { var e = function F() { }; return S.Reflect.construct(function () { }, [], e) instanceof e; })) {
            ne(S.Reflect, "construct", En.construct);
        }
    }
    if (String(new Date(NaN)) !== "Invalid Date") {
        var _n = Date.prototype.toString;
        var kn = function toString() { var e = +this; if (e !== e) {
            return "Invalid Date";
        } return ce.Call(_n, this); };
        ne(Date.prototype, "toString", kn);
    }
    var Ln = { anchor: function anchor(e) { return ce.CreateHTML(this, "a", "name", e); }, big: function big() { return ce.CreateHTML(this, "big", "", ""); }, blink: function blink() { return ce.CreateHTML(this, "blink", "", ""); }, bold: function bold() { return ce.CreateHTML(this, "b", "", ""); }, fixed: function fixed() { return ce.CreateHTML(this, "tt", "", ""); }, fontcolor: function fontcolor(e) { return ce.CreateHTML(this, "font", "color", e); }, fontsize: function fontsize(e) { return ce.CreateHTML(this, "font", "size", e); }, italics: function italics() { return ce.CreateHTML(this, "i", "", ""); }, link: function link(e) { return ce.CreateHTML(this, "a", "href", e); }, small: function small() { return ce.CreateHTML(this, "small", "", ""); }, strike: function strike() { return ce.CreateHTML(this, "strike", "", ""); }, sub: function sub() { return ce.CreateHTML(this, "sub", "", ""); }, sup: function sub() { return ce.CreateHTML(this, "sup", "", ""); } };
    l(Object.keys(Ln), function (e) { var r = String.prototype[e]; var n = false; if (ce.IsCallable(r)) {
        var o = t(r, "", ' " ');
        var i = P([], o.match(/"/g)).length;
        n = o !== o.toLowerCase() || i > 2;
    }
    else {
        n = true;
    } if (n) {
        ne(String.prototype, e, Ln[e]);
    } });
    var Fn = function () { if (!oe) {
        return false;
    } var e = typeof JSON === "object" && typeof JSON.stringify === "function" ? JSON.stringify : null; if (!e) {
        return false;
    } if (typeof e($()) !== "undefined") {
        return true;
    } if (e([$()]) !== "[null]") {
        return true;
    } var t = { a: $() }; t[$()] = true; if (e(t) !== "{}") {
        return true;
    } return false; }();
    var Dn = a(function () { if (!oe) {
        return true;
    } return JSON.stringify(Object($())) === "{}" && JSON.stringify([Object($())]) === "[{}]"; });
    if (Fn || !Dn) {
        var zn = JSON.stringify;
        ne(JSON, "stringify", function stringify(e) { if (typeof e === "symbol") {
            return;
        } var n; if (arguments.length > 1) {
            n = arguments[1];
        } var o = [e]; if (!r(n)) {
            var i = ce.IsCallable(n) ? n : null;
            var a = function (e, r) { var n = i ? t(i, this, e, r) : r; if (typeof n !== "symbol") {
                if (re.symbol(n)) {
                    return Nt({})(n);
                }
                else {
                    return n;
                }
            } };
            o.push(a);
        }
        else {
            o.push(n);
        } if (arguments.length > 2) {
            o.push(arguments[2]);
        } return zn.apply(this, o); });
    }
    return S;
});
//# sourceMappingURL=es6-shim.map
/// <reference path="node_modules/es6-shim/es6-shim.min.js" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            var prediction;
            (function (prediction) {
                /**
                 * Associate tokens with promises.
                 *
                 * First, .make() a promise -- associate a token with resolve/reject callbacks.
                 *
                 * You can either .keep() a promise -- resolve() and forget it;
                 * Or you may also .break() a promise -- reject() and forget it.
                 *
                 * <T> is the type of resolved value (value yielded successfully by promise).
                 */
                var PromiseStore = /** @class */ (function () {
                    function PromiseStore() {
                        this._promises = new Map();
                    }
                    Object.defineProperty(PromiseStore.prototype, "length", {
                        /**
                         * How many promises are currently being tracked?
                         */
                        get: function () {
                            return this._promises.size;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    /**
                     * Associate a token with its respective resolve and reject callbacks.
                     */
                    PromiseStore.prototype.make = function (token, resolve, reject) {
                        if (this._promises.has(token)) {
                            return reject("Existing request with token " + token);
                        }
                        this._promises.set(token, { reject: reject, resolve: resolve });
                    };
                    /**
                     * Resolve the promise associated with a token (with a value!).
                     * Once the promise is resolved, the token is removed..
                     */
                    PromiseStore.prototype.keep = function (token, value) {
                        var callbacks = this._promises.get(token);
                        if (!callbacks) {
                            throw new Error("No promise associated with token: " + token);
                        }
                        var accept = callbacks.resolve;
                        this._promises.delete(token);
                        return accept(value);
                    };
                    /**
                     * Instantly reject and forget a promise associated with the token.
                     */
                    PromiseStore.prototype.break = function (token, reason) {
                        var callbacks = this._promises.get(token);
                        if (!callbacks) {
                            throw new Error("No promise associated with token: " + token);
                        }
                        this._promises.delete(token);
                        callbacks.reject(reason);
                    };
                    return PromiseStore;
                }());
                prediction.PromiseStore = PromiseStore;
            })(prediction = text.prediction || (text.prediction = {}));
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/*
 * Copyright (c) 2018 National Research Council Canada (author: Eddie A. Santos)
 * Copyright (c) 2018 SIL International
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/// <reference path="node_modules/es6-shim/es6-shim.min.js" />
/// <reference path="promise-store.ts" />
/**
 * Top-level interface to the Language Modelling layer, or "LMLayer" for short.
 *
 * The Language Modelling layer provides a way for keyboards to offer prediction and
 * correction functionalities. The LMLayer proper runs within a Web Worker, however,
 * this class is intended to run in the main thread, and automatically spawn a Web
 * Worker, capable of offering predictions.
 *
 * Since the Worker runs in a different thread, the public methods of this class are
 * asynchronous. Methods of note include:
 *
 *  - #loadModel() -- loads a specified model file
 *  - #predict() -- ask the LMLayer to offer suggestions (predictions or corrections) for
 *                  the input event
 *  - #unloadModel() -- unloads the LMLayer's currently loaded model, preparing it to
 *                          receive (load) a new model
 *
 * The top-level LMLayer will automatically starts up its own Web Worker.
 */
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            var prediction;
            (function (prediction) {
                var LMLayer = /** @class */ (function () {
                    /**
                     * Construct the top-level LMLayer interface. This also starts the underlying Worker.
                     *
                     * @param uri URI of the underlying LMLayer worker code. This will usually be a blob:
                     *            or file: URI. If uri is not provided, this will start the default Worker.
                     */
                    function LMLayer(capabilities, worker) {
                        // Either use the given worker, or instantiate the default worker.
                        this._worker = worker || prediction.DefaultWorker.constructInstance();
                        this._worker.onmessage = this.onMessage.bind(this);
                        this._declareLMLayerReady = null;
                        this._predictPromises = new prediction.PromiseStore();
                        this._wordbreakPromises = new prediction.PromiseStore();
                        this._acceptPromises = new prediction.PromiseStore();
                        this._revertPromises = new prediction.PromiseStore();
                        this._nextToken = Number.MIN_SAFE_INTEGER;
                        this.sendConfig(capabilities);
                    }
                    /**
                     * Initializes the LMLayer worker with the host platform's capability set.
                     *
                     * @param capabilities The host platform's capability spec - a model cannot assume access to more context
                     *                     than specified by this parameter.
                     */
                    LMLayer.prototype.sendConfig = function (capabilities) {
                        this._worker.postMessage({
                            message: 'config',
                            capabilities: capabilities
                        });
                    };
                    /**
                     * Initializes the LMLayer worker with a path to the desired model file.
                     */
                    LMLayer.prototype.loadModel = function (modelSource, loadType) {
                        var _this = this;
                        if (loadType === void 0) { loadType = 'file'; }
                        return new Promise(function (resolve, _reject) {
                            // Sets up so the promise is resolved in the onMessage() callback, when it receives
                            // the 'ready' message.
                            _this._declareLMLayerReady = resolve;
                            var modelSourceSpec = {
                                type: loadType
                            };
                            if (loadType == 'file') {
                                modelSourceSpec.file = modelSource;
                            }
                            else {
                                modelSourceSpec.code = modelSource;
                            }
                            _this._worker.postMessage({
                                message: 'load',
                                source: modelSourceSpec
                            });
                        });
                    };
                    /**
                     * Unloads the previously-active model from memory, resetting the LMLayer to prep
                     * for transition to use of a new model.
                     */
                    LMLayer.prototype.unloadModel = function () {
                        this._worker.postMessage({
                            message: 'unload'
                        });
                    };
                    LMLayer.prototype.predict = function (transform, context) {
                        var _this = this;
                        var token = this._nextToken++;
                        return new Promise(function (resolve, reject) {
                            _this._predictPromises.make(token, resolve, reject);
                            _this._worker.postMessage({
                                message: 'predict',
                                token: token,
                                transform: transform,
                                context: context,
                            });
                        });
                    };
                    LMLayer.prototype.wordbreak = function (context) {
                        var _this = this;
                        var token = this._nextToken++;
                        return new Promise(function (resolve, reject) {
                            _this._wordbreakPromises.make(token, resolve, reject);
                            _this._worker.postMessage({
                                message: 'wordbreak',
                                token: token,
                                context: context
                            });
                        });
                    };
                    LMLayer.prototype.acceptSuggestion = function (suggestion, context, postTransform) {
                        var _this = this;
                        var token = this._nextToken++;
                        return new Promise(function (resolve, reject) {
                            _this._acceptPromises.make(token, resolve, reject);
                            _this._worker.postMessage({
                                message: 'accept',
                                token: token,
                                suggestion: suggestion,
                                context: context,
                                postTransform: postTransform
                            });
                        });
                    };
                    LMLayer.prototype.revertSuggestion = function (reversion, context) {
                        var _this = this;
                        var token = this._nextToken++;
                        return new Promise(function (resolve, reject) {
                            _this._revertPromises.make(token, resolve, reject);
                            _this._worker.postMessage({
                                message: 'revert',
                                token: token,
                                reversion: reversion,
                                context: context
                            });
                        });
                    };
                    LMLayer.prototype.resetContext = function (context) {
                        this._worker.postMessage({
                            message: 'reset-context',
                            context: context
                        });
                    };
                    // TODO: asynchronous close() method.
                    //       Worker code must recognize message and call self.close().
                    LMLayer.prototype.onMessage = function (event) {
                        var payload = event.data;
                        if (payload.message === 'error') {
                            console.error(payload.log);
                            if (payload.error) {
                                console.error(payload.error);
                            }
                        }
                        else if (payload.message === 'ready') {
                            this._declareLMLayerReady(event.data.configuration);
                        }
                        else if (payload.message === 'suggestions') {
                            this._predictPromises.keep(payload.token, payload.suggestions);
                        }
                        else if (payload.message === 'currentword') {
                            this._wordbreakPromises.keep(payload.token, payload.word);
                        }
                        else if (payload.message === 'postaccept') {
                            this._acceptPromises.keep(payload.token, payload.reversion);
                        }
                        else if (payload.message === 'postrevert') {
                            this._revertPromises.keep(payload.token, payload.suggestions);
                        }
                        else {
                            // This branch should never execute, but just in case...
                            //@ts-ignore
                            throw new Error("Message not implemented: " + payload.message);
                        }
                    };
                    /**
                     * Clears out any computational resources in use by the LMLayer, including shutting
                     * down any internal WebWorkers.
                     */
                    LMLayer.prototype.shutdown = function () {
                        this._worker.terminate();
                    };
                    /**
                     * Given a function, this utility returns the source code within it, as a string.
                     * This is intended to unwrap the "wrapped" source code created in the LMLayerWorker
                     * build process.
                     *
                     * @param fn The function whose body will be returned.
                     */
                    LMLayer.unwrap = function (fn) {
                        var wrapper = fn.toString();
                        var match = wrapper.match(/function[^{]+{((?:.|\r|\n)+)}[^}]*$/);
                        return match[1];
                    };
                    return LMLayer;
                }());
                prediction.LMLayer = LMLayer;
            })(prediction = text.prediction || (text.prediction = {}));
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
(function () {
    var ns = com.keyman.text.prediction;
    // Let LMLayer be available both in the browser and in Node.
    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
        module.exports = ns.LMLayer;
        //@ts-ignore
        ns.LMLayer.PromiseStore = ns.PromiseStore;
    }
    else {
        //@ts-ignore
        window.LMLayer = ns.LMLayer;
    }
}());
///<reference path="../../../node_modules/@keymanapp/lexical-model-layer/embedded_worker.d.ts" />
///<reference path="../../../node_modules/@keymanapp/lexical-model-layer/message.d.ts" />
///<reference path="../../../node_modules/@keymanapp/lexical-model-layer/index.ts" />
///<reference path="../../includes/events.ts" />
/// <reference path="../contextWindow.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            var prediction;
            (function (prediction_1) {
                var ReadySuggestions = /** @class */ (function () {
                    function ReadySuggestions(suggestions, id) {
                        this.suggestions = suggestions;
                        this.transcriptionID = id;
                    }
                    return ReadySuggestions;
                }());
                prediction_1.ReadySuggestions = ReadySuggestions;
                var LanguageProcessor = /** @class */ (function (_super) {
                    __extends(LanguageProcessor, _super);
                    function LanguageProcessor() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.recentTranscriptions = [];
                        _this._mayPredict = true;
                        _this._mayCorrect = true;
                        return _this;
                    }
                    LanguageProcessor.prototype.init = function (supportsRightDeletions) {
                        if (supportsRightDeletions === void 0) { supportsRightDeletions = false; }
                        // Establishes KMW's platform 'capabilities', which limit the range of context a LMLayer
                        // model may expect.
                        var capabilities = {
                            maxLeftContextCodePoints: 64,
                            // Since the apps don't yet support right-deletions.
                            maxRightContextCodePoints: supportsRightDeletions ? 0 : 64
                        };
                        if (!this.canEnable()) {
                            return;
                        }
                        this.lmEngine = new prediction_1.LMLayer(capabilities);
                    };
                    Object.defineProperty(LanguageProcessor.prototype, "activeModel", {
                        get: function () {
                            return this.currentModel;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    LanguageProcessor.prototype.unloadModel = function () {
                        this.lmEngine.unloadModel();
                        delete this.currentModel;
                        delete this.configuration;
                        this.emit('statechange', 'inactive');
                    };
                    LanguageProcessor.prototype.loadModel = function (model) {
                        if (!model) {
                            throw new Error("Null reference not allowed.");
                        }
                        var specType = model.path ? 'file' : 'raw';
                        var source = specType == 'file' ? model.path : model.code;
                        var lp = this;
                        // We pre-emptively emit so that the banner's DOM elements may update synchronously.
                        // Prevents an ugly "flash of unstyled content" layout issue during keyboard load
                        // on our mobile platforms when embedded.
                        lp.currentModel = model;
                        if (this.mayPredict) {
                            lp.emit('statechange', 'active');
                        }
                        return this.lmEngine.loadModel(source, specType).then(function (config) {
                            lp.configuration = config;
                            lp.emit('statechange', 'configured');
                        }).catch(function (error) {
                            // Does this provide enough logging information?
                            var message;
                            if (error instanceof Error) {
                                message = error.message;
                            }
                            else {
                                message = String(error);
                            }
                            console.error("Could not load model '" + model.id + "': " + message);
                            // Since the model couldn't load, immediately deactivate.  Visually, it'll look
                            // like the banner crashed shortly after load.
                            lp.currentModel = null;
                            lp.emit('statechange', 'inactive');
                        });
                    };
                    LanguageProcessor.prototype.invalidateContext = function (outputTarget) {
                        // Signal to any predictive text UI that the context has changed, invalidating recent predictions.
                        this.emit('invalidatesuggestions', 'context');
                        // If there's no active model, there can be no predictions.
                        // We'll also be missing important data needed to even properly REQUEST the predictions.
                        if (!this.currentModel || !this.configuration) {
                            return;
                        }
                        // Don't attempt predictions when disabled!
                        // invalidateContext otherwise bypasses .predict()'s check against this.
                        if (!this.isActive) {
                            return;
                        }
                        else if (outputTarget) {
                            var transcription = outputTarget.buildTranscriptionFrom(outputTarget, null);
                            this.predict_internal(transcription, true);
                        }
                        else {
                            // Shouldn't be possible, and we'll want to know if and when it is.
                            console.warn("OutputTarget missing during an invalidateContext call");
                        }
                    };
                    LanguageProcessor.prototype.wordbreak = function (target) {
                        if (!this.isActive) {
                            return null;
                        }
                        var context = new text.ContextWindow(text.Mock.from(target), this.configuration);
                        return this.lmEngine.wordbreak(context);
                    };
                    LanguageProcessor.prototype.predict = function (transcription) {
                        if (!this.isActive) {
                            return null;
                        }
                        // If there's no active model, there can be no predictions.
                        // We'll also be missing important data needed to even properly REQUEST the predictions.
                        if (!this.currentModel || !this.configuration) {
                            return null;
                        }
                        // We've already invalidated any suggestions resulting from any previously-existing Promise -
                        // may as well officially invalidate them via event.
                        this.emit("invalidatesuggestions", 'new');
                        return this.predict_internal(transcription);
                    };
                    LanguageProcessor.prototype.applySuggestion = function (suggestion, outputTarget) {
                        if (!outputTarget) {
                            throw "Accepting suggestions requires a destination OutputTarget instance.";
                        }
                        // Find the state of the context at the time the suggestion was generated.
                        // This may refer to the context before an input keystroke or before application
                        // of a predictive suggestion.
                        var original = this.getPredictionState(suggestion.transformId);
                        if (!original) {
                            console.warn("Could not apply the Suggestion!");
                            return null;
                        }
                        else {
                            // Apply the Suggestion!
                            // Step 1:  determine the final output text
                            var final = text.Mock.from(original.preInput);
                            final.apply(suggestion.transform);
                            // Step 2:  build a final, master Transform that will produce the desired results from the CURRENT state.
                            // In embedded mode, both Android and iOS are best served by calculating this transform and applying its
                            // values as needed for use with their IME interfaces.
                            var transform = final.buildTransformFrom(outputTarget);
                            outputTarget.apply(transform);
                            // Build a 'reversion' Transcription that can be used to undo this apply() if needed,
                            // replacing the suggestion transform with the original input text.
                            var preApply = text.Mock.from(original.preInput);
                            preApply.apply(original.transform);
                            // Builds the reversion option according to the loaded lexical model's known
                            // syntactic properties.
                            var suggestionContext = new text.ContextWindow(original.preInput, this.configuration);
                            // We must accept the Suggestion from its original context, which was before
                            // `original.transform` was applied.
                            var reversionPromise = this.lmEngine.acceptSuggestion(suggestion, suggestionContext, original.transform);
                            // Also, request new prediction set based on the resulting context.
                            var lp_1 = this;
                            reversionPromise = reversionPromise.then(function (reversion) {
                                var mappedReversion = {
                                    // By mapping back to the original Transcription that generated the Suggestion,
                                    // the input will be automatically rewound to the preInput state.
                                    transform: original.transform,
                                    // The ID part is critical; the reversion can't be applied without it.
                                    transformId: -original.token,
                                    displayAs: reversion.displayAs,
                                    id: reversion.id,
                                    tag: reversion.tag
                                };
                                // // If using the version from lm-layer:
                                // let mappedReversion = reversion;
                                // mappedReversion.transformId = reversionTranscription.token;
                                lp_1.predictFromTarget(outputTarget);
                                return mappedReversion;
                            });
                            return reversionPromise;
                        }
                    };
                    LanguageProcessor.prototype.applyReversion = function (reversion, outputTarget) {
                        if (!outputTarget) {
                            throw "Accepting suggestions requires a destination OutputTarget instance.";
                        }
                        // Find the state of the context at the time the suggestion was generated.
                        // This may refer to the context before an input keystroke or before application
                        // of a predictive suggestion.
                        //
                        // Reversions use the additive inverse of the id token of the Transcription being
                        // reverted to.
                        var original = this.getPredictionState(-reversion.transformId);
                        if (!original) {
                            console.warn("Could not apply the Suggestion!");
                            return;
                        }
                        // Apply the Reversion!
                        // Step 1:  determine the final output text
                        var final = text.Mock.from(original.preInput);
                        final.apply(reversion.transform); // Should match original.transform, actually. (See applySuggestion)
                        // Step 2:  build a final, master Transform that will produce the desired results from the CURRENT state.
                        // In embedded mode, both Android and iOS are best served by calculating this transform and applying its
                        // values as needed for use with their IME interfaces.
                        var transform = final.buildTransformFrom(outputTarget);
                        outputTarget.apply(transform);
                        // The reason we need to preserve the additive-inverse 'transformId' property on Reversions.
                        var promise = this.lmEngine.revertSuggestion(reversion, new text.ContextWindow(original.preInput, this.configuration));
                        var lp = this;
                        return promise.then(function (suggestions) {
                            var result = new ReadySuggestions(suggestions, transform.id);
                            lp.emit("suggestionsready", result);
                            lp.currentPromise = null;
                            return suggestions;
                        });
                    };
                    LanguageProcessor.prototype.predictFromTarget = function (outputTarget) {
                        if (!outputTarget) {
                            return null;
                        }
                        var transcription = outputTarget.buildTranscriptionFrom(outputTarget, null);
                        return this.predict(transcription);
                    };
                    /**
                     * Called internally to do actual predictions after any relevant "invalidatesuggestions" events
                     * have been raised.
                     * @param transcription The triggering transcription (if it exists)
                     */
                    LanguageProcessor.prototype.predict_internal = function (transcription, resetContext) {
                        if (resetContext === void 0) { resetContext = false; }
                        if (!transcription) {
                            return null;
                        }
                        var context = new text.ContextWindow(transcription.preInput, this.configuration);
                        this.recordTranscription(transcription);
                        if (resetContext) {
                            this.lmEngine.resetContext(context);
                        }
                        var alternates = transcription.alternates;
                        if (!alternates || alternates.length == 0) {
                            alternates = [{
                                    sample: transcription.transform,
                                    p: 1.0
                                }];
                        }
                        var transform = transcription.transform;
                        var promise = this.currentPromise = this.lmEngine.predict(alternates, context);
                        var lp = this;
                        return promise.then(function (suggestions) {
                            if (promise == lp.currentPromise) {
                                var result = new ReadySuggestions(suggestions, transform.id);
                                lp.emit("suggestionsready", result);
                                lp.currentPromise = null;
                            }
                            return suggestions;
                        });
                    };
                    LanguageProcessor.prototype.recordTranscription = function (transcription) {
                        this.recentTranscriptions.push(transcription);
                        if (this.recentTranscriptions.length > LanguageProcessor.TRANSCRIPTION_BUFFER) {
                            this.recentTranscriptions.splice(0, 1);
                        }
                    };
                    /**
                     * Retrieves the context and output state of KMW immediately before the prediction with
                     * token `id` was generated.  Must correspond to a 'recent' one, as only so many are stored
                     * in `ModelManager`'s history buffer.
                     * @param id A unique identifier corresponding to a recent `Transcription`.
                     * @returns The matching `Transcription`, or `null` none is found.
                     */
                    LanguageProcessor.prototype.getPredictionState = function (id) {
                        var match = this.recentTranscriptions.filter(function (t) {
                            return t.token == id;
                        });
                        return match.length == 0 ? null : match[0];
                    };
                    LanguageProcessor.prototype.shutdown = function () {
                        this.lmEngine.shutdown();
                    };
                    Object.defineProperty(LanguageProcessor.prototype, "isActive", {
                        get: function () {
                            if (!this.canEnable()) {
                                this._mayPredict = false;
                                return false;
                            }
                            return (this.activeModel || false) && this._mayPredict;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    LanguageProcessor.prototype.canEnable = function () {
                        // Is overridden for dom-aware KMW in case of old IE versions.
                        return true;
                    };
                    Object.defineProperty(LanguageProcessor.prototype, "mayPredict", {
                        get: function () {
                            return this._mayPredict;
                        },
                        set: function (flag) {
                            if (!this.canEnable()) {
                                return;
                            }
                            var oldVal = this._mayPredict;
                            this._mayPredict = flag;
                            if (oldVal != flag) {
                                // If there's no model to be activated and we've reached this point,
                                // the banner should remain inactive, as it already was.
                                // If it there was one and we've reached this point, we're globally
                                // deactivating, so we're fine.
                                if (this.activeModel) {
                                    this.emit('statechange', flag ? 'active' : 'inactive');
                                }
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(LanguageProcessor.prototype, "mayCorrect", {
                        get: function () {
                            return this._mayCorrect;
                        },
                        set: function (flag) {
                            this._mayCorrect = flag;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(LanguageProcessor.prototype, "wordbreaksAfterSuggestions", {
                        get: function () {
                            return this.configuration.wordbreaksAfterSuggestions;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    LanguageProcessor.prototype.tryAcceptSuggestion = function (source) {
                        var returnObj = { shouldSwallow: false };
                        this.emit('tryaccept', source, returnObj);
                        return returnObj.shouldSwallow;
                    };
                    LanguageProcessor.prototype.tryRevertSuggestion = function () {
                        var returnObj = { shouldSwallow: false };
                        this.emit('tryrevert', returnObj);
                        return returnObj.shouldSwallow;
                    };
                    LanguageProcessor.TRANSCRIPTION_BUFFER = 10;
                    return LanguageProcessor;
                }(EventEmitter));
                prediction_1.LanguageProcessor = LanguageProcessor;
            })(prediction = text.prediction || (text.prediction = {}));
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Defines a 'polyfill' of sorts for NPM's events module
/// <reference path="../includes/events.ts" />
/// <reference path="../../node_modules/@keymanapp/keyboard-processor/src/text/keyboardProcessor.ts" />
/// <reference path="contextWindow.ts" />
/// <reference path="prediction/languageProcessor.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var text;
        (function (text) {
            var InputProcessor = /** @class */ (function () {
                function InputProcessor(options) {
                    if (!options) {
                        options = InputProcessor.DEFAULT_OPTIONS;
                    }
                    this.kbdProcessor = new text.KeyboardProcessor(options);
                    this.lngProcessor = new text.prediction.LanguageProcessor();
                }
                Object.defineProperty(InputProcessor.prototype, "languageProcessor", {
                    get: function () {
                        return this.lngProcessor;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InputProcessor.prototype, "keyboardProcessor", {
                    get: function () {
                        return this.kbdProcessor;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InputProcessor.prototype, "keyboardInterface", {
                    get: function () {
                        return this.keyboardProcessor.keyboardInterface;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InputProcessor.prototype, "activeKeyboard", {
                    get: function () {
                        return this.keyboardInterface.activeKeyboard;
                    },
                    set: function (keyboard) {
                        this.keyboardInterface.activeKeyboard = keyboard;
                        // All old deadkeys and keyboard-specific cache should immediately be invalidated
                        // on a keyboard change.
                        this.resetContext();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InputProcessor.prototype, "activeModel", {
                    get: function () {
                        return this.languageProcessor.activeModel;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
             * Simulate a keystroke according to the touched keyboard button element
             *
             * Handles default output and keyboard processing for both OSK and physical keystrokes.
             *
             * @param       {Object}      keyEvent      The abstracted KeyEvent to use for keystroke processing
             * @param       {Object}      outputTarget  The OutputTarget receiving the KeyEvent
             * @returns     {Object}                    A RuleBehavior object describing the cumulative effects of
             *                                          all matched keyboard rules.
             */
                InputProcessor.prototype.processKeyEvent = function (keyEvent, outputTarget) {
                    var formFactor = keyEvent.device.formFactor;
                    var fromOSK = keyEvent.isSynthetic;
                    // The default OSK layout for desktop devices does not include nextlayer info, relying on modifier detection here.
                    // It's the OSK equivalent to doModifierPress on 'desktop' form factors.
                    if ((formFactor == keyman.utils.FormFactor.Desktop || !this.activeKeyboard || this.activeKeyboard.usesDesktopLayoutOnDevice(keyEvent.device)) && fromOSK) {
                        // If it's a desktop OSK style and this triggers a layer change,
                        // a modifier key was clicked.  No output expected, so it's safe to instantly exit.
                        if (this.keyboardProcessor.selectLayer(keyEvent)) {
                            return new text.RuleBehavior();
                        }
                    }
                    // Will handle keystroke-based non-layer change modifier & state keys, mapping them through the physical keyboard's version
                    // of state management.  `doModifierPress` must always run.
                    if (this.keyboardProcessor.doModifierPress(keyEvent, outputTarget, !fromOSK)) {
                        // If run on a desktop platform, we know that modifier & state key presses may not
                        // produce output, so we may make an immediate return safely.
                        if (!fromOSK) {
                            return new text.RuleBehavior();
                        }
                    }
                    // If suggestions exist AND space is pressed, accept the suggestion and do not process the keystroke.
                    // If a suggestion was just accepted AND backspace is pressed, revert the change and do not process the backspace.
                    // We check the first condition here, while the prediction UI handles the second through the try__() methods below.
                    if (this.languageProcessor.isActive) {
                        // The following code relies on JS's logical operator "short-circuit" properties to prevent unwanted triggering of the second condition.
                        // Can the suggestion UI revert a recent suggestion?  If so, do that and swallow the backspace.
                        if ((keyEvent.kName == "K_BKSP" || keyEvent.Lcode == text.Codes.keyCodes["K_BKSP"]) && this.languageProcessor.tryRevertSuggestion()) {
                            return new text.RuleBehavior();
                            // Can the suggestion UI accept an existing suggestion?  If so, do that and swallow the space character.
                        }
                        else if ((keyEvent.kName == "K_SPACE" || keyEvent.Lcode == text.Codes.keyCodes["K_SPACE"]) && this.languageProcessor.tryAcceptSuggestion('space')) {
                            return new text.RuleBehavior();
                        }
                    }
                    // // ...end I3363 (Build 301)
                    // Create a "mock" backup of the current outputTarget in its pre-input state.
                    // Current, long-existing assumption - it's DOM-backed.
                    var preInputMock = text.Mock.from(outputTarget);
                    // We presently need the true keystroke to run on the FULL context.  That index is still
                    // needed for some indexing operations when comparing two different output targets.
                    var ruleBehavior = this.keyboardProcessor.processKeystroke(keyEvent, outputTarget);
                    // Swap layer as appropriate.
                    if (keyEvent.kNextLayer) {
                        this.keyboardProcessor.selectLayer(keyEvent);
                    }
                    // Should we swallow any further processing of keystroke events for this keydown-keypress sequence?
                    if (ruleBehavior != null) {
                        var alternates = void 0;
                        // If we're performing a 'default command', it's not a standard 'typing' event - don't do fat-finger stuff.
                        // Also, don't do fat-finger stuff if predictive text isn't enabled.
                        if (this.languageProcessor.isActive && !ruleBehavior.triggersDefaultCommand) {
                            var keyDistribution = keyEvent.keyDistribution;
                            // We don't need to track absolute indexing during alternate-generation; 
                            // only position-relative, so it's better to use a sliding window for context
                            // when making alternates.  (Slightly worse for short text, matters greatly
                            // for long text.)
                            var contextWindow = new text.ContextWindow(preInputMock, text.ContextWindow.ENGINE_RULE_WINDOW);
                            var windowedMock = contextWindow.toMock();
                            // Note - we don't yet do fat-fingering with longpress keys.
                            if (keyDistribution && keyEvent.kbdLayer) {
                                // Tracks a 'deadline' for fat-finger ops, just in case both context is long enough
                                // and device is slow enough that the calculation takes too long.
                                //
                                // Consider use of https://developer.mozilla.org/en-US/docs/Web/API/Performance/now instead?
                                // Would allow finer-tuned control.
                                var TIMEOUT_THRESHOLD = Number.MAX_VALUE;
                                var _globalThis_1 = com.keyman.utils.getGlobalObject();
                                var timer = void 0;
                                // Available by default on `window` in browsers, but _not_ on `global` in Node, 
                                // surprisingly.  Since we can't use code dependent on `require` statements
                                // at present, we have to condition upon it actually existing.
                                if (_globalThis_1['performance'] && _globalThis_1['performance']['now']) {
                                    timer = function () {
                                        return _globalThis_1['performance']['now']();
                                    };
                                    TIMEOUT_THRESHOLD = timer() + 16; // + 16ms.
                                } // else {
                                // We _could_ just use Date.now() as a backup... but that (probably) only matters
                                // when unit testing.  So... we actually don't _need_ time thresholding when in 
                                // a Node environment.
                                // }
                                // Tracks a minimum probability for keystroke probability.  Anything less will not be
                                // included in alternate calculations. 
                                //
                                // Seek to match SearchSpace.EDIT_DISTANCE_COST_SCALE from the predictive-text engine.
                                // Reasoning for the selected value may be seen there.  Short version - keystrokes 
                                // that _appear_ very precise may otherwise not even consider directly-neighboring keys.
                                var KEYSTROKE_EPSILON = Math.exp(-5);
                                // Sort the distribution into probability-descending order.
                                keyDistribution.sort(function (a, b) { return b.p - a.p; });
                                var activeLayout = this.activeKeyboard.layout(keyEvent.device.formFactor);
                                alternates = [];
                                var totalMass_1 = 0; // Tracks sum of non-error probabilities.
                                for (var _i = 0, keyDistribution_1 = keyDistribution; _i < keyDistribution_1.length; _i++) {
                                    var pair = keyDistribution_1[_i];
                                    if (pair.p < KEYSTROKE_EPSILON) {
                                        break;
                                    }
                                    else if (timer && timer() >= TIMEOUT_THRESHOLD) {
                                        // Note:  it's always possible that the thread _executing_ our JS
                                        // got paused by the OS, even if JS itself is single-threaded.
                                        //
                                        // The case where `alternates` is initialized (line 167) but empty
                                        // (because of net-zero loop iterations) MUST be handled.
                                        break;
                                    }
                                    var mock = text.Mock.from(windowedMock);
                                    var altKey = activeLayout.getLayer(keyEvent.kbdLayer).getKey(pair.keyId);
                                    if (!altKey) {
                                        console.warn("Potential fat-finger key could not be found in layer!");
                                        continue;
                                    }
                                    var altEvent = altKey.constructKeyEvent(this.keyboardProcessor, keyEvent.device);
                                    var alternateBehavior = this.keyboardProcessor.processKeystroke(altEvent, mock);
                                    // If alternateBehavior.beep == true, ignore it.  It's a disallowed key sequence,
                                    // so we expect users to never intend their use.
                                    //
                                    // Also possible that this set of conditions fail for all evaluated alternates.
                                    if (alternateBehavior && !alternateBehavior.beep && pair.p > 0) {
                                        var transform = alternateBehavior.transcription.transform;
                                        // Ensure that the alternate's token id matches that of the current keystroke, as we only
                                        // record the matched rule's context (since they match)
                                        transform.id = ruleBehavior.transcription.token;
                                        alternates.push({ sample: transform, 'p': pair.p });
                                        totalMass_1 += pair.p;
                                    }
                                }
                                // Renormalizes the distribution, as any error (beep) results
                                // will result in a distribution that doesn't sum to 1 otherwise.
                                // All `.p` values are strictly positive, so totalMass is
                                // guaranteed to be > 0 if the array has entries.
                                alternates.forEach(function (alt) {
                                    alt.p /= totalMass_1;
                                });
                            }
                        }
                        // Now that we've done all the keystroke processing needed, ensure any extra effects triggered
                        // by the actual keystroke occur.
                        ruleBehavior.finalize(this.keyboardProcessor, outputTarget);
                        // -- All keystroke (and 'alternate') processing is now complete.  Time to finalize everything! --
                        // Notify the ModelManager of new input - it's predictive text time!
                        if (alternates && alternates.length > 0) {
                            ruleBehavior.transcription.alternates = alternates;
                        }
                        // Yes, even for ruleBehavior.triggersDefaultCommand.  Those tend to change the context.
                        ruleBehavior.predictionPromise = this.languageProcessor.predict(ruleBehavior.transcription);
                        // Text did not change (thus, no text "input") if we tabbed or merely moved the caret.
                        if (!ruleBehavior.triggersDefaultCommand) {
                            // For DOM-aware targets, this will trigger a DOM event page designers may listen for.
                            outputTarget.doInputEvent();
                        }
                    }
                    return ruleBehavior;
                };
                InputProcessor.prototype.resetContext = function (outputTarget) {
                    this.keyboardProcessor.resetContext();
                    this.languageProcessor.invalidateContext(outputTarget);
                };
                InputProcessor.DEFAULT_OPTIONS = {
                    baseLayout: 'us'
                };
                return InputProcessor;
            }());
            text.InputProcessor = InputProcessor;
        })(text = keyman.text || (keyman.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
(function () {
    var ns = com.keyman.text;
    // Let the InputProcessor be available both in the browser and in Node.
    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
        module.exports = ns.InputProcessor;
        //@ts-ignore
        ns.InputProcessor.com = com; // Export the root namespace so that all InputProcessor classes are accessible by unit tests.
    }
}());
/*
 * This file defines DOM-specific keyboard API that is not available in headless mode, extending web-core's
 * base KeyboardInterface offerings.
 */
var com;
(function (com) {
    var keyman;
    (function (keyman_1) {
        var text;
        (function (text) {
            /**
             * Function     registerKeyboard  KR
             * Scope        Public
             * @param       {Object}      Pk      Keyboard  object
             * Description  Register and load the keyboard.  This implementation overwrites web-core's intentionally,
             *              as web-core lacks access to the `KeyboardManager` object and class.
             */
            text.KeyboardInterface.prototype.registerKeyboard = function (Pk) {
                var keyman = com.keyman.singleton;
                keyman.keyboardManager._registerKeyboard(Pk);
            };
            /**
             * Add the basic keyboard parameters (keyboard stub) to the array of keyboard stubs
             * If no language code is specified in a keyboard it cannot be registered,
             * and a keyboard stub must be registered before the keyboard is loaded
             * for the keyboard to be usable.
             *
             * @param       {Object}      Pstub     Keyboard stub object
             * @return      {?number}               1 if already registered, else null
             */
            text.KeyboardInterface.prototype.registerStub = function (Pstub) {
                var keyboardManager = com.keyman.singleton.keyboardManager;
                if (keyboardManager.keymanweb.initialized) {
                    // If language code already defined (or not specified in stub), check to see if stub already registered
                    for (var Lk = 0; Lk < keyboardManager.keyboardStubs.length; Lk++) {
                        if (keyboardManager.keyboardStubs[Lk]['KI'] == Pstub['KI']) {
                            if (Pstub['KLC'] == '' || (keyboardManager.keyboardStubs[Lk]['KLC'] == Pstub['KLC'])) {
                                return 1; // no need to register
                            }
                        }
                    }
                }
                keyboardManager._registerStub(Pstub);
                return null;
            };
            /**
             * Function     KT
             * Scope        Public
             * @param       {string}      Ptext     Text to insert
             * @param       {?number}     PdeadKey  Dead key number, if any (???)
             * @return      {boolean}               true if inserted
             * Description  Insert text into active control.  Is utilized by keyboards with custom help HTML and requires
             *              special DOM handling.
             */
            text.KeyboardInterface.prototype.insertText = function (Ptext, PdeadKey) {
                var keyman = com.keyman.singleton;
                this.resetContextCache();
                // Find the correct output target to manipulate.
                var outputTarget = this.activeTargetOutput ? this.activeTargetOutput : keyman_1.dom.Utils.getOutputTarget();
                if (outputTarget != null) {
                    // Required for the `sil_euro_latin` keyboard's desktop OSK/table to function properly.
                    keyman.uiManager.setActivatingUI(true);
                    keyman_1.dom.DOMEventHandlers.states._IgnoreNextSelChange = 100;
                    keyman.domManager.focusLastActiveElement();
                    keyman_1.dom.DOMEventHandlers.states._IgnoreNextSelChange = 0;
                    if (Ptext != null) {
                        this.output(0, outputTarget, Ptext);
                    }
                    if ((typeof (PdeadKey) !== 'undefined') && (PdeadKey !== null)) {
                        this.deadkeyOutput(0, outputTarget, PdeadKey);
                    }
                    outputTarget.invalidateSelection();
                    return true;
                }
                return false;
            };
            /**
             * Function     KSF
             * Scope        Public
             * Description  Save keyboard focus
             */
            text.KeyboardInterface.prototype.saveFocus = function () {
                keyman_1.dom.DOMEventHandlers.states._IgnoreNextSelChange = 1;
            };
            /**
             * Legacy entry points (non-standard names)- included only to allow existing IME keyboards to continue to be used
             */
            text.KeyboardInterface.prototype['getLastActiveElement'] = function () {
                return keyman_1.dom.Utils.getOutputTarget();
            };
            text.KeyboardInterface.prototype['focusLastActiveElement'] = function () {
                var keyman = com.keyman.singleton;
                keyman.domManager.focusLastActiveElement();
            };
            //The following entry points are defined but should not normally be used in a keyboard, as OSK display is no longer determined by the keyboard
            text.KeyboardInterface.prototype['hideHelp'] = function () {
                var keyman = com.keyman.singleton;
                keyman.osk.startHide(true);
            };
            text.KeyboardInterface.prototype['showHelp'] = function (Px, Py) {
                var keyman = com.keyman.singleton;
                if (keyman.osk instanceof keyman_1.osk.FloatingOSKView) {
                    keyman.osk.presentAtPosition(Px, Py);
                }
                else {
                    keyman.osk.present();
                }
            };
            text.KeyboardInterface.prototype['showPinnedHelp'] = function () {
                var keyman = com.keyman.singleton;
                if (keyman.osk instanceof keyman_1.osk.FloatingOSKView) {
                    // An old KMW bug previously auto-unset the affected field when this function was
                    // used by CJK keyboards during rule processing.  As a result, we need to condition
                    // on whether or not:
                    // 1.  The active keyboard is CJK
                    // 2.  A keyboard rule is actively processing.
                    //
                    // If BOTH are true, we do NOT mutate keyman.osk.userPositioned.
                    // Otherwise, not all conditions are met, so we still allow OSK pinning.
                    if (!keyman.core.activeKeyboard.isCJK || !this.ruleBehavior) {
                        keyman.osk.userPositioned = true;
                    }
                }
                // Automatically reuses previously-set positioning.
                // Other OSK API functions must have previously been used to set the 
                // pinned position.
                keyman.osk.present();
            };
            // Also needed for some legacy CJK keyboards.
            text.KeyboardInterface.prototype['GetLastActiveElement'] = text.KeyboardInterface.prototype['getLastActiveElement'];
            text.KeyboardInterface.prototype['FocusLastActiveElement'] = text.KeyboardInterface.prototype['focusLastActiveElement'];
            text.KeyboardInterface.prototype['HideHelp'] = text.KeyboardInterface.prototype['hideHelp'];
            text.KeyboardInterface.prototype['ShowHelp'] = text.KeyboardInterface.prototype['showHelp'];
            text.KeyboardInterface.prototype['ShowPinnedHelp'] = text.KeyboardInterface.prototype['showPinnedHelp'];
        })(text = keyman_1.text || (keyman_1.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes Device definitions, which may play a role in constant logic.
///<reference path="../kmwdevice.ts" />
/*
 * This file is intended for CSS-styling constants that see use with the OSK.
 */
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var utils;
        (function (utils) {
            /**
             * Defines device-level constants used for CSS styling.
             */
            var StyleConstants = /** @class */ (function () {
                function StyleConstants(device) {
                    // popupCanvasBackgroundColor
                    if (device.OS == utils.OperatingSystem.Android) {
                        this.popupCanvasBackgroundColor = '#999';
                    }
                    else {
                        this.popupCanvasBackgroundColor = StyleConstants.prefersDarkMode() ? '#0f1319' : '#ffffff';
                    }
                }
                /**
                 * Checks is a user's browser is in dark mode, if the feature is supported.  Returns false otherwise.
                 *
                 * Thanks to https://stackoverflow.com/a/57795518 for this code.
                 */
                StyleConstants.prefersDarkMode = function () {
                    // Ensure the detector exists (otherwise, returns false)
                    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
                };
                return StyleConstants;
            }());
            utils.StyleConstants = StyleConstants;
        })(utils = keyman.utils || (keyman.utils = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes version-related functionality
///<reference path="utils/styleConstants.ts" />
// The Device object definition -------------------------------------------------
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var Device = /** @class */ (function () {
            // Generates a default Device value.
            function Device() {
                this.detected = false;
                this.touchable = !!('ontouchstart' in window);
                this.OS = '';
                this.formFactor = 'desktop';
                this.dyPortrait = 0;
                this.dyLandscape = 0;
                this.version = '0';
                this.orientation = window.orientation;
                this.browser = '';
            }
            /**
             * Get device horizontal DPI for touch devices, to set actual size of active regions
             * Note that the actual physical DPI may be somewhat different.
             *
             * @return      {number}
             */
            Device.prototype.getDPI = function () {
                var t = document.createElement('DIV'), s = t.style, dpi = 96;
                if (document.readyState !== 'complete') {
                    return dpi;
                }
                t.id = 'calculateDPI';
                s.position = 'absolute';
                s.display = 'block';
                s.visibility = 'hidden';
                s.left = '10px';
                s.top = '10px';
                s.width = '1in';
                s.height = '10px';
                document.body.appendChild(t);
                dpi = (typeof window.devicePixelRatio == 'undefined') ? t.offsetWidth : t.offsetWidth * window.devicePixelRatio;
                document.body.removeChild(t);
                return dpi;
            };
            Device.prototype.detect = function () {
                var IEVersion = Device._GetIEVersion();
                var possMacSpoof = false;
                if (navigator && navigator.userAgent) {
                    var agent = navigator.userAgent;
                    if (agent.indexOf('iPad') >= 0) {
                        this.OS = 'iOS';
                        this.formFactor = 'tablet';
                        this.dyPortrait = this.dyLandscape = 0;
                    }
                    else if (agent.indexOf('iPhone') >= 0) {
                        this.OS = 'iOS';
                        this.formFactor = 'phone';
                        this.dyPortrait = this.dyLandscape = 25;
                    }
                    else if (agent.indexOf('Android') >= 0) {
                        this.OS = 'Android';
                        this.formFactor = 'phone'; // form factor may be redefined on initialization
                        this.dyPortrait = 75;
                        this.dyLandscape = 25;
                        try {
                            var rx = new RegExp("(?:Android\\s+)(\\d+\\.\\d+\\.\\d+)");
                            this.version = agent.match(rx)[1];
                        }
                        catch (ex) { }
                    }
                    else if (agent.indexOf('Linux') >= 0) {
                        this.OS = 'Linux';
                    }
                    else if (agent.indexOf('Macintosh') >= 0) {
                        // Starting with 13.1, "Macintosh" can reflect iPads (by default) or iPhones 
                        // (by user setting); a new "Request Desktop Website" setting for Safari will
                        // change the user agent string to match a desktop Mac.
                        //
                        // Firefox uses '.' between version components, while Chrome and Safari use
                        // '_' instead.  So, we have to check for both.  Yay.
                        var regex = /Intel Mac OS X (\d+(?:[_\.]\d+)+)/i;
                        var results = regex.exec(agent);
                        // Match result:  a version string with components separated by underscores.
                        if (!results) {
                            console.warn("KMW could not properly parse the user agent string."
                                + "A suboptimal keyboard layout may result.");
                            this.OS = 'MacOSX';
                        }
                        else if (results.length > 1 && results[1]) {
                            // Convert version string into a usable form.
                            var versionString = results[1].replace('_', '.');
                            var version = new keyman.utils.Version(versionString);
                            possMacSpoof = keyman.utils.Version.MAC_POSSIBLE_IPAD_ALIAS.compareTo(version) <= 0;
                            this.OS = 'MacOSX';
                        }
                    }
                    else if (agent.indexOf('Windows NT') >= 0) {
                        this.OS = 'Windows';
                        if (agent.indexOf('Touch') >= 0) {
                            this.formFactor = 'phone'; // will be redefined as tablet if resolution high enough
                        }
                        // Windows Phone and Tablet PC
                        if (typeof navigator.msMaxTouchPoints == 'number' && navigator.msMaxTouchPoints > 0) {
                            this.touchable = true;
                        }
                    }
                }
                // var sxx=device.formFactor;
                // Check and possibly revise form factor according to actual screen size (adjusted for Galaxy S, maybe OK generally?)
                if (this.formFactor == 'tablet' && Math.min(screen.width, screen.height) < 400) {
                    this.formFactor = 'phone';
                }
                // Trust what iOS tells us for phone vs tablet.
                if (this.formFactor == 'phone' && Math.max(screen.width, screen.height) > 720 && this.OS != 'iOS') {
                    this.formFactor = 'tablet';
                }
                // Test for potential Chrome emulation on Windows or macOS X (used only in next if-check)
                var possibleChromeEmulation = navigator.platform == 'Win32' || navigator.platform == 'MacIntel';
                //                           alert(sxx+'->'+device.formFactor);
                // Check for phony iOS devices (but don't undo for Chrome emulation used during development)
                if (this.OS == 'iOS' && !('ongesturestart' in window) && !possibleChromeEmulation) {
                    this.OS = 'Android';
                }
                // Determine application or browser
                this.browser = 'web';
                if (IEVersion < 999) {
                    this.browser = 'ie';
                }
                else {
                    if (this.OS == 'iOS' || this.OS.toLowerCase() == 'macosx') {
                        this.browser = 'safari';
                    }
                    var bMatch = /Firefox|Chrome|OPR|Safari|Edge/;
                    if (bMatch.test(navigator.userAgent)) {
                        if ((navigator.userAgent.indexOf('Firefox') >= 0) && ('onmozorientationchange' in screen)) {
                            this.browser = 'firefox';
                        }
                        else if (navigator.userAgent.indexOf('OPR') >= 0) {
                            this.browser = 'opera';
                        }
                        else if (navigator.userAgent.indexOf(' Edge/') >= 0) {
                            // Edge is too common a word, so test for Edge/ :)
                            // Must come before Chrome and Safari test because
                            // Edge pretends to be both
                            this.browser = 'edge';
                        }
                        else if (navigator.userAgent.indexOf('Chrome') >= 0) {
                            // This test must come before Safari test because on macOS,
                            // Chrome also reports "Safari"
                            this.browser = 'chrome';
                        }
                        else if (navigator.userAgent.indexOf('Safari') >= 0) {
                            this.browser = 'safari';
                        }
                    }
                }
                if (possMacSpoof && this.browser == 'safari') {
                    // Indistinguishable user agent string!  We need a different test; fortunately, true macOS
                    // Safari doesn't support TouchEvents.  (Chrome does, though!  Hence the filter above.)
                    if (window['TouchEvent']) {
                        this.OS = 'iOS';
                        this.formFactor = 'tablet';
                        this.dyPortrait = this.dyLandscape = 0;
                        // It's currently impossible to differentiate between iPhone and iPad here
                        // except for by screen dimensions.
                        var aspectRatio = screen.height / screen.width;
                        if (aspectRatio < 1) {
                            aspectRatio = 1 / aspectRatio;
                        }
                        // iPhones usually have a ratio of 16:9 (or 1.778) or higher, while iPads use 4:3 (or 1.333)
                        if (aspectRatio > 1.6) {
                            // Override - we'll treat this device as an iPhone.
                            this.formFactor = 'phone';
                            this.dyPortrait = this.dyLandscape = 25;
                        }
                    }
                }
                this.colorScheme = keyman.utils.StyleConstants.prefersDarkMode() ? 'dark' : 'light';
                this.detected = true;
            };
            Device._GetIEVersion = function () {
                var n, agent = '';
                if ('userAgent' in navigator) {
                    agent = navigator.userAgent;
                }
                // Test first for old versions
                if ('selection' in document) { // only defined for IE and not for IE 11!!!       
                    var appVer = navigator.appVersion;
                    n = appVer.indexOf('MSIE ');
                    if (n >= 0) {
                        // Check for quirks mode page, always return 6 if so
                        if (document.compatMode == 'BackCompat') {
                            return 6;
                        }
                        appVer = appVer.substr(n + 5);
                        n = appVer.indexOf('.');
                        if (n > 0) {
                            return parseInt(appVer.substr(0, n), 10);
                        }
                    }
                }
                // Finally test for IE 11 (and later?)
                n = agent.indexOf('Trident/');
                if (n < 0) {
                    return 999;
                }
                agent = agent.substr(n + 8);
                n = agent.indexOf('.');
                if (n > 0) {
                    return parseInt(agent.substr(0, n), 10) + 4;
                }
                return 999;
            };
            Object.defineProperty(Device.prototype, "coreSpec", {
                /**
                 * Returns a slimmer, web-core compatible version of this object.
                 */
                get: function () {
                    return new keyman.utils.DeviceSpec(this.browser, this.formFactor, this.OS, this.touchable);
                },
                enumerable: true,
                configurable: true
            });
            return Device;
        }());
        keyman.Device = Device;
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_2) {
        var dom;
        (function (dom) {
            // Defines DOM-related utility functions that are not reliant on KMW's internal state.
            var Utils = /** @class */ (function () {
                function Utils() {
                }
                /**
                 * Finds the `OutputTarget` associated with the specified element, or the currently-active element if not specified.
                 * @param Lelem The element corresponding to the desired `OutputTarget`
                 */
                Utils.getOutputTarget = function (Lelem) {
                    if (!Lelem) {
                        // Since this may be used to test modularly, we can't depend on the existence of the KMW global.
                        var keyman_3 = com.keyman['singleton'];
                        if (keyman_3) {
                            Lelem = keyman_3.domManager.lastActiveElement;
                        }
                        if (!Lelem) {
                            // If we're trying to find an active target but one doesn't exist, just return null.
                            return null;
                        }
                    }
                    // If we were provided an element or found an active element but it's improperly attached, that should cause an error.
                    if (Lelem._kmwAttachment && Lelem._kmwAttachment.interface) {
                        return Lelem._kmwAttachment.interface;
                    }
                    else {
                        throw new Error("OSK could not find element output target data!");
                    }
                };
                /**
                 * Function     getAbsoluteX
                 * Scope        Public
                 * @param       {Object}    Pobj        HTML element
                 * @return      {number}
                 * Description  Returns x-coordinate of Pobj element absolute position with respect to page
                 */
                Utils.getAbsoluteX = function (Pobj) {
                    var Lobj;
                    if (!Pobj) {
                        return 0;
                    }
                    var Lcurleft = Pobj.offsetLeft ? Pobj.offsetLeft : 0;
                    Lobj = Pobj; // I2404 - Support for IFRAMEs
                    if (Lobj.offsetParent) {
                        while (Lobj.offsetParent) {
                            Lobj = Lobj.offsetParent;
                            Lcurleft += Lobj.offsetLeft;
                        }
                        // On mobile devices, the OSK uses 'fixed' - this requires some extra offset work to handle.
                        var Ldoc_1 = Lobj.ownerDocument;
                        if (Lobj.style.position == 'fixed' && Ldoc_1 && Ldoc_1.scrollingElement) {
                            Lcurleft += Ldoc_1.scrollingElement.scrollLeft;
                        }
                    }
                    // Correct position if element is within a frame (but not if the controller is in document within that frame)
                    // We used to reference a KMW state variable `this.keyman._MasterDocument`, but it was only ever set to `window.document`.
                    if (Lobj && Lobj.ownerDocument && (Pobj.ownerDocument != window.document)) {
                        var Ldoc = Lobj.ownerDocument; // I2404 - Support for IFRAMEs
                        if (Ldoc && Ldoc.defaultView && Ldoc.defaultView.frameElement) {
                            return Lcurleft + Utils.getAbsoluteX(Ldoc.defaultView.frameElement) - Ldoc.documentElement.scrollLeft;
                        }
                    }
                    return Lcurleft;
                };
                /**
                 * Function     getAbsoluteY
                 * Scope        Public
                 * @param       {Object}    Pobj        HTML element
                 * @return      {number}
                 * Description  Returns y-coordinate of Pobj element absolute position with respect to page
                 */
                Utils.getAbsoluteY = function (Pobj) {
                    var Lobj;
                    if (!Pobj) {
                        return 0;
                    }
                    var Lcurtop = Pobj.offsetTop ? Pobj.offsetTop : 0;
                    Lobj = Pobj; // I2404 - Support for IFRAMEs
                    if (Lobj.ownerDocument && Lobj instanceof Lobj.ownerDocument.defaultView.HTMLElement) {
                        while (Lobj.offsetParent) {
                            Lobj = Lobj.offsetParent;
                            Lcurtop += Lobj.offsetTop;
                        }
                        // On mobile devices, the OSK uses 'fixed' - this requires some extra offset work to handle.
                        var Ldoc_2 = Lobj.ownerDocument;
                        if (Lobj.style.position == 'fixed' && Ldoc_2 && Ldoc_2.scrollingElement) {
                            Lcurtop += Ldoc_2.scrollingElement.scrollTop;
                        }
                    }
                    // Correct position if element is within a frame (but not if the controller is in document within that frame)
                    // We used to reference a KMW state variable `this.keyman._MasterDocument`, but it was only ever set to `window.document`.
                    if (Lobj && Lobj.ownerDocument && (Pobj.ownerDocument != window.document)) {
                        var Ldoc = Lobj.ownerDocument; // I2404 - Support for IFRAMEs
                        if (Ldoc && Ldoc.defaultView && Ldoc.defaultView.frameElement) {
                            return Lcurtop + Utils.getAbsoluteY(Ldoc.defaultView.frameElement);
                        }
                    }
                    return Lcurtop;
                };
                /**
                 * Checks the type of an input DOM-related object while ensuring that it is checked against the correct prototype,
                 * as class prototypes are (by specification) scoped upon the owning Window.
                 *
                 * See https://stackoverflow.com/questions/43587286/why-does-instanceof-return-false-on-chrome-safari-and-edge-and-true-on-firefox
                 * for more details.
                 *
                 * @param {Element|Event}   Pelem       An element of the web page or one of its IFrame-based subdocuments.
                 * @param {string}          className   The plain-text name of the expected Element type.
                 * @return {boolean}
                 */
                Utils.instanceof = function (Pelem, className) {
                    // We must write special checks for our custom-defined element types!
                    if (className == "TouchAliasElement") {
                        if (this.instanceof(Pelem, "HTMLDivElement")) {
                            var div = Pelem;
                            // We should probably implement a slightly more robust check, but this should get us started well enough.
                            return div['base'] !== undefined;
                        }
                        else {
                            return false;
                        }
                    }
                    var scopedClass;
                    if (!Pelem) {
                        // If we're bothering to check something's type, null references don't match
                        // what we're looking for. 
                        return false;
                    }
                    if (Pelem['Window']) { // Window objects contain the class definitions for types held within them.  So, we can check for those.
                        return className == 'Window';
                    }
                    else if (Pelem['defaultView']) { // Covers Document.
                        scopedClass = Pelem['defaultView'][className];
                    }
                    else if (Pelem['ownerDocument']) {
                        scopedClass = Pelem.ownerDocument.defaultView[className];
                    }
                    else if (Pelem['target']) {
                        var event = Pelem;
                        if (this.instanceof(event.target, 'Window')) {
                            scopedClass = event.target[className];
                        }
                        else if (this.instanceof(event.target, 'Document')) {
                            scopedClass = event.target.defaultView[className];
                        }
                        else if (this.instanceof(event.target, 'HTMLElement')) {
                            scopedClass = event.target.ownerDocument.defaultView[className];
                        }
                    }
                    if (scopedClass) {
                        return Pelem instanceof scopedClass;
                    }
                    else {
                        return false;
                    }
                };
                Utils.forceScroll = function (element) {
                    // Needed to allow ./build_dev_resources.sh to complete;
                    // only executes when com.keyman.DOMEventHandlers is defined.
                    //
                    // We also bypass this whenever operating in the embedded format.
                    if (com && com.keyman && com.keyman['DOMEventHandlers'] && !com.keyman['singleton']['isEmbedded']) {
                        var DOMEventHandlers_1 = com.keyman['DOMEventHandlers'];
                        var selectionStart = element.selectionStart;
                        var selectionEnd = element.selectionEnd;
                        DOMEventHandlers_1.states._IgnoreBlurFocus = true;
                        //Forces scrolling; the re-focus triggers the scroll, at least.
                        element.blur();
                        element.focus();
                        DOMEventHandlers_1.states._IgnoreBlurFocus = false;
                        // On Edge, it appears that the blur/focus combination will reset the caret position
                        // under certain scenarios during unit tests.  So, we re-set it afterward.
                        element.selectionStart = selectionStart;
                        element.selectionEnd = selectionEnd;
                    }
                };
                return Utils;
            }());
            dom.Utils = Utils;
        })(dom = keyman_2.dom || (keyman_2.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// References extra HTML definitions not included by default in TS.
/// <reference path="../kmwexthtml.ts" />
// References device-specific code checks (separable module from KMW)
/// <reference path="../kmwdevice.ts" />
// References common DOM utility functions (separate module from KMW)
/// <reference path="utils.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            // Many thanks to https://www.typescriptlang.org/docs/handbook/advanced-types.html for this.
            function link(elem, data) {
                var e = elem;
                // Merges all properties and methods of KeyData onto the underlying HTMLDivElement, creating a merged class.
                for (var id in data) {
                    if (!e.hasOwnProperty(id)) {
                        e[id] = data[id];
                    }
                }
                return e;
            }
            // If the specified HTMLElement is either a TouchAliasElement or one of its children elements,
            // this method will return the root TouchAliasElement.
            function findTouchAliasTarget(target) {
                // The scrollable container element for the before & after text spans & the caret.
                // Not to be confused with the simulated scrollbar.
                var scroller;
                // Identify the scroller element
                if (target && dom.Utils.instanceof(target, "HTMLSpanElement")) {
                    scroller = target.parentNode;
                }
                else if (target && (target.className != null && target.className.indexOf('keymanweb-input') >= 0)) {
                    scroller = target.firstChild;
                }
                else if (target && dom.Utils.instanceof(target, "HTMLDivElement")) {
                    // Three possibilities:  the scroller, the scrollbar, & the blinking DIV of the caret.
                    // A direct click CAN trigger events on the blinking element itself if well-timed.
                    scroller = target;
                    // Ensures we land on the scroller, not the caret.
                    if (scroller.parentElement && scroller.parentElement.className.indexOf('keymanweb-input') < 0) {
                        scroller = scroller.parentElement;
                    }
                    // scroller is now either the actual scroller or the scrollbar element.
                    // We don't return either of these, and they both have the same parent element.
                }
                else if (target['kmw_ip']) { // In case it's called on a TouchAliasElement's base (aliased) element.
                    return target['kmw_ip'];
                }
                else {
                    // If it's not in any way related to a TouchAliasElement, simply return null.
                    return null;
                }
                // And the actual target element
                var root = scroller.parentNode;
                if (root['base'] !== undefined) {
                    return root;
                }
                else {
                    return null;
                }
            }
            dom.findTouchAliasTarget = findTouchAliasTarget;
            function constructTouchAlias(base) {
                var div = document.createElement("div");
                var ele = link(div, new TouchAliasData());
                if (base) {
                    ele.initWithBase(base);
                }
                else {
                    ele.init();
                }
                return ele;
            }
            dom.constructTouchAlias = constructTouchAlias;
            /**
             * The core definition for touch-alias 'subclassing' of HTMLDivElement.
             * It's 'merged' with HTMLDivElement to avoid issues with DOM inheritance and DOM element creation.
             */
            var TouchAliasData = /** @class */ (function () {
                function TouchAliasData() {
                    this['base'] = null; // NOT undefined; we can use this distinction for 'type-checking'.
                    this.__activeCaret = false;
                }
                TouchAliasData.getDevice = function () {
                    if (!TouchAliasData.device) {
                        var device = new com.keyman.Device();
                        device.detect();
                        TouchAliasData.device = device;
                    }
                    return TouchAliasData.device;
                };
                TouchAliasData.getOS = function () {
                    return this.getDevice().OS;
                };
                TouchAliasData.prototype.isMultiline = function () {
                    return this['base'] && this['base'].nodeName == "TEXTAREA";
                };
                TouchAliasData.prototype.initCaret = function () {
                    /**
                     * Create a caret to be appended to the scroller of the focussed input field.
                     * The caret is appended to the scroller so that it will automatically be clipped
                     * when the user manually scrolls it outside the element boundaries.
                     * It is positioned exactly over the hidden span (__caretSpan) that is inserted
                     * between the text spans before and after the insertion point.
                     */
                    this.__caretDiv = document.createElement('DIV');
                    var cs = this.__caretDiv.style;
                    cs.position = 'absolute';
                    cs.height = '16px'; // default height, actual height set from element properties
                    cs.width = '2px';
                    cs.backgroundColor = 'blue';
                    cs.border = 'none';
                    cs.left = cs.top = '0px'; // actual position set relative to parent when displayed
                    cs.display = 'block';
                    cs.visibility = 'hidden';
                    cs.zIndex = '9998'; // immediately below the OSK
                    // Start the caret flash timer
                    this.__caretTimerId = window.setInterval(this.flashCaret.bind(this), 500);
                };
                TouchAliasData.prototype.init = function () {
                    // Remember, this type exists to be merged into HTMLDivElements, so this will work.
                    // We have to trick TS a bit to make it happy, though.
                    var divThis = this;
                    divThis.className = 'keymanweb-input';
                    // Add a scrollable interior div
                    var d = this.__scrollDiv = document.createElement('div');
                    var xs = divThis.style;
                    xs.overflow = 'hidden';
                    xs.position = 'absolute';
                    //xs.border='1px solid gray';
                    xs.border = 'hidden'; // hide when element empty - KMW-3
                    xs.border = 'none';
                    xs.borderRadius = '5px';
                    // Add a scroll bar (horizontal for INPUT elements, vertical for TEXTAREA elements)
                    var sb = this.__scrollBar = document.createElement('div'), sbs = sb.style;
                    sbs.position = 'absolute';
                    sbs.height = sbs.width = '4px';
                    sbs.left = sbs.top = '0';
                    sbs.display = 'block';
                    sbs.visibility = 'hidden';
                    sbs.backgroundColor = '#808080';
                    sbs.borderRadius = '2px';
                    // And add two spans for the text content before and after the caret, and a caret span
                    this.__preCaret = document.createElement('span');
                    this.__postCaret = document.createElement('span');
                    this.__caretSpan = document.createElement('span');
                    this.__preCaret.innerHTML = this.__postCaret.innerHTML = this.__caretSpan.innerHTML = '';
                    this.__preCaret.className = this.__postCaret.className = this.__caretSpan.className = 'keymanweb-font';
                    d.appendChild(this.__preCaret);
                    d.appendChild(this.__caretSpan);
                    d.appendChild(this.__postCaret);
                    divThis.appendChild(d);
                    divThis.appendChild(sb);
                    var ds = d.style;
                    ds.position = 'absolute';
                    var preCaretStyle = this.__preCaret.style;
                    var postCaretStyle = this.__postCaret.style;
                    var styleCaret = this.__caretSpan.style;
                    preCaretStyle.border = postCaretStyle.border = 'none';
                    //preCaretStyle.backgroundColor='rgb(220,220,255)';
                    //postCaretStyle.backgroundColor='rgb(220,255,220)'; //only for testing
                    preCaretStyle.height = postCaretStyle.height = '100%';
                    // The invisible caret-positioning span must have a border to ensure that
                    // it remains in the layout, but colour doesn't matter, as it is never visible.
                    // Span margins are adjusted to compensate for the border and maintain text positioning.
                    styleCaret.border = '1px solid red';
                    styleCaret.visibility = 'hidden';
                    styleCaret.marginLeft = styleCaret.marginRight = '-1px';
                    // Set the outer element padding *after* appending the element,
                    // otherwise Firefox misaligns the two elements
                    xs.padding = '8px';
                    // Set internal padding to match the TEXTAREA and INPUT elements
                    ds.padding = '0px 2px'; // OK for iPad, possibly device-dependent
                    // Set the tabindex to 0 to allow a DIV to accept focus and keyboard input
                    // c.f. http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-TECHS/SCR29.html
                    divThis.tabIndex = 0;
                    // Disable (internal) pan and zoom on KMW input elements for IE10
                    divThis.style.msTouchAction = 'none';
                    ds.minWidth = xs.width;
                    ds.height = xs.height;
                    this.initCaret();
                };
                TouchAliasData.prototype.initWithBase = function (base) {
                    this['base'] = base;
                    this.init();
                    var divThis = this;
                    // There's quite a bit of setup for touch-alias elements that only occurs if it has an associated base.
                    this['base']['kmw_ip'] = divThis;
                    base.disabled = true;
                    var baseStyle = window.getComputedStyle(base, null);
                    var scrollDivStyle = this.__scrollDiv.style;
                    var preCaretStyle = this.__preCaret.style;
                    var postCaretStyle = this.__postCaret.style;
                    divThis.dir = base.dir;
                    preCaretStyle.fontFamily = postCaretStyle.fontFamily = scrollDivStyle.fontFamily = baseStyle.fontFamily;
                    // Set vertical centering for input elements
                    if (base.nodeName.toLowerCase() == 'input') {
                        if (!isNaN(parseInt(baseStyle.height, 10))) {
                            preCaretStyle.lineHeight = postCaretStyle.lineHeight = baseStyle.height;
                        }
                    }
                    if (TouchAliasData.getOS() == 'Android' && baseStyle.backgroundColor == 'transparent') {
                        scrollDivStyle.backgroundColor = '#fff';
                    }
                    else {
                        scrollDivStyle.backgroundColor = baseStyle.backgroundColor;
                    }
                    if (divThis.base.nodeName.toLowerCase() == 'textarea') {
                        preCaretStyle.whiteSpace = postCaretStyle.whiteSpace = 'pre-wrap'; //scroll vertically
                    }
                    else {
                        preCaretStyle.whiteSpace = postCaretStyle.whiteSpace = 'pre'; //scroll horizontally
                    }
                    divThis.base.parentNode.appendChild(divThis);
                    divThis.updateInput();
                    var style = divThis.style;
                    style.color = baseStyle.color;
                    //style.backgroundColor=bs.backgroundColor;
                    style.fontFamily = baseStyle.fontFamily;
                    style.fontSize = baseStyle.fontSize;
                    style.fontWeight = baseStyle.fontWeight;
                    style.textDecoration = baseStyle.textDecoration;
                    style.padding = baseStyle.padding;
                    style.margin = baseStyle.margin;
                    style.border = baseStyle.border;
                    style.borderRadius = baseStyle.borderRadius;
                    //xs.color='red';  //use only for checking alignment
                    // Prevent highlighting of underlying element (Android)
                    if ('webkitTapHighlightColor' in style) {
                        style.webkitTapHighlightColor = 'rgba(0,0,0,0)';
                    }
                    if (base instanceof base.ownerDocument.defaultView.HTMLTextAreaElement) {
                        // Correct rows value if defaulted and box height set by CSS
                        // The rows value is used when setting the caret vertically
                        if (base.rows == 2) { // 2 is default value
                            var h = parseInt(baseStyle.height, 10) - parseInt(baseStyle.paddingTop, 10) - parseInt(baseStyle.paddingBottom, 10), dh = parseInt(baseStyle.fontSize, 10), calcRows = Math.round(h / dh);
                            if (calcRows > base.rows + 1) {
                                base.rows = calcRows;
                            }
                        }
                        scrollDivStyle.width = style.width;
                        scrollDivStyle.minHeight = style.height;
                    }
                    else {
                        scrollDivStyle.minWidth = style.width;
                        scrollDivStyle.height = style.height;
                    }
                    base.style.visibility = 'hidden'; // hide by default: KMW-3
                    // Add an explicit event listener to allow the duplicated input element
                    // to be adjusted for any changes in base element location or size
                    // This will be called for each element after any rotation, as well as after user-initiated changes
                    // It has to be wrapped in an anonymous function to preserve scope and be applied to each element.
                    (function (xx) {
                        xx.__resizeHandler = function () {
                            /* A timeout is needed to let the base element complete its resizing before our
                            * simulated element can properly resize itself.
                            *
                            * Not doing this causes errors if the input elements are resized for whatever reason, such as
                            * changing languages to a text with greater height.
                            */
                            window.setTimeout(function () {
                                xx.updateInput();
                            }, 1);
                        };
                        xx.base.addEventListener('resize', xx.__resizeHandler, false);
                        xx.base.addEventListener('orientationchange', xx.__resizeHandler, false);
                    })(divThis);
                    var textValue;
                    if (base instanceof base.ownerDocument.defaultView.HTMLTextAreaElement
                        || base instanceof base.ownerDocument.defaultView.HTMLInputElement) {
                        textValue = base.value;
                    }
                    else {
                        textValue = base.textContent;
                    }
                    // And copy the text content
                    this.setText(textValue, null);
                };
                TouchAliasData.prototype.setText = function (t, cp) {
                    var tLen = 0;
                    var t1, t2;
                    // Read current text if null passed (for caret positioning)
                    if (t === null) {
                        t1 = this.__preCaret.textContent;
                        t2 = this.__postCaret.textContent;
                        t = t1 + t2;
                    }
                    if (cp < 0) {
                        cp = 0; //if(typeof t._kmwLength == 'undefined') return;
                    }
                    tLen = t._kmwLength();
                    if (cp === null || cp === undefined || cp > tLen) {
                        cp = tLen;
                    }
                    t1 = t._kmwSubstr(0, cp);
                    t2 = t._kmwSubstr(cp);
                    this.__preCaret.textContent = t1;
                    this.__postCaret.textContent = t2;
                    this.updateBaseElement(); // KMW-3, KMW-29
                };
                TouchAliasData.prototype.getTextBeforeCaret = function () {
                    return this.__preCaret.textContent;
                };
                TouchAliasData.prototype.getTextAfterCaret = function () {
                    return this.__postCaret.textContent;
                };
                TouchAliasData.prototype.setTextBeforeCaret = function (t) {
                    var tLen = 0;
                    // Collapse (trailing) whitespace to a single space for INPUT fields (also prevents wrapping)
                    if (!this.isMultiline()) {
                        t = t.replace(/\s+$/, ' ');
                    }
                    this.__preCaret.textContent = t;
                    // Test total length in order to control base element visibility
                    tLen = t.length;
                    tLen = tLen + this.__postCaret.textContent.length;
                    // Update the base element then scroll into view if necessary
                    this.updateBaseElement(); //KMW-3, KMW-29
                    this.scrollInput();
                };
                TouchAliasData.prototype.getTextCaret = function () {
                    return this.getTextBeforeCaret()._kmwLength();
                };
                TouchAliasData.prototype.setTextCaret = function (cp) {
                    this.setText(null, cp);
                    this.showCaret();
                };
                /**
                 * Set content, visibility, background and borders of input and base elements (KMW-3,KMW-29)
                 */
                TouchAliasData.prototype.updateBaseElement = function () {
                    var e = this;
                    // Only proceed if we actually have a base element.
                    if (!e['base']) {
                        return;
                    }
                    var Ldv = e.base.ownerDocument.defaultView;
                    if (e.base instanceof Ldv.HTMLInputElement || e.base instanceof Ldv.HTMLTextAreaElement) {
                        e.base.value = this.getText(); //KMW-29
                    }
                    else {
                        e.base.textContent = this.getText();
                    }
                    var n = this.getText()._kmwLength();
                    e.style.backgroundColor = (n == 0 ? 'transparent' : window.getComputedStyle(e.base, null).backgroundColor);
                    if (TouchAliasData.getOS() == 'iOS') {
                        e.base.style.visibility = (n == 0 ? 'visible' : 'hidden');
                    }
                };
                TouchAliasData.prototype.flashCaret = function () {
                    // Significant change - each element manages its own caret, and its activation is managed through show/hideCaret()
                    // without referencing core KMW code.  (KMW must thus check if the active element is a TouchAliasElement, then use these
                    // methods as appropriate.)
                    if (this.__activeCaret) {
                        var cs = this.__caretDiv.style;
                        cs.visibility = cs.visibility != 'visible' ? 'visible' : 'hidden';
                    }
                };
                ;
                /**
                 * Position the caret at the start of the second span within the scroller
                 */
                TouchAliasData.prototype.showCaret = function () {
                    var scroller = this.__scrollDiv, cs = this.__caretDiv.style, sp2 = this.__caretSpan;
                    // Attach the caret to this scroller and position it over the caret span
                    if (this.__caretDiv.parentNode != scroller) {
                        scroller.appendChild(this.__caretDiv);
                    }
                    cs.left = sp2.offsetLeft + 'px';
                    cs.top = sp2.offsetTop + 'px';
                    cs.height = (sp2.offsetHeight - 1) + 'px';
                    cs.visibility = 'hidden'; // best to wait for timer to display caret
                    this.__activeCaret = true;
                    // Scroll into view if required
                    this.scrollBody();
                    // Display and position the scrollbar if necessary
                    this.setScrollBar();
                };
                TouchAliasData.prototype.hideCaret = function () {
                    var e = this;
                    // Always copy text back to underlying field on blur
                    if (e.base instanceof e.base.ownerDocument.defaultView.HTMLTextAreaElement
                        || e.base instanceof e.base.ownerDocument.defaultView.HTMLInputElement) {
                        e.base.value = this.getText();
                    }
                    // And set the scroller caret to the end of the element content (null preserves text)
                    this.setText(null, 100000);
                    // Set the element scroll to zero (or max for RTL INPUT)
                    var ss = this.__scrollDiv.style;
                    if (e.isMultiline()) {
                        ss.top = '0';
                    }
                    else {
                        if (e.base.dir == 'rtl') {
                            ss.left = (e.offsetWidth - this.__scrollDiv.offsetWidth - 8) + 'px';
                        }
                        else {
                            ss.left = '0';
                        }
                    }
                    // And hide the caret and scrollbar
                    if (this.__caretDiv.parentNode) {
                        this.__caretDiv.parentNode.removeChild(this.__caretDiv);
                    }
                    this.__caretDiv.style.visibility = 'hidden';
                    this.__scrollBar.style.visibility = 'hidden';
                    this.__activeCaret = false;
                };
                TouchAliasData.prototype.getText = function () {
                    return this.textContent;
                };
                TouchAliasData.prototype.updateInput = function () {
                    if (this['base']) {
                        var divThis = this;
                        var xs = divThis.style, b = divThis.base, s = window.getComputedStyle(b, null), mLeft = parseInt(s.marginLeft, 10), mTop = parseInt(s.marginTop, 10), x1 = dom.Utils.getAbsoluteX(b), y1 = dom.Utils.getAbsoluteY(b);
                        var p = divThis.offsetParent;
                        if (p) {
                            x1 = x1 - dom.Utils.getAbsoluteX(p);
                            y1 = y1 - dom.Utils.getAbsoluteY(p);
                        }
                        if (isNaN(mLeft)) {
                            mLeft = 0;
                        }
                        if (isNaN(mTop)) {
                            mTop = 0;
                        }
                        xs.left = (x1 - mLeft) + 'px';
                        xs.top = (y1 - mTop) + 'px';
                        // FireFox does not want the offset!
                        if (typeof (s.MozBoxSizing) != 'undefined') {
                            xs.left = x1 + 'px';
                            xs.top = y1 + 'px';
                        }
                        var w = b.offsetWidth, h = b.offsetHeight, pLeft = parseInt(s.paddingLeft, 10), pRight = parseInt(s.paddingRight, 10), pTop = parseInt(s.paddingTop, 10), pBottom = parseInt(s.paddingBottom, 10), bLeft = parseInt(s.borderLeft, 10), bRight = parseInt(s.borderRight, 10), bTop = parseInt(s.borderTop, 10), bBottom = parseInt(s.borderBottom, 10);
                        // If using content-box model, must subtract the padding and border,
                        // but *not* for border-box (as for WordPress PlugIn)
                        var boxSizing = 'undefined';
                        if (typeof (s.boxSizing) != 'undefined') {
                            boxSizing = s.boxSizing;
                        }
                        else if (typeof (s.MozBoxSizing) != 'undefined') {
                            boxSizing = s.MozBoxSizing;
                        }
                        if (boxSizing == 'content-box') {
                            if (!isNaN(pLeft))
                                w -= pLeft;
                            if (!isNaN(pRight))
                                w -= pRight;
                            if (!isNaN(bLeft))
                                w -= bLeft;
                            if (!isNaN(bRight))
                                w -= bRight;
                            if (!isNaN(pTop))
                                h -= pTop;
                            if (!isNaN(pBottom))
                                h -= pBottom;
                            if (!isNaN(bTop))
                                h -= bTop;
                            if (!isNaN(bBottom))
                                h -= bBottom;
                        }
                        if (TouchAliasData.getOS() == 'Android') {
                            // FireFox - adjust padding to match input and text area defaults
                            if (typeof (s.MozBoxSizing) != 'undefined') {
                                xs.paddingTop = (pTop + 1) + 'px';
                                xs.paddingLeft = pLeft + 'px';
                                if (this.isMultiline()) {
                                    xs.marginTop = '1px';
                                }
                                else {
                                    xs.marginLeft = '1px';
                                }
                                w--;
                                h--;
                            }
                            else { // Chrome, Opera, native browser (?)
                                w++;
                                h++;
                            }
                        }
                        xs.width = w + 'px';
                        xs.height = h + 'px';
                    }
                };
                /**
                 * Scroll the input field horizontally (INPUT base element) or
                 * vertically (TEXTAREA base element) to bring the caret into view
                 * as text is entered or deleted form an element
                 */
                TouchAliasData.prototype.scrollInput = function () {
                    var scroller = this.__scrollDiv;
                    var divThis = this;
                    // Get the actual absolute position of the caret and the element
                    var s2 = this.__caretSpan, cx = dom.Utils.getAbsoluteX(s2), cy = dom.Utils.getAbsoluteY(s2), ex = dom.Utils.getAbsoluteX(divThis), ey = dom.Utils.getAbsoluteY(divThis), x = parseInt(scroller.style.left, 10), y = parseInt(scroller.style.top, 10), dx = 0, dy = 0;
                    // Scroller offsets must default to zero
                    if (isNaN(x))
                        x = 0;
                    if (isNaN(y))
                        y = 0;
                    // Scroll input field vertically if necessary
                    if (divThis.isMultiline()) {
                        var rowHeight = Math.round(divThis.offsetHeight / divThis.base.rows);
                        if (cy < ey) {
                            dy = cy - ey;
                        }
                        if (cy > ey + divThis.offsetHeight - rowHeight) {
                            dy = cy - ey - divThis.offsetHeight + rowHeight;
                        }
                        if (dy != 0) {
                            scroller.style.top = (y < dy ? y - dy : 0) + 'px';
                        }
                    }
                    else { // or scroll horizontally if needed
                        if (cx < ex + 8) {
                            dx = cx - ex - 12;
                        }
                        if (cx > ex + divThis.offsetWidth - 12) {
                            dx = cx - ex - divThis.offsetWidth + 12;
                        }
                        if (dx != 0) {
                            scroller.style.left = (x < dx ? x - dx : 0) + 'px';
                        }
                    }
                    // Display the caret (and scroll into view if necessary)
                    this.showCaret();
                };
                /**
                 * Scroll the document body vertically to bring the active input into view
                 */
                TouchAliasData.prototype.scrollBody = function () {
                    // Note the deliberate lack of typing; we don't want to include KMW's core in isolated
                    // element interface testing, so we can't use it here.
                    var oskHeight = 0;
                    if (window['keyman']) {
                        var osk = window['keyman'].osk;
                        if (osk && osk._Box) {
                            oskHeight = osk._Box.offsetHeight;
                        }
                    }
                    // Get the absolute position of the caret
                    var s2 = this.__caretSpan, y = dom.Utils.getAbsoluteY(s2), t = window.pageYOffset, dy = 0;
                    if (y < t) {
                        dy = y - t;
                    }
                    else {
                        dy = y - t - (window.innerHeight - oskHeight - s2.offsetHeight - 2);
                        if (dy < 0) {
                            dy = 0;
                        }
                    }
                    // Hide OSK, then scroll, then re-anchor OSK with absolute position (on end of scroll event)
                    if (dy != 0) {
                        window.scrollTo(0, dy + window.pageYOffset);
                    }
                };
                /**
                 * Display and position a scrollbar in the input field if needed
                 */
                TouchAliasData.prototype.setScrollBar = function () {
                    var e = this;
                    // Display the scrollbar if necessary.  Added isMultiline condition to correct rotation issue KMW-5.  Fixed for 310 beta.
                    var scroller = this.__scrollDiv, sbs = this.__scrollBar.style;
                    if ((scroller.offsetWidth > e.offsetWidth || scroller.offsetLeft < 0) && !e.isMultiline()) {
                        sbs.height = '4px';
                        sbs.width = 100 * (e.offsetWidth / scroller.offsetWidth) + '%';
                        sbs.left = 100 * (-scroller.offsetLeft / scroller.offsetWidth) + '%';
                        sbs.top = '0';
                        sbs.visibility = 'visible';
                    }
                    else if (scroller.offsetHeight > e.offsetHeight || scroller.offsetTop < 0) {
                        sbs.width = '4px';
                        sbs.height = 100 * (e.offsetHeight / scroller.offsetHeight) + '%';
                        sbs.top = 100 * (-scroller.offsetTop / scroller.offsetHeight) + '%';
                        sbs.left = '0';
                        sbs.visibility = 'visible';
                    }
                    else {
                        sbs.visibility = 'hidden';
                    }
                };
                return TouchAliasData;
            }());
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_4) {
        var dom;
        (function (dom) {
            var PreProcessor = /** @class */ (function () {
                function PreProcessor() {
                }
                /**
                 * Function     _GetEventKeyCode
                 * Scope        Private
                 * @param       {Event}       e         Event object
                 * Description  Finds the key code represented by the event.
                 */
                PreProcessor._GetEventKeyCode = function (e) {
                    if (e.keyCode) {
                        return e.keyCode;
                    }
                    else if (e.which) {
                        return e.which;
                    }
                    else {
                        return null;
                    }
                };
                /**
                 * Function     _GetKeyEventProperties
                 * Scope        Private
                 * @param       {Event}       e         Event object
                 * @param       {boolean=}    keyState  true if call results from a keyDown event, false if keyUp, undefined if keyPress
                 * @return      {Object.<string,*>}     KMW keyboard event object:
                 * Description  Get object with target element, key code, shift state, virtual key state
                 *                Lcode=keyCode
                 *                Lmodifiers=shiftState
                 *                LisVirtualKeyCode e.g. ctrl/alt key
                 *                LisVirtualKey     e.g. Virtual key or non-keypress event
                 */
                PreProcessor._GetKeyEventProperties = function (e, keyState) {
                    var keyman = com.keyman.singleton;
                    var core = keyman.core;
                    var s = new keyman_4.text.KeyEvent();
                    e = keyman._GetEventObject(e); // I2404 - Manage IE events in IFRAMEs
                    if (e.cancelBubble === true) {
                        return null; // I2457 - Facebook meta-event generation mess -- two events generated for a keydown in Facebook contentEditable divs
                    }
                    s.Lcode = this._GetEventKeyCode(e);
                    if (s.Lcode == null) {
                        return null;
                    }
                    // Stage 1 - track the true state of the keyboard's modifiers.
                    var prevModState = core.keyboardProcessor.modStateFlags, curModState = 0x0000;
                    var ctrlEvent = false, altEvent = false;
                    var keyCodes = keyman_4.text.Codes.keyCodes;
                    switch (s.Lcode) {
                        case keyCodes['K_CTRL']: // The 3 shorter "K_*CTRL" entries exist in some legacy keyboards.
                        case keyCodes['K_LCTRL']:
                        case keyCodes['K_RCTRL']:
                        case keyCodes['K_CONTROL']:
                        case keyCodes['K_LCONTROL']:
                        case keyCodes['K_RCONTROL']:
                            ctrlEvent = true;
                            break;
                        case keyCodes['K_LMENU']: // The 2 "K_*MENU" entries exist in some legacy keyboards.
                        case keyCodes['K_RMENU']:
                        case keyCodes['K_ALT']:
                        case keyCodes['K_LALT']:
                        case keyCodes['K_RALT']:
                            altEvent = true;
                            break;
                    }
                    /**
                     * Two separate conditions exist that should trigger chiral modifier detection.  Examples below use CTRL but also work for ALT.
                     *
                     * 1.  The user literally just pressed CTRL, so the event has a valid `location` property we can utilize.
                     *     Problem: its layer isn't presently activated within the OSK.
                     *
                     * 2.  CTRL has been held a while, so the OSK layer is valid, but the key event doesn't tell us the chirality of the active CTRL press.
                     *     Bonus issue:  RAlt simulation may cause erasure of this location property, but it should ONLY be empty if pressed in this case.
                     *     We default to the 'left' variants since they're more likely to exist and cause less issues with RAlt simulation handling.
                     *
                     * In either case, `e.getModifierState("Control")` is set to true, but as a result does nothing to tell us which case is active.
                     *
                     * `e.location != 0` if true matches condition 1 and matches condition 2 if false.
                     */
                    curModState |= (e.getModifierState("Shift") ? 0x10 : 0);
                    var modifierCodes = keyman_4.text.Codes.modifierCodes;
                    if (e.getModifierState("Control")) {
                        curModState |= ((e.location != 0 && ctrlEvent) ?
                            (e.location == 1 ? modifierCodes['LCTRL'] : modifierCodes['RCTRL']) : // Condition 1
                            prevModState & 0x0003); // Condition 2
                    }
                    if (e.getModifierState("Alt")) {
                        curModState |= ((e.location != 0 && altEvent) ?
                            (e.location == 1 ? modifierCodes['LALT'] : modifierCodes['RALT']) : // Condition 1
                            prevModState & 0x000C); // Condition 2
                    }
                    // Stage 2 - detect state key information.  It can be looked up per keypress with no issue.
                    s.Lstates = 0;
                    s.Lstates |= e.getModifierState('CapsLock') ? modifierCodes['CAPS'] : modifierCodes['NO_CAPS'];
                    s.Lstates |= e.getModifierState('NumLock') ? modifierCodes['NUM_LOCK'] : modifierCodes['NO_NUM_LOCK'];
                    s.Lstates |= (e.getModifierState('ScrollLock') || e.getModifierState("Scroll")) // "Scroll" for IE9.
                        ? modifierCodes['SCROLL_LOCK'] : modifierCodes['NO_SCROLL_LOCK'];
                    // We need these states to be tracked as well for proper OSK updates.
                    curModState |= s.Lstates;
                    // Stage 3 - Set our modifier state tracking variable and perform basic AltGr-related management.
                    s.LmodifierChange = core.keyboardProcessor.modStateFlags != curModState;
                    core.keyboardProcessor.modStateFlags = curModState;
                    // For European keyboards, not all browsers properly send both key-up events for the AltGr combo.
                    var altGrMask = modifierCodes['RALT'] | modifierCodes['LCTRL'];
                    if ((prevModState & altGrMask) == altGrMask && (curModState & altGrMask) != altGrMask) {
                        // We just released AltGr - make sure it's all released.
                        curModState &= ~altGrMask;
                    }
                    // Perform basic filtering for Windows-based ALT_GR emulation on European keyboards.
                    if (curModState & modifierCodes['RALT']) {
                        curModState &= ~modifierCodes['LCTRL'];
                    }
                    var modifierBitmasks = keyman_4.text.Codes.modifierBitmasks;
                    // Stage 4 - map the modifier set to the appropriate keystroke's modifiers.
                    var activeKeyboard = core.activeKeyboard;
                    if (activeKeyboard && activeKeyboard.isChiral) {
                        s.Lmodifiers = curModState & modifierBitmasks.CHIRAL;
                        // Note for future - embedding a kill switch here would facilitate disabling AltGr / Right-alt simulation.
                        if (activeKeyboard.emulatesAltGr && (s.Lmodifiers & modifierBitmasks['ALT_GR_SIM']) == modifierBitmasks['ALT_GR_SIM']) {
                            s.Lmodifiers ^= modifierBitmasks['ALT_GR_SIM'];
                            s.Lmodifiers |= modifierCodes['RALT'];
                        }
                    }
                    else {
                        // No need to sim AltGr here; we don't need chiral ALTs.
                        s.Lmodifiers =
                            (curModState & 0x10) | // SHIFT
                                ((curModState & (modifierCodes['LCTRL'] | modifierCodes['RCTRL'])) ? 0x20 : 0) |
                                ((curModState & (modifierCodes['LALT'] | modifierCodes['RALT'])) ? 0x40 : 0);
                    }
                    /* Tweak the modifiers if an OS meta key is detected; this will allow meta-key-based
                     * hotkeys to bypass Keyman processing.  We do this AFTER the chiral modifier filtering
                     * because some keyboards specify their own modifierBitmask, which won't include it.
                     * We don't currently use that reference in this method, but that may change in the future.
                     */
                    s.Lmodifiers |= (e.metaKey ? modifierCodes['META'] : 0);
                    // Physically-typed keys require use of a 'desktop' form factor and thus are based on a virtual "physical" Device.
                    s.device = keyman.util.physicalDevice.coreSpec;
                    // Perform any browser-specific key remapping before other remaps and mnemonic transforms. 
                    // (See https://github.com/keymanapp/keyman/issues/1125.)
                    if (!keyman.isEmbedded && s.device.browser == keyman_4.utils.Browser.Firefox) {
                        // Browser key identifiers are not completely consistent; Firefox has a few (for US punctuation)
                        // that differ from the norm.  Refer to https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode.
                        if (keyman_4.KeyMapping.browserMap.FF['k' + s.Lcode]) {
                            s.Lcode = keyman_4.KeyMapping.browserMap.FF['k' + s.Lcode];
                        }
                    }
                    // Mnemonic handling.
                    if (activeKeyboard && activeKeyboard.isMnemonic) {
                        // The following will never set a code corresponding to a modifier key, so it's fine to do this,
                        // which may change the value of Lcode, here.
                        keyman_4.text.KeyboardProcessor.setMnemonicCode(s, e.getModifierState("Shift"), e.getModifierState("CapsLock"));
                    }
                    // The 0x6F used to be 0x60 - this adjustment now includes the chiral alt and ctrl modifiers in that check.
                    var LisVirtualKeyCode = (typeof e.charCode != 'undefined' && e.charCode != null && (e.charCode == 0 || (s.Lmodifiers & 0x6F) != 0));
                    s.LisVirtualKey = LisVirtualKeyCode || e.type != 'keypress';
                    // This is based on a KeyboardEvent, so it's not considered 'synthetic' within web-core.
                    s.isSynthetic = false;
                    // Other minor physical-keyboard adjustments
                    if (activeKeyboard && !activeKeyboard.isMnemonic) {
                        // Positional Layout
                        /* 13/03/2007 MCD: Swedish: Start mapping of keystroke to US keyboard */
                        var Lbase = keyman_4.KeyMapping.languageMap[core.keyboardProcessor.baseLayout];
                        if (Lbase && Lbase['k' + s.Lcode]) {
                            s.Lcode = Lbase['k' + s.Lcode];
                        }
                        /* 13/03/2007 MCD: Swedish: End mapping of keystroke to US keyboard */
                        if (!activeKeyboard.definesPositionalOrMnemonic && !(s.Lmodifiers & 0x60)) {
                            // Support version 1.0 KeymanWeb keyboards that do not define positional vs mnemonic
                            s = {
                                Lcode: keyman_4.KeyMapping._USKeyCodeToCharCode(s),
                                Lmodifiers: 0,
                                LisVirtualKey: false,
                                vkCode: s.Lcode,
                                Lstates: s.Lstates,
                                kName: '',
                                device: keyman.util.physicalDevice.coreSpec,
                                isSynthetic: false
                            };
                        }
                    }
                    return s;
                };
                PreProcessor.getEventOutputTarget = function (e) {
                    var keyman = com.keyman.singleton;
                    var target = keyman.util.eventTarget(e);
                    if (target == null) {
                        return null;
                    }
                    else if (target.nodeType == 3) { // defeat Safari bug
                        target = target.parentNode;
                    }
                    return dom.Utils.getOutputTarget(target);
                };
                /**
                 * Function     keyDown
                 * Scope        Public
                 * Description  Processes keydown event and passes data to keyboard.
                 *
                 * Note that the test-case oriented 'recorder' stubs this method to facilitate keystroke
                 * recording for use in test cases.  If changing this function, please ensure the recorder is
                 * not affected.
                 */
                PreProcessor.keyDown = function (e) {
                    var core = com.keyman.singleton.core;
                    dom.DOMEventHandlers.states.swallowKeypress = false;
                    // Get event properties  
                    var Levent = this._GetKeyEventProperties(e, true);
                    if (Levent == null) {
                        return true;
                    }
                    var outputTarget = PreProcessor.getEventOutputTarget(e);
                    var ruleBehavior = core.processKeyEvent(Levent, outputTarget);
                    var LeventMatched = ruleBehavior && !ruleBehavior.triggerKeyDefault;
                    if (LeventMatched) {
                        if (e && e.preventDefault) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        dom.DOMEventHandlers.states.swallowKeypress = !!Levent.Lcode;
                        // Don't swallow backspaces on keypresses; this allows physical BKSP presses to repeat.
                        if (Levent.Lcode == 8) {
                            dom.DOMEventHandlers.states.swallowKeypress = false;
                        }
                    }
                    else {
                        dom.DOMEventHandlers.states.swallowKeypress = false;
                    }
                    return !LeventMatched;
                };
                // KeyUp basically exists for two purposes:
                // 1)  To detect browser form submissions (handled in kmwdomevents.ts)
                // 2)  To detect modifier state changes.
                PreProcessor.keyUp = function (e) {
                    var core = com.keyman.singleton.core;
                    var Levent = this._GetKeyEventProperties(e, false);
                    if (Levent == null) {
                        return true;
                    }
                    var outputTarget = PreProcessor.getEventOutputTarget(e);
                    return core.keyboardProcessor.doModifierPress(Levent, outputTarget, false);
                };
                PreProcessor.keyPress = function (e) {
                    var keyman = com.keyman.singleton;
                    var core = keyman.core;
                    var Levent = this._GetKeyEventProperties(e);
                    if (Levent == null || Levent.LisVirtualKey) {
                        return true;
                    }
                    // _Debug('KeyPress code='+Levent.Lcode+'; Ltarg='+Levent.Ltarg.tagName+'; LisVirtualKey='+Levent.LisVirtualKey+'; _KeyPressToSwallow='+keymanweb._KeyPressToSwallow+'; keyCode='+(e?e.keyCode:'nothing'));
                    /* I732 START - 13/03/2007 MCD: Swedish: Start positional keyboard layout code: prevent keystroke */
                    if (!core.activeKeyboard.isMnemonic) {
                        if (!dom.DOMEventHandlers.states.swallowKeypress) {
                            return true;
                        }
                        if (Levent.Lcode < 0x20 || (keyman._BrowserIsSafari && (Levent.Lcode > 0xF700 && Levent.Lcode < 0xF900))) {
                            return true;
                        }
                        e = keyman._GetEventObject(e); // I2404 - Manage IE events in IFRAMEs
                        if (e) {
                            e.returnValue = false;
                        }
                        return false;
                    }
                    /* I732 END - 13/03/2007 MCD: Swedish: End positional keyboard layout code */
                    // Only reached if it's a mnemonic keyboard.
                    var outputTarget = PreProcessor.getEventOutputTarget(e);
                    if (dom.DOMEventHandlers.states.swallowKeypress || core.keyboardInterface.processKeystroke(outputTarget, Levent)) {
                        dom.DOMEventHandlers.states.swallowKeypress = false;
                        if (e && e.preventDefault) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        return false;
                    }
                    dom.DOMEventHandlers.states.swallowKeypress = false;
                    return true;
                };
                return PreProcessor;
            }());
            dom.PreProcessor = PreProcessor;
        })(dom = keyman_4.dom || (keyman_4.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="touchAliasElement.ts" />
/// <reference path="preProcessor.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_5) {
        var dom;
        (function (dom) {
            /*
            * Note that for many of the actual events represented by methods in this file, `this` is replaced
            * automatically by JavaScript's event handling system.  As such, many 'wrapper' variants of the events
            * exist to restore the object-oriented hierarchy below.
            *
            */
            var CommonDOMStates = /** @class */ (function () {
                function CommonDOMStates() {
                    this._DisableInput = false; // Should input be disabled?
                    this._IgnoreNextSelChange = 0; // when a visual keyboard key is mouse-down, ignore the next sel change because this stuffs up our history
                    this._IgnoreBlurFocus = false; // Used to temporarily ignore focus changes
                    this._Selection = null;
                    this._SelectionControl = null; // Type behavior is as with activeElement and the like.
                }
                /* ----------------------- Static event-related methods ------------------------ */
                CommonDOMStates.prototype.setFocusTimer = function () {
                    this.focusing = true;
                    this.focusTimer = window.setTimeout(function () {
                        this.focusing = false;
                    }.bind(this), 50);
                };
                return CommonDOMStates;
            }());
            dom.CommonDOMStates = CommonDOMStates;
            /**
             * Declares a base, non-touch oriented implementation of all relevant DOM-related event handlers and state functions.
             */
            var DOMEventHandlers = /** @class */ (function () {
                function DOMEventHandlers(keyman) {
                    /**
                     * Handle receiving focus by simulated input field
                     */
                    this.setFocus = function (e) {
                        // Touch-only handler.
                    }.bind(this);
                    /**
                     * Handles touch-based loss of focus events.
                     */
                    this.setBlur = function (e) {
                        // Touch-only handler.
                    }.bind(this);
                    // End of I3363 (Build 301) additions
                    // Universal DOM event handlers (both desktop + touch)
                    //TODO: add more complete description of what ControlFocus really does
                    /**
                     * Respond to KeymanWeb-aware input element receiving focus
                     */
                    this._ControlFocus = function (e) {
                        var Ltarg;
                        var device = this.keyman.util.device;
                        var osk = this.keyman.osk;
                        e = this.keyman._GetEventObject(e); // I2404 - Manage IE events in IFRAMEs
                        Ltarg = this.keyman.util.eventTarget(e);
                        if (Ltarg == null) {
                            return true;
                        }
                        if (Ltarg['body']) {
                            Ltarg = Ltarg['body']; // Occurs in Firefox for design-mode iframes.
                        }
                        // Prevent any action if a protected input field
                        if (device.touchable && (Ltarg.className == null || Ltarg.className.indexOf('keymanweb-input') < 0)) {
                            return true;
                        }
                        // Or if not a remappable input field
                        var en = Ltarg.nodeName.toLowerCase();
                        if (Ltarg.ownerDocument && Ltarg instanceof Ltarg.ownerDocument.defaultView.HTMLInputElement) {
                            var et = Ltarg.type.toLowerCase();
                            if (!(et == 'text' || et == 'search')) {
                                return true;
                            }
                        }
                        else if (Ltarg.ownerDocument && Ltarg.ownerDocument.designMode == 'on') {
                            // continue; don't block this one!
                        }
                        else if ((device.touchable || !Ltarg.isContentEditable)
                            && !(Ltarg.ownerDocument && Ltarg instanceof Ltarg.ownerDocument.defaultView.HTMLTextAreaElement)) {
                            return true;
                        }
                        // We condition on 'priorElement' below as a check to allow KMW to set a default active keyboard.
                        var priorElement = DOMEventHandlers.states._lastActiveElement;
                        if (Ltarg.nodeType == 3) { // defeat Safari bug
                            Ltarg = Ltarg.parentNode;
                        }
                        var LfocusTarg = Ltarg;
                        // Ensure that focussed element is visible above the keyboard
                        if (Ltarg.className == null || Ltarg.className.indexOf('keymanweb-input') < 0) {
                            if (this instanceof DOMTouchHandlers) {
                                this.scrollBody(Ltarg);
                            }
                        }
                        if (Ltarg.ownerDocument && Ltarg instanceof Ltarg.ownerDocument.defaultView.HTMLIFrameElement) { //**TODO: check case reference
                            this.keyman.domManager._AttachToIframe(Ltarg);
                            Ltarg = Ltarg.contentWindow.document.body;
                        }
                        // Must set before _Blur / _Focus to avoid infinite recursion due to complications
                        // in setActiveKeyboard behavior with managed keyboard settings.
                        this.keyman.domManager.lastActiveElement = Ltarg;
                        this.keyman.domManager.activeElement = Ltarg; // I3363 (Build 301)
                        if (this.keyman.uiManager.justActivated) {
                            this._BlurKeyboardSettings(Ltarg);
                        }
                        else {
                            this._FocusKeyboardSettings(Ltarg, priorElement ? false : true);
                        }
                        // Always do the common focus stuff, instantly returning if we're in an editable iframe.
                        if (this._CommonFocusHelper(Ltarg)) {
                            return true;
                        }
                        ;
                        // Set element directionality (but only if element is empty)
                        if (Ltarg.ownerDocument && Ltarg instanceof Ltarg.ownerDocument.defaultView.HTMLElement) {
                            this.keyman.domManager._SetTargDir(Ltarg);
                        }
                        //Execute external (UI) code needed on focus if required
                        this.doControlFocused(LfocusTarg, this.keyman.domManager.lastActiveElement);
                        return true;
                    }.bind(this);
                    /**
                     * Respond to KMW losing focus on event
                     */
                    this._ControlBlur = function (e) {
                        var Ltarg;
                        e = this.keyman._GetEventObject(e); // I2404 - Manage IE events in IFRAMEs
                        Ltarg = this.keyman.util.eventTarget(e);
                        if (Ltarg == null) {
                            return true;
                        }
                        if (Ltarg['body']) {
                            Ltarg = Ltarg['body']; // Occurs in Firefox for design-mode iframes.
                        }
                        // Makes sure we properly detect the TouchAliasElement root,
                        // rather than one of its constituent children.
                        if (this.keyman.util.device.touchable) {
                            Ltarg = dom.findTouchAliasTarget(Ltarg);
                            if (!Ltarg) {
                                return true;
                            }
                        }
                        if (DOMEventHandlers.states._IgnoreNextSelChange) {
                            // If a keyboard calls saveFocus() (KSF), then ignore the
                            // next selection change
                            DOMEventHandlers.states._IgnoreNextSelChange--;
                            e.cancelBubble = true;
                            e.stopPropagation();
                            return true;
                        }
                        if (DOMEventHandlers.states._IgnoreBlurFocus) {
                            // Prevent triggering other blur-handling events (as possible)
                            e.cancelBubble = true;
                            e.stopPropagation();
                            return true;
                        }
                        // Hide the touch device input caret, if applicable  I3363 (Build 301)
                        if (dom.Utils.instanceof(this.keyman.domManager.activeElement, "TouchAliasElement")) {
                            var lastAlias = this.keyman.domManager.activeElement;
                            lastAlias.hideCaret();
                        }
                        if (Ltarg.nodeType == 3) { // defeat Safari bug
                            Ltarg = Ltarg.parentNode;
                        }
                        if (Ltarg.ownerDocument) {
                            if (Ltarg instanceof Ltarg.ownerDocument.defaultView.HTMLIFrameElement) {
                                Ltarg = Ltarg.contentWindow.frameElement;
                            }
                        }
                        ////keymanweb._SelectionControl = null;
                        if (this.keyman.domManager.lastActiveElement) {
                            this._BlurKeyboardSettings(this.keyman.domManager.lastActiveElement);
                        }
                        // Now that we've handled all prior-element maintenance, update the active and 'last-active element'.
                        this.keyman.domManager.activeElement = null; // I3363 (Build 301)
                        this.keyman.domManager.lastActiveElement = Ltarg;
                        /* If the KeymanWeb UI is active as a user changes controls, all UI-based effects should be restrained to this control in case
                        * the user is manually specifying languages on a per-control basis.
                        */
                        this.keyman.uiManager.justActivated = false;
                        var isActivating = this.keyman.uiManager.isActivating;
                        var activeKeyboard = com.keyman.singleton.core.activeKeyboard;
                        if (!isActivating && activeKeyboard) {
                            activeKeyboard.notify(0, dom.Utils.getOutputTarget(Ltarg), 0); // I2187
                        }
                        //e = this.keyman._GetEventObject<FocusEvent>(e);   // I2404 - Manage IE events in IFRAMEs  //TODO: is this really needed again????
                        this.doControlBlurred(Ltarg, e, isActivating);
                        this.doChangeEvent(Ltarg);
                        this.keyman['resetContext']();
                        return true;
                    }.bind(this);
                    /**
                     * Function     _KeyDown
                     * Scope        Private
                     * Description  Processes keydown event and passes data to keyboard.
                     *
                     * Note that the test-case oriented 'recorder' stubs this method to facilitate keystroke
                     * recording for use in test cases.  If changing this function, please ensure the recorder is
                     * not affected.
                     */
                    this._KeyDown = function (e) {
                        var activeKeyboard = this.keyman.core.activeKeyboard;
                        var util = this.keyman.util;
                        if (DOMEventHandlers.states._DisableInput || activeKeyboard == null) {
                            return true;
                        }
                        // Prevent mapping element is readonly or tagged as kmw-disabled
                        var el = util.eventTarget(e);
                        if (util.device.touchable) {
                            if (el && typeof el.kmwInput != 'undefined' && el.kmwInput == false) {
                                return true;
                            }
                        }
                        else if (el && el.className.indexOf('kmw-disabled') >= 0) {
                            return true;
                        }
                        return dom.PreProcessor.keyDown(e);
                    }.bind(this);
                    /**
                     * Function     _KeyPress
                     * Scope        Private
                     * Description Processes keypress event (does not pass data to keyboard)
                     */
                    this._KeyPress = function (e) {
                        if (DOMEventHandlers.states._DisableInput || this.keyman.core.activeKeyboard == null) {
                            return true;
                        }
                        return dom.PreProcessor.keyPress(e);
                    }.bind(this);
                    /**
                     * Function     _KeyUp
                     * Scope        Private
                     * Description Processes keyup event and passes event data to keyboard
                     */
                    this._KeyUp = function (e) {
                        var osk = this.keyman.osk;
                        var Levent = dom.PreProcessor._GetKeyEventProperties(e, false);
                        if (Levent == null) {
                            return true;
                        }
                        var outputTarget = dom.PreProcessor.getEventOutputTarget(e);
                        var inputEle = outputTarget.getElement();
                        // Since this part concerns DOM element + browser interaction management, we preprocess it for
                        // browser form commands before passing control to the Processor module.
                        if (Levent.Lcode == 13) {
                            var ignore = false;
                            if (outputTarget instanceof inputEle.ownerDocument.defaultView.HTMLTextAreaElement) {
                                ignore = true;
                            }
                            if (inputEle.base && inputEle.base instanceof inputEle.base.ownerDocument.defaultView.HTMLTextAreaElement) {
                                ignore = true;
                            }
                            if (!ignore) {
                                // For input fields, move to next input element
                                if (inputEle instanceof inputEle.ownerDocument.defaultView.HTMLInputElement) {
                                    if (inputEle.type == 'search' || inputEle.type == 'submit') {
                                        inputEle.form.submit();
                                    }
                                    else {
                                        this.keyman.domManager.moveToNext(false);
                                    }
                                }
                                return true;
                            }
                        }
                        return dom.PreProcessor.keyUp(e);
                    }.bind(this);
                    this.keyman = keyman;
                }
                /**
                 * Function     doControlFocused
                 * Scope        Private
                 * @param       {Object}            _target         element gaining focus
                 * @param       {Object}            _activeControl  currently active control
                 * @return      {boolean}
                 * Description  Execute external (UI) code needed on focus
                 */
                DOMEventHandlers.prototype.doControlFocused = function (_target, _activeControl) {
                    var p = {};
                    p['target'] = _target;
                    p['activeControl'] = _activeControl;
                    return this.keyman.util.callEvent('kmw.controlfocused', p);
                };
                /**
                 * Function     doControlBlurred
                 * Scope        Private
                 * @param       {Object}            _target       element losing focus
                 * @param       {Event}             _event        event object
                 * @param       {(boolean|number)}  _isActivating activation state
                 * @return      {boolean}
                 * Description  Execute external (UI) code needed on blur
                 */
                DOMEventHandlers.prototype.doControlBlurred = function (_target, _event, _isActivating) {
                    var p = {};
                    p['target'] = _target;
                    p['event'] = _event;
                    p['isActivating'] = _isActivating;
                    return this.keyman.util.callEvent('kmw.controlblurred', p);
                };
                /**
                 * Function             _BlurKeyboardSettings
                 * Description          Stores the last active element's keyboard settings.  Should be called
                 *                      whenever a KMW-enabled page element loses control.
                 */
                DOMEventHandlers.prototype._BlurKeyboardSettings = function (lastElem, PInternalName, PLgCode) {
                    var keyboardID = this.keyman.core.activeKeyboard ? this.keyman.core.activeKeyboard.id : '';
                    var langCode = this.keyman.keyboardManager.getActiveLanguage();
                    if (PInternalName !== undefined && PLgCode !== undefined) {
                        keyboardID = PInternalName;
                        langCode = PLgCode;
                    }
                    if (lastElem && lastElem._kmwAttachment.keyboard != null) {
                        lastElem._kmwAttachment.keyboard = keyboardID;
                        lastElem._kmwAttachment.languageCode = langCode;
                    }
                    else {
                        this.keyman.globalKeyboard = keyboardID;
                        this.keyman.globalLanguageCode = langCode;
                    }
                };
                /**
                 * Function             _FocusKeyboardSettings
                 * @param   {boolean}   blockGlobalChange   A flag indicating if the global keyboard setting should be ignored for this call.
                 * Description          Restores the newly active element's keyboard settings.  Should be called
                 *                      whenever a KMW-enabled page element gains control, but only once the prior
                 *                      element's loss of control is guaranteed.
                 */
                DOMEventHandlers.prototype._FocusKeyboardSettings = function (lastElem, blockGlobalChange) {
                    if (lastElem && lastElem._kmwAttachment.keyboard != null) {
                        this.keyman.keyboardManager.setActiveKeyboard(lastElem._kmwAttachment.keyboard, lastElem._kmwAttachment.languageCode);
                    }
                    else if (!blockGlobalChange) {
                        this.keyman.keyboardManager.setActiveKeyboard(this.keyman.globalKeyboard, this.keyman.globalLanguageCode);
                    }
                    // Now that we've fully entered the new context, invalidate the context so we can generate initial predictions from it.
                    if (this.keyman.modelManager) {
                        var outputTarget = dom.Utils.getOutputTarget(lastElem);
                        this.keyman.core.languageProcessor.invalidateContext(outputTarget);
                    }
                };
                /**
                 * Function             _CommonFocusHelper
                 * @param   {Element}   target
                 * @returns {boolean}
                 * Description          Performs common state management for the various focus events of KeymanWeb.
                 *                      The return value indicates whether (true) or not (false) the calling event handler
                 *                      should be terminated immediately after the call.
                 */
                DOMEventHandlers.prototype._CommonFocusHelper = function (target) {
                    var keyman = com.keyman.singleton;
                    var uiManager = this.keyman.uiManager;
                    //TODO: the logic of the following line doesn't look right!!  Both variables are true, but that doesn't make sense!
                    //_Debug(keymanweb._IsIEEditableIframe(Ltarg,1) + '...' +keymanweb._IsMozillaEditableIframe(Ltarg,1));
                    if (target.ownerDocument && target instanceof target.ownerDocument.defaultView.HTMLIFrameElement) {
                        if (!this.keyman.domManager._IsIEEditableIframe(target, 1) ||
                            !this.keyman.domManager._IsMozillaEditableIframe(target, 1)) {
                            DOMEventHandlers.states._DisableInput = true;
                            return true;
                        }
                    }
                    DOMEventHandlers.states._DisableInput = false;
                    var activeKeyboard = keyman.core.activeKeyboard;
                    if (!uiManager.justActivated) {
                        if (target && dom.Utils.getOutputTarget(target)) {
                            dom.Utils.getOutputTarget(target).deadkeys().clear();
                        }
                        if (activeKeyboard) {
                            activeKeyboard.notify(0, dom.Utils.getOutputTarget(target), 1); // I2187
                        }
                    }
                    if (!uiManager.justActivated && DOMEventHandlers.states._SelectionControl != target) {
                        uiManager.isActivating = false;
                    }
                    uiManager.justActivated = false;
                    DOMEventHandlers.states._SelectionControl = target;
                    if (keyman.core.languageProcessor.isActive) {
                        keyman.core.languageProcessor.predictFromTarget(dom.Utils.getOutputTarget(target));
                    }
                    return false;
                };
                DOMEventHandlers.prototype.doChangeEvent = function (_target) {
                    if (DOMEventHandlers.states.changed) {
                        var event;
                        if (typeof Event == 'function') {
                            event = new Event('change', { "bubbles": true, "cancelable": false });
                        }
                        else { // IE path
                            event = document.createEvent("HTMLEvents");
                            event.initEvent('change', true, false);
                        }
                        // Ensure that touch-aliased elements fire as if from the aliased element.
                        if (_target['base'] && _target['base']['kmw_ip']) {
                            _target = _target['base'];
                        }
                        _target.dispatchEvent(event);
                    }
                    DOMEventHandlers.states.changed = false;
                };
                // This is only static within a given initialization of KeymanWeb.  Perhaps it would be best as an initialization
                // parameter and member field?
                DOMEventHandlers.states = new CommonDOMStates();
                return DOMEventHandlers;
            }());
            dom.DOMEventHandlers = DOMEventHandlers;
            // -------------------------------------------------------------------------
            /**
             * Defines numerous functions for handling and modeling touch-based aliases.
             */
            var DOMTouchHandlers = /** @class */ (function (_super) {
                __extends(DOMTouchHandlers, _super);
                function DOMTouchHandlers(keyman) {
                    var _this = _super.call(this, keyman) || this;
                    /**
                     * Handle receiving focus by simulated input field
                     *
                     */
                    _this.setFocus = function (e) {
                        DOMEventHandlers.states.setFocusTimer();
                        var tEvent;
                        if (e && dom.Utils.instanceof(e, "TouchEvent")) {
                            try {
                                tEvent = DOMTouchHandlers.selectTouch(e);
                            }
                            catch (err) {
                                console.warn(err);
                                return;
                            }
                        }
                        else { // Allow external code to set focus and thus display the OSK on touch devices if required (KMEW-123)
                            tEvent = { clientX: 0, clientY: 0 };
                            // Will usually be called from setActiveElement, which should define DOMEventHandlers.states.lastActiveElement
                            if (this.keyman.domManager.lastActiveElement) {
                                tEvent.target = this.keyman.domManager.lastActiveElement;
                                // Shouldn't happen, but... just in case.  Implemented late in 14.0 beta, so
                                // this detail was kept, though it's likely safe to eliminate.
                                if (tEvent.target['kmw_ip']) {
                                    tEvent.target = tEvent.target['kmw_ip'];
                                }
                                // but will default to first input or text area on page if DOMEventHandlers.states.lastActiveElement is null
                            }
                            else {
                                tEvent.target = this.keyman.domManager.sortedInputs[0]['kmw_ip'];
                            }
                        }
                        this.setFocusWithTouch(tEvent);
                    }.bind(_this);
                    /**
                     * Handle losing focus from simulated input field
                     */
                    _this.setBlur = function (e) {
                        // This works OK for iOS, but may need something else for other platforms
                        var elem;
                        if (('relatedTarget' in e) && e.relatedTarget) {
                            elem = e.relatedTarget;
                        }
                        this.executeBlur(elem);
                    }.bind(_this);
                    /**
                     * Handle the touch end event for an input element
                     */
                    _this.dragEnd = function (e) {
                        e.stopPropagation();
                        this.firstTouch = null;
                    }.bind(_this);
                    /**
                     * Handle the touch move event for an input element
                     */
                    _this.dragInput = function (e) {
                        // Prevent dragging window
                        if (e.cancelable) {
                            // If a touch-alias element is scrolling, this may be false.
                            // Tends to result in a spam of console errors when e.cancelable == false.
                            e.preventDefault();
                        }
                        e.stopPropagation();
                        // Identify the target from the touch list or the event argument (IE 10 only)
                        var target;
                        var touch;
                        if (dom.Utils.instanceof(e, "TouchEvent")) {
                            try {
                                touch = DOMTouchHandlers.selectTouch(e);
                            }
                            catch (err) {
                                console.warn(err);
                                return;
                            }
                            target = touch.target;
                        }
                        else {
                            target = e.target;
                        }
                        if (target == null) {
                            return;
                        }
                        // Identify the input element from the touch event target (touched element may be contained by input)
                        target = dom.findTouchAliasTarget(target);
                        if (!target) {
                            return;
                        }
                        var x, y;
                        if (dom.Utils.instanceof(e, "TouchEvent")) {
                            x = touch.screenX;
                            y = touch.screenY;
                        }
                        else {
                            x = e.screenX;
                            y = e.screenY;
                        }
                        // Allow content of input elements to be dragged horizontally or vertically
                        if (typeof this.firstTouch == 'undefined' || this.firstTouch == null) {
                            this.firstTouch = { x: x, y: y };
                        }
                        else {
                            var x0 = this.firstTouch.x, y0 = this.firstTouch.y, scroller = target.firstChild, dx, dy, x1;
                            if (target.base.nodeName == 'TEXTAREA') {
                                var yOffset = parseInt(scroller.style.top, 10);
                                if (isNaN(yOffset))
                                    yOffset = 0;
                                dy = y0 - y;
                                if (dy < -4 || dy > 4) {
                                    scroller.style.top = (yOffset < dy ? yOffset - dy : 0) + 'px';
                                    this.firstTouch.y = y;
                                }
                            }
                            else {
                                var xOffset = parseInt(scroller.style.left, 10);
                                if (isNaN(xOffset))
                                    xOffset = 0;
                                dx = x0 - x;
                                if (dx < -4 || dx > 4) {
                                    // Limit dragging beyond the defined text (to avoid dragging the text completely out of view)
                                    var xMin = 0, xMax = dom.Utils.getAbsoluteX(target) + target.offsetWidth - scroller.offsetWidth - 32;
                                    if (target.base.dir == 'rtl')
                                        xMin = 16;
                                    else
                                        xMax = xMax - 24;
                                    x1 = xOffset - dx;
                                    if (x1 > xMin)
                                        x1 = xMin;
                                    if (x1 < xMax)
                                        x1 = xMax;
                                    scroller.style.left = x1 + 'px';
                                    this.firstTouch.x = x;
                                }
                            }
                        }
                        // Should refactor to use TouchAliasElement's version; target is an instance of the class.
                        this.setScrollBar(target);
                    }.bind(_this);
                    return _this;
                }
                DOMTouchHandlers.selectTouch = function (e) {
                    /**
                     * During multi-touch event's, it's possible for one or more touches of said multi-touch
                     * to be against irrelevant parts of the page.  We only want to consider touches against
                     * valid OutputTargets - against elements of the page that KMW can attach to.
                     * With touch active... that's a TouchAliasElement.
                     */
                    var isValidTouch = function (touch, target) {
                        return e.target == target && !!(dom.findTouchAliasTarget(touch.target));
                    };
                    // The event at least tells us the event's target, which can be used to help check
                    // whether or not individual `Touch`es may be related to this specific event for
                    // an ongoing multitouch scenario.
                    var target = e.target;
                    // Find the first touch affected by this event that matches the current target.
                    for (var i = 0; i < e.changedTouches.length; i++) {
                        if (isValidTouch(e.changedTouches[i], target)) {
                            return e.changedTouches[i];
                        }
                    }
                    // Shouldn't be possible.  Just in case, we'd prefer a silent failure that allows
                    // callers to silently abort.
                    throw new Error("Could not select valid Touch for event.");
                };
                // Also handles initial touch responses.
                DOMTouchHandlers.prototype.setFocusWithTouch = function (tEvent) {
                    var touchX = tEvent.clientX, touchY = tEvent.clientY;
                    // Some specifics rely upon which child of the TouchAliasElement received the actual event.
                    var tTarg = tEvent.target;
                    // Determines the actual TouchAliasElement - the part tied to an OutputTarget.
                    var target = dom.findTouchAliasTarget(tTarg);
                    if (!target) {
                        return;
                    }
                    // Some parts rely upon the scroller element.
                    var scroller = target.firstChild;
                    // Move the caret and refocus if necessary
                    if (this.keyman.domManager.activeElement != target) {
                        // Hide the KMW caret
                        var prevTarget = this.keyman.domManager.activeElement;
                        // We're not 100% sure whether or not the next line can occur,
                        // but it's a decent failsafe regardless.
                        if (prevTarget && prevTarget['kmw_ip']) {
                            prevTarget = prevTarget['kmw_ip'];
                        }
                        // Make sure that we have the right type so that the expected method exists.
                        if (prevTarget && dom.Utils.instanceof(prevTarget, "TouchAliasElement")) {
                            prevTarget.hideCaret();
                        }
                        this.keyman.domManager.activeElement = target;
                        // The issue here is that touching a DIV does not actually set the focus for iOS, even when enabled to accept focus (by setting tabIndex=0)
                        // We must explicitly set the focus in order to remove focus from any non-KMW input
                        target.focus(); //Android native browsers may not like this, but it is needed for Chrome, Safari
                    }
                    // Correct element directionality if required
                    this.keyman.domManager._SetTargDir(target);
                    // If clicked on DIV on the main element, rather than any part of the text representation,
                    // set caret to end of text
                    if (tTarg && tTarg == target) {
                        var x, cp;
                        x = dom.Utils.getAbsoluteX(scroller.firstChild);
                        if (target.dir == 'rtl') {
                            x += scroller.firstChild.offsetWidth;
                            cp = (touchX > x ? 0 : 100000);
                        }
                        else {
                            cp = (touchX < x ? 0 : 100000);
                        }
                        target.setTextCaret(cp);
                        target.scrollInput();
                        // nextSibling - the scrollbar element.
                    }
                    else if (tTarg != scroller.nextSibling) { // Otherwise, if clicked on text in SPAN, set at touch position
                        var caret, cp, cpMin, cpMax, x, y, dy, yRow, iLoop;
                        caret = scroller.childNodes[1]; //caret span
                        cpMin = 0;
                        cpMax = target.getText()._kmwLength();
                        cp = target.getTextCaret();
                        dy = document.body.scrollTop;
                        // Vertical scrolling
                        if (target.base instanceof target.base.ownerDocument.defaultView.HTMLTextAreaElement) {
                            yRow = Math.round(target.base.offsetHeight / target.base.rows);
                            for (iLoop = 0; iLoop < 16; iLoop++) {
                                y = dom.Utils.getAbsoluteY(caret) - dy; //top of caret
                                if (y > touchY && cp > cpMin && cp != cpMax) {
                                    cpMax = cp;
                                    cp = Math.round((cp + cpMin) / 2);
                                }
                                else if (y < touchY - yRow && cp < cpMax && cp != cpMin) {
                                    cpMin = cp;
                                    cp = Math.round((cp + cpMax) / 2);
                                }
                                else
                                    break;
                                target.setTextCaret(cp);
                            }
                            while (dom.Utils.getAbsoluteY(caret) - dy > touchY && cp > cpMin) {
                                target.setTextCaret(--cp);
                            }
                            while (dom.Utils.getAbsoluteY(caret) - dy < touchY - yRow && cp < cpMax) {
                                target.setTextCaret(++cp);
                            }
                        }
                        // Caret repositioning for horizontal scrolling of RTL text
                        // snapOrder - 'snaps' the touch location in a manner corresponding to the 'ltr' vs 'rtl' orientation.
                        // Think of it as performing a floor() function, but the floor depends on the origin's direction.
                        var snapOrder;
                        if (target.dir == 'rtl') { // I would use arrow functions, but IE doesn't like 'em.
                            snapOrder = function (a, b) {
                                return a < b;
                            };
                        }
                        else {
                            snapOrder = function (a, b) {
                                return a > b;
                            };
                        }
                        for (iLoop = 0; iLoop < 16; iLoop++) {
                            x = dom.Utils.getAbsoluteX(caret); //left of caret
                            if (snapOrder(x, touchX) && cp > cpMin && cp != cpMax) {
                                cpMax = cp;
                                cp = Math.round((cp + cpMin) / 2);
                            }
                            else if (!snapOrder(x, touchX) && cp < cpMax && cp != cpMin) {
                                cpMin = cp;
                                cp = Math.round((cp + cpMax) / 2);
                            }
                            else {
                                break;
                            }
                            target.setTextCaret(cp);
                        }
                        while (snapOrder(dom.Utils.getAbsoluteX(caret), touchX) && cp > cpMin) {
                            target.setTextCaret(--cp);
                        }
                        while (!snapOrder(dom.Utils.getAbsoluteX(caret), touchX) && cp < cpMax) {
                            target.setTextCaret(++cp);
                        }
                    }
                    /**
                     * This event will trigger before keymanweb.setBlur is triggered.  Now that we're allowing independent keyboard settings
                     * for controls, we have to act here to preserve the outgoing control's keyboard settings.
                     *
                     * If we 'just activated' the KeymanWeb UI, we need to save the new keyboard change as appropriate.
                     */
                    if (this.keyman.domManager.lastActiveElement) {
                        this._BlurKeyboardSettings(this.keyman.domManager.lastActiveElement);
                    }
                    // With the attachment API update, we now directly track the old legacy control behavior.
                    this.keyman.domManager.lastActiveElement = target;
                    target.showCaret();
                    /**
                     * If we 'just activated' the KeymanWeb UI, we need to save the new keyboard change as appropriate.
                     * If not, we need to activate the control's preferred keyboard.
                     */
                    this._FocusKeyboardSettings(target, false);
                    // Always do the common focus stuff, instantly returning if we're in an editable iframe.
                    // This parallels the if-statement in _ControlFocus - it may be needed as this if-statement in the future,
                    // despite its present redundancy.
                    if (this._CommonFocusHelper(target)) {
                        return;
                    }
                };
                /**
                 * Close OSK and remove simulated caret on losing focus
                 */
                DOMTouchHandlers.prototype.cancelInput = function () {
                    this.keyman.domManager.activeElement = null;
                    this.keyman.domManager.lastActiveElement = null;
                    this.keyman.osk.hideNow();
                };
                ;
                DOMTouchHandlers.prototype.executeBlur = function (elem) {
                    this.keyman['resetContext']();
                    if (elem) {
                        this.doChangeEvent(elem);
                        if (elem.nodeName != 'DIV' || elem.className.indexOf('keymanweb-input') == -1) {
                            this.cancelInput();
                            return;
                        }
                    }
                    //Hide the OSK
                    if (!DOMEventHandlers.states.focusing && !this.keyman.uiManager.justActivated) {
                        this.cancelInput();
                    }
                };
                /**
                 * Display and position a scrollbar in the input field if needed
                 *
                 * @param   {Object}  e   input DIV element (copy of INPUT or TEXTAREA)
                 */
                DOMTouchHandlers.prototype.setScrollBar = function (e) {
                    // Display the scrollbar if necessary.  Added TEXTAREA condition to correct rotation issue KMW-5.  Fixed for 310 beta.
                    var scroller = e.childNodes[0], sbs = e.childNodes[1].style;
                    if ((scroller.offsetWidth > e.offsetWidth || scroller.offsetLeft < 0) && (e.base.nodeName != 'TEXTAREA')) {
                        sbs.height = '4px';
                        sbs.width = 100 * (e.offsetWidth / scroller.offsetWidth) + '%';
                        sbs.left = 100 * (-scroller.offsetLeft / scroller.offsetWidth) + '%';
                        sbs.top = '0';
                        sbs.visibility = 'visible';
                    }
                    else if (scroller.offsetHeight > e.offsetHeight || scroller.offsetTop < 0) {
                        sbs.width = '4px';
                        sbs.height = 100 * (e.offsetHeight / scroller.offsetHeight) + '%';
                        sbs.top = 100 * (-scroller.offsetTop / scroller.offsetHeight) + '%';
                        sbs.left = '0';
                        sbs.visibility = 'visible';
                    }
                    else {
                        sbs.visibility = 'hidden';
                    }
                };
                /**
                 * Scroll the document body vertically to bring the active input into view
                 *
                 * @param       {Object}      e        simulated input field object being focussed
                 */
                DOMTouchHandlers.prototype.scrollBody = function (e) {
                    var osk = this.keyman.osk;
                    if (!e || e.className == null || e.className.indexOf('keymanweb-input') < 0 || !osk) {
                        return;
                    }
                    // Get the absolute position of the caret
                    var s2 = e.firstChild.childNodes[1], y = dom.Utils.getAbsoluteY(s2), t = window.pageYOffset, dy = 0;
                    if (y < t) {
                        dy = y - t;
                    }
                    else {
                        dy = y - t - (window.innerHeight - osk._Box.offsetHeight - s2.offsetHeight - 2);
                        if (dy < 0)
                            dy = 0;
                    }
                    // Hide OSK, then scroll, then re-anchor OSK with absolute position (on end of scroll event)
                    if (dy != 0) {
                        window.scrollTo(0, dy + window.pageYOffset);
                    }
                };
                return DOMTouchHandlers;
            }(DOMEventHandlers));
            dom.DOMTouchHandlers = DOMTouchHandlers;
        })(dom = keyman_5.dom || (keyman_5.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            // Basically, these are shorthand imports, only viewable within this file.
            var DefaultOutput = keyman.text.DefaultOutput;
            var Codes = keyman.text.Codes;
            // Now for some classic JS method "extension".
            var coreIsCommand = DefaultOutput.isCommand;
            var coreApplyCommand = DefaultOutput.applyCommand;
            DefaultOutput.isCommand = function (Lkc) {
                var code = DefaultOutput.codeForEvent(Lkc);
                switch (code) {
                    case Codes.keyCodes['K_TAB']:
                    case Codes.keyCodes['K_TABBACK']:
                    case Codes.keyCodes['K_TABFWD']:
                        return true;
                    default:
                        return coreIsCommand(Lkc);
                }
            };
            /**
             * applyCommand - used when a RuleBehavior represents a non-text "command" within the Engine.
             */
            DefaultOutput.applyCommand = function (Lkc, outputTarget) {
                var code = DefaultOutput.codeForEvent(Lkc);
                var domManager = com.keyman.singleton.domManager;
                var hideCaret;
                if (outputTarget instanceof com.keyman.dom.targets.TouchAlias) {
                    hideCaret = function () {
                        var target = outputTarget;
                        target.root.hideCaret();
                    };
                }
                else {
                    hideCaret = function () { };
                }
                switch (code) {
                    case Codes.keyCodes['K_TAB']:
                        hideCaret();
                        domManager.moveToNext((Lkc.Lmodifiers & keyman.text.Codes.modifierCodes['SHIFT']) != 0);
                        break;
                    case Codes.keyCodes['K_TABBACK']:
                        hideCaret();
                        domManager.moveToNext(true);
                        break;
                    case Codes.keyCodes['K_TABFWD']:
                        hideCaret();
                        domManager.moveToNext(false);
                        break;
                }
                coreApplyCommand(Lkc, outputTarget);
            };
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_6) {
        var dom;
        (function (dom) {
            keyman_6.text.prediction.LanguageProcessor.prototype.canEnable = function () {
                var keyman = com.keyman.singleton;
                if (keyman.util.getIEVersion() == 10) {
                    console.warn("KeymanWeb cannot properly initialize its WebWorker in this version of IE.");
                    return false;
                }
                else if (keyman.util.getIEVersion() < 10) {
                    console.warn("WebWorkers are not supported in this version of IE.");
                    return false;
                }
                else if (typeof Worker != 'function') {
                    console.warn("WebWorkers are not supported by this browser.");
                    return false;
                }
                return true;
            };
            var headlessRuleBehaviorFinalize = keyman_6.text.RuleBehavior.prototype.finalize;
            keyman_6.text.RuleBehavior.prototype.finalize = function (processor, outputTarget) {
                var keyman = com.keyman.singleton;
                // Execute the standard baseline stuff first.
                headlessRuleBehaviorFinalize.call(this, processor);
                // If the transform isn't empty, we've changed text - which should produce a 'changed' event in the DOM.
                var ruleTransform = this.transcription.transform;
                if (ruleTransform.insert != "" || ruleTransform.deleteLeft > 0 || ruleTransform.deleteRight > 0) {
                    if (outputTarget instanceof dom.targets.OutputTarget && outputTarget.getElement() == keyman.domManager.activeElement) {
                        dom.DOMEventHandlers.states.changed = true;
                    }
                }
                // KMEA and KMEI (embedded mode) use direct insertion of the character string
                if (keyman.isEmbedded) {
                    // A special embedded callback used to setup direct callbacks to app-native code.
                    keyman['oninserttext'](ruleTransform.deleteLeft, ruleTransform.insert, ruleTransform.deleteRight);
                    if (outputTarget instanceof dom.targets.OutputTarget) {
                        keyman.refreshElementContent(outputTarget.getElement());
                    }
                }
            };
        })(dom = keyman_6.dom || (keyman_6.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_7) {
        var dom;
        (function (dom) {
            var targets;
            (function (targets) {
                var OutputTarget = /** @class */ (function (_super) {
                    __extends(OutputTarget, _super);
                    function OutputTarget() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    OutputTarget.prototype.focus = function () {
                        var ele = this.getElement();
                        if (ele.focus) {
                            ele.focus();
                        }
                    };
                    /**
                     * A helper method for doInputEvent; creates a simple common event and default dispatching.
                     * @param elem
                     */
                    OutputTarget.prototype.dispatchInputEventOn = function (elem) {
                        var event;
                        // `undefined` in Edge and IE.
                        if (window['InputEvent']) { // can't condition on the type directly; TS optimizes that out.
                            event = new InputEvent('input', { "bubbles": true, "cancelable": false });
                        }
                        if (elem && event) {
                            elem.dispatchEvent(event);
                        }
                    };
                    OutputTarget.prototype.apply = function (transform) {
                        _super.prototype.apply.call(this, transform);
                        // This class has non-integrated unit tests in which the `singleton` object doesn't exist.
                        // Thus, we need to test for this case.
                        var keyman = com.keyman['singleton'];
                        // Signal the necessary text changes to the embedding app, if it exists.
                        if (keyman && keyman['oninserttext'] && keyman.isEmbedded) {
                            keyman['oninserttext'](transform.deleteLeft, transform.insert, transform.deleteRight);
                        }
                    };
                    return OutputTarget;
                }(keyman_7.text.OutputTarget));
                targets.OutputTarget = OutputTarget;
            })(targets = dom.targets || (dom.targets = {}));
        })(dom = keyman_7.dom || (keyman_7.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            var targets;
            (function (targets) {
                var Input = /** @class */ (function (_super) {
                    __extends(Input, _super);
                    function Input(ele) {
                        var _this = _super.call(this) || this;
                        _this.root = ele;
                        _this._cachedSelectionStart = -1;
                        return _this;
                    }
                    Object.defineProperty(Input.prototype, "isSynthetic", {
                        get: function () {
                            return false;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Input.prototype.getElement = function () {
                        return this.root;
                    };
                    Input.prototype.clearSelection = function () {
                        // Processes our codepoint-based variants of selectionStart and selectionEnd.
                        var caret = this.getCaret();
                        this.root.value = this.root.value._kmwSubstring(0, caret) + this.root.value._kmwSubstring(this.processedSelectionEnd); //I3319
                        this.setCaret(caret);
                    };
                    Input.prototype.hasSelection = function () {
                        return true;
                    };
                    Input.prototype.invalidateSelection = function () {
                        // Since .selectionStart will never return this value, we use it to indicate
                        // the need to refresh our processed indices.
                        this._cachedSelectionStart = -1;
                    };
                    Input.prototype.getCaret = function () {
                        if (this.root.selectionStart == this._cachedSelectionStart) {
                            return this.processedSelectionStart;
                        }
                        else {
                            this._cachedSelectionStart = this.root.selectionStart; // KMW-1
                            this.processedSelectionStart = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionStart); // I3319
                            this.processedSelectionEnd = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionEnd); // I3319
                            return this.processedSelectionStart;
                        }
                    };
                    Input.prototype.getDeadkeyCaret = function () {
                        return this.getCaret();
                    };
                    Input.prototype.setCaret = function (caret) {
                        this.setSelection(caret, caret);
                    };
                    Input.prototype.setSelection = function (start, end) {
                        var domStart = this.root.value._kmwCodePointToCodeUnit(start);
                        var domEnd = this.root.value._kmwCodePointToCodeUnit(end);
                        this.root.setSelectionRange(domStart, domEnd);
                        this.processedSelectionStart = start;
                        this.processedSelectionEnd = end;
                        keyman.dom.Utils.forceScroll(this.root);
                    };
                    Input.prototype.getTextBeforeCaret = function () {
                        return this.getText()._kmwSubstring(0, this.getCaret());
                    };
                    Input.prototype.setTextBeforeCaret = function (text) {
                        this.getCaret();
                        var newCaret = text._kmwLength();
                        this.root.value = text + this.getText()._kmwSubstring(this.processedSelectionStart);
                        this.setCaret(newCaret);
                    };
                    Input.prototype.setTextAfterCaret = function (s) {
                        var c = this.getCaret();
                        this.root.value = this.getTextBeforeCaret() + s;
                        this.setCaret(c);
                    };
                    Input.prototype.getTextAfterCaret = function () {
                        this.getCaret();
                        return this.getText()._kmwSubstring(this.processedSelectionEnd);
                    };
                    Input.prototype.getText = function () {
                        return this.root.value;
                    };
                    Input.prototype.deleteCharsBeforeCaret = function (dn) {
                        if (dn > 0) {
                            var curText = this.getTextBeforeCaret();
                            var caret = this.getCaret();
                            if (dn > caret) {
                                dn = caret;
                            }
                            this.adjustDeadkeys(-dn);
                            this.setTextBeforeCaret(curText.kmwSubstring(0, this.getCaret() - dn));
                            this.setCaret(caret - dn);
                        }
                    };
                    Input.prototype.insertTextBeforeCaret = function (s) {
                        if (!s) {
                            return;
                        }
                        var caret = this.getCaret();
                        var front = this.getTextBeforeCaret();
                        var back = this.getText()._kmwSubstring(this.processedSelectionStart);
                        this.adjustDeadkeys(s._kmwLength());
                        this.root.value = front + s + back;
                        this.setCaret(caret + s._kmwLength());
                    };
                    Input.prototype.handleNewlineAtCaret = function () {
                        Input.newlineHandler(this.root);
                    };
                    Input.newlineHandler = function (inputEle) {
                        // Can't occur for Mocks - just Input and TouchAlias types.
                        if (inputEle && (inputEle.type == 'search' || inputEle.type == 'submit')) {
                            inputEle.disabled = false;
                            inputEle.form.submit();
                        }
                        else {
                            // Allows compiling this separately from the main body of KMW.
                            // TODO:  rework class to accept a class-static 'callback' from the DOM module that this can call.
                            //        Would eliminate the need for this 'static' reference. 
                            //        Only strongly matters once we better modularize KMW, with web-dom vs web-dom-targets vs web-core, etc.
                            if (com.keyman["singleton"]) {
                                com.keyman["singleton"].domManager.moveToNext(false);
                            }
                        }
                    };
                    Input.prototype.doInputEvent = function () {
                        this.dispatchInputEventOn(this.root);
                    };
                    return Input;
                }(targets.OutputTarget));
                targets.Input = Input;
            })(targets = dom.targets || (dom.targets = {}));
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            var targets;
            (function (targets) {
                var TextArea = /** @class */ (function (_super) {
                    __extends(TextArea, _super);
                    function TextArea(ele) {
                        var _this = _super.call(this) || this;
                        _this.root = ele;
                        _this._cachedSelectionStart = -1;
                        return _this;
                    }
                    Object.defineProperty(TextArea.prototype, "isSynthetic", {
                        get: function () {
                            return false;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    TextArea.prototype.getElement = function () {
                        return this.root;
                    };
                    TextArea.prototype.clearSelection = function () {
                        // Processes our codepoint-based variants of selectionStart and selectionEnd.
                        var caret = this.getCaret();
                        this.root.value = this.root.value._kmwSubstring(0, caret) + this.root.value._kmwSubstring(this.processedSelectionEnd); //I3319
                        this.setCaret(caret);
                    };
                    TextArea.prototype.hasSelection = function () {
                        return true;
                    };
                    TextArea.prototype.invalidateSelection = function () {
                        // Since .selectionStart will never return this value, we use it to indicate
                        // the need to refresh our processed indices.
                        this._cachedSelectionStart = -1;
                    };
                    TextArea.prototype.getCaret = function () {
                        if (this.root.selectionStart == this._cachedSelectionStart) {
                            return this.processedSelectionStart;
                        }
                        else {
                            this._cachedSelectionStart = this.root.selectionStart; // KMW-1
                            this.processedSelectionStart = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionStart); // I3319
                            this.processedSelectionEnd = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionEnd); // I3319
                            return this.processedSelectionStart;
                        }
                    };
                    TextArea.prototype.getDeadkeyCaret = function () {
                        return this.getCaret();
                    };
                    TextArea.prototype.setCaret = function (caret) {
                        this.setSelection(caret, caret);
                    };
                    TextArea.prototype.setSelection = function (start, end) {
                        var domStart = this.root.value._kmwCodePointToCodeUnit(start);
                        var domEnd = this.root.value._kmwCodePointToCodeUnit(end);
                        this.root.setSelectionRange(domStart, domEnd);
                        this.processedSelectionStart = start;
                        this.processedSelectionEnd = end;
                        dom.Utils.forceScroll(this.root);
                    };
                    TextArea.prototype.getTextBeforeCaret = function () {
                        return this.getText()._kmwSubstring(0, this.getCaret());
                    };
                    TextArea.prototype.setTextBeforeCaret = function (text) {
                        this.getCaret();
                        var newCaret = text._kmwLength();
                        this.root.value = text + this.getText()._kmwSubstring(this.processedSelectionStart);
                        this.setCaret(newCaret);
                    };
                    TextArea.prototype.setTextAfterCaret = function (s) {
                        var c = this.getCaret();
                        this.root.value = this.getTextBeforeCaret() + s;
                        this.setCaret(c);
                    };
                    TextArea.prototype.getTextAfterCaret = function () {
                        this.getCaret();
                        return this.getText()._kmwSubstring(this.processedSelectionEnd);
                    };
                    TextArea.prototype.getText = function () {
                        return this.root.value;
                    };
                    TextArea.prototype.deleteCharsBeforeCaret = function (dn) {
                        if (dn > 0) {
                            var curText = this.getTextBeforeCaret();
                            var caret = this.getCaret();
                            if (dn > caret) {
                                dn = caret;
                            }
                            this.adjustDeadkeys(-dn);
                            this.setTextBeforeCaret(curText.kmwSubstring(0, this.getCaret() - dn));
                            this.setCaret(caret - dn);
                        }
                    };
                    TextArea.prototype.insertTextBeforeCaret = function (s) {
                        if (!s) {
                            return;
                        }
                        var caret = this.getCaret();
                        var front = this.getTextBeforeCaret();
                        var back = this.getText()._kmwSubstring(this.processedSelectionStart);
                        this.adjustDeadkeys(s._kmwLength());
                        this.root.value = front + s + back;
                        this.setCaret(caret + s._kmwLength());
                    };
                    TextArea.prototype.handleNewlineAtCaret = function () {
                        this.insertTextBeforeCaret('\n');
                    };
                    TextArea.prototype.doInputEvent = function () {
                        this.dispatchInputEventOn(this.root);
                    };
                    return TextArea;
                }(targets.OutputTarget));
                targets.TextArea = TextArea;
            })(targets = dom.targets || (dom.targets = {}));
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            var targets;
            (function (targets) {
                var SelectionCaret = /** @class */ (function () {
                    function SelectionCaret(node, offset) {
                        this.node = node;
                        this.offset = offset;
                    }
                    return SelectionCaret;
                }());
                var SelectionRange = /** @class */ (function () {
                    function SelectionRange(start, end) {
                        this.start = start;
                        this.end = end;
                    }
                    return SelectionRange;
                }());
                var ContentEditable = /** @class */ (function (_super) {
                    __extends(ContentEditable, _super);
                    function ContentEditable(ele) {
                        var _this = this;
                        if (ele.isContentEditable) {
                            _this = _super.call(this) || this;
                            _this.root = ele;
                        }
                        else {
                            throw "Specified element is not already content-editable!";
                        }
                        return _this;
                    }
                    Object.defineProperty(ContentEditable.prototype, "isSynthetic", {
                        get: function () {
                            return false;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ContentEditable.prototype.getElement = function () {
                        return this.root;
                    };
                    ContentEditable.prototype.hasSelection = function () {
                        var Lsel = this.root.ownerDocument.getSelection();
                        // We can't completely rely on this.root.contains because of a weird IE 11 bug.
                        // Apparently, the text node contains the HTMLElement?
                        var ie11ParentChild = function (parent, child) {
                            // It's explicitly a text node bug.
                            if (child.nodeType != 3) {
                                return null;
                            }
                            var code = child.compareDocumentPosition(parent);
                            return (code & 8) != 0; // Yep.  Text node contains its root.
                        };
                        if (this.root != Lsel.anchorNode && !this.root.contains(Lsel.anchorNode) && !ie11ParentChild(this.root, Lsel.anchorNode)) {
                            return false;
                        }
                        if (this.root != Lsel.focusNode && !this.root.contains(Lsel.focusNode) && !ie11ParentChild(this.root, Lsel.anchorNode)) {
                            return false;
                        }
                        return true;
                    };
                    ContentEditable.prototype.clearSelection = function () {
                        if (this.hasSelection()) {
                            var Lsel = this.root.ownerDocument.getSelection();
                            if (!Lsel.isCollapsed) {
                                Lsel.deleteFromDocument(); // I2134, I2192
                            }
                        }
                        else {
                            console.warn("Attempted to clear an unowned Selection!");
                        }
                    };
                    ContentEditable.prototype.invalidateSelection = function () {
                    };
                    ContentEditable.prototype.getCarets = function () {
                        var Lsel = this.root.ownerDocument.getSelection();
                        var code = Lsel.anchorNode.compareDocumentPosition(Lsel.focusNode);
                        if (Lsel.isCollapsed) {
                            var caret = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);
                            return new SelectionRange(caret, caret);
                        }
                        else {
                            var anchor = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);
                            var focus_1 = new SelectionCaret(Lsel.focusNode, Lsel.focusOffset);
                            if (anchor.node == focus_1.node) {
                                code = (focus_1.offset - anchor.offset > 0) ? 2 : 4;
                            }
                            if (code & 2) {
                                return new SelectionRange(anchor, focus_1);
                            }
                            else { // Default
                                // can test against code & 4 to ensure Focus is before anchor, though.
                                return new SelectionRange(focus_1, anchor);
                            }
                        }
                    };
                    ContentEditable.prototype.getDeadkeyCaret = function () {
                        return this.getTextBeforeCaret().kmwLength();
                    };
                    ContentEditable.prototype.getTextBeforeCaret = function () {
                        if (!this.hasSelection()) {
                            return;
                        }
                        var caret = this.getCarets().start;
                        if (caret.node.nodeType != 3) {
                            return ''; // Must be a text node to provide a context.
                        }
                        return caret.node.textContent.substr(0, caret.offset);
                    };
                    ContentEditable.prototype.getTextAfterCaret = function () {
                        if (!this.hasSelection()) {
                            return;
                        }
                        var caret = this.getCarets().end;
                        if (caret.node.nodeType != 3) {
                            return ''; // Must be a text node to provide a context.
                        }
                        return caret.node.textContent.substr(caret.offset);
                    };
                    ContentEditable.prototype.getText = function () {
                        return this.root.innerText;
                    };
                    ContentEditable.prototype.deleteCharsBeforeCaret = function (dn) {
                        if (!this.hasSelection() || dn <= 0) {
                            return;
                        }
                        var start = this.getCarets().start;
                        // Bounds-check on the number of chars to delete.
                        if (dn > start.offset) {
                            dn = start.offset;
                        }
                        if (start.node.nodeType != 3) {
                            console.warn("Deletion of characters requested without available context!");
                            return; // No context to delete characters from.
                        }
                        var range = this.root.ownerDocument.createRange();
                        var dnOffset = start.offset - start.node.nodeValue.substr(0, start.offset)._kmwSubstr(-dn).length;
                        range.setStart(start.node, dnOffset);
                        range.setEnd(start.node, start.offset);
                        this.adjustDeadkeys(-dn);
                        range.deleteContents();
                        // No need to reposition the caret - the DOM will auto-move the selection accordingly, since
                        // we didn't use the selection to delete anything.
                    };
                    ContentEditable.prototype.insertTextBeforeCaret = function (s) {
                        if (!this.hasSelection()) {
                            return;
                        }
                        var start = this.getCarets().start;
                        var delta = s._kmwLength();
                        var Lsel = this.root.ownerDocument.getSelection();
                        if (delta == 0) {
                            return;
                        }
                        this.adjustDeadkeys(delta);
                        // While Selection.extend() is really nice for this, IE doesn't support it whatsoever.
                        // However, IE (11, at least) DOES support setting selections via ranges, so we can still
                        // manage the caret properly.
                        var finalCaret = this.root.ownerDocument.createRange();
                        if (start.node.nodeType == 3) {
                            var textStart = start.node;
                            textStart.insertData(start.offset, s);
                            finalCaret.setStart(textStart, start.offset + s.length);
                        }
                        else {
                            // Create a new text node - empty control
                            var n = start.node.ownerDocument.createTextNode(s);
                            var range = this.root.ownerDocument.createRange();
                            range.setStart(start.node, start.offset);
                            range.collapse(true);
                            range.insertNode(n);
                            finalCaret.setStart(n, s.length);
                        }
                        finalCaret.collapse(true);
                        Lsel.removeAllRanges();
                        try {
                            Lsel.addRange(finalCaret);
                        }
                        catch (e) {
                            // Chrome (through 4.0 at least) throws an exception because it has not synchronised its content with the selection.
                            // scrollIntoView synchronises the content for selection
                            start.node.parentElement.scrollIntoView();
                            Lsel.addRange(finalCaret);
                        }
                        Lsel.collapseToEnd();
                    };
                    ContentEditable.prototype.handleNewlineAtCaret = function () {
                        // TODO:  Implement.
                        //
                        // As it turns out, we never had an implementation for handling newline inputs from the OSK for this element type.
                        // At least this way, it's more explicit.
                        //
                        // Note:  consult "// Create a new text node - empty control" case in insertTextBeforeCaret - 
                        // this helps to handle the browser-default implementation of newline handling.  In particular,
                        // entry of the first character after a newline.
                        //
                        // If raw newlines are entered into the HTML, but as with usual HTML, they're interpreted as excess whitespace and
                        // have no effect.  We need to add DOM elements for a functional newline.
                    };
                    ContentEditable.prototype.setTextAfterCaret = function (s) {
                        if (!this.hasSelection()) {
                            return;
                        }
                        var caret = this.getCarets().end;
                        var delta = s._kmwLength();
                        var Lsel = this.root.ownerDocument.getSelection();
                        if (delta == 0) {
                            return;
                        }
                        // This is designed explicitly for use in direct-setting operations; deadkeys
                        // will be handled after this method.
                        if (caret.node.nodeType == 3) {
                            var textStart = caret.node;
                            textStart.replaceData(caret.offset, textStart.length, s);
                        }
                        else {
                            // Create a new text node - empty control
                            var n = caret.node.ownerDocument.createTextNode(s);
                            var range = this.root.ownerDocument.createRange();
                            range.setStart(caret.node, caret.offset);
                            range.collapse(true);
                            range.insertNode(n);
                        }
                    };
                    ContentEditable.prototype.doInputEvent = function () {
                        this.dispatchInputEventOn(this.root);
                    };
                    return ContentEditable;
                }(targets.OutputTarget));
                targets.ContentEditable = ContentEditable;
            })(targets = dom.targets || (dom.targets = {}));
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            var targets;
            (function (targets) {
                var SelectionCaret = /** @class */ (function () {
                    function SelectionCaret(node, offset) {
                        this.node = node;
                        this.offset = offset;
                    }
                    return SelectionCaret;
                }());
                var SelectionRange = /** @class */ (function () {
                    function SelectionRange(start, end) {
                        this.start = start;
                        this.end = end;
                    }
                    return SelectionRange;
                }());
                var StyleCommand = /** @class */ (function () {
                    function StyleCommand(c, s) {
                        this.cmd = c;
                        this.stateType = s;
                    }
                    return StyleCommand;
                }());
                var DesignIFrame = /** @class */ (function (_super) {
                    __extends(DesignIFrame, _super);
                    function DesignIFrame(ele) {
                        var _this = _super.call(this) || this;
                        _this.root = ele;
                        if (ele.contentWindow && ele.contentWindow.document && ele.contentWindow.document.designMode == 'on') {
                            _this.doc = ele.contentWindow.document;
                            _this.docRoot = ele.contentWindow.document.documentElement;
                        }
                        else {
                            throw "Specified IFrame is not in design-mode!";
                        }
                        return _this;
                    }
                    Object.defineProperty(DesignIFrame.prototype, "isSynthetic", {
                        get: function () {
                            return false;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    DesignIFrame.prototype.getElement = function () {
                        return this.root;
                    };
                    DesignIFrame.prototype.focus = function () {
                        this.doc.defaultView.focus(); // I3363 (Build 301)
                    };
                    DesignIFrame.prototype.hasSelection = function () {
                        var Lsel = this.doc.getSelection();
                        var outerSel = document.getSelection();
                        // If the outer doc's selection matches, we're active.
                        if (outerSel.anchorNode == Lsel.anchorNode && outerSel.focusNode == Lsel.focusNode) {
                            return true;
                        }
                        else {
                            // Problem:  for testing, we can't enforce the ideal (ie: first) condition.
                            // Technically, the IFrame _will_ always have its own internal selection, though... so... it kinda works?
                            return true;
                        }
                    };
                    DesignIFrame.prototype.clearSelection = function () {
                        if (this.hasSelection()) {
                            var Lsel = this.doc.getSelection();
                            if (!Lsel.isCollapsed) {
                                Lsel.deleteFromDocument(); // I2134, I2192
                            }
                        }
                        else {
                            console.warn("Attempted to clear an unowned Selection!");
                        }
                    };
                    DesignIFrame.prototype.invalidateSelection = function () {
                    };
                    DesignIFrame.prototype.getCarets = function () {
                        var Lsel = this.doc.getSelection();
                        var code = Lsel.anchorNode.compareDocumentPosition(Lsel.focusNode);
                        if (Lsel.isCollapsed) {
                            var caret = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);
                            return new SelectionRange(caret, caret);
                        }
                        else {
                            var anchor = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);
                            var focus_2 = new SelectionCaret(Lsel.focusNode, Lsel.focusOffset);
                            if (anchor.node == focus_2.node) {
                                code = (focus_2.offset - anchor.offset > 0) ? 2 : 4;
                            }
                            if (code & 2) {
                                return new SelectionRange(anchor, focus_2);
                            }
                            else { // Default
                                // can test against code & 4 to ensure Focus is before anchor, though.
                                return new SelectionRange(focus_2, anchor);
                            }
                        }
                    };
                    DesignIFrame.prototype.getDeadkeyCaret = function () {
                        return this.getTextBeforeCaret().kmwLength();
                    };
                    DesignIFrame.prototype.getTextBeforeCaret = function () {
                        if (!this.hasSelection()) {
                            return;
                        }
                        var caret = this.getCarets().start;
                        if (caret.node.nodeType != 3) {
                            return ''; // Must be a text node to provide a context.
                        }
                        return caret.node.textContent.substr(0, caret.offset);
                    };
                    DesignIFrame.prototype.getTextAfterCaret = function () {
                        if (!this.hasSelection()) {
                            return;
                        }
                        var caret = this.getCarets().end;
                        if (caret.node.nodeType != 3) {
                            return ''; // Must be a text node to provide a context.
                        }
                        return caret.node.textContent.substr(caret.offset);
                    };
                    DesignIFrame.prototype.getText = function () {
                        return this.docRoot.innerText;
                    };
                    DesignIFrame.prototype.deleteCharsBeforeCaret = function (dn) {
                        if (!this.hasSelection() || dn <= 0) {
                            return;
                        }
                        var start = this.getCarets().start;
                        // Bounds-check on the number of chars to delete.
                        if (dn > start.offset) {
                            dn = start.offset;
                        }
                        if (start.node.nodeType != 3) {
                            console.warn("Deletion of characters requested without available context!");
                            return; // No context to delete characters from.
                        }
                        var range = this.doc.createRange();
                        var dnOffset = start.offset - start.node.nodeValue.substr(0, start.offset)._kmwSubstr(-dn).length;
                        range.setStart(start.node, dnOffset);
                        range.setEnd(start.node, start.offset);
                        this.adjustDeadkeys(-dn);
                        range.deleteContents();
                        // No need to reposition the caret - the DOM will auto-move the selection accordingly, since
                        // we didn't use the selection to delete anything.
                    };
                    DesignIFrame.prototype.insertTextBeforeCaret = function (s) {
                        if (!this.hasSelection()) {
                            return;
                        }
                        var start = this.getCarets().start;
                        var delta = s._kmwLength();
                        var Lsel = this.doc.getSelection();
                        if (delta == 0) {
                            return;
                        }
                        this.adjustDeadkeys(delta);
                        // While Selection.extend() is really nice for this, IE doesn't support it whatsoever.
                        // However, IE (11, at least) DOES support setting selections via ranges, so we can still
                        // manage the caret properly.
                        var finalCaret = this.root.ownerDocument.createRange();
                        if (start.node.nodeType == 3) {
                            var textStart = start.node;
                            textStart.insertData(start.offset, s);
                            finalCaret.setStart(textStart, start.offset + s.length);
                        }
                        else {
                            // Create a new text node - empty control
                            var n = this.doc.createTextNode(s);
                            var range = this.doc.createRange();
                            range.setStart(start.node, start.offset);
                            range.collapse(true);
                            range.insertNode(n);
                            finalCaret.setStart(n, s.length);
                        }
                        finalCaret.collapse(true);
                        Lsel.removeAllRanges();
                        try {
                            Lsel.addRange(finalCaret);
                        }
                        catch (e) {
                            // Chrome (through 4.0 at least) throws an exception because it has not synchronised its content with the selection.
                            // scrollIntoView synchronises the content for selection
                            start.node.parentElement.scrollIntoView();
                            Lsel.addRange(finalCaret);
                        }
                        Lsel.collapseToEnd();
                    };
                    DesignIFrame.prototype.handleNewlineAtCaret = function () {
                        // TODO:  Implement.
                        //
                        // As it turns out, we never had an implementation for handling newline inputs from the OSK for this element type.
                        // At least this way, it's more explicit.
                        //
                        // Note:  consult "// Create a new text node - empty control" case in insertTextBeforeCaret - 
                        // this helps to handle the browser-default implementation of newline handling.  In particular,
                        // entry of the first character after a newline.
                        //
                        // If raw newlines are entered into the HTML, but as with usual HTML, they're interpreted as excess whitespace and
                        // have no effect.  We need to add DOM elements for a functional newline.
                    };
                    DesignIFrame.prototype.setTextAfterCaret = function (s) {
                        if (!this.hasSelection()) {
                            return;
                        }
                        var caret = this.getCarets().end;
                        var delta = s._kmwLength();
                        var Lsel = this.doc.getSelection();
                        if (delta == 0) {
                            return;
                        }
                        // This is designed explicitly for use in direct-setting operations; deadkeys
                        // will be handled after this method.
                        if (caret.node.nodeType == 3) {
                            var textStart = caret.node;
                            textStart.replaceData(caret.offset, textStart.length, s);
                        }
                        else {
                            // Create a new text node - empty control
                            var n = caret.node.ownerDocument.createTextNode(s);
                            var range = this.root.ownerDocument.createRange();
                            range.setStart(caret.node, caret.offset);
                            range.collapse(true);
                            range.insertNode(n);
                        }
                    };
                    /**
                     * Function     saveProperties
                     * Scope        Private
                     * Description  Build and create list of styles that can be applied in iframes
                     */
                    DesignIFrame.prototype.saveProperties = function () {
                        // Formerly _CacheCommands.
                        var _CacheableCommands = [
                            new StyleCommand('backcolor', 1), new StyleCommand('fontname', 1), new StyleCommand('fontsize', 1),
                            new StyleCommand('forecolor', 1), new StyleCommand('bold', 0), new StyleCommand('italic', 0),
                            new StyleCommand('strikethrough', 0), new StyleCommand('subscript', 0),
                            new StyleCommand('superscript', 0), new StyleCommand('underline', 0)
                        ];
                        if (this.doc.defaultView) {
                            _CacheableCommands.push(new StyleCommand('hilitecolor', 1));
                        }
                        for (var n = 0; n < _CacheableCommands.length; n++) { // I1511 - array prototype extended
                            var cmd = _CacheableCommands[n];
                            //KeymanWeb._Debug('Command:'+_CacheableCommands[n][0]);
                            if (cmd.stateType == 1) {
                                cmd.cache = this.doc.queryCommandValue(cmd.cmd);
                            }
                            else {
                                cmd.cache = this.doc.queryCommandState(cmd.cmd);
                            }
                        }
                        this.commandCache = _CacheableCommands;
                    };
                    /**
                     * Function     restoreProperties
                     * Scope        Private
                     * Description  Restore styles in IFRAMEs (??)
                     */
                    DesignIFrame.prototype.restoreProperties = function (_func) {
                        // Formerly _CacheCommandsReset.
                        if (!this.commandCache) {
                            console.error("No command cache exists to restore!");
                        }
                        for (var n = 0; n < this.commandCache.length; n++) { // I1511 - array prototype extended
                            var cmd = this.commandCache[n];
                            //KeymanWeb._Debug('ResetCacheCommand:'+_CacheableCommands[n][0]+'='+_CacheableCommands[n][2]);
                            if (cmd.stateType == 1) {
                                if (this.doc.queryCommandValue(cmd.cmd) != cmd.cache) {
                                    if (_func) {
                                        _func();
                                    }
                                    this.doc.execCommand(cmd.cmd, false, cmd.cache);
                                }
                            }
                            else if (this.doc.queryCommandState(cmd.cmd) != cmd.cache) {
                                if (_func) {
                                    _func();
                                }
                                //KeymanWeb._Debug('executing command '+_CacheableCommand[n][0]);
                                this.doc.execCommand(cmd.cmd, false, null);
                            }
                        }
                    };
                    DesignIFrame.prototype.doInputEvent = function () {
                        // Root = the iframe, the outermost component and the one we were originally told to attach to.
                        this.dispatchInputEventOn(this.root);
                    };
                    return DesignIFrame;
                }(targets.OutputTarget));
                targets.DesignIFrame = DesignIFrame;
            })(targets = dom.targets || (dom.targets = {}));
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Defines the TouchAliasElement merged type.
/// <reference path="../touchAliasElement.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            var targets;
            (function (targets) {
                var TouchAlias = /** @class */ (function (_super) {
                    __extends(TouchAlias, _super);
                    function TouchAlias(e) {
                        var _this = _super.call(this) || this;
                        _this.root = e;
                        return _this;
                    }
                    TouchAlias.prototype.getElement = function () {
                        return this.root;
                    };
                    TouchAlias.prototype.clearSelection = function () {
                        // Touch-alias elements do not currently support selections.
                        return;
                    };
                    TouchAlias.prototype.invalidateSelection = function () {
                        // Touch-alias elements do not currently support selections.
                        return;
                    };
                    TouchAlias.prototype.hasSelection = function () {
                        // Always has an internal caret position.
                        return true;
                    };
                    TouchAlias.prototype.getDeadkeyCaret = function () {
                        return this.root.getTextCaret();
                    };
                    TouchAlias.prototype.getTextBeforeCaret = function () {
                        return this.root.getTextBeforeCaret();
                    };
                    TouchAlias.prototype.getTextAfterCaret = function () {
                        return this.root.getTextAfterCaret();
                    };
                    TouchAlias.prototype.getText = function () {
                        return this.root.getText();
                    };
                    TouchAlias.prototype.deleteCharsBeforeCaret = function (dn) {
                        if (dn > 0) {
                            var curText = this.getTextBeforeCaret();
                            if (this.getDeadkeyCaret() < dn) {
                                dn = this.getDeadkeyCaret();
                            }
                            this.adjustDeadkeys(-dn);
                            this.root.setTextBeforeCaret(curText.kmwSubstring(0, this.root.getTextCaret() - dn));
                        }
                    };
                    TouchAlias.prototype.insertTextBeforeCaret = function (s) {
                        this.adjustDeadkeys(s._kmwLength());
                        this.root.setTextBeforeCaret(this.root.getTextBeforeCaret() + s);
                    };
                    TouchAlias.prototype.handleNewlineAtCaret = function () {
                        // Insert new line in text area fields
                        if (this.root.base.nodeName == 'TEXTAREA') {
                            // As the TouchAliasElement was implemented long before OutputTargets, it already has
                            // built-in newline handling.
                            this.insertTextBeforeCaret('\n');
                        }
                        else if (dom.Utils.instanceof(this.root.base, "HTMLInputElement")) {
                            // HTMLInputElements do not permit newlines; they instead have DOM-specific behaviors.
                            this.root.hideCaret();
                            targets.Input.newlineHandler(this.root.base);
                        }
                        else {
                            console.warn("TouchAlias OutputTarget cannot output newlines for unexpected base element types!");
                        }
                    };
                    TouchAlias.prototype.setTextAfterCaret = function (s) {
                        this.root.setText(this.getTextBeforeCaret() + s, this.getTextBeforeCaret()._kmwLength());
                    };
                    TouchAlias.prototype.doInputEvent = function () {
                        // Dispatch the event on the aliased element, not the TouchAliasElement itself.
                        this.dispatchInputEventOn(this.root.base);
                    };
                    return TouchAlias;
                }(targets.OutputTarget));
                targets.TouchAlias = TouchAlias;
            })(targets = dom.targets || (dom.targets = {}));
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="outputTarget.ts" />
// Defines a basic HTMLInputElement wrapper.
///<reference path="input.ts" />
// Defines a basic HTMLTextAreaElement wrapper.
///<reference path="textarea.ts" />
// Defines a basic content-editable wrapper.
///<reference path="contentEditable.ts" />
// Defines a basic design-mode IFrame wrapper.
///<reference path="designIFrame.ts" />
// Defines a basic touch-alias element wrapper.
///<reference path="touchAlias.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            var targets;
            (function (targets) {
                function wrapElement(e) {
                    // Complex type scoping is implemented here so that kmwutils.ts is not a dependency for test compilations.
                    if (dom.Utils.instanceof(e, "HTMLInputElement")) {
                        return new targets.Input(e);
                    }
                    else if (dom.Utils.instanceof(e, "HTMLTextAreaElement")) {
                        return new targets.TextArea(e);
                    }
                    else if (dom.Utils.instanceof(e, "TouchAliasElement")) {
                        return new targets.TouchAlias(e);
                    }
                    else if (dom.Utils.instanceof(e, "HTMLIFrameElement")) {
                        var iframe = e;
                        if (iframe.contentWindow && iframe.contentWindow.document && iframe.contentWindow.document.designMode == "on") {
                            return new targets.DesignIFrame(iframe);
                        }
                        else if (e.isContentEditable) {
                            // Do content-editable <iframe>s make sense?
                            return new targets.ContentEditable(e);
                        }
                        else {
                            return null;
                        }
                    }
                    else if (e.isContentEditable) {
                        return new targets.ContentEditable(e);
                    }
                    return null;
                }
                targets.wrapElement = wrapElement;
            })(targets = dom.targets || (dom.targets = {}));
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var dom;
        (function (dom) {
            var VariableStoreCookieSerializer = /** @class */ (function () {
                function VariableStoreCookieSerializer() {
                }
                VariableStoreCookieSerializer.prototype.loadStore = function (keyboardID, storeName) {
                    var cName = 'KeymanWeb_' + keyboardID + '_Option_' + storeName;
                    var map = com.keyman.singleton.util.loadCookie(cName);
                    if (typeof map[storeName] != 'undefined') {
                        // Since it was stored in a cookie.
                        map[storeName] = decodeURIComponent(map[storeName]);
                    }
                    return map || {};
                };
                VariableStoreCookieSerializer.prototype.saveStore = function (keyboardID, storeName, storeMap) {
                    // The cookie entry includes the store name...
                    var cName = 'KeymanWeb_' + keyboardID + '_Option_' + storeName;
                    storeMap[storeName] = encodeURIComponent(storeMap[storeName]);
                    // And the lookup under that entry looks for the value under the store name, again.
                    com.keyman.singleton.util.saveCookie(cName, storeMap);
                };
                return VariableStoreCookieSerializer;
            }());
            dom.VariableStoreCookieSerializer = VariableStoreCookieSerializer;
        })(dom = keyman.dom || (keyman.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes KMW-added property declaration extensions for HTML elements.
/// <reference path="../kmwexthtml.ts" />
// References the base KMW object.
/// <reference path="../kmwbase.ts" />
// References DOM event handling interfaces and classes.
/// <reference path="domEventHandlers.ts" />
// References DOM-specific output handling.
/// <reference path="domDefaultOutput.ts" />
// References other DOM-specific web-core overrides.
/// <reference path="domOverrides.ts" />
// Defines the touch-alias element structure used for mobile devices.
/// <reference path="touchAliasElement.ts" />
// Defines per-element-type OutputTarget element wrapping.
/// <reference path="targets/wrapElement.ts" />
// Defines cookie-based variable store serialization
/// <reference path="variableStoreCookieSerializer.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_8) {
        var dom;
        (function (dom) {
            // Utility object used to handle beep (keyboard error response) operations.
            var BeepData = /** @class */ (function () {
                function BeepData(e) {
                    this.e = e;
                    this.c = e.style.backgroundColor;
                }
                BeepData.prototype.reset = function () {
                    this.e.style.backgroundColor = this.c;
                };
                return BeepData;
            }());
            /**
             * This class serves as the intermediary between KeymanWeb and any given web page's elements.
             */
            var DOMManager = /** @class */ (function () {
                function DOMManager(keyman) {
                    /**
                     * Tracks a list of event-listening elements.
                     *
                     * In touch mode, this should contain touch-aliasing DIVs, but will contain other elements in non-touch mode.
                     */
                    this.inputList = []; // List of simulated input divisions for touch-devices   I3363 (Build 301)
                    /**
                     * Tracks a visually-sorted list of elements that are KMW-enabled.
                     */
                    this.sortedInputs = []; // List of all INPUT and TEXTAREA elements ordered top to bottom, left to right
                    this._BeepObjects = []; // BeepObjects - maintains a list of active 'beep' visual feedback elements
                    this._BeepTimeout = 0; // BeepTimeout - a flag indicating if there is an active 'beep'.
                    // Set to 1 if there is an active 'beep', otherwise leave as '0'.
                    // Used for special touch-based page interactions re: element activation on touch devices.
                    this.deactivateOnScroll = false;
                    this.deactivateOnRelease = false;
                    /**
                     * Function     nonKMWTouchHandler
                     * Scope        Private
                     * Description  A handler for KMW-touch-disabled elements when operating on touch devices.
                     */
                    this.nonKMWTouchHandler = function (x) {
                        dom.DOMEventHandlers.states.focusing = false;
                        clearTimeout(dom.DOMEventHandlers.states.focusTimer);
                        this.keyman.osk.hideNow();
                    }.bind(this);
                    this._EnablementMutationObserverCore = function (mutations) {
                        for (var i = 0; i < mutations.length; i++) {
                            var mutation = mutations[i];
                            // ( ? : ) needed as a null check.
                            var disabledBefore = mutation.oldValue ? mutation.oldValue.indexOf('kmw-disabled') >= 0 : false;
                            var disabledAfter = mutation.target.className.indexOf('kmw-disabled') >= 0;
                            if (disabledBefore && !disabledAfter) {
                                this._EnableControl(mutation.target);
                            }
                            else if (!disabledBefore && disabledAfter) {
                                this._DisableControl(mutation.target);
                            }
                            // 'readonly' triggers on whether or not the attribute exists, not its value.
                            if (!disabledAfter && mutation.attributeName == "readonly") {
                                var readonlyBefore = mutation.oldValue ? mutation.oldValue != null : false;
                                var elem = mutation.target;
                                if (elem instanceof elem.ownerDocument.defaultView.HTMLInputElement
                                    || elem instanceof elem.ownerDocument.defaultView.HTMLTextAreaElement) {
                                    var readonlyAfter = elem.readOnly;
                                    if (readonlyBefore && !readonlyAfter) {
                                        this._EnableControl(mutation.target);
                                    }
                                    else if (!readonlyBefore && readonlyAfter) {
                                        this._DisableControl(mutation.target);
                                    }
                                }
                            }
                        }
                    }.bind(this);
                    this._AutoAttachObserverCore = function (mutations) {
                        var inputElementAdditions = [];
                        var inputElementRemovals = [];
                        for (var i = 0; i < mutations.length; i++) {
                            var mutation = mutations[i];
                            for (var j = 0; j < mutation.addedNodes.length; j++) {
                                inputElementAdditions = inputElementAdditions.concat(this._GetDocumentEditables(mutation.addedNodes[j]));
                            }
                            for (j = 0; j < mutation.removedNodes.length; j++) {
                                inputElementRemovals = inputElementRemovals.concat(this._GetDocumentEditables(mutation.removedNodes[j]));
                            }
                        }
                        for (var k = 0; k < inputElementAdditions.length; k++) {
                            if (this.isKMWInput(inputElementAdditions[k])) { // Apply standard element filtering!
                                this._MutationAdditionObserved(inputElementAdditions[k]);
                            }
                        }
                        for (k = 0; k < inputElementRemovals.length; k++) {
                            if (this.isKMWInput(inputElementRemovals[k])) { // Apply standard element filtering!
                                this._MutationRemovalObserved(inputElementRemovals[k]);
                            }
                        }
                        /* After all mutations have been handled, we need to recompile our .sortedInputs array, but only
                          * if any have actually occurred.
                          */
                        if (inputElementAdditions.length || inputElementRemovals.length) {
                            if (!this.keyman.util.device.touchable) {
                                this.listInputs();
                            }
                            else if (this.keyman.util.device.touchable) { // If something was added or removed, chances are it's gonna mess up our touch-based layout scheme, so let's update the touch elements.
                                var domManager = this;
                                window.setTimeout(function () {
                                    domManager.listInputs();
                                    for (var k = 0; k < this.sortedInputs.length; k++) {
                                        if (this.sortedInputs[k]['kmw_ip']) {
                                            this.sortedInputs[k]['kmw_ip'].updateInput();
                                        }
                                    }
                                }.bind(this), 1);
                            }
                        }
                    }.bind(this);
                    /**
                     * Function     _MutationAdditionObserved
                     * Scope        Private
                     * @param       {Element}  Pelem     A page input, textarea, or iframe element.
                     * Description  Used by the MutationObserver event handler to properly setup any elements dynamically added to the document post-initialization.
                     *
                     */
                    this._MutationAdditionObserved = function (Pelem) {
                        if (Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement && !this.keyman.util.device.touchable) {
                            //Problem:  the iframe is loaded asynchronously, and we must wait for it to load fully before hooking in.
                            var domManager = this;
                            var attachFunctor = function () {
                                // Provide a minor delay to allow 'load' event handlers to set the design-mode property.
                                window.setTimeout(function () {
                                    domManager.attachToControl(Pelem);
                                }, 1);
                            };
                            Pelem.addEventListener('load', attachFunctor);
                            // The following block breaks for design-mode iframes, at least in Chrome; a blank document may exist
                            // before the load of the desired actual document.
                            //
                            // /* If the iframe has somehow already loaded, we can't expect the onload event to be raised.  We ought just
                            // * go ahead and perform our callback's contents.
                            // *
                            // * keymanweb.domManager.attachToControl() is now idempotent, so even if our call 'whiffs', it won't cause long-lasting
                            // * problems.
                            // */
                            // if(Pelem.contentDocument.readyState == 'complete') {
                            //   window.setTimeout(attachFunctor, 1);
                            // }
                        }
                        else {
                            this.attachToControl(Pelem);
                        }
                    };
                    // Used by the mutation event handler to properly decouple any elements dynamically removed from the document.
                    this._MutationRemovalObserved = function (Pelem) {
                        var element = Pelem;
                        if (this.keyman.util.device.touchable) {
                            this.disableTouchElement(Pelem);
                        }
                        this.disableInputElement(Pelem); // Remove all KMW event hooks, styling.
                        this.clearElementAttachment(element); // Memory management & auto de-attachment upon removal.
                    };
                    /**
                     * Function     enableControl
                     * Scope        Public
                     * @param       {Element}      Pelem       Element to be disabled
                     * Description  Disables a KMW control element
                     */
                    this.enableControl = function (Pelem) {
                        if (!this.isAttached(Pelem)) {
                            console.warn("KeymanWeb is not attached to element " + Pelem);
                        }
                        var cn = Pelem.className;
                        var tagIndex = cn.indexOf('kmw-disabled');
                        if (tagIndex >= 0) { // if already explicitly disabled...
                            Pelem.className = cn.replace('kmw-disabled', '').trim();
                        }
                        // The rest is triggered within MutationObserver code.
                        // See _EnablementMutationObserverCore.
                    };
                    /* ------------- Page and document-level management events ------------------ */
                    this._WindowLoad = function (e) {
                        //keymanweb.completeInitialization();
                        // Always return to top of page after a page reload
                        document.body.scrollTop = 0;
                        if (typeof document.documentElement != 'undefined') {
                            document.documentElement.scrollTop = 0;
                        }
                    }.bind(this);
                    /**
                     * Function     _WindowUnload
                     * Scope        Private
                     * Description  Remove handlers before detaching KMW window
                     */
                    this._WindowUnload = function () {
                        // Allow the UI to release its own resources
                        this.keyman.uiManager.doUnload();
                        // Allow the OSK to release its own resources
                        if (this.keyman.osk) {
                            this.keyman.osk.shutdown();
                            if (this.keyman.osk['_Unload']) {
                                this.keyman.osk['_Unload'](); // I3363 (Build 301)
                            }
                        }
                        this.lastActiveElement = null;
                    }.bind(this);
                    /**
                     * Function     Initialization
                     * Scope        Public
                     * @param       {com.keyman.OptionType}  arg     object of user-defined properties
                     * Description  KMW window initialization
                     */
                    this.init = function (arg) {
                        var p, opt, dTrailer, ds;
                        var util = this.keyman.util;
                        var device = util.device;
                        // Set callbacks for proper feedback from web-core.
                        this.keyman.core.keyboardProcessor.beepHandler = this.doBeep.bind(this);
                        this.keyman.core.keyboardProcessor.warningLogger = console.warn.bind(console);
                        this.keyman.core.keyboardProcessor.errorLogger = console.error.bind(console);
                        // Local function to convert relative to absolute URLs
                        // with respect to the source path, server root and protocol
                        var fixPath = function (p) {
                            if (p.length == 0)
                                return p;
                            // Add delimiter if missing
                            if (p.substr(p.length - 1, 1) != '/')
                                p = p + '/';
                            // Absolute
                            if ((p.replace(/^(http)s?:.*/, '$1') == 'http')
                                || (p.replace(/^(file):.*/, '$1') == 'file'))
                                return p;
                            // Absolute (except for protocol)
                            if (p.substr(0, 2) == '//')
                                return this.keyman.protocol + p;
                            // Relative to server root
                            if (p.substr(0, 1) == '/')
                                return this.keyman.rootPath + p.substr(1);
                            // Otherwise, assume relative to source path
                            return this.keyman.srcPath + p;
                        }.bind(this);
                        // Explicit (user-defined) parameter initialization
                        opt = this.keyman.options;
                        if (typeof (arg) == 'object' && arg !== null) {
                            for (p in opt) {
                                if (arg.hasOwnProperty(p))
                                    opt[p] = arg[p];
                            }
                        }
                        // Get default paths and device options
                        if (opt['root'] != '') {
                            this.keyman.rootPath = fixPath(opt['root']);
                        }
                        // Keyboards and fonts are located with respect to the server root by default
                        //if(opt['keyboards'] == '') opt['keyboards'] = keymanweb.rootPath+'keyboard/';
                        //if(opt['fonts'] == '') opt['fonts'] = keymanweb.rootPath+'font/';
                        // Resources are located with respect to the engine by default
                        if (opt['resources'] == '') {
                            opt['resources'] = this.keyman.srcPath;
                        }
                        // Convert resource, keyboard and font paths to absolute URLs
                        opt['resources'] = fixPath(opt['resources']);
                        opt['keyboards'] = fixPath(opt['keyboards']);
                        opt['fonts'] = fixPath(opt['fonts']);
                        // Set default device options
                        this.keyman.setDefaultDeviceOptions(opt);
                        // Only do remainder of initialization once!
                        if (this.keyman.initialized) {
                            return Promise.resolve();
                        }
                        var keyman = this.keyman;
                        var domManager = this;
                        // Do not initialize until the document has been fully loaded
                        if (document.readyState !== 'complete') {
                            return new Promise(function (resolve) {
                                window.setTimeout(function () {
                                    domManager.init(arg).then(function () {
                                        resolve();
                                    });
                                }, 50);
                            });
                        }
                        keyman.modelManager.init();
                        this.keyman._MasterDocument = window.document;
                        /**
                         * Initialization of touch devices and browser interfaces must be done
                         * after all resources are loaded, during final stage of initialization
                         *
                         */
                        // Treat Android devices as phones if either (reported) screen dimension is less than 4"
                        if (device.OS == 'Android') {
                            // Determine actual device characteristics  I3363 (Build 301)
                            // TODO: device.dpi may no longer be needed - if so, get rid of it.
                            var dpi = device.getDPI(); //TODO: this will not work when called from HEAD!!
                            device.formFactor = ((screen.height < 4.0 * dpi) || (screen.width < 4.0 * dpi)) ? 'phone' : 'tablet';
                        }
                        // Set exposed initialization flag member for UI (and other) code to use
                        this.keyman.setInitialized(1);
                        // Finish keymanweb and initialize the OSK once all necessary resources are available
                        if (device.touchable) {
                            this.keyman.osk = new com.keyman.osk.AnchoredOSKView(device.coreSpec);
                        }
                        else {
                            this.keyman.osk = new com.keyman.osk.FloatingOSKView(device.coreSpec);
                        }
                        var osk = this.keyman.osk;
                        // Create and save the remote keyboard loading delay indicator
                        util.prepareWait();
                        // Trigger registration of deferred keyboard stubs and keyboards
                        this.keyman.keyboardManager.endDeferment();
                        // Initialize the desktop UI
                        this.initializeUI();
                        // Exit initialization here if we're using an embedded code path.
                        if (this.keyman.isEmbedded) {
                            if (!this.keyman.keyboardManager.setDefaultKeyboard()) {
                                console.error("No keyboard stubs exist - cannot initialize keyboard!");
                            }
                            return Promise.resolve();
                        }
                        // Determine the default font for mapped elements
                        this.keyman.appliedFont = this.keyman.baseFont = this.getBaseFont();
                        // Add orientationchange event handler to manage orientation changes on mobile devices
                        // Initialize touch-screen device interface  I3363 (Build 301)
                        if (device.touchable) {
                            this.keyman.handleRotationEvents();
                        }
                        // Initialize browser interface
                        if (this.keyman.options['attachType'] != 'manual') {
                            this._SetupDocument(document.documentElement);
                        }
                        // Create an ordered list of all input and textarea fields
                        this.listInputs();
                        // Initialize the OSK and set default OSK styles
                        // Note that this should *never* be called before the OSK has been initialized.
                        // However, it possibly may be called before the OSK has been fully defined with the current keyboard, need to check.
                        //osk._Load();
                        //document.body.appendChild(osk._Box);
                        //osk._Load(false);
                        // I3363 (Build 301)
                        if (device.touchable) {
                            var osk_1 = keyman.osk;
                            // Handle OSK touchend events (prevent propagation)
                            osk_1._Box.addEventListener('touchend', function (e) {
                                e.stopPropagation();
                            }, false);
                            // Add a blank DIV to the bottom of the page to allow the bottom of the page to be shown
                            dTrailer = document.createElement('DIV');
                            ds = dTrailer.style;
                            ds.width = '100%';
                            ds.height = (screen.width / 2) + 'px';
                            document.body.appendChild(dTrailer);
                            // Sets up page-default touch-based handling for activation-state management.
                            // These always trigger for the page, wherever a touch may occur. Does not
                            // prevent element-specific or OSK-key-specific handling from triggering.
                            var _this_1 = this;
                            this.touchStartActivationHandler = function (e) {
                                _this_1.deactivateOnRelease = true;
                                _this_1.touchY = e.touches[0].screenY;
                                // On Chrome, scrolling up or down causes the URL bar to be shown or hidden
                                // according to whether or not the document is at the top of the screen.
                                // But when doing that, each OSK row top and height gets modified by Chrome
                                // looking very ugly.  It would be best to hide the OSK then show it again
                                // when the user scroll finishes, but Chrome has no way to reliably report
                                // the touch end event after a move. c.f. http://code.google.com/p/chromium/issues/detail?id=152913
                                // The best compromise behaviour is simply to hide the OSK whenever any
                                // non-input and non-OSK element is touched.
                                _this_1.deactivateOnScroll = false;
                                if (device.OS == 'Android' && navigator.userAgent.indexOf('Chrome') > 0) {
                                    // _this.deactivateOnScroll has the inverse of the 'true' default,
                                    // but that fact actually facilitates the following conditional logic.
                                    if (typeof (osk_1._Box) == 'undefined')
                                        return false;
                                    if (typeof (osk_1._Box.style) == 'undefined')
                                        return false;
                                    // The following tests are needed to prevent the OSK from being hidden during normal input!
                                    var p_1 = e.target.parentElement;
                                    if (typeof (p_1) != 'undefined' && p_1 != null) {
                                        if (p_1.className.indexOf('keymanweb-input') >= 0)
                                            return false;
                                        if (p_1.className.indexOf('kmw-key-') >= 0)
                                            return false;
                                        if (typeof (p_1.parentElement) != 'undefined' && p_1.parentElement != null) {
                                            p_1 = p_1.parentElement;
                                            if (p_1.className.indexOf('keymanweb-input') >= 0)
                                                return false;
                                            if (p_1.className.indexOf('kmw-key-') >= 0)
                                                return false;
                                        }
                                    }
                                    _this_1.deactivateOnScroll = true;
                                }
                                return false;
                            };
                            this.touchMoveActivationHandler = function (e) {
                                if (_this_1.deactivateOnScroll) { // Android / Chrone case.
                                    dom.DOMEventHandlers.states.focusing = false;
                                    _this_1.activeElement = null;
                                }
                                var y = e.touches[0].screenY;
                                var y0 = _this_1.touchY;
                                if (y - y0 > 5 || y0 - y < 5) {
                                    _this_1.deactivateOnRelease = false;
                                }
                                return false;
                            };
                            this.touchEndActivationHandler = function () {
                                // Should not hide OSK if simply closing the language menu (30/4/15)
                                // or if the focusing timer (setFocusTimer) is still active.
                                if (_this_1.deactivateOnRelease && !osk_1['lgList'] && !dom.DOMEventHandlers.states.focusing) {
                                    _this_1.activeElement = null;
                                }
                                _this_1.deactivateOnRelease = false;
                                return false;
                            };
                            this.keyman.util.attachDOMEvent(document.body, 'touchstart', this.touchStartActivationHandler, false);
                            this.keyman.util.attachDOMEvent(document.body, 'touchmove', this.touchMoveActivationHandler, false);
                            this.keyman.util.attachDOMEvent(document.body, 'touchend', this.touchEndActivationHandler, false);
                        }
                        //document.body.appendChild(keymanweb._StyleBlock);
                        // Restore and reload the currently selected keyboard, selecting a default keyboard if necessary.
                        this.keyman.keyboardManager.restoreCurrentKeyboard();
                        /* Setup of handlers for dynamically-added and (eventually) dynamically-removed elements.
                          * Reference: https://developer.mozilla.org/en/docs/Web/API/MutationObserver
                          *
                          * We place it here so that it loads after most of the other UI loads, reducing the MutationObserver's overhead.
                          * Of course, we only want to dynamically add elements if the user hasn't enabled the manual attachment option.
                          */
                        if (typeof MutationObserver == 'function') {
                            var observationTarget = document.querySelector('body'), observationConfig;
                            if (this.keyman.options['attachType'] != 'manual') { //I1961
                                observationConfig = { childList: true, subtree: true };
                                this.attachmentObserver = new MutationObserver(this._AutoAttachObserverCore);
                                this.attachmentObserver.observe(observationTarget, observationConfig);
                            }
                            /**
                             * Setup of handlers for dynamic detection of the kmw-disabled class tag that controls enablement.
                             */
                            observationConfig = { subtree: true, attributes: true, attributeOldValue: true, attributeFilter: ['class', 'readonly'] };
                            this.enablementObserver = new MutationObserver(this._EnablementMutationObserverCore);
                            this.enablementObserver.observe(observationTarget, observationConfig);
                        }
                        else {
                            console.warn("Your browser is outdated and does not support MutationObservers, a web feature " +
                                "needed by KeymanWeb to support dynamically-added elements.");
                        }
                        // Set exposed initialization flag to 2 to indicate deferred initialization also complete
                        /* To prevent propagation of focus & blur events from the input-scroll workaround,
                         * we attach top-level capturing listeners to the focus & blur events.  They prevent propagation
                         * but NOT default behavior, allowing the scroll to complete while preventing nearly all
                         * possible event 'noise' that could result from the workaround.
                         */
                        this.keyman.util.attachDOMEvent(document.body, 'focus', DOMManager.suppressFocusCheck, true);
                        this.keyman.util.attachDOMEvent(document.body, 'blur', DOMManager.suppressFocusCheck, true);
                        this.keyman.setInitialized(2);
                        return Promise.resolve();
                    }.bind(this);
                    this.keyman = keyman;
                    if (keyman.util.device.touchable) {
                        this.touchHandlers = new dom.DOMTouchHandlers(keyman);
                    }
                    this.nonTouchHandlers = new dom.DOMEventHandlers(keyman);
                }
                DOMManager.prototype.shutdown = function () {
                    // Catch and notify of any shutdown errors, but don't let errors fail unit tests.
                    try {
                        if (this.enablementObserver) {
                            this.enablementObserver.disconnect();
                        }
                        if (this.attachmentObserver) {
                            this.attachmentObserver.disconnect();
                        }
                        for (var _i = 0, _a = this.inputList; _i < _a.length; _i++) {
                            var input = _a[_i];
                            this.disableInputElement(input);
                        }
                        // On shutdown, we remove our general focus-suppression handlers as well.
                        this.keyman.util.detachDOMEvent(document.body, 'focus', DOMManager.suppressFocusCheck, true);
                        this.keyman.util.detachDOMEvent(document.body, 'blur', DOMManager.suppressFocusCheck, true);
                        // Also, the base-page touch handlers for activation management.
                        if (this.touchStartActivationHandler) {
                            this.keyman.util.detachDOMEvent(document.body, 'touchstart', this.touchStartActivationHandler, false);
                            this.keyman.util.detachDOMEvent(document.body, 'touchmove', this.touchMoveActivationHandler, false);
                            this.keyman.util.detachDOMEvent(document.body, 'touchend', this.touchEndActivationHandler, false);
                        }
                    }
                    catch (e) {
                        console.error("Error occurred during shutdown");
                        console.error(e);
                    }
                };
                /**
                 * Function     beep          KB      (DOM-side implementation)
                 * Scope        Public
                 * @param       {Object}      Pelem     element to flash
                 * Description  Flash body as substitute for audible beep; notify embedded device to vibrate
                 */
                DOMManager.prototype.doBeep = function (outputTarget) {
                    // Handles embedded-mode beeps.
                    var keyman = com.keyman.singleton;
                    if ('beepKeyboard' in keyman) {
                        keyman['beepKeyboard']();
                        return;
                    }
                    if (!(outputTarget instanceof dom.targets.OutputTarget)) {
                        return;
                    }
                    // All code after this point is DOM-based, triggered by the beep.
                    var Pelem = outputTarget.getElement();
                    if (outputTarget instanceof dom.targets.DesignIFrame) {
                        Pelem = outputTarget.docRoot; // I1446 - beep sometimes fails to flash when using OSK and rich control
                    }
                    if (!Pelem) {
                        return; // There's no way to signal a 'beep' to null, so just cut everything short.
                    }
                    if (!Pelem.style || typeof (Pelem.style.backgroundColor) == 'undefined') {
                        return;
                    }
                    for (var Lbo = 0; Lbo < this._BeepObjects.length; Lbo++) { // I1446 - beep sometimes fails to return background color to normal
                        // I1511 - array prototype extended
                        if (this._BeepObjects[Lbo].e == Pelem) {
                            return;
                        }
                    }
                    this._BeepObjects = com.keyman.singleton._push(this._BeepObjects, new BeepData(Pelem));
                    // TODO:  This is probably a bad color choice if "dark mode" is enabled.  A proper implementation
                    //        would probably require some 'fun' CSS work, though.
                    Pelem.style.backgroundColor = '#000000';
                    if (this._BeepTimeout == 0) {
                        this._BeepTimeout = 1;
                        window.setTimeout(this.beepReset.bind(this), 50);
                    }
                };
                /**
                 * Function     beepReset
                 * Scope        Public
                 * Description  Reset/terminate beep or flash (not currently used: Aug 2011)
                 */
                DOMManager.prototype.beepReset = function () {
                    com.keyman.singleton.core.keyboardInterface.resetContextCache();
                    var Lbo;
                    this._BeepTimeout = 0;
                    for (Lbo = 0; Lbo < this._BeepObjects.length; Lbo++) { // I1511 - array prototype extended
                        this._BeepObjects[Lbo].reset();
                    }
                    this._BeepObjects = [];
                };
                /**
                 * Function     getHandlers
                 * Scope        Private
                 * @param       {Element}   Pelem  An input, textarea, or touch-alias element from the page.
                 * @returns     {Object}
                 */
                DOMManager.prototype.getHandlers = function (Pelem) {
                    var _attachObj = Pelem.base ? Pelem.base._kmwAttachment : Pelem._kmwAttachment;
                    if (_attachObj) {
                        return _attachObj.touchEnabled ? this.touchHandlers : this.nonTouchHandlers;
                    }
                    else {
                        // Best guess solution.
                        return this.keyman.touchAliasing;
                    }
                };
                /**
                 * Function     enableTouchElement
                 * Scope        Private
                 * @param       {Element}  Pelem   An input or textarea element from the page.
                 * @return      {boolean}  Returns true if it creates a simulated input element for Pelem; false if not.
                 * Description  Creates a simulated input element for the specified INPUT or TEXTAREA, comprising:
                 *              an outer DIV, matching the position, size and style of the base element
                 *              a scrollable DIV within that outer element
                 *              two SPAN elements within the scrollable DIV, to hold the text before and after the caret
                 *
                 *              The left border of the second SPAN is flashed on and off as a visible caret
                 *
                 *              Also ensures the element is registered on keymanweb's internal input list.
                 */
                DOMManager.prototype.enableTouchElement = function (Pelem) {
                    // Touch doesn't worry about iframes.
                    if (Pelem.tagName.toLowerCase() == 'iframe') {
                        return false;
                    }
                    if (this.isKMWDisabled(Pelem)) {
                        this.setupNonKMWTouchElement(Pelem);
                        return false;
                    }
                    else {
                        // Initialize and protect input elements for touch-screen devices (but never for apps)
                        // NB: now set disabled=true rather than readonly, since readonly does not always
                        // prevent element from getting focus, e.g. within a LABEL element.
                        // c.f. http://kreotekdev.wordpress.com/2007/11/08/disabled-vs-readonly-form-fields/
                        Pelem.kmwInput = true;
                    }
                    // Remove any handlers for "NonKMWTouch" elements, since we're enabling it here.
                    Pelem.removeEventListener('touchstart', this.nonKMWTouchHandler);
                    /*
                    *  Does this element already have a simulated touch element established?  If so,
                    *  just reuse it - if it isn't still in the input list!
                    */
                    if (Pelem['kmw_ip']) {
                        if (this.inputList.indexOf(Pelem['kmw_ip']) != -1) {
                            return false;
                        }
                        this.inputList.push(Pelem['kmw_ip']);
                        console.log("Unexpected state - this element's simulated input DIV should have been removed from the page!");
                        return true; // May need setup elsewhere since it's just been re-added!
                    }
                    // The simulated touch element doesn't already exist?  Time to initialize it.
                    var x = dom.constructTouchAlias(Pelem);
                    if (this.isAttached(x)) {
                        x._kmwAttachment.interface = dom.targets.wrapElement(x);
                    }
                    else {
                        this.setupElementAttachment(x); // The touch-alias should have its own wrapper.
                    }
                    Pelem._kmwAttachment = x._kmwAttachment; // It's an object reference we need to alias.
                    // Set font for base element
                    this.enableInputElement(x, true);
                    // Superimpose custom input fields for each input or textarea, unless readonly or disabled
                    // On touch event, reposition the text caret and prepare for OSK input
                    // Removed 'onfocus=' as that resulted in handling the event twice (on iOS, anyway)
                    // We know this to be the correct set of handlers because we're setting up a touch element.
                    var touchHandlers = this.touchHandlers;
                    x.addEventListener('touchstart', touchHandlers.setFocus);
                    x.onmspointerdown = function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        return touchHandlers.setFocus(e);
                    };
                    x.addEventListener('touchend', touchHandlers.dragEnd, false);
                    x.onmspointerup = function (e) {
                        e.stopPropagation();
                    };
                    // Disable internal scroll when input element in focus
                    x.addEventListener('touchmove', touchHandlers.dragInput, false);
                    x.onmspointermove = touchHandlers.dragInput;
                    // Hide keyboard and caret when losing focus from simulated input field
                    x.onblur = touchHandlers.setBlur;
                    // Note that touchend event propagates and is processed by body touchend handler
                    // re-setting the first touch point for a drag
                    return true;
                };
                /**
                 * Function     disableTouchElement
                 * Scope        Private
                 * @param       {Element}  Pelem   An input or textarea element from the page.
                 * Description  Destroys the simulated input element for the specified INPUT or TEXTAREA and reverts
                 *              back to desktop-style 'enablement' for the base control.
                 */
                DOMManager.prototype.disableTouchElement = function (Pelem) {
                    // Do not check for the element being officially disabled - it's also used for detachment.
                    // Touch doesn't worry about iframes.
                    if (Pelem.tagName.toLowerCase() == 'iframe') {
                        return; // If/when we do support this, we'll need an iframe-level manager for it.
                    }
                    if (Pelem['kmw_ip']) {
                        var index = this.inputList.indexOf(Pelem['kmw_ip']);
                        if (index != -1) {
                            this.inputList.splice(index, 1);
                        }
                        Pelem.style.visibility = 'visible'; // hide by default: KMW-3
                        Pelem.disabled = false;
                        Pelem.removeEventListener('resize', Pelem['kmw_ip']._kmwResizeHandler);
                        // Disable touch-related handling code.
                        this.disableInputElement(Pelem['kmw_ip']);
                        Pelem._kmwAttachment.interface = dom.targets.wrapElement(Pelem);
                        // We get weird repositioning errors if we don't remove our simulated input element - and permanently.
                        if (Pelem.parentNode) {
                            Pelem.parentNode.removeChild(Pelem['kmw_ip']);
                        }
                        delete Pelem['kmw_ip'];
                    }
                    this.setupNonKMWTouchElement(Pelem);
                };
                /**
                 * Function     setupNonKMWTouchElement
                 * Scope        Private
                 * @param       {Element}    x  A child element of document.
                 * Description  Performs handling for the specified disabled input element on touch-based systems.
                 */
                DOMManager.prototype.setupNonKMWTouchElement = function (x) {
                    this.keyman.util.attachDOMEvent(x, 'touchstart', this.nonKMWTouchHandler, false);
                    // Signify that touch isn't enabled on the control.
                    if (this.isAttached(x)) {
                        x._kmwAttachment.touchEnabled = false;
                    }
                };
                /**
                 * Function     enableInputElement
                 * Scope        Private
                 * @param       {Element}   Pelem   An element from the document to be enabled with full KMW handling.
                 * @param       {boolean=}   isAlias A flag that indicates if the element is a simulated input element for touch.
                 * Description  Performs the basic enabling setup for one element and adds it to the inputList if it is an input element.
                 *              Note that this method is called for both desktop and touch control routes; the touch route calls it from within
                 *              enableTouchElement as it must first establish the simulated touch element to serve as the alias "input element" here.
                 *              Note that the 'kmw-disabled' property is managed by the MutationObserver and by the surface API calls.
                 */
                DOMManager.prototype.enableInputElement = function (Pelem, isAlias) {
                    var baseElement = isAlias ? Pelem['base'] : Pelem;
                    if (!this.isKMWDisabled(baseElement)) {
                        if (Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {
                            this._AttachToIframe(Pelem);
                        }
                        else {
                            if (!isAlias) {
                                this.setupElementAttachment(Pelem);
                            }
                            baseElement.className = baseElement.className ? baseElement.className + ' keymanweb-font' : 'keymanweb-font';
                            this.inputList.push(Pelem);
                            this.keyman.util.attachDOMEvent(baseElement, 'focus', this.getHandlers(Pelem)._ControlFocus);
                            this.keyman.util.attachDOMEvent(baseElement, 'blur', this.getHandlers(Pelem)._ControlBlur);
                            // These need to be on the actual input element, as otherwise the keyboard will disappear on touch.
                            Pelem.onkeypress = this.getHandlers(Pelem)._KeyPress;
                            Pelem.onkeydown = this.getHandlers(Pelem)._KeyDown;
                            Pelem.onkeyup = this.getHandlers(Pelem)._KeyUp;
                        }
                    }
                };
                ;
                /**
                 * Function     disableInputElement
                 * Scope        Private
                 * @param       {Element}   Pelem   An element from the document to be enabled with full KMW handling.
                 * @param       {boolean=}   isAlias A flag that indicates if the element is a simulated input element for touch.
                 * Description  Inverts the process of enableInputElement, removing all event-handling from the element.
                 *              Note that the 'kmw-disabled' property is managed by the MutationObserver and by the surface API calls.
                 */
                DOMManager.prototype.disableInputElement = function (Pelem, isAlias) {
                    if (!Pelem) {
                        return;
                    }
                    var baseElement = isAlias ? Pelem['base'] : Pelem;
                    // Do NOT test for pre-disabledness - we also use this to fully detach without officially 'disabling' via kmw-disabled.
                    if ((Pelem.ownerDocument.defaultView && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) ||
                        Pelem instanceof HTMLIFrameElement) {
                        this._DetachFromIframe(Pelem);
                    }
                    else {
                        var cnIndex = baseElement.className.indexOf('keymanweb-font');
                        if (cnIndex > 0 && !isAlias) { // See note about the alias below.
                            baseElement.className = baseElement.className.replace('keymanweb-font', '').trim();
                        }
                        // Remove the element from our internal input tracking.
                        var index = this.inputList.indexOf(Pelem);
                        if (index > -1) {
                            this.inputList.splice(index, 1);
                        }
                        if (!isAlias) { // See note about the alias below.
                            this.keyman.util.detachDOMEvent(baseElement, 'focus', this.getHandlers(Pelem)._ControlFocus);
                            this.keyman.util.detachDOMEvent(baseElement, 'blur', this.getHandlers(Pelem)._ControlBlur);
                        }
                        // These need to be on the actual input element, as otherwise the keyboard will disappear on touch.
                        Pelem.onkeypress = null;
                        Pelem.onkeydown = null;
                        Pelem.onkeyup = null;
                    }
                    // If we're disabling an alias, we should fully enable the base version.  (Thinking ahead to toggleable-touch mode.)
                    if (isAlias) {
                        this.inputList.push(baseElement);
                        baseElement.onkeypress = this.getHandlers(Pelem)._KeyPress;
                        baseElement.onkeydown = this.getHandlers(Pelem)._KeyDown;
                        baseElement.onkeyup = this.getHandlers(Pelem)._KeyUp;
                    }
                    var lastElem = this.lastActiveElement;
                    if (lastElem == Pelem || lastElem == Pelem['kmw_ip']) {
                        if (this.activeElement == lastElem) {
                            this.activeElement = null;
                        }
                        this.lastActiveElement = null;
                        this.keyman.osk.startHide(false);
                    }
                    return;
                };
                ;
                /**
             * Function     isKMWDisabled
             * Scope        Private
             * @param       {Element}   x   An element from the page.
             * @return      {boolean}      true if the element's properties indicate a 'disabled' state.
             * Description  Examines attachable elements to determine their default enablement state.
             */
                DOMManager.prototype.isKMWDisabled = function (x) {
                    var c = x.className;
                    // Exists for some HTMLElements.
                    if (x['readOnly']) {
                        return true;
                    }
                    else if (c && c.indexOf('kmw-disabled') >= 0) {
                        return true;
                    }
                    return false;
                };
                /**
                 * Function     attachToControl
                 * Scope        Public
                 * @param       {Element}    Pelem       Element to which KMW will be attached
                 * Description  Attaches KMW to control (or IFrame)
                 */
                DOMManager.prototype.attachToControl = function (Pelem) {
                    var touchable = this.keyman.util.device.touchable;
                    // Exception for IFrame elements, in case of async loading issues.  (Fixes fun iframe loading bug with Chrome.)
                    if (this.isAttached(Pelem) && !(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement)) {
                        return; // We're already attached.
                    }
                    if (this.isKMWInput(Pelem)) {
                        if (!this.isKMWDisabled(Pelem)) {
                            if (touchable && !this.keyman.isEmbedded) {
                                this.enableTouchElement(Pelem);
                            }
                            else {
                                this.enableInputElement(Pelem);
                            }
                        }
                        else {
                            if (touchable) {
                                this.setupNonKMWTouchElement(Pelem);
                            }
                        }
                    }
                    else if (touchable) {
                        this.setupNonKMWTouchElement(Pelem);
                    }
                };
                /**
                 * Function     detachFromControl
                 * Scope        Public
                 * @param       {Element}    Pelem       Element from which KMW will detach
                 * Description  Detaches KMW from a control (or IFrame)
                 */
                DOMManager.prototype.detachFromControl = function (Pelem) {
                    if (!(this.isAttached(Pelem) || Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement)) {
                        return; // We never were attached.
                    }
                    // #1 - if element is enabled, disable it.  But don't manipulate the 'kmw-disabled' tag.
                    if (this.isKMWInput(Pelem)) {
                        // Is it already disabled?
                        if (!this.isKMWDisabled(Pelem)) {
                            this._DisableControl(Pelem);
                        }
                    }
                    // #2 - clear attachment data.
                    this.clearElementAttachment(Pelem);
                };
                /**
                 * Function     isAttached
                 * Scope        Private
                 * @param       {Element}   x   An element from the page.
                 * @return      {boolean}       true if KMW is attached to the element, otherwise false.
                 */
                DOMManager.prototype.isAttached = function (x) {
                    return x._kmwAttachment ? true : false;
                };
                /**
                 * Function     isKMWInput
                 * Scope        Private
                 * @param       {Element}   x   An element from the page.
                 * @return      {boolean}      true if the element is viable for KMW attachment.
                 * Description  Examines potential input elements to determine whether or not they are viable for KMW attachment.
                 *              Also filters elements not supported for touch devices when device.touchable == true.
                 */
                DOMManager.prototype.isKMWInput = function (x) {
                    var touchable = this.keyman.util.device.touchable;
                    if (x instanceof x.ownerDocument.defaultView.HTMLTextAreaElement) {
                        return true;
                    }
                    else if (x instanceof x.ownerDocument.defaultView.HTMLInputElement) {
                        if (x.type == 'text' || x.type == 'search') {
                            return true;
                        }
                    }
                    else if (x instanceof x.ownerDocument.defaultView.HTMLIFrameElement && !touchable) { // Do not allow iframe attachment if in 'touch' mode.
                        try {
                            if (x.contentWindow) {
                                if (x.contentWindow.document) { // Only allow attachment if the iframe's internal document is valid.
                                    return true;
                                }
                            } // else nothing?
                        }
                        catch (err) {
                            /* Do not attempt to access iframes outside this site */
                            console.warn("Error during attachment to / detachment from iframe: ");
                            console.warn(err);
                        }
                    }
                    else if (x.isContentEditable && !touchable) { // Only allow contentEditable attachment outside of 'touch' mode.
                        return true;
                    }
                    return false;
                };
                /**
                 * Function     setupElementAttachment
                 * Scope        Private
                 * @param       {Element}   x   An element from the page valid for KMW attachment
                 * Description  Establishes the base KeymanWeb data for newly-attached elements.
                 *              Does not establish input hooks, which are instead handled during enablement.
                 */
                DOMManager.prototype.setupElementAttachment = function (x) {
                    // The `_kmwAttachment` property tag maintains all relevant KMW-maintained data regarding the element.
                    // It is disgarded upon de-attachment.
                    if (x._kmwAttachment) {
                        return;
                    }
                    else {
                        // Problem:  tries to wrap IFrames that aren't design-mode.
                        // The elements in the contained document get separately wrapped, so this doesn't need a proper wrapper.
                        //
                        // Its attachment process might need some work.
                        var eleInterface = dom.targets.wrapElement(x);
                        // May should filter better for IFrames.
                        if (!(eleInterface || dom.Utils.instanceof(x, "HTMLIFrameElement"))) {
                            console.warn("Could not create processing interface for newly-attached element!");
                        }
                        x._kmwAttachment = new keyman_8.AttachmentInfo(eleInterface, null, this.keyman.util.device.touchable);
                    }
                };
                /**
                 * Function     clearElementAttachment
                 * Scope        Private
                 * @param       {Element}   x   An element from the page valid for KMW attachment
                 * Description  Establishes the base KeymanWeb data for newly-attached elements.
                 *              Does not establish input hooks, which are instead handled during enablement.
                 */
                DOMManager.prototype.clearElementAttachment = function (x) {
                    // We need to clear the object when de-attaching; helps prevent memory leaks.
                    x._kmwAttachment = null;
                };
                /**
                 * Function     _AttachToIframe
                 * Scope        Private
                 * @param       {Element}      Pelem       IFrame to which KMW will be attached
                 * Description  Attaches KeymanWeb to IFrame
                 */
                DOMManager.prototype._AttachToIframe = function (Pelem) {
                    var util = this.keyman.util;
                    try {
                        var Lelem = Pelem.contentWindow.document;
                        /* editable Iframe */
                        if (Lelem) {
                            if (Lelem.designMode.toLowerCase() == 'on') {
                                // I2404 - Attach to IFRAMEs child objects, only editable IFRAMEs here
                                if (util.device.browser == 'firefox') {
                                    util.attachDOMEvent(Lelem, 'focus', this.getHandlers(Pelem)._ControlFocus);
                                    util.attachDOMEvent(Lelem, 'blur', this.getHandlers(Pelem)._ControlBlur);
                                }
                                else { // Chrome, Safari
                                    util.attachDOMEvent(Lelem.body, 'focus', this.getHandlers(Pelem)._ControlFocus);
                                    util.attachDOMEvent(Lelem.body, 'blur', this.getHandlers(Pelem)._ControlBlur);
                                }
                                util.attachDOMEvent(Lelem.body, 'keydown', this.getHandlers(Pelem)._KeyDown);
                                util.attachDOMEvent(Lelem.body, 'keypress', this.getHandlers(Pelem)._KeyPress);
                                util.attachDOMEvent(Lelem.body, 'keyup', this.getHandlers(Pelem)._KeyUp);
                                // Set up a reference alias; the internal document will need the same attachment info!
                                this.setupElementAttachment(Pelem);
                                Lelem.body._kmwAttachment = Pelem._kmwAttachment;
                            }
                            else {
                                // Lelem is the IFrame's internal document; set 'er up!
                                this._SetupDocument(Lelem.body); // I2404 - Manage IE events in IFRAMEs
                            }
                        }
                    }
                    catch (err) {
                        // do not attempt to attach to the iframe as it is from another domain - XSS denied!
                    }
                };
                /**
             * Function     _DetachFromIframe
             * Scope        Private
             * @param       {Element}      Pelem       IFrame to which KMW will be attached
             * Description  Detaches KeymanWeb from an IFrame
             */
                DOMManager.prototype._DetachFromIframe = function (Pelem) {
                    var util = this.keyman.util;
                    try {
                        var Lelem = Pelem.contentWindow.document;
                        /* editable Iframe */
                        if (Lelem) {
                            if (Lelem.designMode.toLowerCase() == 'on') {
                                // Mozilla      // I2404 - Attach to  IFRAMEs child objects, only editable IFRAMEs here
                                if (util.device.browser == 'firefox') {
                                    // Firefox won't handle these events on Lelem.body - only directly on Lelem (the doc) instead.
                                    util.detachDOMEvent(Lelem, 'focus', this.getHandlers(Pelem)._ControlFocus);
                                    util.detachDOMEvent(Lelem, 'blur', this.getHandlers(Pelem)._ControlBlur);
                                }
                                else { // Chrome, Safari
                                    util.detachDOMEvent(Lelem.body, 'focus', this.getHandlers(Pelem)._ControlFocus);
                                    util.detachDOMEvent(Lelem.body, 'blur', this.getHandlers(Pelem)._ControlBlur);
                                }
                                util.detachDOMEvent(Lelem.body, 'keydown', this.getHandlers(Pelem)._KeyDown);
                                util.detachDOMEvent(Lelem.body, 'keypress', this.getHandlers(Pelem)._KeyPress);
                                util.detachDOMEvent(Lelem.body, 'keyup', this.getHandlers(Pelem)._KeyUp);
                                // Remove the reference to our prior attachment data!
                                Lelem.body._kmwAttachment = null;
                            }
                            else {
                                // Lelem is the IFrame's internal document; set 'er up!
                                this._ClearDocument(Lelem.body); // I2404 - Manage IE events in IFRAMEs
                            }
                        }
                    }
                    catch (err) {
                        // do not attempt to attach to the iframe as it is from another domain - XSS denied!
                    }
                };
                /**
                 * Function     _GetDocumentEditables
                 * Scope        Private
                 * @param       {Element}     Pelem     HTML element
                 * @return      {Array<Element>}        A list of potentially-editable controls.  Further filtering [as with isKMWInput() and
                 *                                      isKMWDisabled()] is required.
                 */
                DOMManager.prototype._GetDocumentEditables = function (Pelem) {
                    var util = this.keyman.util;
                    var possibleInputs = [];
                    // Document.ownerDocument === null, so we better check that it's not null before proceeding.
                    if (Pelem.ownerDocument && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLElement) {
                        var dv = Pelem.ownerDocument.defaultView;
                        if (Pelem instanceof dv.HTMLInputElement || Pelem instanceof dv.HTMLTextAreaElement) {
                            possibleInputs.push(Pelem);
                        }
                        else if (Pelem instanceof dv.HTMLIFrameElement) {
                            possibleInputs.push(Pelem);
                        }
                    }
                    // Constructing it like this also allows for individual element filtering for the auto-attach MutationObserver without errors.
                    if (Pelem.getElementsByTagName) {
                        /**
                         * Function     LiTmp
                         * Scope        Private
                         * @param       {string}    _colon    type of element
                         * @return      {Array<Element>}  array of elements of specified type
                         * Description  Local function to get list of editable controls
                         */
                        var LiTmp = function (_colon) {
                            return util.arrayFromNodeList(Pelem.getElementsByTagName(_colon));
                        };
                        // Note that isKMWInput() will block IFRAME elements as necessary for touch-based devices.
                        possibleInputs = possibleInputs.concat(LiTmp('INPUT'), LiTmp('TEXTAREA'), LiTmp('IFRAME'));
                    }
                    // Not all active browsers may support the method, but only those that do would work with contenteditables anyway.
                    if (Pelem.querySelectorAll) {
                        possibleInputs = possibleInputs.concat(util.arrayFromNodeList(Pelem.querySelectorAll('[contenteditable]')));
                    }
                    if (Pelem.ownerDocument && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLElement && Pelem.isContentEditable) {
                        possibleInputs.push(Pelem);
                    }
                    return possibleInputs;
                };
                /**
                 * Function     _SetupDocument
                 * Scope        Private
                 * @param       {Element}     Pelem - the root element of a document, including IFrame documents.
                 * Description  Used to automatically attach KMW to editable controls, regardless of control path.
                 */
                DOMManager.prototype._SetupDocument = function (Pelem) {
                    var possibleInputs = this._GetDocumentEditables(Pelem);
                    for (var Li = 0; Li < possibleInputs.length; Li++) {
                        var input = possibleInputs[Li];
                        // It knows how to handle pre-loaded iframes appropriately.
                        this.attachToControl(possibleInputs[Li]);
                    }
                };
                /**
                 * Function     _ClearDocument
                 * Scope        Private
                 * @param       {Element}     Pelem - the root element of a document, including IFrame documents.
                 * Description  Used to automatically detach KMW from editable controls, regardless of control path.
                 *              Mostly used to clear out all controls of a detached IFrame.
                 */
                DOMManager.prototype._ClearDocument = function (Pelem) {
                    var possibleInputs = this._GetDocumentEditables(Pelem);
                    for (var Li = 0; Li < possibleInputs.length; Li++) {
                        var input = possibleInputs[Li];
                        // It knows how to handle pre-loaded iframes appropriately.
                        this.detachFromControl(possibleInputs[Li]);
                    }
                };
                /**
                 * Set target element text direction (LTR or RTL), but only if the element is empty
                 *
                 * If the element base directionality is changed after it contains content, unless all the text
                 * has the same directionality, text runs will be re-ordered which is confusing and causes
                 * incorrect caret positioning
                 *
                 * @param       {Object}      Ptarg      Target element
                 */
                DOMManager.prototype._SetTargDir = function (Ptarg) {
                    var activeKeyboard = com.keyman.singleton.core.activeKeyboard;
                    var elDir = (activeKeyboard && activeKeyboard.isRTL) ? 'rtl' : 'ltr';
                    if (Ptarg) {
                        if (this.keyman.util.device.touchable) {
                            var alias = Ptarg;
                            if (Ptarg.textContent.length == 0) {
                                alias.base.dir = alias.dir = elDir;
                                alias.setTextCaret(10000);
                            }
                        }
                        else {
                            if (Ptarg instanceof Ptarg.ownerDocument.defaultView.HTMLInputElement
                                || Ptarg instanceof Ptarg.ownerDocument.defaultView.HTMLTextAreaElement) {
                                if (Ptarg.value.length == 0) {
                                    Ptarg.dir = elDir;
                                }
                            }
                            else if (typeof Ptarg.textContent == "string" && Ptarg.textContent.length == 0) { // As with contenteditable DIVs, for example.
                                Ptarg.dir = elDir;
                            }
                        }
                    }
                };
                /**
                 * Function     _DisableControl
                 * Scope        Private
                 * @param       {Element}      Pelem       Element to be disabled
                 * Description  Disable KMW control element
                 */
                DOMManager.prototype._DisableControl = function (Pelem) {
                    // Only operate on attached elements!  Non-design-mode IFrames don't get attachment markers, so we check them specifically instead.
                    if (this.isAttached(Pelem) || Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {
                        if (this.keyman.util.device.touchable) {
                            this.disableTouchElement(Pelem);
                            this.setupNonKMWTouchElement(Pelem);
                            var keyman = this.keyman;
                            // If a touch alias was removed, chances are it's gonna mess up our touch-based layout scheme, so let's update the touch elements.
                            window.setTimeout(function () {
                                this.listInputs();
                                for (var k = 0; k < this.sortedInputs.length; k++) {
                                    if (this.sortedInputs[k]['kmw_ip']) {
                                        this.sortedInputs[k]['kmw_ip'].updateInput(this.sortedInputs[k]['kmw_ip']);
                                    }
                                }
                            }.bind(this), 1);
                        }
                        else {
                            this.listInputs(); // Fix up our internal input ordering scheme.
                        }
                        this.disableInputElement(Pelem);
                    }
                };
                /**
                 * Function     _EnableControl
                 * Scope        Private
                 * @param       {Element}    Pelem   Element to be enabled
                 * Description  Enable KMW control element
                 */
                DOMManager.prototype._EnableControl = function (Pelem) {
                    if (this.isAttached(Pelem)) { // Only operate on attached elements!
                        if (this.keyman.util.device.touchable) {
                            this.enableTouchElement(Pelem);
                            var keyman = this.keyman;
                            // If we just added a new input alias, some languages will mess up our touch-based layout scheme
                            // if we don't update the touch elements.
                            window.setTimeout(function () {
                                keyman.domManager.listInputs();
                                for (var k = 0; k < this.sortedInputs.length; k++) {
                                    if (this.sortedInputs[k]['kmw_ip']) {
                                        this.sortedInputs[k]['kmw_ip'].updateInput(this.sortedInputs[k]['kmw_ip']);
                                    }
                                }
                            }.bind(this), 1);
                        }
                        else {
                            this.enableInputElement(Pelem);
                        }
                    }
                };
                // Create an ordered list of all text and search input elements and textarea elements
                // except any tagged with class 'kmw-disabled'
                // TODO: email and url types should perhaps use default keyboard only
                DOMManager.prototype.listInputs = function () {
                    var i, eList = [], t1 = document.getElementsByTagName('input'), t2 = document.getElementsByTagName('textarea');
                    var util = this.keyman.util;
                    for (i = 0; i < t1.length; i++) {
                        switch (t1[i].type) {
                            case 'text':
                            case 'search':
                            case 'email':
                            case 'url':
                                if (t1[i].className.indexOf('kmw-disabled') < 0) {
                                    eList.push({ ip: t1[i], x: dom.Utils.getAbsoluteX(t1[i]), y: dom.Utils.getAbsoluteY(t1[i]) });
                                }
                                break;
                        }
                    }
                    for (i = 0; i < t2.length; i++) {
                        if (t2[i].className.indexOf('kmw-disabled') < 0)
                            eList.push({ ip: t2[i], x: dom.Utils.getAbsoluteX(t2[i]), y: dom.Utils.getAbsoluteY(t2[i]) });
                    }
                    /**
                     * Local function to sort by screen position
                     *
                     * @param       {Object}     e1     first object
                     * @param       {Object}     e2     second object
                     * @return      {number}            y-difference between object positions, or x-difference if y values the same
                     */
                    var xySort = function (e1, e2) {
                        if (e1.y != e2.y)
                            return e1.y - e2.y;
                        return e1.x - e2.x;
                    };
                    // Sort elements by Y then X
                    eList.sort(xySort);
                    // Create a new list of sorted elements
                    var tList = [];
                    for (i = 0; i < eList.length; i++)
                        tList.push(eList[i].ip);
                    // Return the sorted element list
                    this.sortedInputs = tList;
                };
                /**
                 * Function     disableControl
                 * Scope        Public
                 * @param       {Element}      Pelem       Element to be disabled
                 * Description  Disables a KMW control element
                 */
                DOMManager.prototype.disableControl = function (Pelem) {
                    if (!this.isAttached(Pelem)) {
                        console.warn("KeymanWeb is not attached to element " + Pelem);
                    }
                    var cn = Pelem.className;
                    if (cn.indexOf('kmw-disabled') < 0) { // if not already explicitly disabled...
                        Pelem.className = cn ? cn + ' kmw-disabled' : 'kmw-disabled';
                    }
                    // The rest is triggered within MutationObserver code.
                    // See _EnablementMutationObserverCore.
                };
                /* ------ Defines independent, per-control keyboard setting behavior for the API. ------ */
                /**
                 * Function     setKeyboardForControl
                 * Scope        Public
                 * @param       {Element}    Pelem    Control element
                 * @param       {string|null=}    Pkbd     Keyboard (Clears the set keyboard if set to null.)
                 * @param       {string|null=}     Plc      Language Code
                 * Description  Set default keyboard for the control
                 */
                DOMManager.prototype.setKeyboardForControl = function (Pelem, Pkbd, Plc) {
                    /* pass null for kbd to specify no default, or '' to specify the default system keyboard. */
                    if (Pkbd !== null && Pkbd !== undefined) {
                        var index = Pkbd.indexOf("Keyboard_");
                        if (index < 0 && Pkbd != '') {
                            Pkbd = "Keyboard_" + Pkbd;
                        }
                    }
                    else {
                        Plc = null;
                    }
                    if (Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {
                        console.warn("'keymanweb.setKeyboardForControl' cannot set keyboard on iframes.");
                        return;
                    }
                    if (!this.isAttached(Pelem)) {
                        console.error("KeymanWeb is not attached to element " + Pelem);
                        return;
                    }
                    else {
                        Pelem._kmwAttachment.keyboard = Pkbd;
                        Pelem._kmwAttachment.languageCode = Plc;
                        // If Pelem is the focused element/active control, we should set the keyboard in place now.
                        // 'kmw_ip' is the touch-alias for the original page's control.
                        var lastElem = this.lastActiveElement;
                        if (lastElem && (lastElem == Pelem || lastElem == Pelem['kmw_ip'])) {
                            if (Pkbd != null && Plc != null) { // Second part necessary for Closure.
                                this.keyman.keyboardManager.setActiveKeyboard(Pkbd, Plc);
                            }
                            else {
                                this.keyman.keyboardManager.setActiveKeyboard(this.keyman.globalKeyboard, this.keyman.globalLanguageCode);
                            }
                        }
                    }
                };
                /**
                 * Function     getKeyboardForControl
                 * Scope        Public
                 * @param       {Element}    Pelem    Control element
                 * @return      {string|null}         The independently-managed keyboard for the control.
                 * Description  Returns the keyboard ID of the current independently-managed keyboard for this control.
                 *              If it is currently following the global keyboard setting, returns null instead.
                 */
                DOMManager.prototype.getKeyboardForControl = function (Pelem) {
                    if (!this.isAttached(Pelem)) {
                        console.error("KeymanWeb is not attached to element " + Pelem);
                        return null;
                    }
                    else {
                        return Pelem._kmwAttachment.keyboard;
                    }
                };
                /**
                 * Function     getLanguageForControl
                 * Scope        Public
                 * @param       {Element}    Pelem    Control element
                 * @return      {string|null}         The independently-managed keyboard for the control.
                 * Description  Returns the language code used with the current independently-managed keyboard for this control.
                 *              If it is currently following the global keyboard setting, returns null instead.
                 */
                DOMManager.prototype.getLanguageForControl = function (Pelem) {
                    if (!this.isAttached(Pelem)) {
                        console.error("KeymanWeb is not attached to element " + Pelem);
                        return null;
                    }
                    else {
                        return Pelem._kmwAttachment.languageCode; // Should we have a version for the language code, too?
                    }
                };
                /* ------ End independent, per-control keyboard setting behavior definitions. ------ */
                /**
                 * Set focus to last active target element (browser-dependent)
                 */
                DOMManager.prototype.focusLastActiveElement = function () {
                    var lastElem = this.lastActiveElement;
                    if (!lastElem) {
                        return;
                    }
                    this.keyman.uiManager.justActivated = true;
                    var target = dom.Utils.getOutputTarget(lastElem);
                    target.focus();
                };
                Object.defineProperty(DOMManager.prototype, "lastActiveElement", {
                    /**
                     * Get the last active target element *before* KMW activated (I1297)
                     *
                     * @return      {Element}
                     */
                    get: function () {
                        return dom.DOMEventHandlers.states._lastActiveElement;
                    },
                    set: function (Pelem) {
                        dom.DOMEventHandlers.states._lastActiveElement = Pelem;
                        var osk = this.keyman.osk;
                        if (osk) {
                            if (this.lastActiveElement == null && this.activeElement == null) {
                                // Assigning to the property does have side-effects.
                                // If the property is already unset, it's best to not unset it again.
                                osk.activeTarget = null;
                                this.keyman.osk.hideNow(); // originally from a different one, seemed to serve the same role?
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DOMManager.prototype, "activeElement", {
                    get: function () {
                        return dom.DOMEventHandlers.states._activeElement;
                    },
                    set: function (Pelem) {
                        var _a;
                        // Ensure that a TouchAliasElement is hidden whenever it is deactivated for input.
                        if (this.activeElement) {
                            if (dom.Utils.instanceof(this.keyman.domManager.activeElement, "TouchAliasElement")) {
                                this.keyman.domManager.activeElement.hideCaret();
                            }
                        }
                        dom.DOMEventHandlers.states._activeElement = Pelem;
                        var isActivating = this.keyman.uiManager.isActivating;
                        // Hide the OSK when the control is blurred, unless the UI is being temporarily selected
                        var osk = this.keyman.osk;
                        // const device = this.keyman.util.device;
                        if (osk) {
                            var target = ((_a = Pelem === null || Pelem === void 0 ? void 0 : Pelem._kmwAttachment) === null || _a === void 0 ? void 0 : _a.interface) || null;
                            if (osk && (target || !isActivating)) {
                                // Do not unset the field if the UI is activated.
                                osk.activeTarget = target;
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 *  Set the active input element directly optionally setting focus
                 *
                 *  @param  {Object|string} e         element id or element
                 *  @param  {boolean=}      setFocus  optionally set focus  (KMEW-123)
                 **/
                DOMManager.prototype.setActiveElement = function (e, setFocus) {
                    if (typeof e == "string") { // Can't instanceof string, and String is a different type.
                        e = document.getElementById(e);
                    }
                    if (this.keyman.isEmbedded) {
                        // If we're in embedded mode, auto-attach to the element specified by the page.
                        if (!this.isAttached(e)) {
                            this.attachToControl(e);
                        }
                        // Non-attached elements cannot be set as active.
                    }
                    else if (!this.isAttached(e)) {
                        console.warn("Cannot set an element KMW is not attached to as the active element.");
                        return;
                    }
                    // As this is an API function, someone may pass in the base of a touch element.
                    // We need to respond appropriately.
                    e = (e['kmw_ip'] ? e['kmw_ip'] : e);
                    // If we're changing controls, don't forget to properly manage the keyboard settings!
                    // It's only an issue on 'native' (non-embedded) code paths.
                    if (!this.keyman.isEmbedded) {
                        this.keyman.touchAliasing._BlurKeyboardSettings(this.keyman.domManager.lastActiveElement);
                    }
                    // No need to reset context if we stay within the same element.
                    if (this.activeElement != e) {
                        this.keyman['resetContext'](e);
                    }
                    this.activeElement = this.lastActiveElement = e;
                    if (!this.keyman.isEmbedded) {
                        this.keyman.touchAliasing._FocusKeyboardSettings(e, false);
                    }
                    // Allow external focusing KMEW-123
                    if (arguments.length > 1 && setFocus) {
                        if (this.keyman.util.device.touchable) {
                            var tEvent = {
                                clientX: 0,
                                clientY: 0,
                                target: e
                            };
                            // Kinda hacky, but gets the job done.
                            this.keyman.touchAliasing.setFocusWithTouch(tEvent);
                        }
                        else {
                            this.focusLastActiveElement();
                        }
                    }
                };
                /** Sets the active input element only if it is presently null.
                 *
                 * @param  {Element}
                 */
                DOMManager.prototype.initActiveElement = function (Lelem) {
                    if (this.activeElement == null) {
                        this.activeElement = Lelem;
                    }
                };
                /**
                 * Move focus to next (or previous) input or text area element on TAB
                 *   Uses list of actual input elements
                 *
                 *   Note that activeElement() on touch devices returns the DIV that overlays
                 *   the input element, not the element itself.
                 *
                 * @param      {number|boolean}  bBack     Direction to move (0 or 1)
                 */
                DOMManager.prototype.moveToNext = function (bBack) {
                    var i, t = this.sortedInputs, activeBase = this.activeElement;
                    var touchable = this.keyman.util.device.touchable;
                    if (t.length == 0) {
                        return;
                    }
                    // For touchable devices, get the base element of the DIV
                    if (touchable) {
                        activeBase = activeBase.base;
                    }
                    // Identify the active element in the list of inputs ordered by position
                    for (i = 0; i < t.length; i++) {
                        if (t[i] == activeBase)
                            break;
                    }
                    // Find the next (or previous) element in the list
                    i = bBack ? i - 1 : i + 1;
                    // Treat the list as circular, wrapping the index if necessary.
                    i = i >= t.length ? i - t.length : i;
                    i = i < 0 ? i + t.length : i;
                    // Move to the selected element
                    if (touchable) {
                        // Set focusing flag to prevent OSK disappearing
                        dom.DOMEventHandlers.states.focusing = true;
                        var target = t[i]['kmw_ip'];
                        // Focus if next element is non-mapped
                        if (typeof (target) == 'undefined') {
                            t[i].focus();
                        }
                        else { // Or reposition the caret on the input DIV if mapped
                            var alias = target;
                            this.keyman.domManager.setActiveElement(target); // Handles both `lastActive` + `active`.
                            alias.setTextCaret(10000); // Safe b/c touchable == true.
                            alias.scrollInput(); // mousedown check
                            target.focus();
                        }
                    }
                    else { // Behaviour for desktop browsers
                        t[i].focus();
                    }
                };
                /**
                 * Move focus to user-specified element
                 *
                 *  @param  {string|Object}   e   element or element id
                 *
                 **/
                DOMManager.prototype.moveToElement = function (e) {
                    var i;
                    if (typeof (e) == "string") { // Can't instanceof string, and String is a different type.
                        e = document.getElementById(e);
                    }
                    if (this.keyman.util.device.touchable && e['kmw_ip']) {
                        e['kmw_ip'].focus();
                    }
                    else {
                        e.focus();
                    }
                };
                /* ----------------------- Editable IFrame methods ------------------- */
                /**
                 * Function     _IsIEEditableIframe
                 * Scope        Private
                 * @param       {Object}          Pelem         Iframe element
                 *              {boolean|number}  PtestOn       1 to test if frame content is editable (TODO: unclear exactly what this is doing!)
                 * @return      {boolean}
                 * Description  Test if element is an IE editable IFrame
                 */
                DOMManager.prototype._IsIEEditableIframe = function (Pelem, PtestOn) {
                    var Ldv, Lvalid = Pelem && (Ldv = Pelem.tagName) && Ldv.toLowerCase() == 'body' && (Ldv = Pelem.ownerDocument) && Ldv.parentWindow;
                    return (!PtestOn && Lvalid) || (PtestOn && (!Lvalid || Pelem.isContentEditable));
                };
                /**
                 * Function     _IsMozillaEditableIframe
                 * Scope        Private
                 * @param       {Object}           Pelem    Iframe element
                 * @param       {boolean|number}   PtestOn  1 to test if 'designMode' is 'ON'
                 * @return      {boolean}
                 * Description  Test if element is a Mozilla editable IFrame
                 */
                DOMManager.prototype._IsMozillaEditableIframe = function (Pelem, PtestOn) {
                    var Ldv, Lvalid = Pelem && (Ldv = Pelem.defaultView) && Ldv.frameElement; // Probable bug!
                    return (!PtestOn && Lvalid) || (PtestOn && (!Lvalid || Ldv.document.designMode.toLowerCase() == 'on'));
                };
                /* ----------------------- Initialization methods ------------------ */
                /**
                 * Get the user-specified (or default) font for the first mapped input or textarea element
                 * before applying any keymanweb styles or classes
                 *
                 *  @return   {string}
                 **/
                DOMManager.prototype.getBaseFont = function () {
                    var util = this.keyman.util;
                    var ipInput = document.getElementsByTagName('input'), ipTextArea = document.getElementsByTagName('textarea'), n = 0, fs, fsDefault = 'Arial,sans-serif';
                    // Find the first input element (if it exists)
                    if (ipInput.length == 0 && ipTextArea.length == 0) {
                        n = 0;
                    }
                    else if (ipInput.length > 0 && ipTextArea.length == 0) {
                        n = 1;
                    }
                    else if (ipInput.length == 0 && ipTextArea.length > 0) {
                        n = 2;
                    }
                    else {
                        var firstInput = ipInput[0];
                        var firstTextArea = ipTextArea[0];
                        if (firstInput.offsetTop < firstTextArea.offsetTop) {
                            n = 1;
                        }
                        else if (firstInput.offsetTop > firstTextArea.offsetTop) {
                            n = 2;
                        }
                        else if (firstInput.offsetLeft < firstTextArea.offsetLeft) {
                            n = 1;
                        }
                        else if (firstInput.offsetLeft > firstTextArea.offsetLeft) {
                            n = 2;
                        }
                    }
                    // Grab that font!
                    switch (n) {
                        case 0:
                            fs = fsDefault;
                        case 1:
                            fs = util.getStyleValue(ipInput[0], 'font-family');
                        case 2:
                            fs = util.getStyleValue(ipTextArea[0], 'font-family');
                    }
                    if (typeof (fs) == 'undefined' || fs == 'monospace') {
                        fs = fsDefault;
                    }
                    return fs;
                };
                /**
                 * Initialize the desktop user interface as soon as it is ready
                **/
                DOMManager.prototype.initializeUI = function () {
                    if (this.keyman.ui && this.keyman.ui['initialize'] instanceof Function) {
                        this.keyman.ui['initialize']();
                        // Display the OSK (again) if enabled, in order to set its position correctly after
                        // adding the UI to the page
                        this.keyman.osk.present();
                    }
                    else if (this.keyman.isEmbedded) {
                        // UI modules aren't utilized in embedded mode.  There's nothing to init, so we simply
                        // return instead of waiting for a UI module that will never come.
                        return;
                    }
                    else {
                        window.setTimeout(this.initializeUI.bind(this), 1000);
                    }
                };
                DOMManager.suppressFocusCheck = function (e) {
                    if (dom.DOMEventHandlers.states._IgnoreBlurFocus) {
                        // Prevent triggering other blur-handling events (as possible)
                        e.stopPropagation();
                        e.cancelBubble = true;
                    }
                    // But DO perform default event behavior (actually blurring & focusing the affected element)
                    return true;
                };
                return DOMManager;
            }());
            dom.DOMManager = DOMManager;
        })(dom = keyman_8.dom || (keyman_8.dom = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes KMW-added property declaration extensions for HTML elements.
/// <reference path="kmwexthtml.ts" />
// Includes the Device definition set.
/// <reference path="kmwdevice.ts" />
// Includes the DOM utils, since our UI modules need access to certain methods here.
/// <reference path="dom/utils.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_9) {
        var DOMEventTracking = /** @class */ (function () {
            function DOMEventTracking(Pelem, Peventname, Phandler, PuseCapture) {
                this.Pelem = Pelem;
                this.Peventname = Peventname.toLowerCase();
                this.Phandler = Phandler;
                this.PuseCapture = PuseCapture;
            }
            DOMEventTracking.prototype.equals = function (other) {
                return this.Pelem == other.Pelem && this.Peventname == other.Peventname &&
                    this.Phandler == other.Phandler && this.PuseCapture == other.PuseCapture;
            };
            return DOMEventTracking;
        }());
        ;
        var Util = /** @class */ (function () {
            function Util(keyman) {
                this.linkedStylesheets = [];
                // An object mapping event names to individual event lists.  Maps strings to arrays.
                this.events = {};
                this.currentEvents = []; // The event messaging call stack.
                this.domEvents = [];
                this.embeddedFonts = []; // Array of currently embedded font descriptor entries.  (Is it just a string?)
                //  Unofficial API used by our desktop UIs.
                this._GetAbsolute = this.getAbsolute;
                /**
                 * Select start handler (to replace multiple inline handlers) (Build 360)
                 */
                this.selectStartHandler = function () {
                    return false;
                };
                /**
             * Function     _CancelMouse
             * Scope        Private
             * @param       {Object}      e     event
             * @return      {boolean}           always false
             * Description  Closes mouse click event
             */
                this._CancelMouse = function (e) {
                    e = com.keyman.singleton._GetEventObject(e); // I2404 - Manage IE events in IFRAMEs
                    if (e && e.preventDefault) {
                        e.preventDefault();
                    }
                    if (e) {
                        e.cancelBubble = true;
                        e.returnValue = false;
                    } // I2409 - Avoid focus loss for visual keyboard events
                    return false;
                };
                this.createElement = this._CreateElement;
                this.initDevices();
                this.keyman = keyman;
            }
            // Possible alternative:  https://www.npmjs.com/package/language-tags
            // This would necessitate linking in a npm module into compiled KeymanWeb, though.
            Util.prototype['getLanguageCodes'] = function (lgCode) {
                if (lgCode.indexOf('-') == -1) {
                    return [lgCode];
                }
                else {
                    return lgCode.split('-');
                }
            };
            Util.prototype.initDevices = function () {
                this.device = new keyman_9.Device();
                this.physicalDevice = new keyman_9.Device();
                this.activeDevice = this.device;
                // Initialize the true device values.
                this.device.detect();
                /* DEBUG: Force touch device   (Build 360)
          
                device.touchable = true;
                device.browser = 'safari';
                device.formFactor = 'tablet';
                device.OS = 'iOS';
          
                END DEBUG */
                /* If we've made it to this point of initialization and aren't anything else, KeymanWeb assumes
                * we're a desktop.  Since we don't yet support desktops with touch-based input, we disable it here.
                */
                if (this.device.formFactor == 'desktop') {
                    this.device.touchable = false;
                }
                /**
                 * Represents hardware-based keystrokes regardless of the 'true' device, facilitating hardware keyboard input
                 * whenever touch-based input is available.
                 */
                this.physicalDevice = new keyman_9.Device();
                this.physicalDevice.touchable = false;
                this.physicalDevice.browser = this.device.browser;
                this.physicalDevice.formFactor = 'desktop';
                this.physicalDevice.OS = this.device.OS;
            };
            /**
             * Function     arrayFromNodeList
             * Scope        Public
             * @param       {Object}    nl a node list, as returned from getElementsBy_____ methods.
             * Description  Transforms a node list into an array.   *
             * @return      {Array<Element>}
             */
            Util.prototype.arrayFromNodeList = function (nl) {
                var res = [];
                for (var i = 0; i < nl.length; i++) {
                    res.push(nl[i]);
                }
                return res;
            };
            /**
             * Function    addEventListener
             * Scope       Private
             * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove
             * @param      {function(Object)}   func      event handler
             * @return     {boolean}
             * Description Add (or replace) an event listener for this component
             */
            Util.prototype.addEventListener = function (event, func) {
                this.removeEventListener(event, func);
                this.events[event].push(func);
                return true;
            };
            /**
             * Function    removeEventListener
             * Scope       Private
             * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove
             * @param      {function(Object)}   func      event handler
             * @return     {boolean}
             * Description Remove the specified function from the listeners for this event
             */
            Util.prototype.removeEventListener = function (event, func) {
                if (typeof this.events[event] == 'undefined') {
                    this.events[event] = [];
                }
                for (var i = 0; i < this.events[event].length; i++) {
                    if (this.events[event][i] == func) {
                        this.events[event].splice(i, 1);
                        return true;
                    }
                }
                return false;
            };
            /**
             * Function    callEvent
             * Scope       Private
             * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove
             * @param      {Array}      params    parameter array for function
             * @return     {boolean}
             * Description Invoke an event using any function with up to four arguments
             */
            Util.prototype.callEvent = function (event, params) {
                if (typeof this.events[event] == 'undefined') {
                    return true;
                }
                if (this.currentEvents.indexOf(event) != -1) {
                    return false; // Avoid event messaging recursion!
                }
                this.currentEvents.push(event);
                for (var i = 0; i < this.events[event].length; i++) {
                    var func = this.events[event][i], result = false;
                    try {
                        result = func(params);
                    }
                    catch (strExcept) {
                        console.error(strExcept);
                        result = false;
                    } //don't know whether to use true or false here
                    if (result === false) {
                        this.currentEvents.pop();
                        return false;
                    }
                }
                this.currentEvents.pop();
                return true;
            };
            /**
             * Function     attachDOMEvent: Note for most browsers, adds an event to a chain, doesn't stop existing events
             * Scope        Public
             * @param       {Object}    Pelem       Element (or IFrame-internal Document) to which event is being attached
             * @param       {string}    Peventname  Name of event without 'on' prefix
             * @param       {function(Object)}  Phandler    Event handler for event
             * @param       {boolean=}  PuseCapture True only if event to be handled on way to target element
             * Description  Attaches event handler to element DOM event
             */
            Util.prototype.attachDOMEvent = function (Pelem, Peventname, Phandler, PuseCapture) {
                this.detachDOMEvent(Pelem, Peventname, Phandler, PuseCapture);
                Pelem.addEventListener(Peventname, Phandler, PuseCapture ? true : false);
                // Since we're attaching to the DOM, these events should be tracked for detachment during shutdown.
                var event = new DOMEventTracking(Pelem, Peventname, Phandler, PuseCapture);
                this.domEvents.push(event);
            };
            /**
             * Function     detachDOMEvent
             * Scope        Public
             * @param       {Object}    Pelem       Element from which event is being detached
             * @param       {string}    Peventname  Name of event without 'on' prefix
             * @param       {function(Object)}  Phandler    Event handler for event
             * @param       {boolean=}  PuseCapture True if event was being handled on way to target element
             * Description Detaches event handler from element [to prevent memory leaks]
             */
            Util.prototype.detachDOMEvent = function (Pelem, Peventname, Phandler, PuseCapture) {
                Pelem.removeEventListener(Peventname, Phandler, PuseCapture);
                // Since we're detaching, we should drop the tracking data from the old event.
                var event = new DOMEventTracking(Pelem, Peventname, Phandler, PuseCapture);
                for (var i = 0; i < this.domEvents.length; i++) {
                    if (this.domEvents[i].equals(event)) {
                        this.domEvents.splice(i, 1);
                        break;
                    }
                }
            };
            /**
             * Function     getOption
             * Scope        Public
             * @param       {string}    optionName  Name of option
             * @param       {*=}        dflt        Default value of option
             * @return      {*}
             * Description  Returns value of named option
             */
            Util.prototype.getOption = function (optionName, dflt) {
                if (optionName in this.keyman.options) {
                    return this.keyman.options[optionName];
                }
                else if (arguments.length > 1) {
                    return dflt;
                }
                else {
                    return '';
                }
            };
            /**
             * More reliable way of identifying  element class
             * @param   {Object}  e HTML element
             * @param   {string}  name  class name
             * @return  {boolean}
             */
            Util.prototype.hasClass = function (e, name) {
                var className = " " + name + " ";
                return (" " + e.className + " ").replace(/[\n\t\r\f]/g, " ").indexOf(className) >= 0;
            };
            /**
             * Function     setOption
             * Scope        Public
             * @param       {string}    optionName  Name of option
             * @param       {*=}        value       Value of option
             * Description  Sets value of named option
             */
            Util.prototype.setOption = function (optionName, value) {
                this.keyman.options[optionName] = value;
            };
            //  Unofficial API used by our desktop UIs.
            Util.prototype.getAbsoluteX = function (Pobj) {
                return keyman_9.dom.Utils.getAbsoluteX(Pobj);
            };
            //  Unofficial API used by our desktop UIs.
            Util.prototype.getAbsoluteY = function (Pobj) {
                return keyman_9.dom.Utils.getAbsoluteY(Pobj);
            };
            /**
             * Function     getAbsolute
             * Scope        Public
             * @param       {Object}    Pobj        HTML element
             * @return      {Object.<string,number>}
             * Description  Returns absolute position of Pobj element with respect to page
             */
            Util.prototype.getAbsolute = function (Pobj) {
                var p = {
                    /* @ export */
                    x: this.getAbsoluteX(Pobj),
                    /* @ export */
                    y: this.getAbsoluteY(Pobj)
                };
                return p;
            };
            // Found a bit of magic formatting that allows dynamic return typing for a specified element tag!
            Util.prototype._CreateElement = function (nodeName) {
                var e = document.createElement(nodeName);
                // Make element unselectable (Internet Explorer)
                if (typeof e.onselectstart != 'undefined') { //IE route
                    e.onselectstart = this.selectStartHandler; // Build 360
                }
                else { // And for well-behaved browsers (may also work for IE9+, but not necessary)
                    e.style.MozUserSelect = "none";
                    e.style.KhtmlUserSelect = "none";
                    e.style.UserSelect = "none";
                    e.style.WebkitUserSelect = "none";
                }
                return e;
            };
            /**
             * Function     getIEVersion
             * Scope        Public
             * @return      {number}
             * Description  Return IE version number (or 999 if browser not IE)
             */
            Util.prototype.getIEVersion = function () {
                return keyman_9.Device._GetIEVersion();
            };
            /**
             * Get browser-independent computed style value for element
             *
             * @param       {Element}     e             HTML element
             * @param       {string}      s             CSS style name
             * @return      {*}
             */
            Util.prototype.getStyleValue = function (e, s) {
                // Build 349: error trap added, since on iOS, getPropertyValue may fail
                // and crash in some cases, possibly if passed a text node
                try {
                    if (e && (typeof (window.getComputedStyle) != 'undefined')) {
                        return window.getComputedStyle(e, '').getPropertyValue(s);
                    }
                }
                catch (ex) { }
                // Return empty string if unable to get style value
                return '';
            };
            /**
             * Get browser-independent computed style integer value for element  (Build 349)
             *
             * @param       {Element}     e             HTML element
             * @param       {string}      s             CSS style name
             * @param       {number=}     d             default value if NaN
             * @return      {number}                    integer value of style
             */
            Util.prototype.getStyleInt = function (e, s, d) {
                var x = parseInt(this.getStyleValue(e, s), 10);
                if (!isNaN(x)) {
                    return x;
                }
                // Return the default value if numeric, else 0
                if (typeof (d) == 'number') {
                    return d;
                }
                else {
                    return 0;
                }
            };
            /**
             * Expose the touchable state for UIs - will disable external UIs entirely
             **/
            Util.prototype.isTouchDevice = function () {
                return this.device.touchable;
            };
            /**
             * Get orientation of tablet or phone  display
             *
             * @return      {boolean}
             */
            Util.prototype.portraitView = function () {
                return !this.landscapeView();
            };
            /**
             * Get orientation of tablet or phone  display
             *
             * @return      {boolean}
             */
            Util.prototype.landscapeView = function () {
                var orientation;
                // Assume portrait mode if orientation undefined
                if (typeof window.orientation != 'undefined') { // Used by iOS Safari
                    // Else landscape for +/-90, portrait for 0, +/-180
                    orientation = window.orientation;
                }
                else if (typeof window.screen.orientation != 'undefined') { // Used by Firefox, Chrome
                    orientation = window.screen.orientation.angle;
                }
                if (orientation !== undefined) {
                    return (Math.abs(orientation / 90) == 1);
                }
                else {
                    return false;
                }
            };
            /**
             * Get viewport scale factor for this document
             *
             * @return      {number}
             */
            Util.prototype.getViewportScale = function () {
                // This can sometimes fail with some browsers if called before document defined,
                // so catch the exception
                try {
                    // Get viewport width
                    var viewportWidth = document.documentElement.clientWidth;
                    // Return a default value if screen width is greater than the viewport width (not fullscreen).
                    if (screen.width > viewportWidth) {
                        return 1;
                    }
                    // Get the orientation corrected screen width
                    var screenWidth = screen.width;
                    if (this.landscapeView()) {
                        // Take larger of the two dimensions
                        if (screen.width < screen.height) {
                            screenWidth = screen.height;
                        }
                    }
                    else {
                        // Take smaller of the two dimensions
                        if (screen.width > screen.height) {
                            screenWidth = screen.height;
                        }
                    }
                    // Calculate viewport scale
                    return Math.round(100 * screenWidth / window.innerWidth) / 100;
                }
                catch (ex) {
                    return 1;
                }
            };
            /**
             * Return height of URL bar on mobile devices, if visible
             * TODO: This does not seem to be right, so is not currently used
             *
             * @return      {number}
             */
            Util.prototype.barHeight = function () {
                var dy = 0;
                if (this.device.formFactor == 'phone') {
                    dy = screen.height / 2 - window.innerHeight - (this.landscapeView() ? this.device.dyLandscape : this.device.dyPortrait);
                }
                return dy;
            };
            /**
             * Function     _EncodeEntities
             * Scope        Private
             * @param       {string}      P_txt         string to be encoded
             * @return      {string}                    encoded (html-safe) string
             * Description Encode angle brackets and ampersand in text string
             */
            Util.prototype._EncodeEntities = function (P_txt) {
                return P_txt.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;'); // I1452 part 2
            };
            /**
             * Function     createShim
             * Scope        Public
             * Description  [Deprecated] Create an IFRAME element to go between KMW and drop down (to fix IE6 bug)
             * @deprecated
             */
            Util.prototype.createShim = function () {
                console.warn("The util.createShim function is deprecated, as its old functionality is no longer needed.  " +
                    "It and references to its previously-produced shims may be safely removed.");
                return;
            };
            // I1476 - Handle SELECT overlapping BEGIN
            /**
             * Function     showShim
             * Scope        Public
             * @param       {Object}      Pvkbd         Visual keyboard DIV element
             * @param       {Object}      Pframe        IFRAME shim element
             * @param       {Object}      Phelp         OSK Help DIV element
             * Description  [Deprecated] Display iFrame under OSK at its currently defined position, to allow OSK to overlap SELECT elements (IE6 fix)
             * @deprecated
             */
            Util.prototype.showShim = function (Pvkbd, Pframe, Phelp) {
                console.warn("The util.showShim function is deprecated, as its old functionality is no longer needed.  It may be safely removed.");
            };
            /**
             * Function     hideShim
             * Scope        Public
             * @param       {Object}      Pframe        IFRAME shim element
             * Description  [Deprecated] Hide iFrame shim containing OSK
             * @deprecated
             */
            Util.prototype.hideShim = function (Pframe) {
                console.warn("The util.hideShim function is deprecated, as its old functionality is no longer needed.  It may be safely removed.");
            };
            /**
             * Function     rgba
             * Scope        Public
             * @param       {Object}      s           element style object
             * @param       {number}      r           red value, 0-255
             * @param       {number}      g           green value, 0-255
             * @param       {number}      b           blue value, 0-255
             * @param       {number}      a           opacity value, 0-1.0
             * @return      {string}                  background colour style string
             * Description  Browser-independent alpha-channel management
             */
            Util.prototype.rgba = function (s, r, g, b, a) {
                var bgColor = 'transparent';
                try {
                    bgColor = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
                }
                catch (ex) {
                    bgColor = 'rgb(' + r + ',' + g + ',' + b + ')';
                }
                return bgColor;
            };
            /**
             * Add a stylesheet to a page programmatically, for use by the OSK, the UI or the page creator
             *
             * @param       {string}        s             style string
             * @return      {Object}                      returns the object reference
             **/
            Util.prototype.addStyleSheet = function (s) {
                var _ElemStyle = document.createElement('style');
                _ElemStyle.type = 'text/css';
                _ElemStyle.appendChild(document.createTextNode(s));
                var _ElemHead = document.getElementsByTagName('HEAD');
                if (_ElemHead.length > 0) {
                    _ElemHead[0].appendChild(_ElemStyle);
                }
                else {
                    document.body.appendChild(_ElemStyle); // Won't work on Chrome, ah well
                }
                this.linkedStylesheets.push(_ElemStyle);
                return _ElemStyle;
            };
            /**
             * Remove a stylesheet element
             *
             * @param       {Object}        s             style sheet reference
             * @return      {boolean}                     false if element is not a style sheet
             **/
            Util.prototype.removeStyleSheet = function (s) {
                if (s == null || typeof (s) != 'object') {
                    return false;
                }
                if (s.nodeName != 'STYLE') {
                    return false;
                }
                if (typeof (s.parentNode) == 'undefined' || s.parentNode == null) {
                    return false;
                }
                s.parentNode.removeChild(s);
                return true;
            };
            /**
             * Add a reference to an external stylesheet file
             *
             * @param   {string}  s   path to stylesheet file
             */
            Util.prototype.linkStyleSheet = function (s) {
                var headElements = document.getElementsByTagName('head');
                if (headElements.length > 0) {
                    var linkElement = document.createElement('link');
                    linkElement.type = 'text/css';
                    linkElement.rel = 'stylesheet';
                    linkElement.href = s;
                    this.linkedStylesheets.push(linkElement);
                    headElements[0].appendChild(linkElement);
                }
            };
            /**
             * Add a stylesheet with a font-face CSS descriptor for the embedded font appropriate
             * for the browser being used
             *
             * @param    {Object}  fd  keymanweb font descriptor
             **/
            Util.prototype.addFontFaceStyleSheet = function (fd) {
                // Test if a valid font descriptor
                if (typeof (fd) == 'undefined')
                    return;
                if (typeof (fd['files']) == 'undefined')
                    fd['files'] = fd['source'];
                if (typeof (fd['files']) == 'undefined')
                    return;
                var i, ttf = '', woff = '', eot = '', svg = '', fList = [];
                // TODO: 22 Aug 2014: check that font path passed from cloud is actually used!
                // Do not add a new font-face style sheet if already added for this font
                for (i = 0; i < this.embeddedFonts.length; i++) {
                    if (this.embeddedFonts[i] == fd['family']) {
                        return;
                    }
                }
                if (typeof (fd['files']) == 'string') {
                    fList[0] = fd['files'];
                }
                else {
                    fList = fd['files'];
                }
                for (i = 0; i < fList.length; i++) {
                    if (fList[i].toLowerCase().indexOf('.otf') > 0)
                        ttf = fList[i];
                    if (fList[i].toLowerCase().indexOf('.ttf') > 0)
                        ttf = fList[i];
                    if (fList[i].toLowerCase().indexOf('.woff') > 0)
                        woff = fList[i];
                    if (fList[i].toLowerCase().indexOf('.eot') > 0)
                        eot = fList[i];
                    if (fList[i].toLowerCase().indexOf('.svg') > 0)
                        svg = fList[i];
                }
                // Font path qualified to support page-relative fonts (build 347)
                if (ttf != '' && (ttf.indexOf('/') < 0)) {
                    ttf = this.keyman.options['fonts'] + ttf;
                }
                if (woff != '' && (woff.indexOf('/') < 0)) {
                    woff = this.keyman.options['fonts'] + woff;
                }
                if (eot != '' && (eot.indexOf('/') < 0)) {
                    eot = this.keyman.options['fonts'] + eot;
                }
                if (svg != '' && (svg.indexOf('/') < 0)) {
                    svg = this.keyman.options['fonts'] + svg;
                }
                // Build the font-face definition according to the browser being used
                var s = '@font-face {\nfont-family:'
                    + fd['family'] + ';\nfont-style:normal;\nfont-weight:normal;\n';
                // Detect if Internet Explorer and version if so
                var IE = keyman_9.Device._GetIEVersion();
                // Build the font source string according to the browser,
                // but return without adding the style sheet if the required font type is unavailable
                // Modern browsers: use WOFF, TTF and fallback finally to SVG. Don't provide EOT
                if (IE >= 9) {
                    if (this.device.OS == 'iOS') {
                        if (ttf != '') {
                            // Modify the url if required to prevent caching
                            ttf = this.unCached(ttf);
                            s = s + 'src:url(\'' + ttf + '\') format(\'truetype\');';
                        }
                        else {
                            return;
                        }
                    }
                    else {
                        var s0 = [];
                        if (this.device.OS == 'Android') {
                            // Android 4.2 and 4.3 have bugs in their rendering for some scripts
                            // with embedded ttf or woff.  svg mostly works so is a better initial
                            // choice on the Android browser.
                            if (svg != '') {
                                s0.push("url('" + svg + "') format('svg')");
                            }
                            if (woff != '') {
                                s0.push("url('" + woff + "') format('woff')");
                            }
                            if (ttf != '') {
                                s0.push("url('" + ttf + "') format('truetype')");
                            }
                        }
                        else {
                            if (woff != '') {
                                s0.push("url('" + woff + "') format('woff')");
                            }
                            if (ttf != '') {
                                s0.push("url('" + ttf + "') format('truetype')");
                            }
                            if (svg != '') {
                                s0.push("url('" + svg + "') format('svg')");
                            }
                        }
                        if (s0.length == 0) {
                            return;
                        }
                        s += 'src:' + s0.join(',') + ';';
                    }
                }
                else { // IE 6-8
                    if (eot != '') {
                        s = s + 'src:url(\'' + eot + '\');';
                    }
                    else {
                        return;
                    }
                }
                s = s + '\n}\n';
                this.addStyleSheet(s);
                this.embeddedFonts.push(fd['family']);
            };
            /**
             * Allow forced reload if necessary (stub only here)
             *
             *  @param  {string}  s unmodified URL
             *  @return {string}    modified URL
             */
            Util.prototype.unCached = function (s) {
                // var t=(new Date().getTime());
                // s = s + '?v=' + t;
                return s;
            };
            /**
             * Document cookie parsing for use by kernel, OSK, UI etc.
             *
             * @param       {string=}       cn        cookie name (optional)
             * @return      {Object}                  array of names and strings, or array of variables and values
             */
            Util.prototype.loadCookie = function (cn) {
                var v = {};
                if (arguments.length > 0) {
                    var cx = this.loadCookie();
                    for (var t in cx) {
                        if (t == cn) {
                            var d = decodeURIComponent(cx[t]).split(';');
                            for (var i = 0; i < d.length; i++) {
                                var xc = d[i].split('=');
                                if (xc.length > 1) {
                                    v[xc[0]] = xc[1];
                                }
                                else {
                                    v[xc[0]] = '';
                                }
                            }
                        }
                    }
                }
                else {
                    if (typeof (document.cookie) != 'undefined' && document.cookie != '') {
                        var c = document.cookie.split(/;\s*/);
                        for (var i = 0; i < c.length; i++) {
                            var d = c[i].split('=');
                            if (d.length == 2) {
                                v[d[0]] = d[1];
                            }
                        }
                    }
                }
                return v;
            };
            /**
             * Standard cookie saving for use by kernel, OSK, UI etc.
             *
             * @param       {string}      cn            name of cookie
             * @param       {Object}      cv            object with array of named arguments and values
             */
            Util.prototype.saveCookie = function (cn, cv) {
                var s = '';
                for (var v in cv) {
                    s = s + v + '=' + cv[v] + ";";
                }
                var d = new Date(new Date().valueOf() + 1000 * 60 * 60 * 24 * 30).toUTCString();
                document.cookie = cn + '=' + encodeURIComponent(s) + '; path=/; expires=' + d; //Fri, 31 Dec 2099 23:59:59 GMT;';
            };
            /**
             * Function     toNumber
             * Scope        Public
             * @param       {string}      s            numeric string
             * @param       {number}      dflt         default value
             * @return      {number}
             * Description  Return string converted to integer or default value
             */
            Util.prototype.toNumber = function (s, dflt) {
                var x = parseInt(s, 10);
                return isNaN(x) ? dflt : x;
            };
            /**
             * Function     toNumber
             * Scope        Public
             * @param       {string}      s            numeric string
             * @param       {number}      dflt         default value
             * @return      {number}
             * Description  Return string converted to real value or default value
             */
            Util.prototype.toFloat = function (s, dflt) {
                var x = parseFloat(s);
                return isNaN(x) ? dflt : x;
            };
            /**
             * Function     toNzString
             * Scope        Public
             * @param       {*}           item         variable to test
             * @param       {?*=}         dflt         default value
             * @return      {*}
             * Description  Test if a variable is null, false, empty string, or undefined, and return as string
             */
            Util.prototype.nzString = function (item, dflt) {
                var dfltValue = '';
                if (arguments.length > 1) {
                    dfltValue = dflt;
                }
                if (typeof (item) == 'undefined') {
                    return dfltValue;
                }
                if (item == null) {
                    return dfltValue;
                }
                if (item == 0 || item == '') {
                    return dfltValue;
                }
                return '' + item;
            };
            /**
             * Return the event target for any browser
             *
             * @param       {Event}      e        event
             * @return      {Object}              HTML element
             */
            Util.prototype.eventTarget = function (e) {
                if (!e) {
                    return null;
                }
                else if (e.target) { // most browsers
                    return e.target;
                }
                else if (e.srcElement) {
                    return e.srcElement;
                }
                else if (window.event) { //IE 8 (and earlier)
                    return window.event.srcElement;
                }
                else {
                    return null; // shouldn't happen!
                }
            };
            /**
             * Return the event type for any browser
             *
             * @param       {Event}      e        event
             * @return      {string}              type of event
             */
            Util.prototype.eventType = function (e) {
                if (e && e.type) { // most browsers
                    return e.type;
                }
                else if (window.event) { // IE 8 (and earlier)
                    return window.event.type;
                }
                else {
                    return ''; // shouldn't happen!
                }
            };
            /**
             * Customized alert.
             *
             * @param     {string}        s       alert text
             * @param     {function()=}   fn      function to call when alert dismissed
             */
            Util.prototype.alert = function (s, fn) {
                var bg = this.waiting, nn = bg.firstChild.childNodes;
                nn[0].style.display = 'block';
                nn[1].className = 'kmw-alert-text';
                nn[1].innerHTML = s;
                nn[2].style.display = 'none';
                bg.style.display = 'block';
                bg.dismiss = arguments.length > 1 ? fn : null;
            };
            // Stub definition to be fleshed out depending upon native/embedded mode.
            Util.prototype.wait = function (s) {
            };
            /**
             * Customized internal alert. This is enabled/disabled by the option flag 'useAlerts'
             *
             * @param     {string}        s       alert text
             * @param     {function()=}   fn      function to call when alert dismissed
             */
            Util.prototype.internalAlert = function (s, fn) {
                if (this.keyman.options.useAlerts) {
                    this.alert(s, fn);
                }
            };
            /**
             *  Prepare the background and keyboard loading wait message box
             *  Should not be called before options are defined during initialization
             **/
            Util.prototype.prepareWait = function () {
                var bg = document.createElement('DIV'), lb = document.createElement('DIV'), lt = document.createElement('DIV'), gr = document.createElement('DIV'), bx = document.createElement('DIV');
                bg.className = 'kmw-wait-background';
                lb.className = 'kmw-wait-box';
                bg.dismiss = null;
                lt.className = 'kmw-wait-text';
                gr.className = 'kmw-wait-graphic';
                bx.className = 'kmw-alert-close';
                // Close alert if anywhere in box is touched, since close box is too small on mobiles
                lb.onmousedown = lb.onclick = function (e) {
                    // Ignore if waiting, only handle for alert
                    if (bx.style.display == 'block') {
                        bg.style.display = 'none';
                        if (bg.dismiss) {
                            bg.dismiss();
                        }
                    }
                };
                lb.addEventListener('touchstart', lb.onclick, false);
                bg.onmousedown = bg.onclick = function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                };
                bg.addEventListener('touchstart', bg.onclick, false);
                lb.appendChild(bx);
                lb.appendChild(lt);
                lb.appendChild(gr);
                bg.appendChild(lb);
                document.body.appendChild(bg);
                this.waiting = bg;
            };
            Util.prototype.shutdown = function () {
                // Remove all event-handler references rooted in KMW events.
                this.events = {};
                // Remove all events linking to elements of the original, unaltered page.
                // This should sever any still-existing page ties to this instance of KMW,
                // allowing browser GC to do its thing.
                for (var _i = 0, _a = this.domEvents; _i < _a.length; _i++) {
                    var event_1 = _a[_i];
                    this.detachDOMEvent(event_1.Pelem, event_1.Peventname, event_1.Phandler, event_1.PuseCapture);
                }
                // Remove any KMW-added DOM element clutter.
                this.waiting.parentNode.removeChild(this.waiting);
                for (var _b = 0, _c = this.linkedStylesheets; _b < _c.length; _b++) {
                    var ss_1 = _c[_b];
                    if (ss_1.remove) {
                        ss_1.remove();
                    }
                    else if (ss_1.parentNode) {
                        ss_1.parentNode.removeChild(ss_1);
                    }
                }
            };
            /**
             * Get path of keymanweb script, for relative references
             *
             * *** This is not currently used, but may possibly be needed if ***
             * *** script identification during loading proves unreliable.   ***
             *
             *  @param    {string}      sName   filename prefix
             *  @return   {string}      path to source, with trailing slash
            **/
            Util.prototype.myPath = function (sName) {
                var i, scripts = document.getElementsByTagName('script'), ss;
                for (i = 0; i < scripts.length; i++) {
                    ss = scripts[i];
                    if (ss.src.indexOf(sName) >= 0) {
                        return ss.src.substr(0, ss.src.lastIndexOf('/') + 1);
                    }
                }
                return '';
            };
            // Prepend the appropriate protocol if not included in path
            Util.prototype.prependProtocol = function (path) {
                var pattern = new RegExp('^https?:');
                if (pattern.test(path)) {
                    return path;
                }
                else if (path.substr(0, 2) == '//') {
                    return this.keyman.protocol + path;
                }
                else if (path.substr(0, 1) == '/') {
                    return this.keyman.protocol + '/' + path;
                }
                else {
                    return this.keyman.protocol + '//' + path;
                }
            };
            /**
             * Return the appropriate test string for a given font
             *
             * TODO: Tidy up and remove arrays once 'sample' included in font metadata
             *
             *  @param  {Object}    fd    font meta-data object
             *  @return {string}          string to compare width
             *
             */
            Util.prototype.testString = function (fd) {
                var fontName = fd['family'], i, s = 'BESbswy';
                if ('sample' in fd && typeof (fd['sample']) == 'string') {
                    return s + fd['sample'];
                }
                var f = ['TamilWeb', 'TibetanWeb', 'LatinWeb', 'CherokeeWeb',
                    'EgyptianWeb', 'SinhalaWeb', 'KhmerWeb', 'ArabicWeb',
                    'BurmeseWeb', 'LaoWeb', 'OriyaWeb', 'GeezWeb'], t = ['\u0BBE\u0BF5', '\u0F7F\u0FD0', '\u02B0\u02A4', '\u13D0\u13C9',
                    '\uA723\uF7D3', '\u0DD8\u0DA3', '\u17D6\u178E', '\u0639\u06B3',
                    '\u1038\u1024', '\u0EC0\u0EDD', '\u0B03\u0B06', '\u1361\u132C'];
                for (i = 0; i < f.length; i++) {
                    if (fontName == f[i]) {
                        return s + t[i];
                    }
                }
                return s;
            };
            /**
             * Test if a font is installed (or available) on the target platform
             *
             * @param       {Object}        fd    font structure
             * @return      {boolean}             true if font available
             */
            Util.prototype.checkFont = function (fd) {
                var fontReady = false, fontName = fd['family'];
                // Create an absolute positioned div and two paragraph elements with spans for the test string.
                // The paragraph elements ensure that the spans are measured from the same point, otherwise
                // pixel rounding can result in different widths for the same string and styles.
                // Using a separate invisible DIV is more reliable than other positioning.
                var d = document.createElement('DIV'), ds = d.style, p1 = document.createElement('P'), p2 = document.createElement('P'), t1 = document.createElement('SPAN'), s1 = t1.style, t2 = document.createElement('SPAN'), s2 = t2.style;
                ds.position = 'absolute';
                ds.top = '10px';
                ds.left = '10px';
                ds.visibility = 'hidden';
                document.body.appendChild(d);
                d.appendChild(p1);
                d.appendChild(p2);
                p1.appendChild(t1);
                p2.appendChild(t2);
                // Firefox fails without the !important prefix on the fallback font,
                // apparently applying the same font to both elements.
                // But it also fails to distinguish the two if !important is added to the test font!
                // *** TODO: See if still true after changes Dec 2013 ***
                // Must apply !important tag to font-family, but must apply it to the CSS style, not the JS object member
                // c.f. http://stackoverflow.com/questions/462537/overriding-important-style-using-javascript
                t1.setAttribute('style', 'font-family:monospace !important');
                s2.fontFamily = fontName + ',monospace';
                s1.fontSize = s2.fontSize = '24px'; // Not too large, to avoid wrapping or overflow
                // Include narrow and wide characters from each unique script
                t1.innerHTML = t2.innerHTML = this.testString(fd);
                // Compare the actual width of each span. Checking monospace, serif,
                // and sans-serif helps to avoid falsely reporting the font as ready
                // The width must be different for all three tests.
                if (t1.offsetWidth != t2.offsetWidth) {
                    t1.setAttribute('style', 'font-family:sans-serif !important');
                    s2.fontFamily = fontName + ',sans-serif';
                    if (t1.offsetWidth != t2.offsetWidth) {
                        t1.setAttribute('style', 'font-family:serif !important');
                        s2.fontFamily = fontName + ',serif';
                    }
                }
                fontReady = (t1.offsetWidth != t2.offsetWidth);
                // Delete test elements
                p1.removeChild(t1);
                p2.removeChild(t2);
                d.removeChild(p1);
                d.removeChild(p2);
                document.body.removeChild(d);
                return fontReady;
            };
            /**
             * Check a font descriptor for font availability, returning true if undefined
             *
             *  @param  {Object}  fd  font descriptor member of keyboard stub
             *  @return {boolean}
             **/
            Util.prototype.checkFontDescriptor = function (fd) {
                if (typeof (fd) == 'undefined' || typeof (fd['family']) != 'string') {
                    return true;
                }
                return this.checkFont(fd);
            };
            return Util;
        }());
        keyman_9.Util = Util;
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var Util = com.keyman.Util;
/// <reference path="../kmwbase.ts" />
// Includes a promise polyfill (needed for IE)
/// <reference path="../../node_modules/es6-shim/es6-shim.min.js" />
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var com;
(function (com) {
    var keyman;
    (function (keyman_10) {
        var keyboards;
        (function (keyboards) {
            var CloudRequestEntry = /** @class */ (function () {
                function CloudRequestEntry(id, language) {
                    this.id = id;
                    this.language = language;
                }
                CloudRequestEntry.prototype.toString = function () {
                    var kbid = this.id;
                    var lgid = '';
                    var kvid = '';
                    if (this.language) {
                        kbid = kbid + '@' + this.language;
                        if (this.version) {
                            kbid = kbid + '@' + this.version;
                        }
                    }
                    else {
                        if (this.version) {
                            kbid = kbid + '@@' + this.version;
                        }
                    }
                    //TODO: add specifier validation...
                    return kbid;
                };
                return CloudRequestEntry;
            }());
            var KeyboardFont = /** @class */ (function () {
                function KeyboardFont(fontObj, fontPath) {
                    this['family'] = fontObj['family'];
                    this['files'] = fontObj['source'];
                    this['path'] = fontPath;
                }
                return KeyboardFont;
            }());
            var KeyboardStub = /** @class */ (function () {
                function KeyboardStub(id, langCode) {
                    this['KI'] = 'Keyboard_' + id;
                    this['KLC'] = langCode;
                }
                /**
                 * Utility to convert stubs to KeyboardStub[]
                 * @param arg
                 * @returns (KeyboardStub|ErrorStub)[]
                 */
                KeyboardStub.toStubs = function (arg) {
                    var errorMsg = '';
                    if (!arg) {
                        errorMsg = "Stub undefined";
                    }
                    else if (!arg.id) {
                        errorMsg = "KeyboardStub has undefined id";
                    }
                    else if (!arg.languages) {
                        errorMsg = "KeyboardStub has undefined languages";
                    }
                    if (errorMsg != '') {
                        return [{ error: new Error(errorMsg) }];
                    }
                    // Extract all the languages
                    var languages = [];
                    if (typeof arg.languages === 'object') {
                        languages.push(arg.languages);
                    }
                    else {
                        arg.languages.foreach(function (language) {
                            languages.push(language);
                        });
                    }
                    var stubs = [];
                    languages.forEach(function (language) {
                        var stub = new KeyboardStub(arg.id, language.id);
                        if (arg.name) {
                            stub['KN'] = arg.name;
                        }
                        if (arg.filename) {
                            stub['KF'] = arg.filename;
                        }
                        if (arg.displayName) {
                            stub['displayName'] = arg.displayName;
                        }
                        if (language.name) {
                            stub['KL'] = language.name;
                        }
                        if (language.region) {
                            stub['KR'] = language.region;
                        }
                        // Can ignore ['KRC'] RegionCodes used by the Toolbar UI
                        if (language.font) {
                            stub['KFont'] = language.font;
                        }
                        if (language.oskFont) {
                            stub['KOskFont'] = language.oskFont;
                        }
                        stubs.push(stub);
                    });
                    return stubs;
                };
                return KeyboardStub;
            }());
            keyboards.KeyboardStub = KeyboardStub;
            var KeyboardTag = /** @class */ (function () {
                function KeyboardTag() {
                    this.stores = {};
                }
                return KeyboardTag;
            }());
            keyboards.KeyboardTag = KeyboardTag;
            // For when the API call straight-up times out.
            var CLOUD_TIMEOUT_ERR = "The Cloud API request timed out.";
            // Currently cannot distinguish between "no matching keyboard" and other script-load errors.
            var CLOUD_MALFORMED_OBJECT_ERR = "Could not find a keyboard with that ID.";
            // Represents unspecified errors that occur when registering the results of a successful API call.
            var CLOUD_STUB_REGISTRATION_ERR = "The Cloud API failed to find an appropriate keyboard.";
            // Represents custom, specified KMW errors that occur when registering the results of a successful API call.
            var CLOUD_REGISTRATION_ERR = "Error occurred while registering keyboards: ";
            var MISSING_KEYBOARD = function (kbdid) {
                return kbdid + ' keyboard not found.';
            };
            var KeyboardManager = /** @class */ (function () {
                function KeyboardManager(kmw) {
                    this.activeStub = null;
                    this.keyboardStubs = [];
                    // For deferment of adding keyboards until keymanweb initializes
                    this.deferment = null;
                    // The following was not actually utilized within KeymanWeb; I think it's handled via different logic.
                    // See setDefaultKeyboard() below.
                    this.dfltStub = null; // First keyboard stub loaded - default for touch-screen devices, ignored on desktops
                    this.keyboards = [];
                    /**
                     * Holds the 'resolve' function for Promises built by keymanCloudRequest.
                     * These should be cleared when the Promise is fulfilled.
                     */
                    this.registrationResolvers = {};
                    this.languageListPromise = null;
                    this.languageList = null; // List of keyboard languages available for KeymanCloud
                    this.linkedScripts = [];
                    /**
                     * Get an associative array of keyboard identification strings
                     *   This was defined as an array, so is kept that way, but
                     *   Javascript treats it as an object anyway
                     *
                     * @param       {Object}    Lkbd       Keyboard object
                     * @return      {Object}               Copy of keyboard identification strings
                     *
                     */
                    this._GetKeyboardDetail = function (Lkbd) {
                        var Lr = {};
                        Lr['Name'] = Lkbd['KN'];
                        Lr['InternalName'] = Lkbd['KI'];
                        Lr['LanguageName'] = Lkbd['KL']; // I1300 - Add support for language names
                        Lr['LanguageCode'] = Lkbd['KLC']; // I1702 - Add support for language codes, region names, region codes, country names and country codes
                        Lr['RegionName'] = Lkbd['KR'];
                        Lr['RegionCode'] = Lkbd['KRC'];
                        Lr['CountryName'] = Lkbd['KC'];
                        Lr['CountryCode'] = Lkbd['KCC'];
                        Lr['KeyboardID'] = Lkbd['KD'];
                        Lr['Font'] = Lkbd['KFont'];
                        Lr['OskFont'] = Lkbd['KOskFont'];
                        return Lr;
                    };
                    this.keymanweb = kmw;
                    var _this = this;
                    this.deferment = new Promise(function (resolve) {
                        _this.endDeferment = resolve;
                    });
                }
                KeyboardManager.prototype.getActiveKeyboardName = function () {
                    var core = com.keyman.singleton.core;
                    return core.activeKeyboard ? core.activeKeyboard.id : '';
                };
                KeyboardManager.prototype.getActiveLanguage = function (fullName) {
                    if (this.activeStub == null) {
                        return '';
                    }
                    else if (fullName) {
                        return this.activeStub['KL'];
                    }
                    else {
                        return this.activeStub['KLC'];
                    }
                };
                /**
                 * Get array of available keyboard stubs
                 *
                 * @return   {Array}     Array of available keyboards
                 *
                 */
                KeyboardManager.prototype.getDetailedKeyboards = function () {
                    var Lr = [], Ln, Lstub, Lrn;
                    for (Ln = 0; Ln < this.keyboardStubs.length; Ln++) // I1511 - array prototype extended
                     {
                        Lstub = this.keyboardStubs[Ln];
                        Lrn = this._GetKeyboardDetail(Lstub); // I2078 - Full keyboard detail
                        Lr = this.keymanweb._push(Lr, Lrn); // TODO:  Resolve without need for the cast.
                    }
                    return Lr;
                };
                /**
                 * Register a fully specified keyboard (add meta-data for each language) immediately
                 *
                 * @param  {Object}  arg
                 * @returns {boolean}
                 **/
                KeyboardManager.prototype.addStub = function (arg) {
                    if (typeof (arg['id']) != 'string') {
                        return false;
                    }
                    if (typeof (arg['language']) != "undefined") {
                        console.warn("The 'language' property for keyboard stubs has been deprecated.  Please use the 'languages' property instead.");
                        arg['languages'] = arg['language'];
                    }
                    if (typeof (arg['languages']) == 'undefined') {
                        return false;
                    }
                    // Default the keyboard name to its id, capitalized
                    if (typeof (arg['name']) != 'string') {
                        arg['name'] = arg['id'].replace('_', ' ');
                        arg['name'] = arg['name'].substr(0, 1).toUpperCase() + arg['name'].substr(1);
                    }
                    var lgArg = arg['languages'];
                    var lgList = [], i, lg;
                    if (typeof (lgArg.length) == 'undefined') {
                        lgList[0] = lgArg;
                    }
                    else {
                        lgList = lgArg;
                    }
                    var localOptions = {
                        'keyboardBaseUri': this.keymanweb.options['keyboards'],
                        'fontBaseUri': this.keymanweb.options['fonts']
                    };
                    // Add a stub for each correctly specified language
                    for (i = 0; i < lgList.length; i++) {
                        this.mergeStub(arg, lgList[i], localOptions);
                    }
                    return true;
                };
                /**
                 *  Create or update a keyboard meta-data 'stub' during keyboard registration
                 *
                 *  Cross-reference with https://help.keyman.com/developer/engine/web/11.0/reference/core/addKeyboards.
                 *
                 *  @param  {Object}  kp  (partial) keyboard meta-data object (`spec` object)
                 *  @param  {Object}  lp  language object (`spec.languages` object)
                 *  @param  {Object}  options   KeymanCloud callback options
                 **/
                KeyboardManager.prototype.mergeStub = function (kp, lp, options) {
                    var sp = this.findStub(kp['id'], lp['id']);
                    var isNew = false;
                    if (sp == null) {
                        sp = new KeyboardStub(kp['id'], lp['id']);
                        this.keyboardStubs.push(sp);
                        isNew = true;
                    }
                    // Accept region as number (from Cloud server), code, or name
                    var region = lp['region'], rIndex = 0;
                    if (typeof (region) == 'number') {
                        if (region < 1 || region > 9) {
                            rIndex = 0;
                        }
                        else {
                            rIndex = region - 1;
                        }
                    }
                    else if (typeof (region) == 'string') {
                        var list = (region.length == 2 ? KeyboardManager.regionCodes : KeyboardManager.regions);
                        for (var i = 0; i < list.length; i++) {
                            if (region.toLowerCase() == list[i].toLowerCase()) {
                                rIndex = i;
                                break;
                            }
                        }
                    }
                    var rx;
                    sp['KL'] = (typeof sp['KL'] === 'undefined') ? lp['name'] : sp['KL'];
                    sp['KR'] = (typeof sp['KR'] === 'undefined') ? KeyboardManager.regions[rIndex] : sp['KR'];
                    sp['KRC'] = (typeof sp['KRC'] === 'undefined') ? KeyboardManager.regionCodes[rIndex] : sp['KRC'];
                    sp['KN'] = (typeof sp['KN'] === 'undefined') ? kp['name'] : sp['KN'];
                    sp['displayName'] = (typeof sp['displayName'] === 'undefined') ? kp['displayName'] : sp['displayName'];
                    if (typeof (sp['KF']) == 'undefined') {
                        rx = RegExp('^(([\\.]/)|([\\.][\\.]/)|(/))|(:)');
                        sp['KF'] = kp['filename'];
                        if (!rx.test(sp['KF'])) {
                            sp['KF'] = options['keyboardBaseUri'] + sp['KF'];
                        }
                    }
                    // Font path defined by cloud entry
                    var fontPath = options['fontBaseUri'];
                    // or overridden locally, in page source
                    if (this.keymanweb.options['fonts'] != '') {
                        fontPath = this.keymanweb.options['fonts'];
                        rx = new RegExp('^https?\\:');
                        if (!rx.test(fontPath)) {
                            if (fontPath.substr(0, 2) == '//') {
                                fontPath = this.keymanweb.protocol + fontPath;
                            }
                            else if (fontPath.substr(0, 1) == '/') {
                                fontPath = this.keymanweb.rootPath + fontPath.substr(1);
                            }
                            else {
                                fontPath = this.keymanweb.rootPath + fontPath;
                            }
                        }
                    }
                    else {
                        this.keymanweb.options.fonts = fontPath;
                    }
                    // Add font specifiers where necessary and not overridden by user
                    if (typeof (lp['font']) != 'undefined') {
                        sp['KFont'] = (typeof sp['KFont'] === 'undefined') ? new KeyboardFont(lp['font'], fontPath) : sp['KFont'];
                    }
                    // Fixed OSK font issue Github #7 (9/1/2015)
                    if (typeof (lp['oskFont']) != 'undefined') {
                        sp['KOskFont'] = (typeof sp['KOskFont'] === 'undefined') ? new KeyboardFont(lp['oskFont'], fontPath) : sp['KOskFont'];
                    }
                    // Update the UI
                    this.doKeyboardRegistered(sp['KI'], sp['KL'], sp['KN'], sp['KLC'], sp['KP']);
                    // If we have no activeStub because there were no stubs, set the new keyboard as active.
                    // Do not trigger on merges.
                    if (!this.activeStub && isNew && this.keyboardStubs.length == 1 && this.keymanweb.options['setActiveOnRegister'] == 'true') {
                        // #676: We call _SetActiveKeyboard so we can avoid overwriting
                        // cookies that determine our active keyboard at page load time
                        this.doBeforeKeyboardChange(sp['KI'], sp['KLC']);
                        this._SetActiveKeyboard(sp['KI'], sp['KLC'], false);
                        this.doKeyboardChange(sp['KI'], sp['KLC']);
                    }
                };
                /**
                 *  Find a keyboard stub by id in the registered keyboards list
                 *
                 *  @param  {string}  kid   internal keyboard id (without 'Keyboard_' prefix)
                 *  @param  {string}  lgid  language code
                 *
                 **/
                KeyboardManager.prototype.findStub = function (kid, lgid) {
                    var i;
                    for (i = 0; i < this.keyboardStubs.length; i++) {
                        if ((this.keyboardStubs[i]['KI'] == 'Keyboard_' + kid) && (this.keyboardStubs[i]['KLC'] == lgid)) {
                            return this.keyboardStubs[i];
                        }
                    }
                    return null;
                };
                // Called on the embedded path at the end of its initialization.
                KeyboardManager.prototype.setDefaultKeyboard = function () {
                    if (this.keyboardStubs.length > 0) {
                        // Select the first stub as our active keyboard.
                        this._SetActiveKeyboard(this.keyboardStubs[0]['KI'], this.keyboardStubs[0]['KLC']);
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                /**
                 * Allow to change active keyboard by (internal) keyboard name
                 *
                 * @param       {string}    PInternalName   Internal name
                 * @param       {string}    PLgCode         Language code
                 */
                KeyboardManager.prototype.setActiveKeyboard = function (PInternalName, PLgCode) {
                    //TODO: This does not make sense: the callbacks should be in _SetActiveKeyboard, not here,
                    //      since this is always called FROM the UI, which should not need notification.
                    //      If UI callbacks are needed at all, they should be within _SetActiveKeyboard
                    // Skip on embedded which namespaces packageID::Keyboard_keyboardID
                    if (!this.keymanweb.isEmbedded && PInternalName && PInternalName.indexOf("Keyboard_") != 0) {
                        PInternalName = "Keyboard_" + PInternalName;
                    }
                    this.doBeforeKeyboardChange(PInternalName, PLgCode);
                    var p = this._SetActiveKeyboard(PInternalName, PLgCode, true);
                    if (this.keymanweb.domManager.lastActiveElement != null) {
                        this.keymanweb.domManager.focusLastActiveElement(); // TODO:  Resolve without need for the cast.
                    }
                    // If we ever allow PLgCode to be set by default, we can auto-detect the language code
                    // after the _SetActiveKeyboard call.
                    // if(!PLgCode && (<KeymanBase>keymanweb).keyboardManager.activeStub) {
                    //   PLgCode = (<KeymanBase>keymanweb).keyboardManager.activeStub['KLC'];
                    // }
                    this.doKeyboardChange(PInternalName, PLgCode);
                    p.catch(function (error) {
                        // Rejection indicates a failure of the keyboard to load.
                        //
                        // In case p's rejection is never caught, throwing this error will generate logs that shows up
                        // in Sentry or in the console, with useful information for debugging either way.
                        throw new Error("Unable to load keyboard with internal name \"" + PInternalName + "\", language code \"" + PLgCode + "\".");
                    });
                    return p;
                };
                /**
                 * Change active keyboard to keyboard selected by (internal) name and language code
                 *
                 *  Test if selected keyboard already loaded, and simply update active stub if so.
                 *  Otherwise, insert a script to download and insert the keyboard from the repository
                 *  or user-indicated file location.
                 *
                 * Note that the test-case oriented 'recorder' stubs this method to provide active
                 * keyboard stub information.  If changing this function, please ensure the recorder is
                 * not affected.
                 *
                 * @param       {string}    PInternalName
                 * @param       {string=}    PLgCode
                 * @param       {boolean=}   saveCookie
                 */
                KeyboardManager.prototype._SetActiveKeyboard = function (PInternalName, PLgCode, saveCookie) {
                    var _a;
                    var n, Ln;
                    var keyman = com.keyman.singleton;
                    var util = keyman.util;
                    var osk = keyman.osk;
                    var activeKeyboard = keyman.core.activeKeyboard;
                    // Set default language code
                    if (arguments.length < 2 || (!PLgCode)) {
                        PLgCode = '---';
                    }
                    // Check that the saved keyboard is currently registered
                    for (n = 0; n < this.keyboardStubs.length; n++) {
                        if (PInternalName == this.keyboardStubs[n]['KI']) {
                            if (PLgCode == this.keyboardStubs[n]['KLC'] || PLgCode == '---')
                                break;
                        }
                    }
                    // Mobile device addition: force selection of the first keyboard if none set
                    if (util.device.touchable && (PInternalName == '' || PInternalName == null || n >= this.keyboardStubs.length)) {
                        if (this.keyboardStubs.length != 0) {
                            PInternalName = this.keyboardStubs[0]['KI'];
                            PLgCode = this.keyboardStubs[0]['KLC'];
                        }
                    }
                    // Save name of keyboard (with language code) as a cookie
                    if (arguments.length > 2 && saveCookie) {
                        this.saveCurrentKeyboard(PInternalName, PLgCode);
                    }
                    // Check if requested keyboard and stub are currently active
                    if (this.activeStub && activeKeyboard && activeKeyboard.id == PInternalName
                        && this.activeStub['KI'] == PInternalName //this part of test should not be necessary, but keep anyway
                        && this.activeStub['KLC'] == PLgCode && !this.keymanweb.mustReloadKeyboard)
                        return Promise.resolve();
                    // Check if current keyboard matches requested keyboard, but not stub
                    if (activeKeyboard && (activeKeyboard.id == PInternalName)) {
                        // If so, simply update the active stub
                        for (Ln = 0; Ln < this.keyboardStubs.length; Ln++) {
                            if ((this.keyboardStubs[Ln]['KI'] == PInternalName)
                                && (this.keyboardStubs[Ln]['KLC'] == PLgCode)) {
                                this.activeStub = this.keyboardStubs[Ln];
                                // Append a stylesheet for this keyboard for keyboard specific styles
                                // or if needed to specify an embedded font
                                (_a = osk.vkbd) === null || _a === void 0 ? void 0 : _a.appendStyleSheet();
                                // Re-initializate OSK before returning if required
                                if (this.keymanweb.mustReloadKeyboard) {
                                    activeKeyboard.refreshLayouts();
                                    if (osk) {
                                        osk._Load();
                                    }
                                }
                                return Promise.resolve();
                            }
                        }
                    }
                    keyman.core.activeKeyboard = null;
                    this.activeStub = null;
                    // Hide OSK and do not update keyboard list if using internal keyboard (desktops)
                    if (PInternalName == '') {
                        osk.startHide(false);
                        if (!this.keymanweb.isEmbedded) {
                            util.wait(false);
                        }
                        return Promise.resolve();
                    }
                    // Determine if the keyboard was previously loaded but is not active and use the prior load if so.
                    for (Ln = 0; Ln < this.keyboards.length; Ln++) { // I1511 - array prototype extended
                        if (this.keyboards[Ln]['KI'] == PInternalName) {
                            keyman.core.activeKeyboard = new keyboards.Keyboard(this.keyboards[Ln]);
                            // As a rotation may have occurred since the keyboard was swapped out,
                            // we should refresh its layouts.
                            keyman.core.activeKeyboard.refreshLayouts();
                            this.keymanweb.domManager._SetTargDir(this.keymanweb.domManager.lastActiveElement); // I2077 - LTR/RTL timing
                            // and update the active stub
                            for (var Ls = 0; Ls < this.keyboardStubs.length; Ls++) {
                                if ((this.keyboardStubs[Ls]['KI'] == PInternalName) &&
                                    (this.keyboardStubs[Ls]['KLC'] == PLgCode || PLgCode == '---')) {
                                    this.activeStub = this.keyboardStubs[Ls];
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    // If we've reached this point, this is the first load request for the requested keyboard.
                    if (keyman.core.activeKeyboard == null) {
                        for (Ln = 0; Ln < this.keyboardStubs.length; Ln++) { // I1511 - array prototype extended
                            if ((this.keyboardStubs[Ln]['KI'] == PInternalName)
                                && ((this.keyboardStubs[Ln]['KLC'] == PLgCode) || (PLgCode == '---'))) {
                                // Force OSK display for CJK keyboards (keyboards using a pick list)
                                if (this.isCJK(this.keyboardStubs[Ln]) || util.device.touchable) {
                                    osk.displayIfActive = true;
                                }
                                // Create a script to load from the server - when it finishes loading, it will register itself,
                                //  detect that it is active, and focus as appropriate. The second test is needed to allow recovery from a failed script load
                                // Ensure we're not already loading the keyboard.
                                if (!this.keyboardStubs[Ln].asyncLoader) {
                                    // Always (temporarily) hide the OSK when loading a new keyboard, to ensure that a failure to load doesn't leave the current OSK displayed
                                    if (osk) {
                                        osk.startHide(false);
                                    }
                                    var loadingStub = this.keyboardStubs[Ln];
                                    // Tag the stub so that we don't double-load the keyboard!
                                    loadingStub.asyncLoader = {};
                                    var kbdName = loadingStub['KN'];
                                    var lngName = loadingStub['KL'];
                                    kbdName = kbdName.replace(/\s*keyboard\s*/i, '');
                                    // Setup our default error-messaging callback if it should be implemented.
                                    loadingStub.asyncLoader.callback = function (altString, msgType) {
                                        var msg = altString || 'Sorry, the ' + kbdName + ' keyboard for ' + lngName + ' is not currently available.';
                                        // Thanks, Closure errors.
                                        if (!this.keymanweb.isEmbedded) {
                                            util.wait(false);
                                            util.internalAlert(altString || msg, function () {
                                                this.keymanweb['setActiveKeyboard'](''); // The API call!
                                            }.bind(this));
                                        }
                                        switch (msgType) { // in case we extend this later.
                                            case 'err':
                                                console.error(msg);
                                                break;
                                            case 'warn':
                                            default:
                                                console.warn(msg);
                                                break;
                                        }
                                        if (Ln > 0) {
                                            var Ps = this.keyboardStubs[0];
                                            this._SetActiveKeyboard(Ps['KI'], Ps['KLC'], true);
                                        }
                                    }.bind(this);
                                    loadingStub.asyncLoader.timer = window.setTimeout(loadingStub.asyncLoader.callback, 10000);
                                    //Display the loading delay bar (Note: only append 'keyboard' if not included in name.)
                                    if (!this.keymanweb.isEmbedded) {
                                        util.wait('Installing keyboard<br/>' + kbdName);
                                    }
                                    // Installing the script immediately does not work reliably if two keyboards are
                                    // loaded in succession if there is any delay in downloading the script.
                                    // It works much more reliably if deferred (KMEW-101, build 356)
                                    // The effect of a delay can also be tested, for example, by setting the timeout to 5000
                                    var manager = this;
                                    loadingStub.asyncLoader.promise = new Promise(function (resolve, reject) {
                                        window.setTimeout(function () {
                                            manager.installKeyboard(resolve, reject, loadingStub);
                                        }, 0);
                                    });
                                }
                                this.activeStub = this.keyboardStubs[Ln];
                                return this.keyboardStubs[Ln].asyncLoader.promise;
                            }
                        }
                        this.keymanweb.domManager._SetTargDir(this.keymanweb.domManager.lastActiveElement); // I2077 - LTR/RTL timing
                    }
                    // Initialize the OSK (provided that the base code has been loaded)
                    if (osk) {
                        osk._Load();
                    }
                    return Promise.resolve();
                };
                /**
                 * Install a keyboard script that has been downloaded from a keyboard server
                 * Operates as the core of a Promise, hence the 'resolve' and 'reject' parameters.
                 *
                 *  @param  {Object}  kbdStub   keyboard stub to be loaded.
                 *
                 **/
                KeyboardManager.prototype.installKeyboard = function (resolve, reject, kbdStub) {
                    var util = this.keymanweb.util;
                    var osk = this.keymanweb.osk;
                    var Lscript = util._CreateElement('script');
                    Lscript.charset = "UTF-8"; // KMEW-89
                    Lscript.type = 'text/javascript';
                    // Preserve any namespaced IDs by use of the script's id tag attribute!
                    if (this.keymanweb.isEmbedded) {
                        Lscript.id = kbdStub['KI'];
                    }
                    var kbdFile = kbdStub['KF'];
                    var kbdLang = kbdStub['KL'];
                    var kbdName = kbdStub['KN'];
                    var manager = this;
                    var core = com.keyman.singleton.core;
                    // Add a handler for cases where the new <script> block fails to load.
                    Lscript.addEventListener('error', function () {
                        if (kbdStub.asyncLoader.timer !== null) {
                            // Clear the timeout timer.
                            window.clearTimeout(kbdStub.asyncLoader.timer);
                            kbdStub.asyncLoader.timer = null;
                        }
                        // We already know the load has failed... why wait?
                        kbdStub.asyncLoader.callback('Cannot find the ' + kbdName + ' keyboard for ' + kbdLang + '.', 'warn');
                        kbdStub.asyncLoader = null;
                        reject();
                    }, false);
                    // The load event will activate a newly-loaded keyboard if successful and report an error if it is not.
                    Lscript.addEventListener('load', function () {
                        if (kbdStub.asyncLoader.timer !== null) {
                            // Clear the timeout timer.
                            window.clearTimeout(kbdStub.asyncLoader.timer);
                            kbdStub.asyncLoader.timer = null;
                        }
                        // To determine if the load was successful, we'll need to check the keyboard array for our desired keyboard.
                        // Test if keyboard already loaded
                        var kbd = manager.getKeyboardByID(kbdStub['KI']), Li;
                        if (kbd) { // Is cleared upon a successful load.
                            //Activate keyboard, if it's still the active stub.
                            if (kbdStub == manager.activeStub) {
                                manager.doBeforeKeyboardChange(kbd['KI'], kbdStub['KLC']);
                                core.activeKeyboard = new keyboards.Keyboard(kbd);
                                if (manager.keymanweb.domManager.lastActiveElement != null) { // TODO:  Resolve without need for the cast.
                                    manager.keymanweb.uiManager.justActivated = true; // TODO:  Resolve without need for the cast.
                                    manager.keymanweb.domManager._SetTargDir(manager.keymanweb.domManager.lastActiveElement);
                                }
                                manager.saveCurrentKeyboard(kbd['KI'], kbdStub['KLC']);
                                // Prepare and show the OSK for this keyboard
                                if (osk) {
                                    osk._Load();
                                }
                            }
                            // Remove the wait message, if defined
                            if (!manager.keymanweb.isEmbedded) {
                                util.wait(false);
                            }
                            kbdStub.asyncLoader = null;
                            resolve();
                            // A handler portion for cases where the new <script> block loads, but fails to process.
                        }
                        else { // Output error messages even when embedded - they're useful when debugging the apps and KMEA/KMEI engines.
                            kbdStub.asyncLoader.callback('Error registering the ' + kbdName + ' keyboard for ' + kbdLang + '.', 'error');
                            kbdStub.asyncLoader = null;
                            reject();
                        }
                    }, false);
                    // IE likes to instantly start loading the file when assigned to an element, so we do this after the rest
                    // of our setup.  This method is not relocated here (yet) b/c it varies based upon 'native' vs 'embedded'.
                    Lscript.src = this.keymanweb.getKeyboardPath(kbdFile);
                    try {
                        document.body.appendChild(Lscript);
                        this.linkedScripts.push(Lscript);
                    }
                    catch (ex) {
                        try {
                            document.getElementsByTagName('head')[0].appendChild(Lscript);
                        }
                        catch (ex2) {
                            reject();
                        }
                    }
                };
                /* TODO: why not use util.loadCookie and saveCookie?? */
                /**
                 * Function     saveCurrentKeyboard
                 * Scope        Private
                 * @param       {string}    PInternalName       name of keyboard
                 * @param       {string}    PLgCode             language code
                 * Description Saves current keyboard as a cookie
                 */
                KeyboardManager.prototype.saveCurrentKeyboard = function (PInternalName, PLgCode) {
                    var s = "current=" + PInternalName + ":" + PLgCode;
                    this.keymanweb.util.saveCookie('KeymanWeb_Keyboard', { 'current': PInternalName + ':' + PLgCode });
                    // Additionally, make sure we save the (upcoming) per-control keyboard settings.
                    // This allows us to ensure the keyboard is set correctly without waiting for focus event
                    // triggers - very helpful for automated testing.
                    if (!this.keymanweb.isEmbedded) {
                        this.keymanweb.touchAliasing._BlurKeyboardSettings(this.keymanweb.domManager.lastActiveElement, PInternalName, PLgCode);
                    }
                };
                /**
                 * Restore the most recently used keyboard, if still available
                 */
                KeyboardManager.prototype.restoreCurrentKeyboard = function () {
                    var stubs = this.keyboardStubs, i, n = stubs.length;
                    var core = com.keyman.singleton.core;
                    // Do nothing if no stubs loaded
                    if (stubs.length < 1)
                        return;
                    // If no saved keyboard, default to US English, else first loaded stub
                    var d = this.getSavedKeyboard();
                    var t = d.split(':');
                    // Identify the stub with the saved keyboard
                    t = d.split(':');
                    if (t.length < 2)
                        t[1] = '';
                    // This loop is needed to select the correct stub when several apply to a given keyboard
                    // TODO: There should be a better way!
                    for (i = 0; i < n; i++) {
                        if (stubs[i]['KI'] == t[0] && (stubs[i]['KLC'] == t[1] || t[1] == ''))
                            break;
                    }
                    // Sets the default stub (as specified with the `getSavedKeyboard` call) as active.
                    // if((i < n) || (device.touchable && (this.activeKeyboard == null)))
                    if ((i < n) || (core.activeKeyboard == null)) {
                        this._SetActiveKeyboard(t[0], t[1], false);
                        this.keymanweb.globalKeyboard = t[0];
                        this.keymanweb.globalLanguageCode = t[1];
                        this.doKeyboardChange(t[0], t[1]); // And update the UI if necessary
                    }
                };
                /**
                 * Gets the cookie for the name and language code of the most recently active keyboard
                 *
                 *  Defaults to US English, but this needs to be user-set in later revision (TODO)
                 *
                 * @return      {string}          InternalName:LanguageCode
                 **/
                KeyboardManager.prototype.getSavedKeyboard = function () {
                    var v = this.keymanweb.util.loadCookie('KeymanWeb_Keyboard');
                    if (typeof (v['current']) != 'string') {
                        return 'Keyboard_us:eng';
                    }
                    // Check that the requested keyboard is included in the available keyboard stubs
                    var n, stubs = this.keyboardStubs, kd;
                    for (n = 0; n < stubs.length; n++) {
                        kd = stubs[n]['KI'] + ':' + stubs[n]['KLC'];
                        if (kd == v['current'])
                            return kd;
                    }
                    // Default to US English if available (but don't assume it is first)
                    for (n = 0; n < stubs.length; n++) {
                        kd = stubs[n]['KI'] + ':' + stubs[n]['KLC'];
                        if (kd == 'Keyboard_us:eng')
                            return kd;
                    }
                    // Otherwise use the first keyboard stub
                    if (stubs.length > 0) {
                        return stubs[0]['KI'] + ':' + stubs[0]['KLC'];
                    }
                    // Or US English if no stubs loaded (should never happen)
                    return 'Keyboard_us:eng';
                };
                /**
                 * Function    isCJK
                 * Scope       Public
                 * @param      {Object=}  k0
                 * @return     {boolean}
                 * Description Tests if the keyboard stub uses a pick list (Chinese, Japanese, Korean, etc.)
                 *             (This function accepts either keyboard structure.)
                 */
                KeyboardManager.prototype.isCJK = function (k) {
                    var lg;
                    if (typeof (k['KLC']) != 'undefined') {
                        lg = k['KLC'];
                    }
                    else if (typeof (k['LanguageCode']) != 'undefined') {
                        lg = k['LanguageCode'];
                    }
                    return ((lg == 'cmn') || (lg == 'jpn') || (lg == 'kor'));
                };
                /**
                 * Function     _getKeyboardByID
                 * Scope        Private
                 * @param       {string}  keyboardID
                 * @return      {Object|null}
                 * Description  Returns the internal, registered keyboard object - not the stub, but the keyboard itself.
                 */
                KeyboardManager.prototype.getKeyboardByID = function (keyboardID) {
                    var Li;
                    for (Li = 0; Li < this.keyboards.length; Li++) {
                        if (keyboardID == this.keyboards[Li]['KI']) {
                            return this.keyboards[Li];
                        }
                    }
                    return null;
                };
                /* ------------------------------------------------------------
                *  Definitions for adding, removing, and requesting keyboards.
                *  ------------------------------------------------------------
                */
                /**
                 * Function       isUniqueRequest
                 * Scope          Private
                 * @param         {Object}    tEntry
                 * Description    Checks to ensure that the stub isn't already loaded within KMW or subject
                 *                to an already-pending request.
                 */
                KeyboardManager.prototype.isUniqueRequest = function (cloudList, tEntry) {
                    var k;
                    if (this.findStub(tEntry.id, tEntry.language) == null) {
                        for (k = 0; k < cloudList.length; k++) {
                            if (cloudList[k].id == tEntry['id'] && cloudList[k].language == tEntry.language) {
                                return false;
                            }
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                ;
                /**
                 * Returns a Promise of the merged keyboard stubs and error stubs.
                 *
                 * If the keyboard stub array is empty, will return a rejected Promise,
                 * otherwise returns a resolved Promise.
                 *
                 * @param keyboardStubs  array of keyboard stubs to merge.
                 * @param errorStubs     array of error stubs to merge.
                 * @returns  resolved or rejected promise with merged array of stubs.
                 */
                KeyboardManager.prototype.mergeAndResolveStubPromises = function (keyboardStubs, errorStubs) {
                    if (errorStubs.length == 0) {
                        return Promise.resolve(keyboardStubs);
                    }
                    if (keyboardStubs.length == 0) {
                        return Promise.reject(errorStubs);
                    }
                    else {
                        // Merge this with errorStubs
                        var result = keyboardStubs;
                        return Promise.resolve(result.concat(errorStubs));
                    }
                };
                /**
                 * Build 362: addKeyboardArray() link to Cloud. One or more arguments may be used
                 *
                 * @param x  keyboard name string or keyboard metadata JSON object
                 * @returns resolved or rejected promise with merged array of stubs.
                 */
                KeyboardManager.prototype.addKeyboardArray = function (x) {
                    return __awaiter(this, void 0, void 0, function () {
                        var errorStubs, stub, i, j, cmd, comma, cloudList, keyboardStubs, tEntry, pList, lList, msg, e, convertedStubs, result, err_1, stub;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    errorStubs = [];
                                    if (!!this.keymanweb.initialized) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.deferment];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    // Ignore empty array passed as argument
                                    if (x.length == 0) {
                                        stub = { error: new Error("No keyboards to add") };
                                        errorStubs.push(stub);
                                        // Normally reject error, but this can be a warning
                                        return [2 /*return*/, Promise.resolve(errorStubs)];
                                    }
                                    cmd = '', comma = '';
                                    cloudList = [];
                                    keyboardStubs = [];
                                    for (i = 0; i < x.length; i++) {
                                        if (typeof (x[i]) == 'string' && x[i].length > 0) {
                                            pList = x[i].split('@'), lList = [''];
                                            if (pList[0].toLowerCase() == 'english') {
                                                pList[0] = 'us';
                                            }
                                            if (pList.length > 1) {
                                                lList = pList[1].split(',');
                                            }
                                            for (j = 0; j < lList.length; j++) {
                                                tEntry = new CloudRequestEntry(pList[0]);
                                                if (lList[j] != '') {
                                                    tEntry.language = lList[j];
                                                }
                                                if (pList.length > 2) {
                                                    tEntry.version = pList[2];
                                                }
                                                // If we've already registered or requested a stub for this keyboard-language pairing,
                                                // don't bother with a cloud request.
                                                if (this.isUniqueRequest(cloudList, tEntry)) {
                                                    cloudList.push(tEntry);
                                                }
                                            }
                                        }
                                        if (typeof (x[i]) == 'object' && x[i] != null) {
                                            // Register any local keyboards immediately:
                                            // - must specify filename, keyboard name, language codes, region codes
                                            // - no request will be sent to cloud
                                            if (typeof (x[i]['filename']) == 'string') {
                                                if (!this.addStub(x[i])) {
                                                    this.keymanweb.util.internalAlert('To use a custom keyboard, you must specify file name, keyboard name, language, language code and region code.');
                                                }
                                            }
                                            else {
                                                if (x[i]['language']) {
                                                    console.warn("The 'language' property for keyboard stubs has been deprecated.  Please use the 'languages' property instead.");
                                                    x[i]['languages'] = x[i]['language'];
                                                }
                                                lList = x[i]['languages'];
                                                if (!lList) {
                                                    msg = 'To use keyboard \'' + x[i]['id'] + '\', you must specify languages.';
                                                    e = {
                                                        keyboard: {
                                                            id: x[i]['id'],
                                                            name: x[i]['name']
                                                        },
                                                        error: new Error(msg)
                                                    };
                                                    errorStubs.push(e);
                                                    continue;
                                                }
                                                //Array or single entry?
                                                if (typeof (lList.length) == 'number') {
                                                    for (j = 0; j < lList.length; j++) {
                                                        tEntry = new CloudRequestEntry(x[i]['id'], x[i]['languages'][j]['id']);
                                                        if (this.isUniqueRequest(cloudList, tEntry)) {
                                                            cloudList.push(tEntry);
                                                        }
                                                    }
                                                }
                                                else { // Single language element
                                                    tEntry = new CloudRequestEntry(x[i]['id'], x[i]['languages']['id']);
                                                    if (this.isUniqueRequest(cloudList, tEntry)) {
                                                        cloudList.push(tEntry);
                                                    }
                                                }
                                            }
                                            convertedStubs = KeyboardStub.toStubs(x[i]);
                                            convertedStubs.forEach(function (s) {
                                                if (s instanceof KeyboardStub) {
                                                    keyboardStubs.push(s);
                                                }
                                                else {
                                                    errorStubs.push(s);
                                                }
                                            });
                                        }
                                    }
                                    // Return if all keyboards being registered are local and fully specified
                                    try {
                                        if (cloudList.length == 0) {
                                            return [2 /*return*/, this.mergeAndResolveStubPromises(keyboardStubs, errorStubs)];
                                        }
                                    }
                                    catch (error) {
                                        console.error(error);
                                        return [2 /*return*/, Promise.reject(error)];
                                    }
                                    // Update the keyboard metadata list from keyman.com - build the command
                                    cmd = '&keyboardid=';
                                    for (i = 0; i < cloudList.length; i++) {
                                        cmd = cmd + comma + cloudList[i].toString();
                                        comma = ',';
                                    }
                                    _a.label = 3;
                                case 3:
                                    _a.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, this.keymanCloudRequest(cmd, false)];
                                case 4:
                                    result = _a.sent();
                                    return [2 /*return*/, this.mergeAndResolveStubPromises(result, errorStubs)];
                                case 5:
                                    err_1 = _a.sent();
                                    // We don't have keyboard info for this ErrorStub
                                    console.error(err_1);
                                    stub = { error: err_1 };
                                    errorStubs.push(stub);
                                    return [2 /*return*/, Promise.reject(errorStubs)];
                                case 6: 
                                // no keyboards added so return empty stub
                                return [2 /*return*/, Promise.resolve(errorStubs)];
                            }
                        });
                    });
                };
                /**
                 *  Register a keyboard for each associated language
                 *
                 *  @param  {Object}  kp  Keyboard Object or Object array
                 *  @param  {Object}  options   keymanCloud callback options
                 *  @param  {number}  nArg  keyboard index in argument array
                 *
                 **/
                KeyboardManager.prototype.registerLanguagesForKeyboard = function (kp, options, nArg) {
                    var i, j, id, nDflt = 0, kbId = '';
                    // Do not attempt to process badly formatted requests
                    if (typeof (kp) == 'undefined') {
                        return;
                    }
                    if (typeof (options['keyboardid']) == 'string') {
                        kbId = options['keyboardid'].split(',')[nArg];
                    }
                    // When keyboards requested by language code, several keyboards may be returned as an array
                    if (typeof (kp.length) == 'number') {
                        // If language code is suffixed by $, register all keyboards for this language
                        if (kp.length == 1 || kbId.substr(-1, 1) == '$' || kbId == '') {
                            for (i = 0; i < kp.length; i++) {
                                this.registerLanguagesForKeyboard(kp[i], options, nArg);
                            }
                        }
                        // Register the default keyboard for the language code
                        // Until a default is defined, the default will be the Windows keyboard,
                        // that is, the keyboard named for the language (exception: English:US), or the
                        // first keyboard found.
                        else {
                            for (i = 0; i < kp.length; i++) {
                                id = kp[i].id.toLowerCase();
                                if (id == 'us') {
                                    id = 'english';
                                }
                                for (j = 0; j < kp[i]['languages'].length; j++) {
                                    if (id == kp[i]['languages'][j]['name'].toLowerCase()) {
                                        nDflt = i;
                                        break;
                                    }
                                }
                            }
                            this.registerLanguagesForKeyboard(kp[nDflt], options, nArg);
                        }
                    }
                    else { // Otherwise, process a single keyboard for the specified languages
                        // May need to filter returned stubs by language
                        var lgCode = kbId.split('@')[1];
                        if (typeof (lgCode) == 'string') {
                            lgCode = lgCode.replace(/\$$/, '');
                        }
                        // Can only add keyboard stubs for defined languages
                        var ll = kp['languages'];
                        if (typeof (ll) != 'undefined') {
                            if (typeof (ll.length) == 'number') {
                                for (i = 0; i < ll.length; i++) {
                                    if (typeof (lgCode) == 'undefined' || ll[i]['id'] == lgCode) {
                                        this.mergeStub(kp, ll[i], options);
                                    }
                                }
                            }
                            else {
                                this.mergeStub(kp, ll, options);
                            }
                        }
                    }
                };
                /**
                 * Call back from cloud for adding keyboard metadata
                 *
                 * @param {Object}    x   metadata object
                 **/
                KeyboardManager.prototype.register = function (x) {
                    var promiseid = x['timerid'];
                    var result;
                    try {
                        result = this._registerCore(x);
                    }
                    catch (err) {
                        result = new Error(CLOUD_REGISTRATION_ERR + err);
                    }
                    if (promiseid) {
                        var promiseFuncs = this.registrationResolvers[promiseid];
                        window.clearTimeout(promiseid);
                        if (promiseFuncs) {
                            try {
                                if (result instanceof Error) {
                                    promiseFuncs.reject(result);
                                }
                                else {
                                    promiseFuncs.resolve(result);
                                }
                            }
                            finally {
                                delete this.registrationResolvers[promiseid];
                            }
                        }
                    }
                };
                /**
                 * Call back from cloud for adding keyboard metadata
                 *
                 * @param {Object}    x   metadata object
                 **/
                KeyboardManager.prototype._registerCore = function (x) {
                    var options = x['options'];
                    var currentKeyboardStubsCount = this.keyboardStubs.length;
                    // Indicate if unable to register keyboard
                    if (typeof (x['error']) == 'string') {
                        // Currently unreachable (24 May 2021 - API returns a 404; returned 'script' does not call register)
                        var badName = '';
                        if (typeof (x['keyboardid']) == 'string') {
                            badName = x['keyboardid'].substr(0, 1).toUpperCase() + x['keyboardid'].substr(1);
                        }
                        return new Error(MISSING_KEYBOARD(badName));
                    }
                    // Ignore callback unless the context is defined
                    if (typeof (options) == 'undefined' || typeof (options['context']) == 'undefined') {
                        return new Error(CLOUD_MALFORMED_OBJECT_ERR);
                    }
                    // Register each keyboard for the specified language codes
                    if (options['context'] == 'keyboard') {
                        var i, kp = x['keyboard'];
                        // Process array of keyboard definitions
                        if (typeof (kp.length) == 'number') {
                            for (i = 0; i < kp.length; i++) {
                                // Note:  if an invalid language code is specified, the elements here may be
                                //        empty arrays.  Will not report an error if so.
                                this.registerLanguagesForKeyboard(kp[i], options, i);
                            }
                        }
                        else { // Process a single keyboard definition
                            this.registerLanguagesForKeyboard(kp, options, 0);
                        }
                    }
                    else if (options['context'] == 'language') { // Download the full list of supported keyboard languages
                        this.languageList = x['languages'];
                    }
                    return this.keyboardStubs.slice(currentKeyboardStubsCount);
                };
                /**
                 *  Internal handler for processing keyboard registration, used only by `register`
                 *
                 *  @param  {string[]}   languages    Array of language names
                 *  @returns {Promise<(KeyboardStub|ErrorStub)[]>} Promise of added keyboard stubs
                 **/
                KeyboardManager.prototype.addLanguageKeyboards = function (languages) {
                    var _this_1 = this;
                    var errorStubs = [];
                    // Defer registering keyboards by language until the language list has been loaded
                    if (this.languageList == null) {
                        if (this.languageListPromise == null) {
                            this.languageListPromise = this.keymanCloudRequest('', true).catch(function (error) {
                                // If promise is not error, then... (needs an error guard)
                                console.error(error);
                                errorStubs.push({ error: error });
                                return errorStubs;
                            });
                        }
                        var _this_2 = this;
                        return new Promise(function (resolve, reject) {
                            if (_this_2.languageListPromise) {
                                // 1: wait for the language list to be loaded properly
                                return _this_2.languageListPromise.then(function () {
                                    // 2: perform the actual query, now that we can find the language code
                                    resolve(_this_2.addLanguageKeyboards(languages));
                                }).catch(function (error) {
                                    reject(error);
                                });
                            }
                            else {
                                resolve(_this_2.addLanguageKeyboards(languages));
                            }
                        }).then(function (result) {
                            if (result instanceof Error) {
                                throw result;
                            }
                            return result;
                        });
                    }
                    // Identify and register each keyboard by language name
                    var cmd = '';
                    for (var i = 0; i < languages.length; i++) {
                        var lgName = languages[i].toLowerCase();
                        var addAll = (lgName.substr(-1, 1) == '$');
                        if (addAll) {
                            lgName = lgName.substr(0, lgName.length - 1);
                        }
                        var languageFound = false;
                        for (var j = 0; j < this.languageList.length; j++) {
                            if (lgName == this.languageList[j]['name'].toLowerCase()) {
                                if (cmd != '') {
                                    cmd = cmd + ',';
                                }
                                cmd = cmd + '@' + this.languageList[j]['id'];
                                if (addAll) {
                                    cmd = cmd + '$';
                                }
                                languageFound = true;
                                break;
                            }
                        }
                        if (!languageFound) {
                            // Construct response array of errors (failed-query keyboards)
                            // that will be merged with stubs (successfully-queried keyboards)
                            var stub = { language: { name: lgName }, error: new Error(this.alertLanguageUnavailable(lgName)) };
                            errorStubs.push(stub);
                        }
                    }
                    if (cmd == '') {
                        // No command so return errors
                        return Promise.reject(errorStubs);
                    }
                    return this.keymanCloudRequest('&keyboardid=' + cmd, false).then(function (result) {
                        return _this_1.mergeAndResolveStubPromises(result, errorStubs);
                    }, function (err) {
                        console.error(err);
                        var stub = { error: err };
                        errorStubs.push(stub);
                        return Promise.reject(errorStubs);
                    });
                };
                /**
                 *  Request keyboard metadata from the Keyman Cloud keyboard metadata server
                 *
                 *  @param  {string}   cmd        command string
                 *  @param  {boolean?} byLanguage if true, context=languages, else context=keyboards
                 *  @returns {Promise<(KeyboardStub[]>} Promise of added keyboard stubs
                 **/
                KeyboardManager.prototype.keymanCloudRequest = function (cmd, byLanguage) {
                    var kbdManager = this;
                    var keymanweb = this.keymanweb;
                    // Some basic support toward #5044, but definitely not a full solution toward it.
                    // Wraps the cloud API keyboard-stub request in a Promise, allowing response on network
                    // and/or parser errors.  Also detects when `register` returns due to an error case that
                    // does not throw errors.  (There are a few such "empty" `return` statements there.)
                    var URL = 'https://api.keyman.com/cloud/4.0/'
                        + ((arguments.length > 1) && byLanguage ? 'languages' : 'keyboards');
                    var promise = new Promise(function (resolve, reject) {
                        var Lscript = keymanweb.util._CreateElement('script');
                        var queryConfig = '?jsonp=keyman.register&languageidtype=bcp47&version=' + keymanweb['version'];
                        // Set callback timer
                        var timeoutID = window.setTimeout(function () {
                            delete kbdManager.registrationResolvers[timeoutID];
                            reject(new Error(CLOUD_TIMEOUT_ERR));
                        }, 10000);
                        // Save the resolve / reject functions.
                        kbdManager.registrationResolvers[timeoutID] = {
                            resolve: resolve,
                            reject: reject
                        };
                        var tFlag = '&timerid=' + timeoutID;
                        Lscript.onload = function (event) {
                            window.clearTimeout(timeoutID);
                            // This case should only happen if a returned, otherwise-valid keyboard
                            // script does not ever call `register`.  Also provides default handling
                            // should `register` fail to report results/failure correctly.
                            if (kbdManager.registrationResolvers[timeoutID]) {
                                try {
                                    reject(new Error(CLOUD_STUB_REGISTRATION_ERR));
                                }
                                finally {
                                    delete kbdManager.registrationResolvers[timeoutID];
                                }
                            }
                        };
                        // Note:  at this time (24 May 2021), this is also happens for "successful"
                        //        API calls where there is no matching keyboard ID.
                        //
                        //        The returned 'error' JSON object is sent with an HTML error code (404)
                        //        and does not call `keyman.register`.  Even if it did the latter, the
                        //        404 code would likely prevent the returned script's call.
                        Lscript.onerror = function (event, source, lineno, colno, error) {
                            window.clearTimeout(timeoutID);
                            try {
                                var msg = CLOUD_MALFORMED_OBJECT_ERR;
                                if (error) {
                                    msg = msg + ": " + error.message;
                                }
                                reject(new Error(msg));
                            }
                            finally {
                                delete kbdManager.registrationResolvers[timeoutID];
                            }
                        };
                        Lscript.src = URL + queryConfig + cmd + tFlag;
                        try {
                            document.body.appendChild(Lscript);
                        }
                        catch (ex) {
                            document.getElementsByTagName('head')[0].appendChild(Lscript);
                        }
                    });
                    return promise;
                };
                /**
                 * Display warning if language name unavailable to add keyboard
                 * @param {string} languageName
                 * @returns string of Error message
                 */
                KeyboardManager.prototype.alertLanguageUnavailable = function (languageName) {
                    var msg = 'No keyboards are available for ' + languageName + '. '
                        + 'Does it have another language name?';
                    this.keymanweb.util.internalAlert(msg);
                    return msg;
                };
                /**
                 *  Display warning if Keyman Cloud server fails to respond
                 *
                 *  @param  {string}  cmd command string sent to Cloud
                 *
                 */
                KeyboardManager.prototype.serverUnavailable = function (cmd) {
                    this.keymanweb.util.internalAlert(cmd == '' ? 'Unable to connect to Keyman Cloud server!' : cmd);
                    this.keymanweb.warned = true;
                };
                /**
                 * Build 362: removeKeyboards() remove keyboard from list of available keyboards
                 *
                 * @param {string}  x      keyboard name string
                 * @param {boolean} force  When true, also drops the cached keyboard object
                 *
                 */
                KeyboardManager.prototype.removeKeyboards = function (x, force) {
                    if (arguments.length == 0) {
                        return false;
                    }
                    var i, j;
                    var success = true, activeRemoved = false, anyRemoved = false;
                    ;
                    for (i = 0; i < arguments.length; i++) {
                        for (j = this.keyboardStubs.length - 1; j >= 0; j--) {
                            if ('Keyboard_' + arguments[i] == this.keyboardStubs[j]['KI']) {
                                if ('Keyboard_' + arguments[i] == this.getActiveKeyboardName()) {
                                    activeRemoved = true;
                                }
                                anyRemoved = true;
                                this.keyboardStubs.splice(j, 1);
                                break;
                            }
                        }
                        if (j < 0) {
                            success = false;
                        }
                    }
                    for (i = 0; i < arguments.length; i++) {
                        for (j = this.keyboards.length - 1; j >= 0; j--) {
                            if ('Keyboard_' + arguments[i] == this.keyboards[j]['KI']) {
                                this.keyboards.splice(j, 1);
                                break;
                            }
                        }
                    }
                    if (activeRemoved) {
                        if (this.keyboardStubs.length > 0) {
                            // Always reset to the first remaining keyboard
                            this._SetActiveKeyboard(this.keyboardStubs[0]['KI'], this.keyboardStubs[0]['KLC'], true);
                        }
                        else {
                            this._SetActiveKeyboard('', '', false);
                        }
                        // This is likely to be triggered by a UI call of some sort, and we need to treat
                        // this call as such to properly maintain the globalKeyboard setting.
                        this.keymanweb.uiManager.justActivated = true;
                    }
                    if (anyRemoved) {
                        // Update the UI keyboard menu
                        this.doKeyboardUnregistered();
                    }
                    return success;
                };
                /**
                 * Function     _registerKeyboard  KR
                 * Scope        Public
                 * @param       {Object}      Pk      Keyboard  object
                 * Description  Register and load the keyboard
                 */
                KeyboardManager.prototype._registerKeyboard = function (Pk) {
                    return __awaiter(this, void 0, void 0, function () {
                        var Li, Lstub, Ps, savedActiveStub;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this.keymanweb.initialized) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.deferment];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    if (Pk['_kmw']) {
                                        console.error("The keyboard _kmw property is a reserved field for engine use only; this keyboard is invalid.");
                                        return [2 /*return*/];
                                    }
                                    else {
                                        Pk['_kmw'] = new KeyboardTag();
                                    }
                                    // For package namespacing with KMEA/KMEI.
                                    if (this.keymanweb.isEmbedded) {
                                        this.keymanweb.preserveID(Pk);
                                    }
                                    Ps = this.activeStub;
                                    savedActiveStub = this.activeStub;
                                    if (!Ps || !('KI' in Ps) || (Ps['KI'] != Pk['KI'])) {
                                        // Find the first stub for this keyboard
                                        for (Lstub = 0; Lstub < this.keyboardStubs.length; Lstub++) { // I1511 - array prototype extended
                                            Ps = this.keyboardStubs[Lstub];
                                            if (Pk['KI'] == Ps['KI']) {
                                                break;
                                            }
                                            Ps = null;
                                        }
                                    }
                                    // Build 369: ensure active stub defined when loading local keyboards
                                    if (this.activeStub == null && Ps != null) {
                                        this.activeStub = Ps;
                                    }
                                    // Register the stub for this language (unless it is already registered)
                                    // keymanweb.KRS(Ps?Ps:Pk);
                                    // Test if keyboard already loaded
                                    for (Li = 0; Li < this.keyboards.length; Li++) {
                                        if (Pk['KI'] == this.keyboards[Li]['KI']) {
                                            return [2 /*return*/];
                                        }
                                    }
                                    // Append to keyboards array
                                    this.keyboards = this.keymanweb._push(this.keyboards, Pk); // TODO:  Resolve without need for the cast.
                                    // Execute any external (UI) code needed after loading keyboard
                                    this.doKeyboardLoaded(Pk['KI']);
                                    // Restore the originally-active stub to its prior state.  No need to change it permanently.
                                    this.activeStub = savedActiveStub;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Add the basic keyboard parameters (keyboard stub) to the array of keyboard stubs
                 * If no language code is specified in a keyboard it cannot be registered,
                 * and a keyboard stub must be registered before the keyboard is loaded
                 * for the keyboard to be usable.
                 *
                 * @param       {Object}      Pstub     Keyboard stub object
                 * @return      {Promise<?boolean>}      1 if already registered, else null
                 */
                KeyboardManager.prototype._registerStub = function (Pstub) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Pstub = __assign({}, Pstub); // shallow clone the stub object
                                    if (!!this.keymanweb.initialized) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.deferment];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    // The default stub is always the first keyboard stub loaded [and will be ignored by desktop browsers - not for beta, anyway]
                                    if (this.dfltStub == null) {
                                        this.dfltStub = Pstub;
                                        //if(device.formFactor == 'desktop') return 1;    //Needs further thought before release
                                    }
                                    // If no language code has been defined, and no stub has been registered for this keyboard, register with empty string as the language code
                                    if (this.keymanweb.isEmbedded) {
                                        this.keymanweb.namespaceID(Pstub);
                                    } // else leave undefined.  It's nice to condition upon.
                                    if (typeof (Pstub['KLC']) == 'undefined') {
                                        Pstub['KLC'] = '';
                                    }
                                    if (typeof (Pstub['KL']) == 'undefined') {
                                        Pstub['KL'] = 'undefined';
                                    }
                                    // Register stub (add to KeyboardStubs array)
                                    this.keyboardStubs = this.keymanweb._push(this.keyboardStubs, Pstub); // TODO:  Resolve without need for the cast.
                                    // TODO: Need to distinguish between initial loading of a large number of stubs and any subsequent loading.
                                    //   UI initialization should not be needed for each registration, only at end.
                                    // Reload this keyboard if it was the last active keyboard and
                                    // make any changes needed by UI for new keyboard stub
                                    // (Uncommented for Build 360)
                                    this.doKeyboardRegistered(Pstub['KI'], Pstub['KL'], Pstub['KN'], Pstub['KLC'], Pstub['KP']);
                                    // If we have no activeStub because there were no stubs, set the new keyboard as active.
                                    // Do not trigger on merges.
                                    if (!this.activeStub && this.dfltStub == Pstub && this.keyboardStubs.length == 1 && this.keymanweb.options['setActiveOnRegister'] == 'true') {
                                        this.setActiveKeyboard(Pstub['KI'], Pstub['KLC']);
                                    }
                                    return [2 /*return*/, Promise.resolve(false)];
                            }
                        });
                    });
                };
                /*
                * Last part - the events.
                */
                /**
                 * Execute external (UI) code needed on registering keyboard, used
                 * to update each UIs language menu
                 *
                 * Note that the argument object is not at present used by any UI,
                 * since the menu is always fully recreated when needed, but the arguments
                 * remain defined to allow for possible use in future (Aug 2014)
                 *
                 * @param       {string}            _internalName
                 * @param       {string}            _language
                 * @param       {string}            _keyboardName
                 * @param       {string}            _languageCode
                 * @param       {string=}           _packageID        Used by KMEA/KMEI to track .kmp related info.
                 * @return      {boolean}
                 */
                KeyboardManager.prototype.doKeyboardRegistered = function (_internalName, _language, _keyboardName, _languageCode, _packageID) {
                    var p = { 'internalName': _internalName, 'language': _language, 'keyboardName': _keyboardName, 'languageCode': _languageCode };
                    // Utilized only by our embedded codepaths.
                    if (_packageID) {
                        p['package'] = _packageID;
                    }
                    return this.keymanweb.util.callEvent('kmw.keyboardregistered', p);
                };
                /**
                 * Execute external (UI) code to rebuild menu when deregistering keyboard
                 *
                 * @return      {boolean}
                 */
                KeyboardManager.prototype.doKeyboardUnregistered = function () {
                    var p = {};
                    return this.keymanweb.util.callEvent('kmw.keyboardregistered', p);
                };
                /**
                 * Execute external (UI) code needed on loading keyboard
                 *
                 * @param       {string}            _internalName
                 * @return      {boolean}
                 */
                KeyboardManager.prototype.doKeyboardLoaded = function (_internalName) {
                    var p = {};
                    p['keyboardName'] = _internalName;
                    return this.keymanweb.util.callEvent('kmw.keyboardloaded', p);
                };
                /**
                 * Function     doBeforeKeyboardChange
                 * Scope        Private
                 * @param       {string}            _internalName
                 * @param       {string}            _languageCode
                 * @return      {boolean}
                 * Description  Execute external (UI) code needed before changing keyboard
                 */
                KeyboardManager.prototype.doBeforeKeyboardChange = function (_internalName, _languageCode) {
                    var p = {};
                    p['internalName'] = _internalName;
                    p['languageCode'] = _languageCode;
                    return this.keymanweb.util.callEvent('kmw.beforekeyboardchange', p);
                };
                /**
                 * Execute external (UI) code needed *after* changing keyboard
                 *
                 * @param       {string}            _internalName
                 * @param       {string}            _languageCode
                 * @param       {boolean=}           _indirect
                 * @return      {boolean}
                 */
                KeyboardManager.prototype.doKeyboardChange = function (_internalName, _languageCode, _indirect) {
                    var p = {
                        'internalName': _internalName,
                        'languageCode': _languageCode,
                        'indirect': (arguments.length > 2 ? _indirect : false)
                    };
                    return this.keymanweb.util.callEvent('kmw.keyboardchange', p);
                };
                KeyboardManager.prototype.shutdown = function () {
                    for (var _i = 0, _a = this.linkedScripts; _i < _a.length; _i++) {
                        var script = _a[_i];
                        if (script.remove) {
                            script.remove();
                        }
                        else if (script.parentNode) {
                            script.parentNode.removeChild(script);
                        }
                    }
                };
                // Language regions as defined by cloud server
                KeyboardManager.regions = ['World', 'Africa', 'Asia', 'Europe', 'South America', 'North America', 'Oceania', 'Central America', 'Middle East'];
                KeyboardManager.regionCodes = ['un', 'af', 'as', 'eu', 'sa', 'na', 'oc', 'ca', 'me'];
                return KeyboardManager;
            }());
            keyboards.KeyboardManager = KeyboardManager;
        })(keyboards = keyman_10.keyboards || (keyman_10.keyboards = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_11) {
        var Hotkey = /** @class */ (function () {
            function Hotkey(code, shift, handler) {
                this.code = code;
                this.shift = shift;
                this.handler = handler;
            }
            Hotkey.prototype.matches = function (keyCode, shiftState) {
                return (this.code == keyCode && this.shift == shiftState);
            };
            return Hotkey;
        }());
        var HotkeyManager = /** @class */ (function () {
            function HotkeyManager(keyman) {
                this.hotkeys = [];
                /**
                 * Function     _Process
                 * Scope        Private
                 * @param       {Event}       e       event
                 * Description  Passes control to handlers according to the hotkey pressed
                 */
                this._Process = function (e) {
                    if (!e) {
                        e = window.event;
                    }
                    var _Lcode = keyman_11.dom.PreProcessor._GetEventKeyCode(e);
                    if (_Lcode == null) {
                        return false;
                    }
                    // Removed testing of e.shiftKey==null  I3363 (Build 301)
                    var _Lmodifiers = (e.shiftKey ? 0x10 : 0) |
                        (e.ctrlKey ? 0x20 : 0) |
                        (e.altKey ? 0x40 : 0);
                    for (var i = 0; i < this.hotkeys.length; i++) {
                        if (this.hotkeys[i].matches(_Lcode, _Lmodifiers)) {
                            this.hotkeys[i].handler();
                            e.returnValue = false;
                            if (e && e.preventDefault) {
                                e.preventDefault();
                            }
                            e.cancelBubble = true;
                            return false;
                        }
                    }
                    return true;
                }.bind(this);
                this.keyman = keyman;
            }
            /**
             * Function     addHotkey
             * Scope        Public
             * @param       {number}            keyCode
             * @param       {number}            shiftState
             * @param       {function(Object)}  handler
             * Description  Add hot key handler to array of document-level hotkeys triggered by key up event
             */
            HotkeyManager.prototype.addHotKey = function (keyCode, shiftState, handler) {
                // Test if existing handler for this code and replace it if so
                for (var i = 0; i < this.hotkeys.length; i++) {
                    if (this.hotkeys[i].code == keyCode && this.hotkeys[i].shift == shiftState) {
                        this.hotkeys[i].handler = handler;
                        return;
                    }
                }
                // Otherwise add it to the array
                this.hotkeys.push(new Hotkey(keyCode, shiftState, handler));
            };
            /**
             * Function     removeHotkey
             * Scope        Public
             * @param       {number}        keyCode
             * @param       {number}        shiftState
             * Description  Remove a hot key handler from array of document-level hotkeys triggered by key up event
             */
            /*keymanweb['removeHotKey'] = */ HotkeyManager.prototype.removeHotkey = function (keyCode, shiftState) {
                for (var i = 0; i < this.hotkeys.length; i++) {
                    if (this.hotkeys[i].matches(keyCode, shiftState)) {
                        this.hotkeys.splice(i, 1);
                        return;
                    }
                }
            };
            return HotkeyManager;
        }());
        keyman_11.HotkeyManager = HotkeyManager;
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_12) {
        var UIState = /** @class */ (function () {
            function UIState(pending, activated) {
                this['activationPending'] = pending;
                this['activated'] = activated;
            }
            return UIState;
        }());
        keyman_12.UIState = UIState;
        var UIManager = /** @class */ (function () {
            function UIManager(keyman) {
                this.isActivating = false; // ActivatingKeymanWebUI - is the KeymanWeb DIV in process of being clicked on?
                this.justActivated = false; // JustActivatedKeymanWebUI - focussing back to control after KeymanWeb UI interaction
                /**
                 * Function     doUnload
                 * Scope        Private
                 * @return      {boolean}
                 * Description  Execute UI cleanup code before unloading the UI (may not be required?)
                 */
                this.doUnload = function () {
                    var p = {};
                    return this.keyman.util.callEvent('kmw.unloaduserinterface', p);
                };
                this.keyman = keyman;
            }
            /**
             * Function     getUIState
             * Scope        Public
             * @return      {Object.<string,boolean>}
             * Description  Return object with activation state of UI:
             *                activationPending (bool):   KMW being activated
             *                activated         (bool):   KMW active
             */
            UIManager.prototype.getUIState = function () {
                return new UIState(this.isActivating, this.justActivated);
            };
            /**
             * Set or clear the IsActivatingKeymanWebUI flag (exposed function)
             *
             * @param       {(boolean|number)}  state  Activate (true,false)
             */
            UIManager.prototype.setActivatingUI = function (state) {
                this.isActivating = state ? true : false;
            };
            /**
             * Function     doLoad
             * Scope        Private
             * @return      {boolean}
             * Description  Execute UI initialization code after loading the UI
             *              // Appears to be unused; could be eliminated?  Though, doUnload IS used.
             */
            UIManager.prototype.doLoad = function () {
                var p = {};
                return this.keyman.util.callEvent('kmw.loaduserinterface', p);
            };
            return UIManager;
        }());
        keyman_12.UIManager = UIManager;
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_13) {
        var osk;
        (function (osk_2) {
            // Manages the language selection UI for touch-form factors, which is triggered by an OSK key.
            // Used by 'native'-mode KMW only - the Android and iOS embedding apps implement their own menus.
            var LanguageMenu = /** @class */ (function () {
                function LanguageMenu(keyman) {
                    this.keyman = keyman;
                    this.scrolling = false;
                    this.shim = this.constructShim();
                }
                LanguageMenu.prototype.constructShim = function () {
                    var languageMenu = this;
                    var shim = this.keyman.util._CreateElement('div');
                    var osk = this.keyman.osk;
                    shim.id = 'kmw-language-menu-background';
                    shim.addEventListener('touchstart', function (e) {
                        e.preventDefault();
                        languageMenu.hide();
                        // Display build only if touching menu, space *and* one other point on screen (build 369)
                        if (e.touches.length > 2) {
                            var sX = e.touches[1].pageX, sY = e.touches[1].pageY;
                            var spaceBar = osk.vkbd.spaceBar;
                            if (sX > spaceBar.offsetLeft && sX < spaceBar.offsetLeft + spaceBar.offsetWidth &&
                                sY > spaceBar.offsetTop && sY < spaceBar.offsetTop + spaceBar.offsetHeight) {
                                osk.showBuild();
                            }
                        }
                    }, false);
                    return shim;
                };
                /**
                 * Display list of installed keyboards in pop-up menu
                 **/
                LanguageMenu.prototype.show = function () {
                    var n = 0, kbdList = this.keyman.keyboardManager.keyboardStubs, nKbds = kbdList.length;
                    var util = this.keyman.util;
                    if (nKbds < 1) {
                        return;
                    }
                    // Create the menu list container element
                    var menu = this.lgList = util._CreateElement('div'), ss;
                    this.lgList.id = 'kmw-language-menu';
                    // Insert a transparent overlay to prevent anything else happening during keyboard selection,
                    // but allow the menu to be closed if anywhere else on screen is touched
                    var osk = this.keyman.osk;
                    var languageMenu = this;
                    document.body.appendChild(this.shim);
                    // Add two nested DIVs to properly support iOS scrolling with momentum
                    //  c.f. https://github.com/joelambert/ScrollFix/issues/2
                    var m2 = util._CreateElement('div'), s2 = m2.style, m3 = util._CreateElement('div'), s3 = m3.style;
                    m2.id = 'kmw-menu-scroll-container';
                    m3.id = 'kmw-menu-scroller';
                    // Support momentum scrolling on iOS
                    if ('WebkitOverflowScrolling' in s2) {
                        s2.WebkitOverflowScrolling = 'touch';
                    }
                    m2.appendChild(m3);
                    menu.appendChild(m2);
                    // Add menu index strip
                    var i, x, mx = util._CreateElement('div');
                    mx.id = 'kmw-menu-index';
                    for (i = 1; i <= 26; i++) {
                        x = util._CreateElement('p');
                        x.innerHTML = String.fromCharCode(i + 64);
                        mx.appendChild(x);
                    }
                    // Add index selection (for a large menu)
                    mx.addEventListener('touchstart', function (e) {
                        languageMenu.scrollToLanguage(e, m2, m3);
                    }, false);
                    mx.addEventListener('touchend', function (e) {
                        e.stopPropagation();
                        e.preventDefault();
                    }, false);
                    menu.appendChild(mx);
                    //TODO: not sure if either of these two handlers ar actually needed.  touchmove handler may be doing all that is necessary.
                    // Add scroll end event handling to override body scroll
                    menu.addEventListener('scroll', function (e) {
                        languageMenu.scrolling = true;
                    }, false);
                    m2.addEventListener('scroll', function (e) {
                        //this.lgList.scrolling=true;
                        if (m2.scrollTop < 1) {
                            m2.scrollTop = 1;
                        }
                        if (m2.scrollTop > m2.scrollHeight - m2.offsetHeight - 1) {
                            m2.scrollTop = m2.scrollHeight - m2.offsetHeight - 1;
                        }
                    }, false);
                    // Add a list of keyboards to the innermost DIV
                    this.activeLgNo = this.addLanguages(m3, kbdList);
                    // Get number of visible (language) selectors
                    var nLgs = m3.childNodes.length - 1;
                    // Do not display until sizes have been calculated
                    this.lgList.style.visibility = 'hidden';
                    // Append menu to document body, not to OSK
                    document.body.appendChild(this.lgList);
                    // Adjust size for viewport scaling (probably not needed for iOS, but check!)
                    if (util.device.OS == 'Android' && 'devicePixelRatio' in window) {
                        this.lgList.style.fontSize = (2 / window.devicePixelRatio) + 'em';
                    }
                    // Adjust width for pixel scaling on Android tablets
                    if (util.device.OS == 'Android' && util.device.formFactor == 'tablet' && 'devicePixelRatio' in window) {
                        var w = parseInt(util.getStyleValue(menu, 'width'), 10), ms = menu.style;
                        if (!isNaN(w)) {
                            ms.width = ms.maxWidth = (2 * w / window.devicePixelRatio) + 'px';
                        }
                        w = parseInt(util.getStyleValue(m2, 'width'), 10);
                        ms = m2.style;
                        if (!isNaN(w)) {
                            ms.width = ms.maxWidth = (2 * w / window.devicePixelRatio) + 'px';
                        }
                        w = parseInt(util.getStyleValue(m3, 'width'), 10);
                        ms = m3.style;
                        if (!isNaN(w)) {
                            ms.width = ms.maxWidth = (2 * w / window.devicePixelRatio) + 'px';
                        }
                    }
                    // Adjust initial top and height of menu
                    this.adjust(0);
                    // Adjust the index font size and line height
                    var dy = mx.childNodes[1].offsetTop - mx.childNodes[0].offsetTop, lineHeight = Math.floor(menu.offsetHeight / 26.0), scale = Math.round(100.0 * lineHeight / dy) / 100.0, factor = (scale > 0.6 ? 1 : 2);
                    if (scale > 1.25) {
                        scale = 1.25;
                    }
                    for (i = 0; i < 26; i++) {
                        var qs = mx.childNodes[i].style;
                        if (factor == 2 && (i % 2) == 1) {
                            qs.display = 'none';
                        }
                        else {
                            qs.fontSize = (scale * factor) + 'em';
                            qs.lineHeight = (lineHeight * factor) + 'px';
                        }
                    }
                    // Increase width of outer menu DIV by index, else hide index
                    var menuWidth = m2.offsetWidth;
                    if (m2.scrollHeight > m2.offsetHeight + 3) {
                        menuWidth = menuWidth + mx.offsetWidth;
                    }
                    else {
                        mx.style.display = 'none';
                    }
                    menu.style.width = menuWidth + 'px';
                    // Now display the menu
                    this.lgList.style.visibility = '';
                    // Set initial scroll to show current language (but never less than 1, to avoid dragging body)
                    var top = m3.firstChild.offsetHeight * this.activeLgNo + 1;
                    m2.scrollTop = top;
                    // The scrollTop value is limited by the device, and must be limited to avoid dragging the document body
                    if (m2.scrollTop < top) {
                        m2.scrollTop = m2.scrollHeight - m2.offsetHeight;
                    }
                    if (m2.scrollTop > m2.scrollHeight - m2.offsetHeight - 1) {
                        m2.scrollTop = m2.scrollHeight - m2.offsetHeight - 1;
                    }
                };
                /**
                 * Adjust top and height of language menu
                 *
                 * @param   {number}  nKbds number of displayed keyboards to add to number of languages
                 **/
                LanguageMenu.prototype.adjust = function (nKbds) {
                    var osk = this.keyman.osk;
                    var util = this.keyman.util;
                    var device = util.device;
                    var menu = this.lgList, m2 = menu.firstChild, m3 = m2.firstChild, barWidth = 0, s = menu.style, mx = menu.childNodes[1], maxHeight = window.innerHeight - osk.vkbd.lgKey.offsetHeight - 16, nItems = m3.childNodes.length + nKbds - 1, // Number of (visible) keyboard selectors
                    itemHeight = m3.firstChild.firstChild.offsetHeight, menuHeight = nItems * itemHeight;
                    // Correct maxheight for viewport scaling (iPhone/iPod only) and internal position corrections
                    if (device.OS == 'iOS') {
                        if (device.formFactor == 'phone') {
                            barWidth = (util.landscapeView() ? 36 : 0);
                            maxHeight = (window.innerHeight - barWidth - 16) * util.getViewportScale();
                        }
                        else if (device.formFactor == 'tablet') {
                            barWidth = (util.landscapeView() ? 16 : 0);
                            maxHeight = (maxHeight - barWidth);
                        }
                    }
                    // Explicitly set position and height
                    s.left = keyman_13.dom.Utils.getAbsoluteX(osk.vkbd.lgKey) + 'px';
                    if (menuHeight > maxHeight) {
                        menuHeight = maxHeight;
                    }
                    s.height = menuHeight + 'px';
                    // Position menu at bottom of screen using the same positioning model as the OSK.
                    s.bottom = '0px';
                    // Explicitly set the scroller and index heights to the container height
                    mx.style.height = m2.style.height = s.height;
                };
                /**
                 * Add an index to the language menu
                 *
                 *  @param  {Object}  e         touch start event from index
                 *  @param  {Object}  m2        menu scroller DIV
                 *  @param  {Object}  menu      DIV with list of languages
                 */
                LanguageMenu.prototype.scrollToLanguage = function (e, m2, menu) {
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                    e.preventDefault();
                    var target = e.touches[0].target;
                    // Will return 'P', not 'p'.
                    if (target.nodeName != 'P') {
                        return;
                    }
                    var i, t, top = 0, initial = target.innerHTML.charCodeAt(0), nn = menu.childNodes;
                    try {
                        for (i = 0; i < nn.length - 1; i++) {
                            t = nn[i].firstChild.innerHTML.toUpperCase().charCodeAt(0);
                            if (t >= initial) {
                                break;
                            }
                        }
                    }
                    catch (ex) { }
                    try {
                        top = menu.firstChild.offsetHeight * i + 1;
                        m2.scrollTop = top;
                    }
                    catch (ex) {
                        top = 0;
                    }
                    try {
                        if (m2.scrollTop < top) {
                            m2.scrollTop = m2.scrollHeight - m2.offsetHeight;
                        }
                        if (m2.scrollTop > m2.scrollHeight - m2.offsetHeight - 1) {
                            m2.scrollTop = m2.scrollHeight - m2.offsetHeight - 1;
                        }
                    }
                    catch (ex) { }
                };
                /**
                 * Display all languages for installed keyboards in scrollable list
                 *
                 *    @param    {Object}    menu      DIV to which language selectors will be added
                 *    @param    {Object}    kbdList   array of keyboard stub objects
                 *    @return   {number}              index of currently active language
                 **/
                LanguageMenu.prototype.addLanguages = function (menu, kbdList) {
                    var nStubs = kbdList.length;
                    var util = this.keyman.util;
                    var device = util.device;
                    // Create and sort a list of languages
                    var k, n, lg, langs = [];
                    for (n = 0; n < nStubs; n++) {
                        lg = kbdList[n]['KL'];
                        if (langs.indexOf(lg) == -1) {
                            langs.push(lg);
                        }
                    }
                    langs.sort();
                    // Get current scale factor (reciprocal of viewport scale)
                    var scale = Math.round(100 / util.getViewportScale()) / 100;
                    var dx, lgBar, i, kb, activeLanguageIndex = -1;
                    var _loop_1 = function () {
                        dx = util._CreateElement('div');
                        dx.className = 'kbd-list-closed';
                        lgBar = util._CreateElement('p');
                        lgBar.kList = [];
                        for (n = 0; n < nStubs; n++) {
                            if (kbdList[n]['KL'] == langs[k]) {
                                lgBar.kList.push(kbdList[n]);
                            }
                        }
                        // Adjust bar size for current viewport scaling (iOS only!)
                        if (device.OS == 'iOS') {
                            lgBar.style.fontSize = scale + 'em';
                        }
                        // Add to menu
                        dx.appendChild(lgBar);
                        menu.appendChild(dx);
                        if (langs[k] == this_1.keyman.keyboardManager.activeStub['KL']) {
                            activeLanguageIndex = k;
                        }
                        var languageMenu = this_1;
                        // Several keyboards for this language
                        if (lgBar.kList.length > 1) {
                            lgBar.className = 'kbd-list';
                            lgBar.innerHTML = langs[k] + '...';
                            lgBar.scrolled = false;
                            lgBar.ontouchend = function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                if (e.target.scrolled)
                                    e.target.scrolled = false;
                                else
                                    this.parentNode.className = (this.parentNode.className == 'kbd-list-closed' ? 'kbd-list-open' : 'kbd-list-closed');
                                // Adjust top of menu to allow for expanded list
                                languageMenu.adjust(this.parentNode.className == 'kbd-list-closed' ? 0 : this.kList.length);
                            };
                            lgBar.addEventListener('touchstart', function (e) { e.stopPropagation(); }, false);
                            lgBar.addEventListener('touchmove', function (e) { e.target.scrolled = true; e.stopPropagation(); }, false);
                            for (i = 0; i < lgBar.kList.length; i++) {
                                kb = util._CreateElement('p');
                                kb.className = 'kbd-list-entry';
                                if (device.OS == 'iOS') {
                                    kb.style.fontSize = scale + 'em';
                                }
                                this_1.addKeyboard(lgBar.kList[i], kb, false);
                                dx.appendChild(kb);
                            }
                            // Only one keyboard for this language
                        }
                        else {
                            lgBar.innerHTML = langs[k];
                            lgBar.className = 'kbd-single-entry';
                            this_1.addKeyboard(lgBar.kList[0], lgBar, true);
                        }
                        if (k == activeLanguageIndex) {
                            lgBar.className = lgBar.className + ' current';
                        }
                    };
                    var this_1 = this;
                    for (k = 0; k < langs.length; k++) {
                        _loop_1();
                    }
                    // Add a non-selectable bottom bar so to allow scrolling to the last language
                    var padLast = util._CreateElement('div');
                    padLast.id = 'kmw-menu-footer';
                    var cancelTouch = function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                    };
                    padLast.addEventListener('touchstart', cancelTouch, false);
                    padLast.addEventListener('touchmove', cancelTouch, false);
                    padLast.addEventListener('touchend', cancelTouch, false);
                    menu.appendChild(padLast);
                    return activeLanguageIndex;
                };
                /**
                 * Add a keyboard entry to the language menu *
                 *
                 * @param   {Object}    kbd     keyboard object
                 * @param   {Object}    kb      element being added and styled
                 * @param   {boolean}   unique  is this the only keyboard for the language?
                 */
                LanguageMenu.prototype.addKeyboard = function (kbd, kb, unique) {
                    kb.kn = kbd['KI']; // InternalName;
                    kb.kc = kbd['KLC']; // LanguageCode;
                    kb.innerHTML = unique ? kbd['KL'] : kbd['KN'].replace(' Keyboard', ''); // Name
                    // We're setting up a few events - this alias helps avoid scoping issues.
                    var languageMenu = this;
                    // Touchstart (or mspointerdown) event highlights the touched list item
                    var touchStart = function (e) {
                        e.stopPropagation();
                        if (this.className.indexOf('selected') <= 0) {
                            this.className = this.className + ' selected';
                        }
                        languageMenu.scrolling = false;
                        languageMenu.y0 = e.touches[0].pageY; //osk.lgList.childNodes[0].scrollTop;
                        return true;
                    };
                    //TODO: Still drags Android background sometimes (not consistently)
                    // Touchmove drags the list and prevents release from selecting the language
                    var touchMove = function (e) {
                        e.stopImmediatePropagation();
                        var scroller = languageMenu.lgList.childNodes[0], yMax = scroller.scrollHeight - scroller.offsetHeight, y, dy;
                        if ("undefined" != typeof e.pageY) {
                            y = e.pageY;
                        }
                        else if ("undefined" != typeof e.touches) {
                            y = e.touches[0].pageY;
                        }
                        else {
                            return;
                        }
                        dy = y - languageMenu.y0;
                        // Scroll up (show later listed languages)
                        if (dy < 0) {
                            if (scroller.scrollTop >= yMax - 1) {
                                e.preventDefault();
                                languageMenu.y0 = y;
                            }
                            // Scroll down (show earlier listed languages)
                        }
                        else if (dy > 0) {
                            if (scroller.scrollTop < 2) {
                                e.preventDefault();
                                languageMenu.y0 = y;
                            }
                            // Dont' scroll - can happen if changing scroll direction
                        }
                        else {
                            return;
                        }
                        // Disable selected language if drag more than 5px
                        if (dy < -5 || dy > 5) {
                            languageMenu.scrolling = true;
                            this.className = this.className.replace(/\s*selected/, '');
                            languageMenu.y0 = y;
                        }
                        return true;
                    };
                    // Touch release (click) event selects touched list item
                    var touchEnd = function (e) {
                        e.preventDefault();
                        if (typeof (e.stopImmediatePropagation) != 'undefined') {
                            e.stopImmediatePropagation();
                        }
                        else {
                            e.stopPropagation();
                        }
                        if (languageMenu.scrolling) {
                            this.className = this.className.replace(/\s*selected/, '');
                        }
                        else {
                            com.keyman.dom.DOMEventHandlers.states.setFocusTimer();
                            languageMenu.lgList.style.display = 'none'; //still allows blank menu momentarily on selection
                            languageMenu.keyman.keyboardManager._SetActiveKeyboard(this.kn, this.kc, true);
                            languageMenu.keyman.keyboardManager.doKeyboardChange(this.kn, this.kc);
                            languageMenu.keyman.domManager.focusLastActiveElement();
                            languageMenu.hide();
                        }
                        return true;
                    };
                    kb.onmspointerdown = touchStart;
                    kb.addEventListener('touchstart', touchStart, false);
                    kb.onmspointermove = touchMove;
                    kb.addEventListener('touchmove', touchMove, false);
                    kb.onmspointerout = touchEnd;
                    kb.addEventListener('touchend', touchEnd, false);
                };
                /**
                 * Remove the language menu again
                 **/
                LanguageMenu.prototype.hide = function () {
                    var osk = this.keyman.osk;
                    var languageMenu = this;
                    if (this.lgList) {
                        osk.vkbd.highlightKey(osk.vkbd.lgKey, false);
                        this.lgList.style.visibility = 'hidden';
                        window.setTimeout(function () {
                            // In case of extremely rapid keyboard swaps, this event may trigger more than once - 
                            // the shim's on-touch event can trigger after a keyboard has been selected!
                            if (languageMenu.shim.parentElement) {
                                document.body.removeChild(languageMenu.shim);
                                document.body.removeChild(languageMenu.lgList);
                            }
                        }, 500);
                    }
                };
                return LanguageMenu;
            }());
            osk_2.LanguageMenu = LanguageMenu;
        })(osk = keyman_13.osk || (keyman_13.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            ;
            var ParsedLengthStyle = /** @class */ (function () {
                function ParsedLengthStyle(style) {
                    Object.assign(this, typeof style == 'string' ? ParsedLengthStyle.parseLengthStyle(style) : style);
                }
                Object.defineProperty(ParsedLengthStyle.prototype, "styleString", {
                    get: function () {
                        if (this.absolute) {
                            return this.val + 'px';
                        }
                        else if (this.special) {
                            // Only 'em' and 'rem' are allowed, and both may be treated similarly.
                            // Both relate to font sizes, though the path to the reference element
                            // differs between them.
                            return this.val + this.special;
                        }
                        else {
                            return (this.val * 100) + '%';
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                ParsedLengthStyle.prototype.scaledBy = function (scalar) {
                    return new ParsedLengthStyle({
                        val: scalar * this.val,
                        absolute: this.absolute
                    });
                };
                ParsedLengthStyle.inPixels = function (val) {
                    return new ParsedLengthStyle({ val: val, absolute: true });
                };
                ParsedLengthStyle.inPercent = function (val) {
                    return new ParsedLengthStyle({ val: val / 100, absolute: false });
                };
                ParsedLengthStyle.forScalar = function (val) {
                    return new ParsedLengthStyle({ val: val, absolute: false });
                };
                ParsedLengthStyle.special = function (val, suffix) {
                    return new ParsedLengthStyle({ val: val, absolute: false, special: suffix });
                };
                ParsedLengthStyle.parseLengthStyle = function (spec) {
                    var val = parseFloat(spec);
                    if (isNaN(val)) {
                        // Cannot parse.
                        console.error("Could not properly parse specified length style info: '" + spec + "'.");
                        return null;
                    }
                    return spec.indexOf('px') != -1 ? { val: val, absolute: true } :
                        // 16 px ~= 12 pt.
                        // Reference: https://kyleschaeffer.com/css-font-size-em-vs-px-vs-pt-vs-percent
                        spec.indexOf('pt') != -1 ? { val: (4 * val / 3), absolute: true } :
                            spec.indexOf('%') != -1 ? { val: val / 100, absolute: false } :
                                spec.indexOf('rem') != -1 ? { val: val, absolute: false, special: 'rem' } :
                                    spec.indexOf('em') != -1 ? { val: val, absolute: false, special: 'em' } :
                                        // At this point, assuming either Number or number in a string without units
                                        // Note:  this one is NOT natively handled by browsers!
                                        //        We'll treat it as if it were 'pt', since that's likely the user's
                                        //        most familiar font size unit.
                                        { val: (4 * val / 3), absolute: true };
                };
                return ParsedLengthStyle;
            }());
            osk.ParsedLengthStyle = ParsedLengthStyle;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="../oskViewComponent.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk_3) {
            var layouts;
            (function (layouts) {
                var ResizeBar = /** @class */ (function () {
                    function ResizeBar(dragHandler) {
                        this.mouseCancellingHandler = function (ev) {
                            ev.preventDefault();
                            ev.cancelBubble = true;
                            return false;
                        };
                        this._element = this.buildResizeBar();
                        if (dragHandler) {
                            this._resizeHandle.onmousedown = dragHandler.mouseDownHandler;
                        }
                    }
                    Object.defineProperty(ResizeBar.prototype, "layoutHeight", {
                        get: function () {
                            return ResizeBar.DISPLAY_HEIGHT;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ResizeBar.prototype, "element", {
                        get: function () {
                            return this._element;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ResizeBar.prototype, "handle", {
                        get: function () {
                            return this._resizeHandle;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ResizeBar.prototype.allowResizing = function (flag) {
                        this._resizeHandle.style.display = flag ? 'block' : 'none';
                    };
                    ResizeBar.prototype.markUnselectable = function (e) {
                        e.style.MozUserSelect = "none";
                        e.style.KhtmlUserSelect = "none";
                        e.style.UserSelect = "none";
                        e.style.WebkitUserSelect = "none";
                    };
                    /**
                     * Create a bottom bar with a resizing icon for the desktop OSK
                     */
                    ResizeBar.prototype.buildResizeBar = function () {
                        var util = com.keyman.singleton.util;
                        var osk = com.keyman.singleton.osk;
                        var bar = document.createElement('div');
                        this.markUnselectable(bar);
                        bar.className = 'kmw-footer';
                        bar.onmousedown = this.mouseCancellingHandler;
                        // Add caption
                        var Ltitle = document.createElement('div');
                        this.markUnselectable(Ltitle);
                        Ltitle.className = 'kmw-footer-caption';
                        Ltitle.innerHTML = '<a href="https://keyman.com/developer/keymanweb/">KeymanWeb</a>';
                        Ltitle.id = 'keymanweb-osk-footer-caption';
                        // Display build number on shift+double click
                        util.attachDOMEvent(Ltitle, 'dblclick', function (e) {
                            if (e && e.shiftKey) {
                                osk.showBuild();
                            }
                            return false;
                        }.bind(this), false);
                        // Prevent selection of caption (IE - set by class for other browsers)
                        if ('onselectstart' in Ltitle) {
                            Ltitle.onselectstart = util.selectStartHandler; //IE (Build 360)
                        }
                        bar.appendChild(Ltitle);
                        var Limg = document.createElement('div');
                        this.markUnselectable(Limg);
                        Limg.className = 'kmw-footer-resize';
                        bar.appendChild(Limg);
                        this._resizeHandle = Limg;
                        //TODO: the image never appears in IE8, have no idea why!
                        return bar;
                    };
                    ResizeBar.prototype.refreshLayout = function () {
                        // The title bar is adaptable as it is and needs no adjustments.
                    };
                    ResizeBar.DISPLAY_HEIGHT = osk_3.ParsedLengthStyle.inPixels(16); // As set in kmwosk.css
                    return ResizeBar;
                }());
                layouts.ResizeBar = ResizeBar;
            })(layouts = osk_3.layouts || (osk_3.layouts = {}));
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            /**
             * Represents the current location of the current cursor / touchpoint during
             * an ongoing OSK input event.  This class standardizes to .pageX (document)
             * coordinates, rather than .clientX (viewport) coordinates.
             */
            var InputEventCoordinate = /** @class */ (function () {
                function InputEventCoordinate(x, y, source) {
                    this.x = x;
                    this.y = y;
                    if (source) {
                        this.source = source;
                    }
                }
                // Converts a MouseEvent or TouchEvent into the base coordinates needed 
                // by the mouse-dragging operations.
                InputEventCoordinate.fromEvent = function (e) {
                    var coordSource;
                    // Desktop Safari versions as recent as 14.1 do not support TouchEvents.
                    // So, just in case, a two-fold conditional check to avoid issues with a direct
                    // 'instanceof' against the type.
                    if (window['TouchEvent'] && e instanceof TouchEvent) {
                        coordSource = e.changedTouches[0];
                    }
                    else if (e['changedTouches']) {
                        coordSource = e['changedTouches'][0];
                    }
                    else {
                        coordSource = e;
                    }
                    // For MouseEvents, .pageX is slightly less supported in older browsers when
                    // compared to .clientX.  They're about equally supported for TouchEvents.
                    if (coordSource.pageX) {
                        return new InputEventCoordinate(coordSource.pageX, coordSource.pageY, e);
                    }
                    else if (coordSource.clientX) {
                        var x = coordSource.clientX + document.body.scrollLeft;
                        var y = coordSource.clientY + document.body.scrollTop;
                        return new InputEventCoordinate(x, y, e);
                    }
                    else {
                        return new InputEventCoordinate(null, null, e);
                    }
                };
                Object.defineProperty(InputEventCoordinate.prototype, "activeInputCount", {
                    get: function () {
                        // May not be an ACTUAL touch event during unit tests.
                        if (window['TouchEvent'] && this.source['touches'] !== undefined && this.source['touches'] !== null) {
                            return this.source['touches'].length;
                        }
                        else {
                            var event_2 = this.source;
                            return event_2.buttons > 0 ? 1 : 0;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InputEventCoordinate.prototype, "target", {
                    get: function () {
                        var _a;
                        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.target;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InputEventCoordinate.prototype, "isFromTouch", {
                    get: function () {
                        return !this.isFromMouse;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InputEventCoordinate.prototype, "isFromMouse", {
                    get: function () {
                        return this.source instanceof MouseEvent;
                    },
                    enumerable: true,
                    configurable: true
                });
                return InputEventCoordinate;
            }());
            osk.InputEventCoordinate = InputEventCoordinate;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="../inputEventCoordinate.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var layouts;
            (function (layouts) {
                /**
                 * Used to store the page's original mouse handlers and properties
                 * when temporarily overridden by OSK moving or resizing handlers due
                 * to user interaction.
                 */
                var MouseStartSnapshot = /** @class */ (function () {
                    function MouseStartSnapshot(e) {
                        this._VPreviousMouseMove = document.onmousemove;
                        this._VPreviousMouseUp = document.onmouseup;
                        this._VPreviousCursor = document.body.style.cursor;
                        this._VPreviousMouseButton = (typeof (e.which) == 'undefined' ? e.button : e.which);
                    }
                    MouseStartSnapshot.prototype.restore = function () {
                        document.onmousemove = this._VPreviousMouseMove;
                        document.onmouseup = this._VPreviousMouseUp;
                        if (document.body.style.cursor) {
                            document.body.style.cursor = this._VPreviousCursor;
                        }
                    };
                    MouseStartSnapshot.prototype.matchesCausingClick = function (e) {
                        return this._VPreviousMouseButton == (typeof (e.which) == 'undefined' ? e.button : e.which);
                    };
                    return MouseStartSnapshot;
                }());
                var MouseDragOperation = /** @class */ (function () {
                    function MouseDragOperation(cursorType) {
                        this.startHandler = this._VMoveMouseDown.bind(this);
                        this.cursorType = cursorType;
                    }
                    Object.defineProperty(MouseDragOperation.prototype, "enabled", {
                        /**
                         * Denotes whether or not this object should handle incoming events.
                         */
                        get: function () {
                            return this._enabled;
                        },
                        set: function (flag) {
                            this._enabled = flag;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(MouseDragOperation.prototype, "isActive", {
                        /**
                         * Denotes whether or not this object is currently handling an ongoing drag event.
                         */
                        get: function () {
                            return !!this._mouseStartSnapshot;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(MouseDragOperation.prototype, "mouseDownHandler", {
                        get: function () {
                            return this.startHandler;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    /**
                     * Function     _VMoveMouseDown
                     * Scope        Private
                     * @param       {Object}      e      event
                     * Description  Process mouse down on OSK
                     */
                    MouseDragOperation.prototype._VMoveMouseDown = function (e) {
                        if (!e) {
                            return true;
                        }
                        if (!this._enabled) {
                            return true;
                        }
                        if (!this._mouseStartSnapshot) { // I1472 - Dragging off edge of browser window causes muckup
                            this._mouseStartSnapshot = new MouseStartSnapshot(e);
                        }
                        this._startCoord = osk.InputEventCoordinate.fromEvent(e);
                        document.onmousemove = this._VMoveMouseMove.bind(this);
                        document.onmouseup = this._VMoveMouseUp.bind(this);
                        if (document.body.style.cursor) {
                            document.body.style.cursor = this.cursorType;
                        }
                        e.preventDefault();
                        e.cancelBubble = true;
                        this.onDragStart();
                        return false;
                    };
                    /**
                     * Process mouse drag on OSK
                     *
                     * @param       {Object}      e      event
                     */
                    MouseDragOperation.prototype._VMoveMouseMove = function (e) {
                        if (!e) {
                            return true;
                        }
                        if (!this.enabled) {
                            return true;
                        }
                        e.preventDefault();
                        e.cancelBubble = true;
                        if (!this._mouseStartSnapshot.matchesCausingClick(e)) { // I1472 - Dragging off edge of browser window causes muckup
                            return this._VMoveMouseUp(e);
                        }
                        else {
                            var coord = osk.InputEventCoordinate.fromEvent(e);
                            var deltaX = coord.x - this._startCoord.x;
                            var deltaY = coord.y - this._startCoord.y;
                            this.onDragMove(deltaX, deltaY);
                            return false;
                        }
                    };
                    /**
                     * Function     _VMoveMouseUp
                     * Scope        Private
                     * @param       {Object}      e      event
                     * Description  Process mouse up during movement of KMW OSK UI
                     */
                    MouseDragOperation.prototype._VMoveMouseUp = function (e) {
                        if (!e) {
                            return true;
                        }
                        this._mouseStartSnapshot.restore();
                        this._mouseStartSnapshot = null;
                        e.preventDefault();
                        e.cancelBubble = true;
                        this.onDragRelease();
                        return false;
                    };
                    return MouseDragOperation;
                }());
                layouts.MouseDragOperation = MouseDragOperation;
            })(layouts = osk.layouts || (osk.layouts = {}));
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="mouseDragOperation.ts" />
/// <reference path="../oskViewComponent.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk_4) {
            var layouts;
            (function (layouts) {
                var TitleBar = /** @class */ (function () {
                    function TitleBar(dragHandler) {
                        this.mouseCancellingHandler = function (ev) {
                            ev.preventDefault();
                            ev.cancelBubble = true;
                            return false;
                        };
                        this._element = this.buildTitleBar();
                        if (dragHandler) {
                            this.element.onmousedown = dragHandler.mouseDownHandler;
                        }
                    }
                    Object.defineProperty(TitleBar.prototype, "layoutHeight", {
                        get: function () {
                            return TitleBar.DISPLAY_HEIGHT;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TitleBar.prototype, "element", {
                        get: function () {
                            return this._element;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    TitleBar.prototype.setPinCJKOffset = function () {
                        this._unpinButton.style.left = '15px';
                    };
                    TitleBar.prototype.showPin = function (visible) {
                        this._unpinButton.style.display = visible ? 'block' : 'none';
                    };
                    TitleBar.prototype.setTitle = function (str) {
                        this._caption.innerHTML = str;
                    };
                    TitleBar.prototype.setTitleFromKeyboard = function (keyboard) {
                        var title = "<span style='font-weight:bold'>" + keyboard.name + '</span>'; // I1972  // I2186
                        this._caption.innerHTML = title;
                    };
                    TitleBar.prototype.attachHandlers = function (osk) {
                        var util = com.keyman.singleton.util;
                        this._helpButton.onclick = function () {
                            var p = {};
                            util.callEvent('osk.helpclick', p);
                            if (window.event) {
                                window.event.returnValue = false;
                            }
                            return false;
                        };
                        this._configButton.onclick = function () {
                            var p = {};
                            util.callEvent('osk.configclick', p);
                            if (window.event) {
                                window.event.returnValue = false;
                            }
                            return false;
                        };
                        this._closeButton.onclick = function () {
                            osk.startHide(true);
                            return false;
                        };
                        if (osk instanceof osk_4.FloatingOSKView) {
                            var _osk_1 = osk;
                            this._unpinButton.onclick = function () {
                                _osk_1.restorePosition(true);
                                return false;
                            };
                        }
                    };
                    /**
                     * Create a control bar with title and buttons for the desktop OSK
                     */
                    TitleBar.prototype.buildTitleBar = function () {
                        var bar = document.createElement('div');
                        this.markUnselectable(bar);
                        bar.id = 'keymanweb_title_bar';
                        bar.className = 'kmw-title-bar';
                        var Ltitle = this._caption = document.createElement('span');
                        this.markUnselectable(Ltitle);
                        Ltitle.className = 'kmw-title-bar-caption';
                        Ltitle.style.color = '#fff';
                        bar.appendChild(Ltitle);
                        var Limg = this._closeButton = this.buildCloseButton();
                        bar.appendChild(Limg);
                        Limg = this._helpButton = this.buildHelpButton();
                        bar.appendChild(Limg);
                        Limg = this._configButton = this.buildConfigButton();
                        bar.appendChild(Limg);
                        Limg = this._unpinButton = this.buildUnpinButton();
                        bar.appendChild(Limg);
                        return bar;
                    };
                    TitleBar.prototype.markUnselectable = function (e) {
                        e.style.MozUserSelect = "none";
                        e.style.KhtmlUserSelect = "none";
                        e.style.UserSelect = "none";
                        e.style.WebkitUserSelect = "none";
                    };
                    TitleBar.prototype.buildCloseButton = function () {
                        var Limg = document.createElement('div');
                        this.markUnselectable(Limg);
                        Limg.id = 'kmw-close-button';
                        Limg.className = 'kmw-title-bar-image';
                        Limg.onmousedown = this.mouseCancellingHandler;
                        return Limg;
                    };
                    TitleBar.prototype.buildHelpButton = function () {
                        var Limg = document.createElement('div');
                        this.markUnselectable(Limg);
                        Limg.id = 'kmw-help-image';
                        Limg.className = 'kmw-title-bar-image';
                        Limg.title = 'KeymanWeb Help';
                        Limg.onmousedown = this.mouseCancellingHandler;
                        return Limg;
                    };
                    TitleBar.prototype.buildConfigButton = function () {
                        var Limg = document.createElement('div');
                        this.markUnselectable(Limg);
                        Limg.id = 'kmw-config-image';
                        Limg.className = 'kmw-title-bar-image';
                        Limg.title = 'KeymanWeb Configuration Options';
                        Limg.onmousedown = this.mouseCancellingHandler;
                        return Limg;
                    };
                    /**
                     * Builds an 'unpin' button for restoring OSK to default location, handle mousedown and click events
                     */
                    TitleBar.prototype.buildUnpinButton = function () {
                        var Limg = document.createElement('div'); //I2186
                        this.markUnselectable(Limg);
                        Limg.id = 'kmw-pin-image';
                        Limg.className = 'kmw-title-bar-image';
                        Limg.title = 'Pin the On Screen Keyboard to its default location on the active text box';
                        Limg.onmousedown = this.mouseCancellingHandler;
                        return Limg;
                    };
                    TitleBar.prototype.refreshLayout = function () {
                        // The title bar is adaptable as it is and needs no adjustments.
                    };
                    TitleBar.DISPLAY_HEIGHT = osk_4.ParsedLengthStyle.inPixels(20); // As set in kmwosk.css
                    return TitleBar;
                }());
                layouts.TitleBar = TitleBar;
            })(layouts = osk_4.layouts || (osk_4.layouts = {}));
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="resizeBar.ts" />
/// <reference path="titleBar.ts" />
/// <reference path="mouseDragOperation.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var layouts;
            (function (layouts) {
                var TargetedFloatLayout = /** @class */ (function () {
                    function TargetedFloatLayout() {
                        this.titleBar = new layouts.TitleBar(this.titleDragHandler);
                        this.resizeBar = new layouts.ResizeBar(this.resizeDragHandler);
                    }
                    Object.defineProperty(TargetedFloatLayout.prototype, "movementEnabled", {
                        get: function () {
                            return this.titleDragHandler.enabled;
                        },
                        set: function (flag) {
                            this.titleDragHandler.enabled = flag;
                            this.titleBar.showPin(flag && this.oskView.userPositioned);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TargetedFloatLayout.prototype, "resizingEnabled", {
                        get: function () {
                            return this.resizeDragHandler.enabled;
                        },
                        set: function (flag) {
                            this.resizeDragHandler.enabled = flag;
                            this.resizeBar.allowResizing(flag);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TargetedFloatLayout.prototype, "isBeingMoved", {
                        get: function () {
                            return this.titleDragHandler.isActive;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TargetedFloatLayout.prototype, "isBeingResized", {
                        get: function () {
                            return this.resizeDragHandler.isActive;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    TargetedFloatLayout.prototype.attachToView = function (view) {
                        this.oskView = view;
                        this.titleBar.attachHandlers(view);
                        this.titleDragHandler.enabled = !view.noDrag;
                        this.resizeDragHandler.enabled = true; // by default.
                    };
                    Object.defineProperty(TargetedFloatLayout.prototype, "titleDragHandler", {
                        get: function () {
                            var layout = this;
                            if (this._moveHandler) {
                                return this._moveHandler;
                            }
                            this._moveHandler = new /** @class */ (function (_super) {
                                __extends(class_1, _super);
                                function class_1() {
                                    return _super.call(this, 'move') || this;
                                }
                                class_1.prototype.onDragStart = function () {
                                    if (!layout.oskView) {
                                        return;
                                    }
                                    this.startX = layout.oskView._Box.offsetLeft;
                                    this.startY = layout.oskView._Box.offsetTop;
                                    var keymanweb = com.keyman.singleton;
                                    if (keymanweb.isCJK()) {
                                        layout.titleBar.setPinCJKOffset();
                                    }
                                    keymanweb.uiManager.justActivated = true;
                                };
                                // Note:  _this.oskView may not be initialized yet.
                                class_1.prototype.onDragMove = function (cumulativeX, cumulativeY) {
                                    if (!layout.oskView) {
                                        return;
                                    }
                                    layout.titleBar.showPin(true);
                                    layout.oskView.userPositioned = true;
                                    layout.oskView._Box.style.left = (this.startX + cumulativeX) + 'px';
                                    layout.oskView._Box.style.top = (this.startY + cumulativeY) + 'px';
                                    var r = layout.oskView.getRect();
                                    layout.oskView.setSize(r.width, r.height, true);
                                    layout.oskView.x = r.left;
                                    layout.oskView.y = r.top;
                                };
                                class_1.prototype.onDragRelease = function () {
                                    if (!layout.oskView) {
                                        return;
                                    }
                                    var keymanweb = com.keyman.singleton;
                                    keymanweb.domManager.focusLastActiveElement();
                                    keymanweb.uiManager.justActivated = false;
                                    keymanweb.uiManager.setActivatingUI(false);
                                    if (layout.oskView.vkbd) {
                                        layout.oskView.vkbd.currentKey = null;
                                    }
                                    layout.oskView.userPositioned = true;
                                    layout.oskView.doResizeMove();
                                    layout.oskView.saveCookie();
                                };
                                return class_1;
                            }(layouts.MouseDragOperation));
                            return this._moveHandler;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TargetedFloatLayout.prototype, "resizeDragHandler", {
                        get: function () {
                            var layout = this;
                            if (this._resizeHandler) {
                                return this._resizeHandler;
                            }
                            this._resizeHandler = new /** @class */ (function (_super) {
                                __extends(class_2, _super);
                                function class_2() {
                                    return _super.call(this, 'se-resize') || this;
                                }
                                class_2.prototype.onDragStart = function () {
                                    if (!layout.oskView) {
                                        return;
                                    }
                                    this.startWidth = layout.oskView.computedWidth;
                                    this.startHeight = layout.oskView.computedHeight;
                                    var keymanweb = com.keyman.singleton;
                                    keymanweb.uiManager.justActivated = true;
                                };
                                // Note:  _this.oskView may not be initialized yet.
                                class_2.prototype.onDragMove = function (cumulativeX, cumulativeY) {
                                    if (!layout.oskView) {
                                        return;
                                    }
                                    var newWidth = this.startWidth + cumulativeX;
                                    var newHeight = this.startHeight + cumulativeY;
                                    // Set the smallest and largest OSK size
                                    if (newWidth < 0.2 * screen.width) {
                                        newWidth = 0.2 * screen.width;
                                    }
                                    if (newHeight < 0.1 * screen.height) {
                                        newHeight = 0.1 * screen.height;
                                    }
                                    if (newWidth > 0.9 * screen.width) {
                                        newWidth = 0.9 * screen.width;
                                    }
                                    if (newHeight > 0.5 * screen.height) {
                                        newHeight = 0.5 * screen.height;
                                    }
                                    // Explicitly set OSK width, height,  and font size - cannot safely rely on scaling from font
                                    layout.oskView.setSize(newWidth, newHeight, true);
                                };
                                class_2.prototype.onDragRelease = function () {
                                    if (!layout.oskView) {
                                        return;
                                    }
                                    var keymanweb = com.keyman.singleton;
                                    keymanweb.domManager.focusLastActiveElement();
                                    keymanweb.uiManager.justActivated = false;
                                    keymanweb.uiManager.setActivatingUI(false);
                                    if (layout.oskView.vkbd) {
                                        layout.oskView.vkbd.currentKey = null;
                                    }
                                    if (layout.oskView.vkbd) {
                                        this.startWidth = layout.oskView.computedWidth;
                                        this.startHeight = layout.oskView.computedHeight;
                                    }
                                    layout.oskView.refreshLayout(); // Finalize the resize.
                                    layout.oskView.doResizeMove();
                                    layout.oskView.saveCookie();
                                };
                                return class_2;
                            }(layouts.MouseDragOperation));
                            return this._resizeHandler;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return TargetedFloatLayout;
                }());
                layouts.TargetedFloatLayout = TargetedFloatLayout;
            })(layouts = osk.layouts || (osk.layouts = {}));
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_14) {
        var osk;
        (function (osk) {
            var PreProcessor = /** @class */ (function () {
                function PreProcessor() {
                }
                /**
                 * Simulate a keystroke according to the touched keyboard button element
                 *
                 * Note that the test-case oriented 'recorder' stubs this method to facilitate OSK-based input
                 * recording for use in test cases.  If changing this function, please ensure the recorder is
                 * not affected.
                 *
                 * @param       {Object}      e      element touched (or clicked)
                 */
                PreProcessor.clickKey = function (e, input) {
                    var keyman = com.keyman.singleton;
                    var Lkc = keyman['osk'].vkbd.initKeyEvent(e, input);
                    if (!Lkc) {
                        return true;
                    }
                    return this.raiseKeyEvent(Lkc);
                };
                PreProcessor.raiseKeyEvent = function (keyEvent) {
                    var keyman = com.keyman.singleton;
                    var Lelem = keyman.domManager.lastActiveElement;
                    if (Lelem != null) {
                        // Handle any DOM state management related to click inputs.
                        var outputTarget = keyman_14.dom.Utils.getOutputTarget(Lelem);
                        keyman.domManager.initActiveElement(Lelem);
                        // Clear any cached codepoint data; we can rebuild it if it's unchanged.
                        outputTarget.invalidateSelection();
                        // Deadkey matching continues to be troublesome.
                        // Deleting matched deadkeys here seems to correct some of the issues.   (JD 6/6/14)
                        outputTarget.deadkeys().deleteMatched(); // Delete any matched deadkeys before continuing
                        if (!keyman.isEmbedded) {
                            keyman.uiManager.setActivatingUI(true);
                            com.keyman.dom.DOMEventHandlers.states._IgnoreNextSelChange = 100;
                            keyman.domManager.focusLastActiveElement();
                            com.keyman.dom.DOMEventHandlers.states._IgnoreNextSelChange = 0;
                        }
                        var retVal = PreProcessor.handleClick(keyEvent, outputTarget, null);
                        // Now that processing is done, we can do a bit of post-processing, too.
                        keyman.uiManager.setActivatingUI(false); // I2498 - KeymanWeb OSK does not accept clicks in FF when using automatic UI
                        return retVal;
                    }
                    else {
                        return true;
                    }
                };
                // Serves to hold DOM-dependent code that affects both 'native' and 'embedded' mode OSK use 
                // after the KeyEvent object has been properly instantiated.  This should help catch any 
                // mutual last-minute DOM-side interactions before passing control to the processor... such as
                // the UI-control command keys as seen below.
                PreProcessor.handleClick = function (Lkc, outputTarget, e) {
                    var keyman = com.keyman.singleton;
                    // Exclude menu and OSK hide keys from normal click processing
                    if (Lkc.kName == 'K_LOPT' || Lkc.kName == 'K_ROPT') {
                        keyman['osk'].vkbd.optionKey(e, Lkc.kName, true);
                        return true;
                    }
                    var retVal = !!keyman.core.processKeyEvent(Lkc, outputTarget);
                    return retVal;
                };
                return PreProcessor;
            }());
            osk.PreProcessor = PreProcessor;
        })(osk = keyman_14.osk || (keyman_14.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="lengthStyle.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            function getFontSizeStyle(e) {
                var fs;
                if (typeof e == 'string') {
                    fs = e;
                }
                else {
                    fs = e.style.fontSize;
                    if (!fs) {
                        fs = getComputedStyle(e).fontSize;
                    }
                }
                return new osk.ParsedLengthStyle(fs);
            }
            osk.getFontSizeStyle = getFontSizeStyle;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var KeyData = /** @class */ (function () {
                function KeyData(keyData, keyId) {
                    this['key'] = keyData;
                    this['keyId'] = keyId;
                }
                return KeyData;
            }());
            osk.KeyData = KeyData;
            // Many thanks to https://www.typescriptlang.org/docs/handbook/advanced-types.html for this.
            function link(elem, data) {
                var e = elem;
                // Merges all properties and methods of KeyData onto the underlying HTMLDivElement, creating a merged class.
                for (var id in data) {
                    if (!e.hasOwnProperty(id)) {
                        e[id] = data[id];
                    }
                }
                return e;
            }
            osk.link = link;
            function isKey(elem) {
                return elem && ('key' in elem) && (elem['key'] instanceof OSKKey);
            }
            osk.isKey = isKey;
            function getKeyFrom(elem) {
                if (isKey(elem)) {
                    return elem;
                }
                else {
                    return null;
                }
            }
            osk.getKeyFrom = getKeyFrom;
            var OSKKeySpec = /** @class */ (function () {
                function OSKKeySpec(id, text, width, sp, nextlayer, pad) {
                    this.id = id;
                    this.text = text;
                    this.width = width ? width : "50";
                    this.sp = sp;
                    this.nextlayer = nextlayer;
                    this.pad = pad;
                }
                return OSKKeySpec;
            }());
            osk.OSKKeySpec = OSKKeySpec;
            var OSKKey = /** @class */ (function () {
                function OSKKey(spec, layer) {
                    this.spec = spec;
                    this.layer = layer;
                }
                /**
                 * Attach appropriate class to each key button, according to the layout
                 *
                 * @param       {Object=}   layout  source layout description (optional, sometimes)
                 */
                OSKKey.prototype.setButtonClass = function () {
                    var key = this.spec;
                    var btn = this.btn;
                    var n = 0;
                    if (typeof key['dk'] == 'string' && key['dk'] == '1') {
                        n = 8;
                    }
                    if (typeof key['sp'] == 'string') {
                        n = parseInt(key['sp'], 10);
                    }
                    if (n < 0 || n > 10) {
                        n = 0;
                    }
                    btn.className = 'kmw-key kmw-key-' + OSKKey.BUTTON_CLASSES[n];
                };
                /**
                 * For keys with button classes that support toggle states, this method
                 * may be used to toggle which state the key's button class is in.
                 * -  shift  <=>  shift-on
                 * - special <=> special-on
                 * @param {boolean=} flag The new toggle state
                 */
                OSKKey.prototype.setToggleState = function (flag) {
                    var btnClassId;
                    var classAsString;
                    if (classAsString = typeof this.spec['sp'] == 'string') {
                        btnClassId = parseInt(this.spec['sp'], 10);
                    }
                    else {
                        btnClassId = this.spec['sp'];
                    }
                    // 1 + 2:   shift  +  shift-on
                    // 3 + 4:  special + special-on
                    switch (OSKKey.BUTTON_CLASSES[btnClassId]) {
                        case 'shift':
                        case 'shift-on':
                            if (flag === undefined) {
                                flag = OSKKey.BUTTON_CLASSES[btnClassId] == 'shift';
                            }
                            this.spec['sp'] = 1 + (flag ? 1 : 0);
                            break;
                        // Added in 15.0:  special key highlight toggling.
                        // Was _intended_ in earlier versions, but not actually implemented.
                        case 'special':
                        case 'special-on':
                            if (flag === undefined) {
                                flag = OSKKey.BUTTON_CLASSES[btnClassId] == 'special';
                            }
                            this.spec['sp'] = 3 + (flag ? 1 : 0);
                            break;
                        default:
                            return;
                    }
                    if (classAsString) {
                        // KMW currently doesn't handle raw numbers for 'sp' properly.
                        this.spec['sp'] = ('' + this.spec['sp']);
                    }
                    this.setButtonClass();
                };
                // "Frame key" - generally refers to non-linguistic keys on the keyboard
                OSKKey.prototype.isFrameKey = function () {
                    var classIndex = this.spec['sp'] || 0;
                    switch (OSKKey.BUTTON_CLASSES[classIndex]) {
                        case 'default':
                        case 'deadkey':
                            // Note:  will (generally) include the spacebar.
                            return false;
                        default:
                            return true;
                    }
                };
                OSKKey.prototype.allowsKeyTip = function () {
                    if (this.isFrameKey()) {
                        return false;
                    }
                    else {
                        return !this.btn.classList.contains('kmw-spacebar');
                    }
                };
                OSKKey.prototype.highlight = function (on) {
                    var classes = this.btn.classList;
                    if (on) {
                        if (!classes.contains(OSKKey.HIGHLIGHT_CLASS)) {
                            classes.add(OSKKey.HIGHLIGHT_CLASS);
                        }
                    }
                    else {
                        classes.remove(OSKKey.HIGHLIGHT_CLASS);
                    }
                };
                /**
                 * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.
                 *
                 * @param {String} text The text to be rendered.
                 * @param {String} style The CSSStyleDeclaration for an element to measure against, without modification.
                 *
                 * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393
                 * This version has been substantially modified to work for this particular application.
                 */
                OSKKey.getTextMetrics = function (text, emScale, style) {
                    // Since we may mutate the incoming style, let's make sure to copy it first.
                    // Only the relevant properties, though.
                    style = {
                        fontFamily: style.fontFamily,
                        fontSize: style.fontSize
                    };
                    // A final fallback - having the right font selected makes a world of difference.
                    if (!style.fontFamily) {
                        style.fontFamily = getComputedStyle(document.body).fontFamily;
                    }
                    if (!style.fontSize || style.fontSize == "") {
                        style.fontSize = '1em';
                    }
                    var fontFamily = style.fontFamily;
                    var fontSpec = osk.getFontSizeStyle(style.fontSize);
                    var fontSize;
                    if (fontSpec.absolute) {
                        // We've already got an exact size - use it!
                        fontSize = fontSpec.val + 'px';
                    }
                    else {
                        fontSize = fontSpec.val * emScale + 'px';
                    }
                    // re-use canvas object for better performance
                    var canvas = OSKKey.getTextMetrics['canvas'] ||
                        (OSKKey.getTextMetrics['canvas'] = document.createElement("canvas"));
                    var context = canvas.getContext("2d");
                    context.font = fontSize + " " + fontFamily;
                    var metrics = context.measureText(text);
                    return metrics;
                };
                OSKKey.prototype.getIdealFontSize = function (vkbd, style) {
                    var buttonStyle = getComputedStyle(this.btn);
                    var keyWidth = parseFloat(buttonStyle.width);
                    var emScale = 1;
                    var originalSize = osk.getFontSizeStyle(style.fontSize || '1em');
                    // Not yet available; it'll be handled in a later layout pass.
                    if (!buttonStyle.fontSize) {
                        // NOTE:  preserves old behavior for use in documentation keyboards, for now.
                        // Once we no longer need to maintain this code block, we can drop all current
                        // method parameters safely.
                        //
                        // Recompute the new width for use in autoscaling calculations below, just in case.
                        emScale = vkbd.getKeyEmFontSize();
                        keyWidth = this.getKeyWidth(vkbd);
                    }
                    else {
                        // When available, just use computedStyle instead.
                        style = buttonStyle;
                    }
                    var fontSpec = osk.getFontSizeStyle(style.fontSize || '1em');
                    var metrics = OSKKey.getTextMetrics(this.spec.text, emScale, style);
                    var MAX_X_PROPORTION = 0.90;
                    var MAX_Y_PROPORTION = 0.90;
                    var X_PADDING = 2;
                    var Y_PADDING = 2;
                    var fontHeight, keyHeight;
                    if (metrics.fontBoundingBoxAscent) {
                        fontHeight = metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent;
                    }
                    var textHeight = fontHeight ? fontHeight + Y_PADDING : 0;
                    if (style.height && style.height.indexOf('px') != -1) {
                        keyHeight = Number.parseFloat(style.height.substring(0, style.height.indexOf('px')));
                    }
                    var xProportion = (keyWidth * MAX_X_PROPORTION) / (metrics.width + X_PADDING); // How much of the key does the text want to take?
                    var yProportion = textHeight && keyHeight ? (keyHeight * MAX_Y_PROPORTION) / textHeight : undefined;
                    var proportion = xProportion;
                    if (yProportion && yProportion < xProportion) {
                        proportion = yProportion;
                    }
                    // Never upscale keys past the default - only downscale them.
                    // Proportion < 1:  ratio of key width to (padded [loosely speaking]) text width
                    //                  maxProportion determines the 'padding' involved.
                    //
                    if (proportion < 1) {
                        if (originalSize.absolute) {
                            return proportion * fontSpec.val + 'px';
                        }
                        else {
                            return proportion * originalSize.val + 'em';
                        }
                    }
                    else {
                        if (originalSize.absolute) {
                            return fontSpec.val + 'px';
                        }
                        else {
                            return originalSize.val + 'em';
                        }
                    }
                };
                OSKKey.prototype.getKeyWidth = function (vkbd) {
                    var key = this.spec;
                    return key.proportionalWidth * vkbd.width;
                };
                /**
                 * Replace default key names by special font codes for modifier keys
                 *
                 *  @param  {string}  oldText
                 *  @return {string}
                 **/
                OSKKey.prototype.renameSpecialKey = function (oldText, vkbd) {
                    // If a 'special key' mapping exists for the text, replace it with its corresponding special OSK character.
                    switch (oldText) {
                        case '*ZWNJ*':
                            // Default ZWNJ symbol comes from iOS.  We'd rather match the system defaults where
                            // possible / available though, and there's a different standard symbol on Android.
                            oldText = vkbd.device.OS == com.keyman.utils.OperatingSystem.Android ?
                                '*ZWNJAndroid*' :
                                '*ZWNJiOS*';
                            break;
                        case '*Enter*':
                            oldText = vkbd.isRTL ? '*RTLEnter*' : '*LTREnter*';
                            break;
                        case '*BkSp*':
                            oldText = vkbd.isRTL ? '*RTLBkSp*' : '*LTRBkSp*';
                            break;
                        default:
                        // do nothing.
                    }
                    var specialCodePUA = 0XE000 + osk.VisualKeyboard.specialCharacters[oldText];
                    return osk.VisualKeyboard.specialCharacters[oldText] ?
                        String.fromCharCode(specialCodePUA) :
                        oldText;
                };
                OSKKey.prototype.unicodeKeyIdToString = function (id) {
                    // This is similar to defaultOutput.ts:forUnicodeKeynames and could potentially
                    // be refactored in the future.
                    if (!id || id.substr(0, 2) != 'U_') {
                        return null;
                    }
                    var result = '';
                    var codePoints = id.substr(2).split('_');
                    for (var _i = 0, codePoints_2 = codePoints; _i < codePoints_2.length; _i++) {
                        var codePoint = codePoints_2[_i];
                        var codePointValue = parseInt(codePoint, 16);
                        if (((0x0 <= codePointValue) && (codePointValue <= 0x1F)) || ((0x80 <= codePointValue) && (codePointValue <= 0x9F))) {
                            continue;
                        }
                        else {
                            // String.fromCharCode() is inadequate to handle the entire range of Unicode
                            // Someday after upgrading to ES2015, can use String.fromCodePoint()
                            result += String.kmwFromCharCode(codePointValue);
                        }
                    }
                    return result ? result : null;
                };
                // Produces a HTMLSpanElement with the key's actual text.
                OSKKey.prototype.generateKeyText = function (vkbd) {
                    var spec = this.spec;
                    // Add OSK key labels
                    var keyText;
                    var t = document.createElement('span'), ts = t.style;
                    if (spec['text'] == null || spec['text'] == '') {
                        keyText = '\xa0'; // default:  nbsp.
                        if (typeof spec['id'] == 'string') {
                            // If the ID's Unicode-based, just use that code.
                            keyText = this.unicodeKeyIdToString(spec['id']) || keyText;
                        }
                    }
                    else {
                        keyText = spec['text'];
                        // Unique layer-based transformation:  SHIFT-TAB uses a different glyph.
                        if (keyText == '*Tab*' && this.layer == 'shift') {
                            keyText = '*TabLeft*';
                        }
                    }
                    t.className = 'kmw-key-text';
                    var specialText = this.renameSpecialKey(keyText, vkbd);
                    if (specialText != keyText) {
                        // The keyboard wants to use the code for a special glyph defined by the SpecialOSK font.
                        keyText = specialText;
                        spec['font'] = "SpecialOSK";
                    }
                    //Override font spec if set for this key in the layout
                    if (typeof spec['font'] == 'string' && spec['font'] != '') {
                        ts.fontFamily = spec['font'];
                    }
                    if (typeof spec['fontsize'] == 'string' && spec['fontsize'] != '') {
                        ts.fontSize = spec['fontsize'];
                    }
                    // For some reason, fonts will sometimes 'bug out' for the embedded iOS page if we
                    // instead assign fontFamily to the existing style 'ts'.  (Occurs in iOS 12.)
                    var styleSpec = { fontSize: ts.fontSize };
                    if (ts.fontFamily) {
                        styleSpec.fontFamily = ts.fontFamily;
                    }
                    else {
                        styleSpec.fontFamily = vkbd.fontFamily; // Helps with style sheet calculations.
                    }
                    // Check the key's display width - does the key visualize well?
                    var emScale = vkbd.getKeyEmFontSize();
                    var width = OSKKey.getTextMetrics(keyText, emScale, styleSpec).width;
                    if (width == 0 && keyText != '' && keyText != '\xa0') {
                        // Add the Unicode 'empty circle' as a base support for needy diacritics.
                        // Disabled by mcdurdin 2020-10-19; dotted circle display is inconsistent on iOS/Safari
                        // at least and doesn't combine with diacritic marks. For consistent display, it may be
                        // necessary to build a custom font that does not depend on renderer choices for base
                        // mark display -- e.g. create marks with custom base included, potentially even on PUA
                        // code points and use those in rendering the OSK. See #3039 for more details.
                        // keyText = '\u25cc' + keyText;
                        if (vkbd.isRTL) {
                            // Add the RTL marker to ensure it displays properly.
                            keyText = '\u200f' + keyText;
                        }
                    }
                    ts.fontSize = this.getIdealFontSize(vkbd, styleSpec);
                    // Finalize the key's text.
                    t.innerText = keyText;
                    return t;
                };
                OSKKey.prototype.isUnderTouch = function (input) {
                    var x = input.x;
                    var y = input.y;
                    var btn = this.btn;
                    // These functions do not account for 'fixed' positioning.
                    var x0 = keyman.dom.Utils.getAbsoluteX(btn);
                    var y0 = keyman.dom.Utils.getAbsoluteY(btn);
                    var isFixed = false;
                    var node = btn;
                    while (node) {
                        if (getComputedStyle(node).position == 'fixed') {
                            isFixed = true;
                            break;
                        }
                        else {
                            node = node.offsetParent;
                        }
                    }
                    if (isFixed) {
                        x0 += window.pageXOffset;
                        y0 += window.pageYOffset;
                    }
                    var x1 = x0 + btn.offsetWidth;
                    var y1 = y0 + btn.offsetHeight;
                    return (x > x0 && x < x1 && y > y0 && y < y1);
                };
                OSKKey.prototype.refreshLayout = function (vkbd) {
                    if (this.label) { // space bar may not define the text span!
                        this.label.style.fontSize = this.getIdealFontSize(vkbd, this.btn.style);
                    }
                };
                // Defines the PUA code mapping for the various 'special' modifier/control keys on keyboards.
                // `specialCharacters` must be kept in sync with the same variable in builder.js. See also CompileKeymanWeb.pas: CSpecialText10
                OSKKey.specialCharacters = {
                    '*Shift*': 8,
                    '*Enter*': 5,
                    '*Tab*': 6,
                    '*BkSp*': 4,
                    '*Menu*': 11,
                    '*Hide*': 10,
                    '*Alt*': 25,
                    '*Ctrl*': 1,
                    '*Caps*': 3,
                    '*ABC*': 16,
                    '*abc*': 17,
                    '*123*': 19,
                    '*Symbol*': 21,
                    '*Currency*': 20,
                    '*Shifted*': 8,
                    '*AltGr*': 2,
                    '*TabLeft*': 7,
                    '*LAlt*': 0x56,
                    '*RAlt*': 0x57,
                    '*LCtrl*': 0x58,
                    '*RCtrl*': 0x59,
                    '*LAltCtrl*': 0x60,
                    '*RAltCtrl*': 0x61,
                    '*LAltCtrlShift*': 0x62,
                    '*RAltCtrlShift*': 0x63,
                    '*AltShift*': 0x64,
                    '*CtrlShift*': 0x65,
                    '*AltCtrlShift*': 0x66,
                    '*LAltShift*': 0x67,
                    '*RAltShift*': 0x68,
                    '*LCtrlShift*': 0x69,
                    '*RCtrlShift*': 0x70,
                    // Added in Keyman 14.0.
                    '*LTREnter*': 0x05,
                    '*LTRBkSp*': 0x04,
                    '*RTLEnter*': 0x71,
                    '*RTLBkSp*': 0x72,
                    '*ShiftLock*': 0x73,
                    '*ShiftedLock*': 0x74,
                    '*ZWNJ*': 0x75,
                    '*ZWNJiOS*': 0x75,
                    '*ZWNJAndroid*': 0x76,
                };
                OSKKey.BUTTON_CLASSES = [
                    'default',
                    'shift',
                    'shift-on',
                    'special',
                    'special-on',
                    '',
                    '',
                    '',
                    'deadkey',
                    'blank',
                    'hidden'
                ];
                OSKKey.HIGHLIGHT_CLASS = 'kmw-key-touched';
                return OSKKey;
            }());
            osk.OSKKey = OSKKey;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="oskKey.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var Codes = com.keyman.text.Codes;
            var OSKBaseKey = /** @class */ (function (_super) {
                __extends(OSKBaseKey, _super);
                function OSKBaseKey(spec, layer, row) {
                    var _this = _super.call(this, spec, layer) || this;
                    _this.row = row;
                    return _this;
                }
                OSKBaseKey.prototype.getId = function () {
                    // Define each key element id by layer id and key id (duplicate possible for SHIFT - does it matter?)
                    return this.spec.elementID;
                };
                OSKBaseKey.prototype.getCoreId = function () {
                    return this.spec.coreID;
                };
                OSKBaseKey.prototype.getBaseId = function () {
                    return this.spec.baseKeyID;
                };
                // Produces a small reference label for the corresponding physical key on a US keyboard.
                OSKBaseKey.prototype.generateKeyCapLabel = function () {
                    // Create the default key cap labels (letter keys, etc.)
                    var x = Codes.keyCodes[this.spec.baseKeyID];
                    switch (x) {
                        // Converts the keyman key id code for common symbol keys into its representative ASCII code.
                        // K_COLON -> K_BKQUOTE
                        case 186:
                            x = 59;
                            break;
                        case 187:
                            x = 61;
                            break;
                        case 188:
                            x = 44;
                            break;
                        case 189:
                            x = 45;
                            break;
                        case 190:
                            x = 46;
                            break;
                        case 191:
                            x = 47;
                            break;
                        case 192:
                            x = 96;
                            break;
                        // K_LBRKT -> K_QUOTE
                        case 219:
                            x = 91;
                            break;
                        case 220:
                            x = 92;
                            break;
                        case 221:
                            x = 93;
                            break;
                        case 222:
                            x = 39;
                            break;
                        default:
                            // No other symbol character represents a base key on the standard QWERTY English layout.
                            if (x < 48 || x > 90) {
                                x = 0;
                            }
                    }
                    var q = document.createElement('div');
                    q.className = 'kmw-key-label';
                    if (x > 0) {
                        q.innerHTML = String.fromCharCode(x);
                    }
                    else {
                        // Keyman-only virtual keys have no corresponding physical key.
                        // So, no text for the key-cap.
                    }
                    return q;
                };
                OSKBaseKey.prototype.processSubkeys = function (btn, vkbd) {
                    // Add reference to subkey array if defined
                    var bsn, bsk = btn['subKeys'] = this.spec['sk'];
                    // Transform any special keys into their PUA representations.
                    for (bsn = 0; bsn < bsk.length; bsn++) {
                        if (bsk[bsn]['sp'] == '1' || bsk[bsn]['sp'] == '2') {
                            var oldText = bsk[bsn]['text'];
                            bsk[bsn]['text'] = this.renameSpecialKey(oldText, vkbd);
                        }
                        // If a subkey doesn't have a defined layer property, copy it from the base key's layer by default.
                        if (!bsk[bsn].layer) {
                            bsk[bsn].layer = btn.key.layer;
                        }
                    }
                    // If a subkey array is defined, add an icon
                    var skIcon = document.createElement('div');
                    skIcon.className = 'kmw-key-popup-icon';
                    //kDiv.appendChild(skIcon);
                    btn.appendChild(skIcon);
                };
                OSKBaseKey.prototype.construct = function (vkbd) {
                    var spec = this.spec;
                    var kDiv = document.createElement('div');
                    kDiv.className = 'kmw-key-square';
                    var btnEle = document.createElement('div');
                    var btn = this.btn = osk.link(btnEle, new osk.KeyData(this, spec['id']));
                    // Set button class
                    this.setButtonClass();
                    // Add the (US English) keycap label for layouts requesting display of underlying keys
                    var keyCap = this.capLabel = this.generateKeyCapLabel();
                    btn.appendChild(keyCap);
                    // Define each key element id by layer id and key id (duplicate possible for SHIFT - does it matter?)
                    btn.id = this.getId();
                    // Make sure the key text is the element's first child - processSubkeys()
                    // will add an extra element if subkeys exist, which can interfere with
                    // keyboard/language name display on the space bar!
                    btn.appendChild(this.label = this.generateKeyText(vkbd));
                    // Handle subkey-related tasks.
                    if (typeof (spec['sk']) != 'undefined' && spec['sk'] != null) {
                        this.processSubkeys(btn, vkbd);
                    }
                    else {
                        btn['subKeys'] = null;
                    }
                    // Add text to button and button to placeholder div
                    kDiv.appendChild(btn);
                    // The 'return value' of this process.
                    return this.square = kDiv;
                };
                OSKBaseKey.prototype.refreshLayout = function (vkbd) {
                    var key = this.spec;
                    this.square.style.width = vkbd.layoutWidth.scaledBy(key.proportionalWidth).styleString;
                    this.square.style.marginLeft = vkbd.layoutWidth.scaledBy(key.proportionalPad).styleString;
                    this.btn.style.width = vkbd.usesFixedWidthScaling ? this.square.style.width : '100%';
                    if (vkbd.usesFixedHeightScaling) {
                        // Matches its row's height.
                        this.square.style.height = vkbd.layoutHeight.scaledBy(this.row.heightFraction).styleString;
                    }
                    else {
                        this.square.style.height = '100%'; // use the full row height
                    }
                    _super.prototype.refreshLayout.call(this, vkbd);
                    var util = com.keyman.singleton.util;
                    var device = vkbd.device;
                    var resizeLabels = (device.OS == keyman.utils.OperatingSystem.iOS &&
                        device.formFactor == keyman.utils.FormFactor.Phone
                        && util.landscapeView());
                    // Rescale keycap labels on iPhone (iOS 7)
                    if (resizeLabels && this.capLabel) {
                        this.capLabel.style.fontSize = '6px';
                    }
                };
                Object.defineProperty(OSKBaseKey.prototype, "displaysKeyCap", {
                    get: function () {
                        return this.capLabel && this.capLabel.style.display == 'block';
                    },
                    set: function (flag) {
                        if (!this.capLabel) {
                            throw new Error("Key element not yet constructed; cannot display key cap");
                        }
                        this.capLabel.style.display = flag ? 'block' : 'none';
                    },
                    enumerable: true,
                    configurable: true
                });
                return OSKBaseKey;
            }(osk.OSKKey));
            osk.OSKBaseKey = OSKBaseKey;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="oskBaseKey.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            /**
             * Models one row of one layer of the OSK (`VisualKeyboard`) for a keyboard.
             */
            var OSKRow = /** @class */ (function () {
                function OSKRow(vkbd, layerSpec, rowSpec) {
                    var rDiv = this.element = document.createElement('div');
                    rDiv.className = 'kmw-key-row';
                    // Calculate default row height
                    this.heightFraction = 1 / layerSpec.row.length;
                    // Apply defaults, setting the width and other undefined properties for each key
                    var keys = rowSpec.key;
                    this.keys = [];
                    // Calculate actual key widths by multiplying by the OSK's width and rounding appropriately,
                    // adjusting the width of the last key to make the total exactly 100%.
                    // Overwrite the previously-computed percent.
                    // NB: the 'percent' suffix is historical, units are percent on desktop devices, but pixels on touch devices
                    // All key widths and paddings are rounded for uniformity
                    for (var j = 0; j < keys.length; j++) {
                        var key = keys[j];
                        var keyObj = new osk.OSKBaseKey(key, layerSpec.id, this);
                        var element = keyObj.construct(vkbd);
                        this.keys.push(keyObj);
                        rDiv.appendChild(element);
                    }
                }
                Object.defineProperty(OSKRow.prototype, "displaysKeyCaps", {
                    get: function () {
                        if (this.keys.length > 0) {
                            return this.keys[0].displaysKeyCap;
                        }
                        else {
                            return undefined;
                        }
                    },
                    set: function (flag) {
                        for (var _i = 0, _a = this.keys; _i < _a.length; _i++) {
                            var key = _a[_i];
                            key.displaysKeyCap = flag;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                OSKRow.prototype.refreshLayout = function (vkbd) {
                    var rs = this.element.style;
                    var rowHeight = vkbd.layoutHeight.scaledBy(this.heightFraction);
                    if (vkbd.usesFixedHeightScaling) {
                        rs.maxHeight = rs.lineHeight = rs.height = rowHeight.styleString;
                    }
                    // Only used for fixed-height scales at present.
                    var padRatio = 0.15;
                    var keyHeightBase = vkbd.usesFixedHeightScaling ? rowHeight : osk.ParsedLengthStyle.forScalar(1);
                    var padTop = keyHeightBase.scaledBy(padRatio / 2);
                    var keyHeight = keyHeightBase.scaledBy(1 - padRatio);
                    for (var _i = 0, _a = this.keys; _i < _a.length; _i++) {
                        var key = _a[_i];
                        var keySquare = key.btn.parentElement;
                        var keyElement = key.btn;
                        // Set the kmw-key-square position
                        var kss = keySquare.style;
                        kss.height = kss.minHeight = keyHeightBase.styleString;
                        var kes = keyElement.style;
                        kes.top = padTop.styleString;
                        kes.height = kes.lineHeight = kes.minHeight = keyHeight.styleString;
                        if (keyElement.key) {
                            keyElement.key.refreshLayout(vkbd);
                        }
                    }
                };
                return OSKRow;
            }());
            osk.OSKRow = OSKRow;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="oskRow.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var OSKLayer = /** @class */ (function () {
                function OSKLayer(vkbd, layout, layer) {
                    this.spec = layer;
                    var gDiv = this.element = document.createElement('div');
                    var gs = gDiv.style;
                    gDiv.className = 'kmw-key-layer';
                    var nRows = layer['row'].length;
                    if (nRows > 4 && vkbd.device.formFactor == 'phone') {
                        gDiv.className = gDiv.className + ' kmw-5rows';
                    }
                    // Set font for layer if defined in layout
                    gs.fontFamily = 'font' in layout ? layout['font'] : '';
                    this.nextlayer = gDiv['layer'] = layer['id'];
                    if (typeof layer['nextlayer'] == 'string') {
                        // The gDiv['nextLayer'] is no longer referenced in KMW 15.0+, but is
                        // maintained for partial back-compat in case any site devs actually 
                        // relied on its value from prior versions.
                        //
                        // We won't pay attention to any mutations to the gDiv copy, though.
                        gDiv['nextLayer'] = this.nextlayer = layer['nextlayer'];
                    }
                    // Create a DIV for each row of the group
                    var rows = layer['row'];
                    this.rows = [];
                    for (var i = 0; i < rows.length; i++) {
                        var rowObj = new osk.OSKRow(vkbd, layer, rows[i]);
                        rowObj.displaysKeyCaps = layout["displayUnderlying"];
                        gDiv.appendChild(rowObj.element);
                        this.rows.push(rowObj);
                    }
                    // Identify and save references to the language key, hide keyboard key, and space bar
                    if (vkbd.device.touchable) {
                        this.globeKey = this.findKey('K_LOPT');
                        this.hideKey = this.findKey('K_ROPT');
                    }
                    // Define for both desktop and touchable OSK
                    this.spaceBarKey = this.findKey('K_SPACE');
                    this.capsKey = this.findKey('K_CAPS');
                    this.numKey = this.findKey('K_NUMLOCK');
                    this.scrollKey = this.findKey('K_SCROLL');
                }
                Object.defineProperty(OSKLayer.prototype, "id", {
                    get: function () {
                        return this.spec.id;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 *  Find the OSKBaseKey representing the specified
                 *  key ID for the currently visible OSK layer
                 *
                 *  @param    {string}  keyId   key identifier
                 *  @return   {Object}          Reference to key
                 */
                OSKLayer.prototype.findKey = function (keyId) {
                    for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
                        var row = _a[_i];
                        for (var _b = 0, _c = row.keys; _b < _c.length; _b++) {
                            var key = _c[_b];
                            if (key.getBaseId() == keyId) {
                                return key;
                            }
                        }
                    }
                    return null;
                };
                OSKLayer.prototype.refreshLayout = function (vkbd, paddedHeight, trueHeight) {
                    // Check the heights of each row, in case different layers have different row counts.
                    var nRows = this.rows.length;
                    var rowHeight = Math.floor(trueHeight / (nRows == 0 ? 1 : nRows));
                    if (vkbd.usesFixedHeightScaling) {
                        this.element.style.height = (paddedHeight) + 'px';
                    }
                    for (var nRow = 0; nRow < nRows; nRow++) {
                        var oskRow = this.rows[nRow];
                        var bottom = (nRows - nRow - 1) * rowHeight + 1;
                        if (vkbd.usesFixedHeightScaling) {
                            // Calculate the exact vertical coordinate of the row's center.
                            this.spec.row[nRow].proportionalY = ((paddedHeight - bottom) - rowHeight / 2) / paddedHeight;
                            if (nRow == nRows - 1) {
                                oskRow.element.style.bottom = '1px';
                            }
                        }
                        oskRow.refreshLayout(vkbd);
                    }
                };
                return OSKLayer;
            }());
            osk.OSKLayer = OSKLayer;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="oskLayer.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var OSKLayerGroup = /** @class */ (function () {
                function OSKLayerGroup(vkbd, keyboard, formFactor) {
                    this.layers = {};
                    var layout = keyboard.layout(formFactor);
                    var lDiv = this.element = document.createElement('div');
                    var ls = lDiv.style;
                    // Set OSK box default style
                    lDiv.className = 'kmw-key-layer-group';
                    // Return empty DIV if no layout defined
                    if (layout == null) {
                        return;
                    }
                    // Set default OSK font size (Build 344, KMEW-90)
                    var layoutFS = layout['fontsize'];
                    if (typeof layoutFS == 'undefined' || layoutFS == null || layoutFS == '') {
                        ls.fontSize = '1em';
                    }
                    else {
                        ls.fontSize = layout['fontsize'];
                    }
                    // Create a separate OSK div for each OSK layer, only one of which will ever be visible
                    var n, i, j;
                    var layers;
                    layers = layout['layer'];
                    // Set key default attributes (must use exportable names!)
                    var tKey = vkbd.getDefaultKeyObject();
                    tKey['fontsize'] = ls.fontSize;
                    for (n = 0; n < layers.length; n++) {
                        var layer = layers[n];
                        var layerObj = new osk.OSKLayer(vkbd, layout, layer);
                        this.layers[layer.id] = layerObj;
                        // Always make the first layer visible
                        layerObj.element.style.display = (n == 0 ? 'block' : 'none');
                        // Add layer to group
                        lDiv.appendChild(layerObj.element);
                    }
                }
                return OSKLayerGroup;
            }());
            osk.OSKLayerGroup = OSKLayerGroup;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_15) {
        var osk;
        (function (osk) {
            var browser;
            (function (browser) {
                var KeyTip = /** @class */ (function () {
                    // constrain:  keep the keytip within the bounds of the overall OSK.
                    // Will probably be handled via function in a later pass.
                    function KeyTip(constrain) {
                        this.state = false;
                        var tipElement = this.element = document.createElement('div');
                        tipElement.className = 'kmw-keytip';
                        tipElement.id = 'kmw-keytip';
                        // The following style is critical, so do not rely on external CSS
                        tipElement.style.pointerEvents = 'none';
                        tipElement.style.display = 'none';
                        tipElement.appendChild(this.tip = document.createElement('div'));
                        tipElement.appendChild(this.cap = document.createElement('div'));
                        this.tip.appendChild(this.label = document.createElement('span'));
                        this.tip.className = 'kmw-keytip-tip';
                        this.cap.className = 'kmw-keytip-cap';
                        this.label.className = 'kmw-keytip-label';
                        this.constrain = constrain;
                    }
                    KeyTip.prototype.show = function (key, on, vkbd) {
                        var keyman = com.keyman.singleton;
                        var util = keyman.util;
                        // Create and display the preview
                        // If !key.offsetParent, the OSK is probably hidden.  Either way, it's a half-
                        // decent null-guard check.
                        if (on && key.offsetParent) {
                            // The key element is positioned relative to its key-square, which is,
                            // in turn, relative to its row.  Rows take 100% width, so this is sufficient.
                            //
                            var rowElement = key.key.row.element;
                            // May need adjustment for borders if ever enabled for the desktop form-factor target.
                            var rkey = key.getClientRects()[0], rrow = rowElement.getClientRects()[0];
                            var xLeft = rkey.left - rrow.left, xWidth = rkey.width, xHeight = rkey.height, kc = key.key.label, previewFontScale = 1.8;
                            // Canvas dimensions must be set explicitly to prevent clipping
                            var canvasWidth = 1.6 * xWidth;
                            var canvasHeight = 2.3 * xHeight;
                            var kts = this.element.style;
                            kts.top = 'auto';
                            // Matches how the subkey positioning is set.
                            var _Box = vkbd.element.parentNode;
                            kts.bottom = (_Box.offsetHeight - rowElement.offsetHeight - rowElement.offsetTop + key.offsetTop) + 'px';
                            kts.textAlign = 'center';
                            kts.overflow = 'visible';
                            kts.fontFamily = util.getStyleValue(kc, 'font-family');
                            kts.width = canvasWidth + 'px';
                            kts.height = canvasHeight + 'px';
                            var px = util.getStyleInt(kc, 'font-size');
                            if (px != 0) {
                                var popupFS = previewFontScale * px;
                                var scaleStyle = {
                                    fontFamily: kts.fontFamily,
                                    fontSize: popupFS + 'px',
                                    height: 1.6 * xHeight + 'px' // as opposed to the canvas height of 2.3 * xHeight.
                                };
                                kts.fontSize = key.key.getIdealFontSize(vkbd, scaleStyle);
                            }
                            this.label.textContent = kc.textContent;
                            // Adjust shape if at edges
                            var xOverflow = (canvasWidth - xWidth) / 2;
                            if (xLeft < xOverflow) {
                                this.cap.style.left = '0px';
                                xLeft += xOverflow;
                            }
                            else if (xLeft > window.innerWidth - xWidth - xOverflow) {
                                this.cap.style.left = (canvasWidth - xWidth) + 'px';
                                xLeft -= xOverflow;
                            }
                            else {
                                this.cap.style.left = xOverflow + 'px';
                            }
                            kts.left = (xLeft - xOverflow) + 'px';
                            var cs = getComputedStyle(this.element);
                            var oskHeight = keyman.osk.computedHeight;
                            var bottomY = parseInt(cs.bottom, 10);
                            var tipHeight = parseInt(cs.height, 10);
                            this.cap.style.width = xWidth + 'px';
                            this.tip.style.height = (canvasHeight / 2) + 'px';
                            this.cap.style.top = (canvasHeight / 2) + 'px';
                            this.cap.style.height = (canvasHeight / 2 - 1) + 'px';
                            if (this.constrain && tipHeight + bottomY > oskHeight) {
                                var delta = tipHeight + bottomY - oskHeight;
                                kts.height = (canvasHeight - delta) + 'px';
                                var hx = Math.max(0, (canvasHeight - delta) - (canvasHeight / 2));
                                this.cap.style.height = hx + 'px';
                            }
                            kts.display = 'block';
                        }
                        else { // Hide the key preview
                            this.element.style.display = 'none';
                        }
                        // Save the key preview state
                        this.key = key;
                        this.state = on;
                    };
                    return KeyTip;
                }());
                browser.KeyTip = KeyTip;
            })(browser = osk.browser || (osk.browser = {}));
        })(osk = keyman_15.osk || (keyman_15.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="../oskKey.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk_5) {
            var browser;
            (function (browser) {
                var OSKSubKey = /** @class */ (function (_super) {
                    __extends(OSKSubKey, _super);
                    function OSKSubKey(spec, layer) {
                        var _this = this;
                        if (typeof (layer) != 'string' || layer == '') {
                            throw "The 'layer' parameter for subkey construction must be properly defined.";
                        }
                        _this = _super.call(this, spec, layer) || this;
                        return _this;
                    }
                    OSKSubKey.prototype.getId = function () {
                        // Create (temporarily) unique ID by prefixing 'popup-' to actual key ID
                        return 'popup-' + this.layer + '-' + this.spec['id'];
                    };
                    OSKSubKey.prototype.construct = function (osk, baseKey, topMargin) {
                        var spec = this.spec;
                        var kDiv = document.createElement('div');
                        var tKey = osk.getDefaultKeyObject();
                        var ks = kDiv.style;
                        for (var tp in tKey) {
                            if (typeof spec[tp] != 'string') {
                                spec[tp] = tKey[tp];
                            }
                        }
                        kDiv.className = 'kmw-key-square-ex';
                        if (topMargin) {
                            ks.marginTop = '5px';
                        }
                        if (typeof spec['width'] != 'undefined') {
                            ks.width = (parseInt(spec['width'], 10) * baseKey.offsetWidth / 100) + 'px';
                        }
                        else {
                            ks.width = baseKey.offsetWidth + 'px';
                        }
                        ks.height = baseKey.offsetHeight + 'px';
                        var btnEle = document.createElement('div');
                        var btn = this.btn = osk_5.link(btnEle, new osk_5.KeyData(this, spec['id']));
                        this.setButtonClass();
                        btn.id = this.getId();
                        // Must set button size (in px) dynamically, not from CSS
                        var bs = btn.style;
                        bs.height = ks.height;
                        bs.lineHeight = baseKey.style.lineHeight;
                        bs.width = ks.width;
                        // Must set position explicitly, at least for Android
                        bs.position = 'absolute';
                        btn.appendChild(this.label = this.generateKeyText(osk));
                        kDiv.appendChild(btn);
                        return this.square = kDiv;
                    };
                    OSKSubKey.prototype.allowsKeyTip = function () {
                        return false;
                    };
                    return OSKSubKey;
                }(osk_5.OSKKey));
                browser.OSKSubKey = OSKSubKey;
            })(browser = osk_5.browser || (osk_5.browser = {}));
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="oskSubKey.ts" />
/// <reference path="../realizedGesture.interface.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_16) {
        var osk;
        (function (osk) {
            var browser;
            (function (browser) {
                /**
                 * Represents a 'realized' longpress gesture's default implementation
                 * within KeymanWeb.  Once a touch sequence has been confirmed to
                 * correspond to a longpress gesture, implementations of this class
                 * provide the following:
                 * * The UI needed to present a subkey menu
                 * * The state management needed to present feedback about the
                 * currently-selected subkey to the user
                 * * A `Promise` that will resolve to the user's selected subkey
                 * once the longpress operation is complete.
                 *
                 * As selection of the subkey occurs after the subkey popup is
                 * displayed, selection of the subkey is inherently asynchronous.
                 * The `Promise` may also resolve to `null` if the user indicates
                 * the desire to cancel subkey selection.
                 */
                var SubkeyPopup = /** @class */ (function () {
                    function SubkeyPopup(vkbd, e) {
                        var keyman = com.keyman.singleton;
                        var _this = this;
                        this.promise = new Promise(function (resolve) {
                            _this.resolver = resolve;
                        });
                        this.vkbd = vkbd;
                        this.baseKey = e;
                        // If the user doesn't move their finger and releases, we'll output the base key
                        // by default.
                        this.currentSelection = e;
                        e.key.highlight(true);
                        // A tag we directly set on a key element during its construction.
                        var subKeySpec = e['subKeys'];
                        // The holder is position:fixed, but the keys do not need to be, as no scrolling
                        // is possible while the array is visible.  So it is simplest to let the keys have
                        // position:static and display:inline-block
                        var subKeys = this.element = document.createElement('div');
                        var i;
                        subKeys.id = 'kmw-popup-keys';
                        // #3718: No longer prepend base key to popup array
                        // Must set position dynamically, not in CSS
                        var ss = subKeys.style;
                        // Set key font according to layout, or defaulting to OSK font
                        // (copied, not inherited, since OSK is not a parent of popup keys)
                        ss.fontFamily = vkbd.fontFamily;
                        // Copy the font size from the parent key, allowing for style inheritance
                        ss.fontSize = keyman.util.getStyleValue(e, 'font-size');
                        ss.visibility = 'hidden';
                        var nKeys = subKeySpec.length, nRows, nCols;
                        nRows = Math.min(Math.ceil(nKeys / 9), 2);
                        nCols = Math.ceil(nKeys / nRows);
                        ss.width = (nCols * e.offsetWidth + nCols * 5) + 'px';
                        // Add nested button elements for each sub-key
                        for (i = 0; i < nKeys; i++) {
                            var needsTopMargin = false;
                            var nRow = Math.floor(i / nCols);
                            if (nRows > 1 && nRow > 0) {
                                needsTopMargin = true;
                            }
                            var layer = e['key'].layer;
                            if (typeof (layer) != 'string' || layer == '') {
                                // Use the currently-active layer.
                                layer = vkbd.layerId;
                            }
                            var keyGenerator = new browser.OSKSubKey(subKeySpec[i], layer);
                            var kDiv = keyGenerator.construct(vkbd, e, needsTopMargin);
                            subKeys.appendChild(kDiv);
                        }
                        // And add a filter to fade main keyboard
                        this.shim = document.createElement('div');
                        this.shim.id = 'kmw-popup-shim';
                        // Highlight the duplicated base key or ideal subkey (if a phone)
                        if (vkbd.device.formFactor == keyman_16.utils.FormFactor.Phone) {
                            this.selectDefaultSubkey(vkbd, e, subKeys /* == this.element */);
                        }
                    }
                    SubkeyPopup.prototype.finalize = function (input) {
                        if (this.resolver) {
                            var keyEvent = null;
                            if (this.currentSelection) {
                                keyEvent = this.vkbd.initKeyEvent(this.currentSelection, input);
                                this.currentSelection.key.highlight(false);
                            }
                            this.resolver(keyEvent);
                        }
                        this.resolver = null;
                    };
                    SubkeyPopup.prototype.reposition = function (vkbd) {
                        var keyman = com.keyman.singleton;
                        var subKeys = this.element;
                        var e = this.baseKey;
                        // And correct its position with respect to that element
                        var _Box = vkbd.element.offsetParent;
                        var rowElement = e.key.row.element;
                        var ss = subKeys.style;
                        var x = e.offsetLeft + e.offsetParent.offsetLeft + 0.5 * (e.offsetWidth - subKeys.offsetWidth);
                        var xMax = keyman.osk.computedWidth - subKeys.offsetWidth;
                        if (x > xMax) {
                            x = xMax;
                        }
                        if (x < 0) {
                            x = 0;
                        }
                        ss.left = x + 'px';
                        ss.bottom = (_Box.offsetHeight - rowElement.offsetTop + subKeys.offsetHeight) + 'px';
                        // Make the popup keys visible
                        ss.visibility = 'visible';
                        // For now, should only be true (in production) when keyman.isEmbedded == true.
                        var constrainPopup = keyman.isEmbedded;
                        var cs = getComputedStyle(subKeys);
                        var oskHeight = keyman.osk.computedHeight;
                        var bottomY = parseInt(cs.bottom, 10);
                        var popupHeight = parseInt(cs.height, 10);
                        var delta = 0;
                        if (popupHeight + bottomY > oskHeight && constrainPopup) {
                            delta = popupHeight + bottomY - oskHeight;
                            ss.bottom = (bottomY - delta) + 'px';
                        }
                        // Add the callout
                        if (vkbd.device.formFactor == keyman_16.utils.FormFactor.Phone && vkbd.device.OS == keyman_16.utils.OperatingSystem.iOS) {
                            this.callout = this.addCallout(e, delta);
                        }
                    };
                    /**
                     * Add a callout for popup keys (if KeymanWeb on a phone device)
                     *
                     * @param   {Object}  key   HTML key element
                     * @return  {Object}        callout object
                     */
                    SubkeyPopup.prototype.addCallout = function (key, delta) {
                        var keyman = com.keyman.singleton;
                        delta = delta || 0;
                        var calloutHeight = key.offsetHeight - delta;
                        if (calloutHeight > 0) {
                            var cc = document.createElement('div'), ccs = cc.style;
                            cc.id = 'kmw-popup-callout';
                            keyman.osk._Box.appendChild(cc);
                            // Create the callout
                            var xLeft = key.offsetLeft + key.offsetParent.offsetLeft, xTop = key.offsetTop + key.key.row.element.offsetTop + delta, xWidth = key.offsetWidth + 2, xHeight = calloutHeight;
                            // Set position and style
                            ccs.top = (xTop - 6) + 'px';
                            ccs.left = (xLeft - 1) + 'px';
                            ccs.width = xWidth + 'px';
                            ccs.height = (xHeight + 6) + 'px';
                            // Return callout element, to allow removal later
                            return cc;
                        }
                        else {
                            return null;
                        }
                    };
                    SubkeyPopup.prototype.selectDefaultSubkey = function (vkbd, baseKey, popupBase) {
                        var bk;
                        var subkeys = baseKey['subKeys'];
                        for (var i = 0; i < subkeys.length; i++) {
                            var skSpec = subkeys[i];
                            var skElement = popupBase.childNodes[i].firstChild;
                            // Preference order:
                            // #1:  if a default subkey has been specified, select it.  (pending, for 15.0+)
                            // #2:  if no default subkey is specified, default to a subkey with the same
                            //      key ID and layer / modifier spec.
                            //if(skSpec.isDefault) { TODO for 15.0
                            //  bk = skElement;
                            //  break;
                            //} else
                            if (!baseKey.key || !baseKey.key.spec) {
                                continue;
                            }
                            if (skSpec.elementID == baseKey.key.spec.elementID) {
                                bk = skElement;
                                break; // Best possible match has been found.  (Disable 'break' once above block is implemented.)
                            }
                        }
                        if (bk) {
                            vkbd.keyPending = bk;
                            // Subkeys never get key previews, so we can directly highlight the subkey.
                            bk.key.highlight(true);
                        }
                    };
                    SubkeyPopup.prototype.isVisible = function () {
                        return this.element.style.visibility == 'visible';
                    };
                    SubkeyPopup.prototype.clear = function () {
                        // Discard the reference to the Promise's resolve method, allowing
                        // GC to clean it up.  The corresponding Promise's contract allows
                        // passive cancellation.
                        this.resolver = null;
                        // Remove the displayed subkey array, if any
                        if (this.element.parentNode) {
                            this.element.parentNode.removeChild(this.element);
                        }
                        if (this.shim.parentNode) {
                            this.shim.parentNode.removeChild(this.shim);
                        }
                        if (this.callout && this.callout.parentNode) {
                            this.callout.parentNode.removeChild(this.callout);
                        }
                    };
                    SubkeyPopup.prototype.updateTouch = function (input) {
                        this.currentSelection = null;
                        this.baseKey.key.highlight(false);
                        for (var i = 0; i < this.baseKey['subKeys'].length; i++) {
                            try {
                                var sk = this.element.childNodes[i].firstChild;
                                var onKey = sk.key.isUnderTouch(input);
                                if (onKey) {
                                    this.currentSelection = sk;
                                }
                                sk.key.highlight(onKey);
                            }
                            catch (ex) {
                                if (ex.message) {
                                    console.error("Unexpected error when attempting to update selected subkey:" + ex.message);
                                }
                                else {
                                    console.error("Unexpected error (and error type) when attempting to update selected subkey.");
                                }
                            }
                        }
                        // Use the popup duplicate of the base key if a phone with a visible popup array
                        if (!this.currentSelection && this.baseKey.key.isUnderTouch(input)) {
                            this.baseKey.key.highlight(true);
                            this.currentSelection = this.baseKey;
                        }
                    };
                    return SubkeyPopup;
                }());
                browser.SubkeyPopup = SubkeyPopup;
            })(browser = osk.browser || (osk.browser = {}));
        })(osk = keyman_16.osk || (keyman_16.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="subkeyPopup.ts" />
/// <reference path="../pendingGesture.interface.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var browser;
            (function (browser) {
                /**
                 * (Conceptually) represents a finite-state-machine that determines
                 * whether or not a series of touch events corresponds to a longpress
                 * touch input.  The `resolve` method may be used to trigger the
                 * subkey menu early, as with the upward quick-display shortcut.
                 *
                 * This is the default implementation of longpress behavior for KMW.
                 * Alterate implementations are modeled through the `embedded`
                 * namespace's equivalent, which is designed to facilitate custom
                 * modeling for such gestures.
                 *
                 * Once the conditions to recognize a longpress gesture have been
                 * fulfilled, this class's `promise` will resolve with a `SubkeyPopup`
                 * matching the gesture's 'base' key, which itself provides a
                 * `promise` field that will resolve to a `KeyEvent` once the touch
                 * sequence is completed.
                 */
                var PendingLongpress = /** @class */ (function () {
                    function PendingLongpress(vkbd, baseKey) {
                        this.popupDelay = 500;
                        this.vkbd = vkbd;
                        this.baseKey = baseKey;
                        var _this = this;
                        this.promise = new Promise(function (resolve, reject) {
                            _this.resolver = resolve;
                            // After the timeout, it's no longer deferred; it's being fulfilled.
                            // Even if the actual subkey itself is still async.
                            _this.timerId = window.setTimeout(_this.resolve.bind(_this), _this.popupDelay);
                        });
                    }
                    PendingLongpress.prototype.cancel = function () {
                        if (this.timerId) {
                            window.clearTimeout(this.timerId);
                            this.timerId = null;
                        }
                        if (this.resolver) {
                            this.resolver(null);
                            this.resolver = null;
                        }
                    };
                    PendingLongpress.prototype.resolve = function () {
                        // User has flicked up to get to the longpress, before
                        // the timeout has expired. We need to cancel the timeout.
                        // See #5950
                        if (this.timerId) {
                            window.clearTimeout(this.timerId);
                            this.timerId = null;
                        }
                        if (this.resolver) {
                            this.resolver(new browser.SubkeyPopup(this.vkbd, this.baseKey));
                        }
                    };
                    return PendingLongpress;
                }());
                browser.PendingLongpress = PendingLongpress;
            })(browser = osk.browser || (osk.browser = {}));
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="inputEventCoordinate.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var InputEventEngine = /** @class */ (function () {
                function InputEventEngine(config) {
                    this.config = config;
                }
                InputEventEngine.prototype.onInputStart = function (coord) {
                    if (this.config.inputStartHandler) {
                        this.config.inputStartHandler(coord);
                    }
                };
                InputEventEngine.prototype.onInputMove = function (coord) {
                    if (this.config.inputMoveHandler) {
                        this.config.inputMoveHandler(coord);
                    }
                };
                InputEventEngine.prototype.onInputMoveCancel = function (coord) {
                    if (this.config.inputMoveCancelHandler) {
                        this.config.inputMoveCancelHandler(coord);
                    }
                };
                InputEventEngine.prototype.onInputEnd = function (coord) {
                    if (this.config.inputEndHandler) {
                        this.config.inputEndHandler(coord);
                    }
                };
                return InputEventEngine;
            }());
            osk.InputEventEngine = InputEventEngine;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="inputEventEngine.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var TouchEventEngine = /** @class */ (function (_super) {
                __extends(TouchEventEngine, _super);
                function TouchEventEngine(config) {
                    var _this = _super.call(this, config) || this;
                    _this._touchStart = _this.onTouchStart.bind(_this);
                    _this._touchMove = _this.onTouchMove.bind(_this);
                    _this._touchEnd = _this.onTouchEnd.bind(_this);
                    return _this;
                }
                TouchEventEngine.forVisualKeyboard = function (vkbd) {
                    var config = {
                        targetRoot: vkbd.element,
                        eventRoot: vkbd.element,
                        inputStartHandler: vkbd.touch.bind(vkbd),
                        inputMoveHandler: vkbd.moveOver.bind(vkbd),
                        inputMoveCancelHandler: vkbd.moveCancel.bind(vkbd),
                        inputEndHandler: vkbd.release.bind(vkbd),
                        coordConstrainedWithinInteractiveBounds: vkbd.detectWithinInteractiveBounds.bind(vkbd)
                    };
                    return new TouchEventEngine(config);
                };
                TouchEventEngine.forPredictiveBanner = function (banner, handlerRoot) {
                    var config = {
                        targetRoot: banner.getDiv(),
                        // document.body is the event root b/c we need to track the mouse if it leaves
                        // the VisualKeyboard's hierarchy.
                        eventRoot: banner.getDiv(),
                        inputStartHandler: handlerRoot.touchStart.bind(handlerRoot),
                        inputMoveHandler: handlerRoot.touchMove.bind(handlerRoot),
                        inputEndHandler: handlerRoot.touchEnd.bind(handlerRoot),
                        coordConstrainedWithinInteractiveBounds: function () { return true; }
                    };
                    return new TouchEventEngine(config);
                };
                TouchEventEngine.prototype.registerEventHandlers = function () {
                    this.config.eventRoot.addEventListener('touchstart', this._touchStart, true);
                    this.config.eventRoot.addEventListener('touchmove', this._touchMove, false);
                    // The listener below fails to capture when performing automated testing checks in Chrome emulation unless 'true'.
                    this.config.eventRoot.addEventListener('touchend', this._touchEnd, true);
                };
                TouchEventEngine.prototype.unregisterEventHandlers = function () {
                    this.config.eventRoot.removeEventListener('touchstart', this._touchStart, true);
                    this.config.eventRoot.removeEventListener('touchmove', this._touchMove, false);
                    this.config.eventRoot.removeEventListener('touchend', this._touchEnd, true);
                };
                TouchEventEngine.prototype.preventPropagation = function (e) {
                    // Standard event maintenance
                    e.preventDefault();
                    e.cancelBubble = true;
                    if (typeof e.stopImmediatePropagation == 'function') {
                        e.stopImmediatePropagation();
                    }
                    else if (typeof e.stopPropagation == 'function') {
                        e.stopPropagation();
                    }
                };
                TouchEventEngine.prototype.onTouchStart = function (event) {
                    this.onInputStart(osk.InputEventCoordinate.fromEvent(event));
                };
                TouchEventEngine.prototype.onTouchMove = function (event) {
                    this.preventPropagation(event);
                    var coord = osk.InputEventCoordinate.fromEvent(event);
                    if (this.config.coordConstrainedWithinInteractiveBounds(coord)) {
                        this.onInputMove(coord);
                    }
                    else {
                        this.onInputMoveCancel(coord);
                    }
                };
                TouchEventEngine.prototype.onTouchEnd = function (event) {
                    this.onInputEnd(osk.InputEventCoordinate.fromEvent(event));
                };
                return TouchEventEngine;
            }(osk.InputEventEngine));
            osk.TouchEventEngine = TouchEventEngine;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="inputEventEngine.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var MouseEventEngine = /** @class */ (function (_super) {
                __extends(MouseEventEngine, _super);
                function MouseEventEngine(config) {
                    var _this = _super.call(this, config) || this;
                    _this.hasActiveClick = false;
                    _this.ignoreSequence = false;
                    _this._mouseStart = _this.onMouseStart.bind(_this);
                    _this._mouseMove = _this.onMouseMove.bind(_this);
                    _this._mouseEnd = _this.onMouseEnd.bind(_this);
                    return _this;
                }
                MouseEventEngine.forVisualKeyboard = function (vkbd) {
                    var config = {
                        targetRoot: vkbd.element,
                        // document.body is the event root b/c we need to track the mouse if it leaves
                        // the VisualKeyboard's hierarchy.
                        eventRoot: document.body,
                        inputStartHandler: vkbd.touch.bind(vkbd),
                        inputMoveHandler: vkbd.moveOver.bind(vkbd),
                        inputMoveCancelHandler: vkbd.moveCancel.bind(vkbd),
                        inputEndHandler: vkbd.release.bind(vkbd),
                        coordConstrainedWithinInteractiveBounds: vkbd.detectWithinInteractiveBounds.bind(vkbd)
                    };
                    return new MouseEventEngine(config);
                };
                MouseEventEngine.forPredictiveBanner = function (banner, handlerRoot) {
                    var config = {
                        targetRoot: banner.getDiv(),
                        // document.body is the event root b/c we need to track the mouse if it leaves
                        // the VisualKeyboard's hierarchy.
                        eventRoot: document.body,
                        inputStartHandler: handlerRoot.touchStart.bind(handlerRoot),
                        inputMoveHandler: handlerRoot.touchMove.bind(handlerRoot),
                        inputEndHandler: handlerRoot.touchEnd.bind(handlerRoot),
                        coordConstrainedWithinInteractiveBounds: function () { return true; }
                    };
                    return new MouseEventEngine(config);
                };
                MouseEventEngine.prototype.registerEventHandlers = function () {
                    this.config.eventRoot.addEventListener('mousedown', this._mouseStart, true);
                    this.config.eventRoot.addEventListener('mousemove', this._mouseMove, false);
                    // The listener below fails to capture when performing automated testing checks in Chrome emulation unless 'true'.
                    this.config.eventRoot.addEventListener('mouseup', this._mouseEnd, true);
                };
                MouseEventEngine.prototype.unregisterEventHandlers = function () {
                    this.config.eventRoot.removeEventListener('mousedown', this._mouseStart, true);
                    this.config.eventRoot.removeEventListener('mousemove', this._mouseMove, false);
                    this.config.eventRoot.removeEventListener('mouseup', this._mouseEnd, true);
                };
                MouseEventEngine.prototype.preventPropagation = function (e) {
                    // Standard event maintenance
                    e.preventDefault();
                    e.cancelBubble = true;
                    e.returnValue = false; // I2409 - Avoid focus loss for visual keyboard events
                    if (typeof e.stopImmediatePropagation == 'function') {
                        e.stopImmediatePropagation();
                    }
                    else if (typeof e.stopPropagation == 'function') {
                        e.stopPropagation();
                    }
                };
                MouseEventEngine.prototype.onMouseStart = function (event) {
                    if (!this.config.targetRoot.contains(event.target)) {
                        this.ignoreSequence = true;
                        return;
                    }
                    this.preventPropagation(event);
                    this.onInputStart(osk.InputEventCoordinate.fromEvent(event));
                    this.hasActiveClick = true;
                };
                MouseEventEngine.prototype.onMouseMove = function (event) {
                    if (this.ignoreSequence) {
                        return;
                    }
                    var coord = osk.InputEventCoordinate.fromEvent(event);
                    if (!event.buttons) {
                        if (this.hasActiveClick) {
                            this.hasActiveClick = false;
                            this.onInputMoveCancel(coord);
                        }
                        return;
                    }
                    else if (!this.hasActiveClick) {
                        // Can interfere with OSK drag-handlers (title bar, resize bar) otherwise.
                        return;
                    }
                    this.preventPropagation(event);
                    if (this.config.coordConstrainedWithinInteractiveBounds(coord)) {
                        this.onInputMove(coord);
                    }
                    else {
                        this.onInputMoveCancel(coord);
                    }
                };
                MouseEventEngine.prototype.onMouseEnd = function (event) {
                    if (this.ignoreSequence) {
                        this.ignoreSequence = false;
                        return;
                    }
                    if (!event.buttons) {
                        this.hasActiveClick = false;
                    }
                    this.onInputEnd(osk.InputEventCoordinate.fromEvent(event));
                };
                return MouseEventEngine;
            }(osk.InputEventEngine));
            osk.MouseEventEngine = MouseEventEngine;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="preProcessor.ts" />
/// <reference path="lengthStyle.ts" />
/// <reference path="utils.ts" />
/// <reference path="oskLayerGroup.ts" />
/// <reference path="keytip.interface.ts" />
/// <reference path="browser/keytip.ts" />
/// <reference path="browser/pendingLongpress.ts" />
/// <reference path="keyboardView.interface.ts" />
/// <reference path="touchEventEngine.ts" />
/// <reference path="mouseEventEngine.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_17) {
        var osk;
        (function (osk) {
            ;
            var VisualKeyboard = /** @class */ (function () {
                //#region OSK constructor and helpers
                /**
                 * @param       {Object}      PVK         Visual keyboard name
                 * @param       {Object}      Lhelp       true if OSK defined for this keyboard
                 * @param       {Object}      layout0
                 * @param       {Number}      kbdBitmask  Keyboard modifier bitmask
                 * Description  Generates the base visual keyboard element, prepping for attachment to KMW
                 */
                function VisualKeyboard(keyboard, device, hostDevice, isStatic) {
                    this._layerId = "default";
                    this.layerIndex = 0; // the index of the default layer
                    this.isStatic = false;
                    this._fixedWidthScaling = false;
                    this._fixedHeightScaling = true;
                    /**
                     *  Repeat backspace as long as the backspace key is held down
                     **/
                    this.repeatDelete = function () {
                        if (this.deleting) {
                            this.modelKeyClick(this.deleteKey);
                            this.deleting = window.setTimeout(this.repeatDelete, 100);
                        }
                    }.bind(this);
                    this.device = device;
                    this.hostDevice = hostDevice || device;
                    if (isStatic) {
                        this.isStatic = isStatic;
                    }
                    this._fixedWidthScaling = this.device.touchable && !this.isStatic;
                    this._fixedHeightScaling = this.device.touchable && !this.isStatic;
                    // Create the collection of HTML elements from the device-dependent layout object
                    var Lkbd = document.createElement('div');
                    var layout;
                    if (keyboard) {
                        layout = this.kbdLayout = keyboard.layout(device.formFactor);
                        this.isRTL = keyboard.isRTL;
                    }
                    else {
                        // This COULD be called with no backing keyboard; KMW will try to force-show the OSK even without
                        // a backing keyboard on mobile, using the most generic default layout as the OSK's base.
                        //
                        // In KMW's current state, it'd take a major break, though - Processor always has an activeKeyboard,
                        // even if it's "hollow".
                        var rawLayout = keyman_17.keyboards.Layouts.buildDefaultLayout(null, null, device.formFactor);
                        layout = this.kbdLayout = keyman_17.keyboards.ActiveLayout.polyfill(rawLayout, null, device.formFactor);
                        this.isRTL = false;
                    }
                    // Override font if specified by keyboard
                    if ('font' in layout) {
                        this.fontFamily = layout['font'];
                    }
                    else {
                        this.fontFamily = '';
                    }
                    // Now to build the actual layout.
                    var formFactor = device.formFactor;
                    var layoutKeyboard = keyboard;
                    if (!layoutKeyboard) {
                        // May occasionally be null in embedded contexts; have seen this when iOS engine sets
                        // keyboard height during change of keyboards.
                        layoutKeyboard = new keyman_17.keyboards.Keyboard(null);
                    }
                    this.layerGroup = new osk.OSKLayerGroup(this, layoutKeyboard, formFactor);
                    // Now that we've properly processed the keyboard's layout, mark it as calibrated.
                    // TODO:  drop the whole 'calibration' thing.  The newer layout system supersedes the
                    // need for it.  (Is no longer really used, so the drop ought be clean.)
                    layoutKeyboard.markLayoutCalibrated(formFactor);
                    // Append the OSK layer group container element to the containing element
                    //osk.keyMap = divLayerContainer;
                    Lkbd.appendChild(this.layerGroup.element);
                    // Set base class - OS and keyboard added for Build 360
                    this.kbdDiv = Lkbd;
                    // For 'live' touch keyboards, attach touch-based event handling.
                    // Needs to occur AFTER this.kbdDiv is initialized.
                    if (!this.isStatic) {
                        if (this.hostDevice.touchable) {
                            this.inputEngine = osk.TouchEventEngine.forVisualKeyboard(this);
                        }
                        else {
                            this.inputEngine = osk.MouseEventEngine.forVisualKeyboard(this);
                        }
                        this.inputEngine.registerEventHandlers();
                    }
                    Lkbd.className = device.formFactor + ' kmw-osk-inner-frame';
                }
                Object.defineProperty(VisualKeyboard.prototype, "layerId", {
                    get: function () {
                        return this._layerId;
                    },
                    set: function (value) {
                        this._layerId = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "currentLayer", {
                    get: function () {
                        var _a;
                        return this.layerId ? (_a = this.layerGroup) === null || _a === void 0 ? void 0 : _a.layers[this.layerId] : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "lgKey", {
                    // Special keys (for the currently-visible layer)
                    get: function () {
                        var _a, _b;
                        return (_b = (_a = this.currentLayer) === null || _a === void 0 ? void 0 : _a.globeKey) === null || _b === void 0 ? void 0 : _b.btn;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "hkKey", {
                    get: function () {
                        var _a, _b;
                        return (_b = (_a = this.currentLayer) === null || _a === void 0 ? void 0 : _a.hideKey) === null || _b === void 0 ? void 0 : _b.btn;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "spaceBar", {
                    get: function () {
                        var _a, _b;
                        return (_b = (_a = this.currentLayer) === null || _a === void 0 ? void 0 : _a.spaceBarKey) === null || _b === void 0 ? void 0 : _b.btn;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "element", {
                    get: function () {
                        return this.kbdDiv;
                    },
                    enumerable: true,
                    configurable: true
                });
                VisualKeyboard.prototype.postInsert = function () { };
                Object.defineProperty(VisualKeyboard.prototype, "width", {
                    /**
                     * The configured width for this VisualKeyboard.  May be `undefined` or `null`
                     * to allow automatic width scaling.
                     */
                    get: function () {
                        return this._width;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "height", {
                    /**
                     * The configured height for this VisualKeyboard.  May be `undefined` or `null`
                     * to allow automatic height scaling.
                     */
                    get: function () {
                        return this._height;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "layoutWidth", {
                    get: function () {
                        if (this.usesFixedWidthScaling) {
                            var baseWidth = this.width;
                            var cs = getComputedStyle(this.element);
                            if (cs.border) {
                                var borderWidth = new osk.ParsedLengthStyle(cs.borderWidth).val;
                                baseWidth -= borderWidth * 2;
                            }
                            return osk.ParsedLengthStyle.inPixels(baseWidth);
                        }
                        else {
                            return osk.ParsedLengthStyle.forScalar(1);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "layoutHeight", {
                    get: function () {
                        if (this.usesFixedHeightScaling) {
                            var baseHeight = this.height;
                            var cs = getComputedStyle(this.element);
                            if (cs.border) {
                                var borderHeight = new osk.ParsedLengthStyle(cs.borderWidth).val;
                                baseHeight -= borderHeight * 2;
                            }
                            return osk.ParsedLengthStyle.inPixels(baseHeight);
                        }
                        else {
                            return osk.ParsedLengthStyle.forScalar(1);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "fontSize", {
                    get: function () {
                        if (!this._fontSize) {
                            this._fontSize = new osk.ParsedLengthStyle('1em');
                        }
                        return this._fontSize;
                    },
                    set: function (value) {
                        this._fontSize = value;
                        this.kbdDiv.style.fontSize = value.styleString;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "usesFixedWidthScaling", {
                    /**
                     * Uses fixed scaling for widths of internal elements, rather than relative,
                     * percent-based scaling.
                     */
                    get: function () {
                        return this._fixedWidthScaling;
                    },
                    set: function (val) {
                        this._fixedWidthScaling = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "usesFixedHeightScaling", {
                    /**
                     * Uses fixed scaling for heights of internal elements, rather than relative,
                     * percent-based scaling.
                     */
                    get: function () {
                        return this._fixedHeightScaling;
                    },
                    set: function (val) {
                        this._fixedHeightScaling = val;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(VisualKeyboard.prototype, "usesFixedPositioning", {
                    /**
                     * Denotes if the VisualKeyboard or its containing OSKView / OSKManager uses
                     * fixed positioning.
                     */
                    get: function () {
                        var node = this.element;
                        while (node) {
                            if (getComputedStyle(node).position == 'fixed') {
                                return true;
                            }
                            else {
                                node = node.offsetParent;
                            }
                        }
                        return false;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Sets & tracks the size of the VisualKeyboard's primary element.
                 * @param width
                 * @param height
                 * @param pending Set to `true` if called during a resizing interaction
                 */
                VisualKeyboard.prototype.setSize = function (width, height, pending) {
                    this._width = width;
                    this._height = height;
                    if (this.kbdDiv) {
                        this.kbdDiv.style.width = width ? this._width + 'px' : '';
                        this.kbdDiv.style.height = height ? this._height + 'px' : '';
                        if (!this.device.touchable && height) {
                            this.fontSize = new osk.ParsedLengthStyle((this._height / 8) + 'px');
                        }
                        if (!pending) {
                            this.refreshLayout();
                        }
                    }
                };
                /**
                 * Returns the default properties for a key object, used to construct
                 * both a base keyboard key and popup keys
                 *
                 * @return    {Object}    An object that contains default key properties
                 */
                VisualKeyboard.prototype.getDefaultKeyObject = function () {
                    return new osk.OSKKeySpec(undefined, '', keyman_17.keyboards.ActiveKey.DEFAULT_KEY.width, keyman_17.keyboards.ActiveKey.DEFAULT_KEY.sp, null, keyman_17.keyboards.ActiveKey.DEFAULT_KEY.pad);
                };
                ;
                //#endregion
                //#region OSK touch handlers
                VisualKeyboard.prototype.getTouchCoordinatesOnKeyboard = function (input) {
                    var keyman = com.keyman.singleton;
                    // We need to compute the 'local', keyboard-based coordinates for the touch.
                    var kbdCoords = keyman.util.getAbsolute(this.kbdDiv);
                    var offsetCoords = { x: input.x - kbdCoords.x, y: input.y - kbdCoords.y };
                    // The layer group's element always has the proper width setting, unlike kbdDiv itself.
                    offsetCoords.x /= this.layerGroup.element.offsetWidth;
                    offsetCoords.y /= this.kbdDiv.offsetHeight;
                    return offsetCoords;
                };
                VisualKeyboard.prototype.getTouchProbabilities = function (input) {
                    var keyman = com.keyman.singleton;
                    if (!keyman.core.languageProcessor.mayCorrect) {
                        return null;
                    }
                    // Note:  if subkeys are active, they will still be displayed at this time.
                    // TODO:  In such cases, we should build an ActiveLayout (of sorts) for subkey displays,
                    //        update their geometries to the actual display values, and use the results here.
                    var touchKbdPos = this.getTouchCoordinatesOnKeyboard(input);
                    var layerGroup = this.layerGroup.element; // Always has proper dimensions, unlike kbdDiv itself.
                    var width = layerGroup.offsetWidth, height = this.kbdDiv.offsetHeight;
                    // Prevent NaN breakages.
                    if (!width || !height) {
                        return null;
                    }
                    var kbdAspectRatio = layerGroup.offsetWidth / this.kbdDiv.offsetHeight;
                    var baseKeyProbabilities = this.kbdLayout.getLayer(this.layerId).getTouchProbabilities(touchKbdPos, kbdAspectRatio);
                    if (!this.subkeyGesture || !this.subkeyGesture.baseKey.key) {
                        return baseKeyProbabilities;
                    }
                    else {
                        // A temp-hack, as this was noted just before 14.0's release.
                        // Since a more... comprehensive solution would be way too complex this late in the game,
                        // this provides a half-decent stopgap measure.
                        //
                        // Will not correct to nearby subkeys; only includes the selected subkey and its base keys.
                        // Still, better than ignoring them both for whatever base key is beneath the final cursor location.
                        var baseMass = 1.0;
                        var baseKeyMass = 1.0;
                        var baseKeyID = this.subkeyGesture.baseKey.key.spec.coreID;
                        var popupKeyMass = 0.0;
                        var popupKeyID = null;
                        // Note:  when embedded on Android (as of 14.0, at least), we don't get access to this.
                        // Just the base key.
                        if (this.keyPending && this.keyPending.key) {
                            popupKeyMass = 3.0;
                            popupKeyID = this.keyPending.key.spec.coreID;
                        }
                        // If the base key appears in the subkey array and was selected, merge the probability masses.
                        if (popupKeyID == baseKeyID) {
                            baseKeyMass += popupKeyMass;
                            popupKeyMass = 0;
                        }
                        else {
                            // We namespace it so that lookup operations know to find it via its base key.
                            popupKeyID = baseKeyID + "::" + popupKeyID;
                        }
                        // Compute the normalization factor
                        var totalMass = baseMass + baseKeyMass + popupKeyMass;
                        var scalar = 1.0 / totalMass;
                        // Prevent duplicate entries in the final map & normalize the remaining entries!
                        for (var i = 0; i < baseKeyProbabilities.length; i++) {
                            var entry = baseKeyProbabilities[i];
                            if (entry.keyId == baseKeyID) {
                                baseKeyMass += entry.p * scalar;
                                baseKeyProbabilities.splice(i, 1);
                                i--;
                            }
                            else if (entry.keyId == popupKeyID) {
                                popupKeyMass = +entry.p * scalar;
                                baseKeyProbabilities.splice(i, 1);
                                i--;
                            }
                            else {
                                entry.p *= scalar;
                            }
                        }
                        var finalArray = [];
                        if (popupKeyMass > 0) {
                            finalArray.push({ keyId: popupKeyID, p: popupKeyMass * scalar });
                        }
                        finalArray.push({ keyId: baseKeyID, p: baseKeyMass * scalar });
                        finalArray = finalArray.concat(baseKeyProbabilities);
                        return finalArray;
                    }
                };
                //#region Input handling start
                /**
                 * Determines a "fuzzy boundary" area around the OSK within which active mouse and
                 * touch events will be maintained, even if their coordinates lie outside of the OSK's
                 * true visual bounds.
                 * @returns A `BoundingRect`, in `.pageX` / `.pageY` coordinates.
                 */
                VisualKeyboard.prototype.getInteractiveBoundingRect = function () {
                    // Determine the important geometric values involved
                    var _Box = this.element.offsetParent;
                    var oskX = this.element.offsetLeft + ((_Box === null || _Box === void 0 ? void 0 : _Box.offsetLeft) || 0);
                    var oskY = this.element.offsetTop + ((_Box === null || _Box === void 0 ? void 0 : _Box.offsetTop) || 0);
                    // Determine the out-of-bounds threshold at which touch-cancellation should automatically occur.
                    // Assuming square key-squares, we'll use 1/3 the height of a row for bounds detection
                    // for both dimensions.
                    var rowCount = this.currentLayer.rows.length;
                    var buffer = (0.333 * this.height / rowCount);
                    // Determine the OSK's boundaries and the boundaries of the page / view.
                    // These values are needed in .pageX / .pageY coordinates for the final calcs.
                    var boundingRect = {
                        left: oskX - buffer,
                        right: oskX + this.width + buffer,
                        top: oskY - buffer,
                        bottom: oskY + this.height + buffer
                    };
                    // If the OSK is using fixed positioning (thus, viewport-relative), we need to
                    // convert the 'clientX'-like values into 'pageX'-like values.
                    if (this.usesFixedPositioning) {
                        boundingRect.left += window.pageXOffset;
                        boundingRect.right += window.pageXOffset;
                        boundingRect.top += window.pageYOffset;
                        boundingRect.bottom += window.pageYOffset;
                    }
                    return boundingRect;
                };
                /**
                 * Adjusts a potential "interactive boundary" definition by enforcing an
                 * "event cancellation zone" near screen boundaries that are not directly adjacent
                 * to the ongoing input event's initial coordinate.
                 *
                 * This facilitates modeling of conventional cancellation gestures where a user would
                 * drag the mouse or touch point off the OSK, as mouse and touch event handlers receive
                 * no input beyond screen boundaries.
                 *
                 * @param baseBounds The baseline interactive bounding area to be adjusted
                 * @param startCoord The initial coordinate of a currently-ongoing input event
                 * @returns
                 */
                VisualKeyboard.prototype.applyScreenMarginBoundsThresholding = function (baseBounds, startCoord) {
                    // Determine the needed linear translation to screen coordinates.
                    var xDelta = window.screenLeft - window.pageXOffset;
                    var yDelta = window.screenTop - window.pageYOffset;
                    var adjustedBounds = __assign({}, baseBounds);
                    // Also translate the initial touch's screen coord, as it affects our bounding box logic.
                    var initScreenCoord = new osk.InputEventCoordinate(startCoord.x + xDelta, startCoord.y + yDelta);
                    // Detection:  is the OSK aligned with any screen boundaries?
                    // If so, create a 'fuzzy' zone around the edges not near the initial touch point that allow
                    // move-based cancellation.
                    // If the initial input screen-coord is at least 5 pixels from the screen's left AND
                    // the OSK's left boundary is within 2 pixels from the screen's left...
                    if (initScreenCoord.x >= 5 && baseBounds.left + xDelta <= 2) {
                        adjustedBounds.left = 2 - xDelta; // new `leftBound` is set to 2 pixels from the screen's left.
                    }
                    if (initScreenCoord.x <= screen.width - 5 && baseBounds.right + xDelta >= screen.width - 2) {
                        adjustedBounds.right = (screen.width - 2) - xDelta; // new `rightBound` 2px from screen's right.
                    }
                    if (initScreenCoord.y >= 5 && baseBounds.top + yDelta <= 2) {
                        adjustedBounds.top = 2 - yDelta;
                    }
                    if (initScreenCoord.y <= screen.height - 5 && baseBounds.bottom + yDelta >= screen.height - 2) {
                        adjustedBounds.bottom = (screen.height - 2) - yDelta;
                    }
                    return adjustedBounds;
                };
                VisualKeyboard.prototype.detectWithinInteractiveBounds = function (coord) {
                    // Shortcuts the method during unit testing, as we don't currently
                    // provide coordinate values in its synthetic events.
                    if (coord.x === null && coord.y === null) {
                        return true;
                    }
                    var baseBoundingRect = this.getInteractiveBoundingRect();
                    var adjustedBoundingRect = baseBoundingRect;
                    if (this.initTouchCoord) {
                        this.applyScreenMarginBoundsThresholding(baseBoundingRect, this.initTouchCoord);
                    }
                    // Now to check where the input coordinate lies in relation to the final bounding box!
                    if (coord.x < adjustedBoundingRect.left || coord.x > adjustedBoundingRect.right) {
                        return false;
                    }
                    else if (coord.y < adjustedBoundingRect.top || coord.y > adjustedBoundingRect.bottom) {
                        return false;
                    }
                    else {
                        return true;
                    }
                };
                /**
                 * The main OSK touch start event handler
                 *
                 *  @param  {Event} e   touch start event object
                 *
                 */
                VisualKeyboard.prototype.touch = function (input) {
                    // Identify the key touched
                    var t = input.target, key = this.keyTarget(t);
                    // Save the touch point, which is used for quick-display of popup keys (defined in highlightSubKeys)
                    this.initTouchCoord = input;
                    // Set the key for the new touch point to be current target, if defined
                    this.currentTarget = key;
                    // Clear repeated backspace if active, preventing 'sticky' behavior.
                    this.cancelDelete();
                    // Prevent multi-touch if popup displayed
                    if (this.subkeyGesture && this.subkeyGesture.isVisible()) {
                        return;
                    }
                    // Keep track of number of active (unreleased) touch points
                    this.touchCount = input.activeInputCount;
                    // Get nearest key if touching a hidden key or the end of a key row
                    if ((key && ((key.className.indexOf('key-hidden') >= 0) || (key.className.indexOf('key-blank') >= 0)))
                        || t.className.indexOf('kmw-key-row') >= 0) {
                        // Perform "fudged" selection ops if and only if we're not sure about the precision of the
                        // input source.  Mouse-based selection IS precise, so no need for "fudging" there.
                        if (!input.isFromMouse) {
                            key = this.findNearestKey(input, t);
                        }
                    }
                    // Do not do anything if no key identified!
                    if (key == null) {
                        return;
                    }
                    // Get key name (K_...) from element ID
                    var keyName = key['keyId'];
                    // Highlight the touched key
                    this.highlightKey(key, true);
                    // Special function keys need immediate action
                    if (keyName == 'K_LOPT' || keyName == 'K_ROPT') {
                        window.setTimeout(function () {
                            this.modelKeyClick(key);
                            // Because we immediately process the key, we need to re-highlight it after the click.
                            this.highlightKey(key, true);
                            // Highlighting'll be cleared automatically later.
                        }.bind(this), 0);
                        this.keyPending = null;
                        this.touchPending = null;
                        // Also backspace, to allow delete to repeat while key held
                    }
                    else if (keyName == 'K_BKSP') {
                        // While we could inline the execution of the delete key here, we lose the ability to
                        // record the backspace key if we do so.
                        this.modelKeyClick(key, input);
                        this.deleteKey = key;
                        this.deleting = window.setTimeout(this.repeatDelete, 500);
                        this.keyPending = null;
                        this.touchPending = null;
                    }
                    else {
                        if (this.keyPending) {
                            this.highlightKey(this.keyPending, false);
                            if (this.subkeyGesture && this.subkeyGesture instanceof osk.browser.SubkeyPopup) {
                                var subkeyPopup = this.subkeyGesture;
                                subkeyPopup.updateTouch(input);
                                subkeyPopup.finalize(input);
                            }
                            else {
                                this.modelKeyClick(this.keyPending, this.touchPending);
                            }
                            // Decrement the number of unreleased touch points to prevent
                            // sending the keystroke again when the key is actually released
                            this.touchCount--;
                        }
                        else {
                            // If this key has subkey, start timer to display subkeys after delay, set up release
                            this.initGestures(key, input);
                        }
                        this.keyPending = key;
                        this.touchPending = input;
                    }
                };
                /**
                 * OSK touch release event handler
                 *
                 *  @param  {Event} e   touch release event object
                 *
                 **/
                VisualKeyboard.prototype.release = function (input) {
                    // Prevent incorrect multi-touch behaviour if native or device popup visible
                    var t = this.currentTarget;
                    // Clear repeated backspace if active, preventing 'sticky' behavior.
                    this.cancelDelete();
                    if ((this.subkeyGesture && this.subkeyGesture.isVisible())) {
                        // Ignore release if a multiple touch
                        if (input.activeInputCount > 0) {
                            return;
                        }
                        if (this.subkeyGesture instanceof osk.browser.SubkeyPopup) {
                            var subkeyPopup = this.subkeyGesture;
                            subkeyPopup.finalize(input);
                        }
                        this.highlightKey(this.keyPending, false);
                        this.keyPending = null;
                        this.touchPending = null;
                        return;
                    }
                    // Handle menu key release event
                    if (t && t.id) {
                        this.optionKey(t, t.id, false);
                    }
                    // Test if moved off screen (effective release point must be corrected for touch point horizontal speed)
                    // This is not completely effective and needs some tweaking, especially on Android
                    if (!this.detectWithinInteractiveBounds(input)) {
                        this.moveCancel(input);
                        this.touchCount--;
                        return;
                    }
                    // Save then decrement current touch count
                    var tc = this.touchCount;
                    if (this.touchCount > 0) {
                        this.touchCount--;
                    }
                    // Process and clear highlighting of pending target
                    if (this.keyPending) {
                        this.highlightKey(this.keyPending, false);
                        // Output character unless moved off key
                        if (this.keyPending.className.indexOf('hidden') < 0 && tc > 0) {
                            this.modelKeyClick(this.keyPending, input);
                        }
                        this.clearPopup();
                        this.keyPending = null;
                        this.touchPending = null;
                        // Always clear highlighting of current target on release (multi-touch)
                    }
                    else {
                        var tt = input;
                        t = this.keyTarget(tt.target);
                        if (!t) {
                            // Operates relative to the viewport, not based on the actual coordinate on the page.
                            var t1 = document.elementFromPoint(input.x - window.pageXOffset, input.y - window.pageYOffset);
                            t = this.findNearestKey(input, t1);
                        }
                        this.highlightKey(t, false);
                    }
                };
                VisualKeyboard.prototype.moveCancel = function (input) {
                    // Do not attempt to support reselection of target key for overlapped keystrokes.
                    // Perform _after_ ensuring possible sticky keys have been cancelled.
                    if (input.activeInputCount > 1) {
                        return;
                    }
                    // Update all gesture tracking.  The function returns true if further input processing
                    // should be blocked.  (Keeps the subkey array operating when the input coordinate has
                    // moved outside the OSK's boundaries.)
                    if (this.updateGestures(null, this.keyPending, input)) {
                        return;
                    }
                    this.cancelDelete();
                    this.highlightKey(this.keyPending, false);
                    this.showKeyTip(null, false);
                    this.clearPopup();
                    this.keyPending = null;
                    this.touchPending = null;
                };
                /**
                 * OSK touch move event handler
                 *
                 *  @param  {Event} e   touch move event object
                 *
                 **/
                VisualKeyboard.prototype.moveOver = function (input) {
                    // Shouldn't be possible, but just in case.
                    if (this.touchCount == 0) {
                        this.cancelDelete();
                        return;
                    }
                    // Get touch position
                    var x = input.x - window.pageXOffset;
                    var y = input.y - window.pageYOffset;
                    // Move target key and highlighting
                    this.touchPending = input;
                    // Operates on viewport-based coordinates, not page-based.
                    var t1 = document.elementFromPoint(x, y);
                    var key0 = this.keyPending;
                    var key1 = this.keyTarget(t1); // Not only gets base keys, but also gets popup keys!
                    // Find the nearest key to the touch point if not on a visible key
                    if ((key1 && key1.className.indexOf('key-hidden') >= 0) ||
                        (t1 && (!key1) && t1.className.indexOf('key-row') >= 0)) {
                        key1 = this.findNearestKey(input, t1);
                    }
                    // Cancels BKSP if it's not the key.  (Note... could also cancel BKSP if the ongoing
                    // input is cancelled, regardless of key, just to be safe.)
                    // Stop repeat if no longer on BKSP key
                    if (key1 && (typeof key1.id == 'string') && (key1.id.indexOf('-K_BKSP') < 0)) {
                        this.cancelDelete();
                    }
                    // Cancels if it's a multitouch attempt.
                    // Do not attempt to support reselection of target key for overlapped keystrokes.
                    // Perform _after_ ensuring possible sticky keys have been cancelled.
                    if (input.activeInputCount > 1) {
                        return;
                    }
                    // Gesture-updates should probably be a separate call from other touch-move aspects.
                    // Update all gesture tracking.  The function returns true if further input processing
                    // should be blocked.
                    if (this.updateGestures(key1, key0, input)) {
                        return;
                    }
                    // Identify current touch position (to manage off-key release)
                    this.currentTarget = key1;
                    // Only NOW do we denote the newly-selected key as the currently-focused key.
                    // Replace the target key, if any, by the new target key
                    // Do not replace a null target, as that indicates the key has already been released
                    if (key1 && this.keyPending) {
                        this.highlightKey(key0, false);
                        this.keyPending = key1;
                        this.touchPending = input;
                    }
                    if (key0 && key1 && (key1 != key0) && (key1.id != '')) {
                        // While there may not be an active subkey menu, we should probably update which base key
                        // is being highlighted by the current touch & start a pending longpress for it.
                        this.clearPopup();
                        this.initGestures(key1, input);
                    }
                    if (this.keyPending) {
                        if (key0 != key1 || key1.className.indexOf(osk.OSKKey.HIGHLIGHT_CLASS) < 0) {
                            this.highlightKey(key1, true);
                        }
                    }
                };
                //#endregion
                /**
                 * Get the current key target from the touch point element within the key
                 *
                 * @param   {Object}  t   element at touch point
                 * @return  {Object}      the key element (or null)
                 **/
                VisualKeyboard.prototype.keyTarget = function (target) {
                    var t = target;
                    try {
                        if (t) {
                            if (t.classList.contains('kmw-key')) {
                                return osk.getKeyFrom(t);
                            }
                            if (t.parentNode && t.parentNode.classList.contains('kmw-key')) {
                                return osk.getKeyFrom(t.parentNode);
                            }
                            if (t.firstChild && t.firstChild.classList.contains('kmw-key')) {
                                return osk.getKeyFrom(t.firstChild);
                            }
                        }
                    }
                    catch (ex) { }
                    return null;
                };
                /**
                 * Identify the key nearest to the touch point if at the end of a key row,
                 * but return null more than about 0.6 key width from the nearest key.
                 *
                 *  @param  {Event}   e   touch event
                 *  @param  {Object}  t   HTML object at touch point
                 *  @return {Object}      nearest key to touch point
                 *
                 **/
                VisualKeyboard.prototype.findNearestKey = function (input, t) {
                    if (!input) {
                        return null;
                    }
                    // Get touch point on screen
                    var x = input.x;
                    // Get key-row beneath touch point
                    while (t && t.className !== undefined && t.className.indexOf('key-row') < 0) {
                        t = t.parentNode;
                    }
                    if (!t) {
                        return null;
                    }
                    // Find minimum distance from any key
                    var k, k0 = 0, dx, dxMax = 24, dxMin = 100000, x1, x2;
                    for (k = 0; k < t.childNodes.length; k++) {
                        var keySquare = t.childNodes[k]; // gets the .kmw-key-square containing a key
                        // Find the actual key element.
                        var childNode = keySquare.firstChild ? keySquare.firstChild : keySquare;
                        if (childNode.className !== undefined
                            && (childNode.className.indexOf('key-hidden') >= 0
                                || childNode.className.indexOf('key-blank') >= 0)) {
                            continue;
                        }
                        x1 = keySquare.offsetLeft;
                        x2 = x1 + keySquare.offsetWidth;
                        if (x >= x1 && x <= x2) {
                            // Within the key square
                            return childNode;
                        }
                        dx = x1 - x;
                        if (dx >= 0 && dx < dxMin) {
                            // To right of key
                            k0 = k;
                            dxMin = dx;
                        }
                        dx = x - x2;
                        if (dx >= 0 && dx < dxMin) {
                            // To left of key
                            k0 = k;
                            dxMin = dx;
                        }
                    }
                    if (dxMin < 100000) {
                        t = t.childNodes[k0];
                        x1 = t.offsetLeft;
                        x2 = x1 + t.offsetWidth;
                        // Limit extended touch area to the larger of 0.6 of key width and 24 px
                        if (t.offsetWidth > 40) {
                            dxMax = 0.6 * t.offsetWidth;
                        }
                        if (((x1 - x) >= 0 && (x1 - x) < dxMax) || ((x - x2) >= 0 && (x - x2) < dxMax)) {
                            return t.firstChild;
                        }
                    }
                    return null;
                };
                /**
                 * Cancels any active repeatDelete() timeouts, ensuring that
                 * repeating backspace operations are properly terminated.
                 */
                VisualKeyboard.prototype.cancelDelete = function () {
                    // Clears the delete-repeating timeout.
                    if (this.deleting) {
                        window.clearTimeout(this.deleting);
                    }
                    this.deleting = 0;
                };
                //#endregion
                VisualKeyboard.prototype.modelKeyClick = function (e, input) {
                    var keyEvent = this.initKeyEvent(e, input);
                    // TODO:  convert into an actual event, raised by the VisualKeyboard.
                    //        Its code is intended to lie outside of the OSK-Core library/module.
                    osk.PreProcessor.raiseKeyEvent(keyEvent);
                };
                VisualKeyboard.prototype.initKeyEvent = function (e, input) {
                    // Turn off key highlighting (or preview)
                    this.highlightKey(e, false);
                    // Future note:  we need to refactor osk.OSKKeySpec to instead be a 'tag field' for
                    // keyboards.ActiveKey.  (Prob with generics, allowing the Web-only parts to
                    // be fully specified within the tag.)
                    //
                    // Would avoid the type shenanigans needed here because of our current type-abuse setup
                    // for key spec tracking.
                    var keySpec = (e['key'] ? e['key'].spec : null);
                    if (!keySpec) {
                        console.error("OSK key with ID '" + e.id + "', keyID '" + e.keyId + "' missing needed specification");
                        return null;
                    }
                    // Return the event object.
                    return this.keyEventFromSpec(keySpec, input);
                };
                VisualKeyboard.prototype.keyEventFromSpec = function (keySpec, input) {
                    var core = com.keyman.singleton.core; // only singleton-based ref currently needed here.
                    // Start:  mirrors _GetKeyEventProperties
                    // First check the virtual key, and process shift, control, alt or function keys
                    var Lkc = keySpec.constructKeyEvent(core.keyboardProcessor, this.device);
                    // End - mirrors _GetKeyEventProperties
                    if (core.languageProcessor.isActive && input) {
                        Lkc.source = input;
                        Lkc.keyDistribution = this.getTouchProbabilities(input);
                    }
                    // Return the event object.
                    return Lkc;
                };
                // cancel = function(e) {} //cancel event is never generated by iOS
                /**
                 * Function     _UpdateVKShiftStyle
                 * Scope        Private
                 * @param       {string=}   layerId
                 * Description  Updates the OSK's visual style for any toggled state keys
                 */
                VisualKeyboard.prototype._UpdateVKShiftStyle = function (layerId) {
                    var _a;
                    var i;
                    var core = com.keyman.singleton.core;
                    if (!layerId) {
                        layerId = this.layerId;
                    }
                    var layer = this.layerGroup.layers[layerId];
                    if (!layer) {
                        return;
                    }
                    // So... through KMW 14, we actually never tracked the capsKey, numKey, and scrollKey
                    // properly for keyboard-defined layouts - only _default_, desktop-style layouts.
                    //
                    // We _could_ remedy this, but then... touch keyboards like khmer_angkor actually
                    // repurpose certain state keys, and in an inconsistent manner at that.
                    // Considering the potential complexity of touch layouts, with multiple possible
                    // layer-shift keys, it's likely best to just leave things as they are for now.
                    if (!((_a = core.activeKeyboard) === null || _a === void 0 ? void 0 : _a.usesDesktopLayoutOnDevice(this.device))) {
                        return;
                    }
                    // Set the on/off state of any visible state keys.
                    var states = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'];
                    var keys = [layer.capsKey, layer.numKey, layer.scrollKey];
                    for (i = 0; i < keys.length; i++) {
                        // Skip any keys not in the OSK!
                        if (keys[i] == null) {
                            continue;
                        }
                        keys[i].setToggleState(core.keyboardProcessor.stateKeys[states[i]]);
                    }
                };
                VisualKeyboard.prototype.clearPopup = function () {
                    // Remove the displayed subkey array, if any, and cancel popup request
                    if (this.subkeyGesture) {
                        this.subkeyGesture.clear();
                        this.subkeyGesture = null;
                    }
                    if (this.pendingSubkey) {
                        this.pendingSubkey.cancel();
                        this.pendingSubkey = null;
                    }
                };
                //#endregion
                /**
                 * Indicate the current language and keyboard on the space bar
                 **/
                VisualKeyboard.prototype.showLanguage = function () {
                    var keyman = com.keyman.singleton;
                    var displayName = undefined;
                    var activeStub = keyman.keyboardManager.activeStub;
                    if (activeStub) {
                        if (activeStub['displayName'] != null) {
                            displayName = activeStub['displayName'];
                        }
                        else {
                            var lgName = activeStub['KL'], kbdName = activeStub['KN'];
                            kbdName = kbdName.replace(/\s*keyboard\s*/i, '');
                            switch (keyman.options['spacebarText']) {
                                case keyman_17.SpacebarText.KEYBOARD:
                                    displayName = kbdName;
                                    break;
                                case keyman_17.SpacebarText.LANGUAGE:
                                    displayName = lgName;
                                    break;
                                case keyman_17.SpacebarText.LANGUAGE_KEYBOARD:
                                    displayName = (kbdName == lgName) ? lgName : lgName + ' - ' + kbdName;
                                    break;
                                case keyman_17.SpacebarText.BLANK:
                                    displayName = '';
                                    break;
                                default:
                                    displayName = kbdName;
                            }
                        }
                    }
                    else {
                        displayName = '(System keyboard)';
                    }
                    try {
                        var t = this.spaceBar.key.label;
                        var tParent = t.parentNode;
                        if (typeof (tParent.className) == 'undefined' || tParent.className == '') {
                            tParent.className = 'kmw-spacebar';
                        }
                        else if (tParent.className.indexOf('kmw-spacebar') == -1) {
                            tParent.className += ' kmw-spacebar';
                        }
                        if (t.className != 'kmw-spacebar-caption') {
                            t.className = 'kmw-spacebar-caption';
                        }
                        // It sounds redundant, but this dramatically cuts down on browser DOM processing;
                        // but sometimes innerText is reported empty when it actually isn't, so set it
                        // anyway in that case (Safari, iOS 14.4)
                        if (t.innerText != displayName || displayName == '') {
                            t.innerText = displayName;
                        }
                    }
                    catch (ex) { }
                };
                /**
                 *  Add or remove a class from a keyboard key (when touched or clicked)
                 *  or add a key preview for phone devices
                 *
                 *  @param    {Object}    key   key affected
                 *  @param    {boolean}   on    add or remove highlighting
                 **/
                VisualKeyboard.prototype.highlightKey = function (key, on) {
                    // Do not change element class unless a key
                    if (!key || !key.key || (key.className == '') || (key.className.indexOf('kmw-key-row') >= 0))
                        return;
                    // For phones, use key preview rather than highlighting the key,
                    var usePreview = (this.keytip != null) && key.key.allowsKeyTip();
                    if (usePreview) {
                        this.showKeyTip(key, on);
                    }
                    else {
                        if (on) {
                            // May be called on already-unhighlighted keys, so we don't remove the tip here.
                            this.showKeyTip(null, false);
                        }
                        key.key.highlight(on);
                    }
                };
                /**
                 * Use of `getComputedStyle` is ideal, but in many of our use cases its preconditions are not met.
                 * This function allows us to calculate the font size in those situations.
                 */
                VisualKeyboard.prototype.getKeyEmFontSize = function () {
                    if (!this.fontSize) {
                        return 0;
                    }
                    if (this.device.formFactor == 'desktop') {
                        var keySquareScale = 0.8; // Set in kmwosk.css, is relative.
                        return this.fontSize.scaledBy(keySquareScale).val;
                    }
                    else {
                        var emSizeStr = getComputedStyle(document.body).fontSize;
                        var emSize = osk.getFontSizeStyle(emSizeStr).val;
                        var emScale = 1;
                        if (!this.isStatic) {
                            // Double-check against the font scaling applied to the _Box element.
                            if (this.fontSize.absolute) {
                                return this.fontSize.val;
                            }
                            else {
                                emScale = this.fontSize.val;
                            }
                        }
                        return emSize * emScale;
                    }
                };
                VisualKeyboard.prototype.updateState = function () {
                    // May happen for desktop-oriented keyboards that neglect to specify a touch layout.
                    // See `test_chirality.js` from the unit-test keyboard suite, which tests keystrokes
                    // using modifiers that lack corresponding visual-layout representation.
                    if (!this.currentLayer) {
                        return;
                    }
                    var n, b = this.kbdDiv.childNodes[0].childNodes;
                    this.nextLayer = this.layerId;
                    if (this.currentLayer.nextlayer) {
                        this.nextLayer = this.currentLayer.nextlayer;
                    }
                    for (n = 0; n < b.length; n++) {
                        var layerElement = b[n];
                        if (layerElement['layer'] == this.layerId) {
                            layerElement.style.display = 'block';
                            //b[n].style.visibility='visible';
                            // Most functions that call this one often indicate a change in modifier
                            // or state key state.  Keep it updated!
                            this._UpdateVKShiftStyle();
                        }
                        else {
                            layerElement.style.display = 'none';
                            //layerElement.style.visibility='hidden';
                        }
                    }
                };
                /**
                 * Used to refresh the VisualKeyboard's geometric layout and key sizes
                 * when needed.
                 */
                VisualKeyboard.prototype.refreshLayout = function () {
                    var keyman = com.keyman.singleton;
                    var device = this.device;
                    var fs = 1.0;
                    // TODO: Logically, this should be needed for Android, too - may need to be changed for the next version!
                    if (device.OS == keyman_17.utils.OperatingSystem.iOS && !keyman.isEmbedded) {
                        fs = fs / keyman.util.getViewportScale();
                    }
                    var paddedHeight;
                    if (this.height) {
                        paddedHeight = this.computedAdjustedOskHeight(this.height);
                    }
                    var b = this.layerGroup.element;
                    var gs = this.kbdDiv.style;
                    var bs = b.style;
                    if (this.usesFixedHeightScaling) {
                        // Sets the layer group to the correct height.
                        gs.height = gs.maxHeight = paddedHeight + 'px';
                    }
                    // The font-scaling applied on the layer group.
                    gs.fontSize = this.fontSize.styleString;
                    bs.fontSize = osk.ParsedLengthStyle.forScalar(fs).styleString;
                    // Needs the refreshed layout info to work correctly.
                    for (var layerId in this.layerGroup.layers) {
                        var layer = this.layerGroup.layers[layerId];
                        layer.refreshLayout(this, paddedHeight, this.height);
                    }
                    // NEW CODE ------
                    // Step 1:  have the necessary conditions been met?
                    var fixedSize = this.width && this.height;
                    var computedStyle = getComputedStyle(this.kbdDiv);
                    var isInDOM = computedStyle.height != '' && computedStyle.height != 'auto';
                    // Step 2:  determine basic layout geometry
                    if (fixedSize) {
                        this._computedWidth = this.width;
                        this._computedHeight = this.height;
                    }
                    else if (isInDOM) {
                        this._computedWidth = parseInt(computedStyle.width, 10);
                        if (!this._computedWidth) {
                            // For touch keyboards, the width _was_ specified on the layer group,
                            // not the root element (`kbdDiv`).
                            var groupStyle = getComputedStyle(this.kbdDiv.firstElementChild);
                            this._computedWidth = parseInt(groupStyle.width, 10);
                        }
                        this._computedHeight = parseInt(computedStyle.height, 10);
                    }
                    else {
                        // Cannot perform layout operations!
                        return;
                    }
                    // Step 3:  perform layout operations.  (Handled by 'old code' section below.)
                    // END NEW CODE -----------
                    // Needs the refreshed layout info to work correctly.
                    for (var layerId in this.layerGroup.layers) {
                        var layer = this.layerGroup.layers[layerId];
                        layer.refreshLayout(this, paddedHeight, this._computedHeight);
                    }
                };
                /*private*/ VisualKeyboard.prototype.computedAdjustedOskHeight = function (allottedHeight) {
                    if (!this.layerGroup) {
                        return allottedHeight;
                    }
                    var layers = this.layerGroup.layers;
                    var oskHeight = 0;
                    // In case the keyboard's layers have differing row counts, we check them all for the maximum needed oskHeight.
                    for (var layerID in layers) {
                        var layer = layers[layerID];
                        var nRows = layer.rows.length;
                        var rowHeight = Math.floor(allottedHeight / (nRows == 0 ? 1 : nRows));
                        var layerHeight = nRows * rowHeight;
                        if (layerHeight > oskHeight) {
                            oskHeight = layerHeight;
                        }
                    }
                    // This isn't set anywhere else; it's a legacy part of the original methods.
                    var oskPad = 0;
                    var oskPaddedHeight = oskHeight + oskPad;
                    return oskPaddedHeight;
                };
                /**
                 *  Append a style sheet for the current keyboard if needed for specifying an embedded font
                 *  or to re-apply the default element font
                 *
                 **/
                VisualKeyboard.prototype.appendStyleSheet = function () {
                    var keymanweb = com.keyman.singleton;
                    var util = keymanweb.util;
                    var activeKeyboard = keymanweb.core.activeKeyboard;
                    var activeStub = keymanweb.keyboardManager.activeStub;
                    // Do not do anything if a null stub
                    if (activeStub == null) {
                        return;
                    }
                    // First remove any existing keyboard style sheet
                    if (this.styleSheet) {
                        util.removeStyleSheet(this.styleSheet);
                    }
                    var i, kfd = activeStub['KFont'], ofd = activeStub['KOskFont'];
                    // Add style sheets for embedded fonts if necessary (each font-face style will only be added once)
                    util.addFontFaceStyleSheet(kfd);
                    util.addFontFaceStyleSheet(ofd);
                    // Temporarily hide duplicated elements on non-desktop browsers
                    keymanweb.hideInputs();
                    // Build the style string and append (or replace) the font style sheet
                    // Note: Some browsers do not download the font-face font until it is applied,
                    //       so must apply style before testing for font availability
                    // Extended to allow keyboard-specific custom styles for Build 360
                    var customStyle = this.addFontStyle(kfd, ofd);
                    if (activeKeyboard != null && typeof (activeKeyboard.oskStyling) == 'string') // KMEW-129
                        customStyle = customStyle + activeKeyboard.oskStyling;
                    this.styleSheet = util.addStyleSheet(customStyle); //Build 360
                    // Wait until font is loaded then align duplicated input elements with page elements
                    if (this.waitForFonts(kfd, ofd)) {
                        keymanweb.alignInputs();
                    }
                };
                /**
                 *  Add or replace the style sheet used to set the font for input elements and OSK
                 *
                 *  @param  {Object}  kfd   KFont font descriptor
                 *  @param  {Object}  ofd   OSK font descriptor (if any)
                 *  @return {string}
                 *
                 **/
                VisualKeyboard.prototype.addFontStyle = function (kfd, ofd) {
                    var keymanweb = com.keyman.singleton;
                    // Get name of font to be applied
                    var fn = keymanweb.baseFont;
                    if (typeof (kfd) != 'undefined' && typeof (kfd['family']) != 'undefined') {
                        fn = kfd['family'];
                    }
                    // Unquote font name in base font (if quoted)
                    fn = fn.replace(/\u0022/g, '');
                    // Set font family chain for mapped elements and remove any double quotes
                    var rx = new RegExp('\\s?' + fn + ',?'), ff = keymanweb.appliedFont.replace(/\u0022/g, '');
                    // Remove base font name from chain if present
                    ff = ff.replace(rx, '');
                    ff = ff.replace(/,$/, '');
                    // Then replace it at the head of the chain
                    if (ff == '') {
                        ff = fn;
                    }
                    else {
                        ff = fn + ',' + ff;
                    }
                    // Re-insert quotes around individual font names
                    ff = '"' + ff.replace(/\,\s?/g, '","') + '"';
                    // Add to the stylesheet, quoted, and with !important to override any explicit style
                    var s = '.keymanweb-font{\nfont-family:' + ff + ' !important;\n}\n';
                    // Set font family for OSK text
                    if (typeof (ofd) != 'undefined') {
                        s = s + '.kmw-key-text{\nfont-family:"' + ofd['family'].replace(/\u0022/g, '').replace(/,/g, '","') + '";\n}\n';
                    }
                    else if (typeof (kfd) != 'undefined') {
                        s = s + '.kmw-key-text{\nfont-family:"' + kfd['family'].replace(/\u0022/g, '').replace(/,/g, '","') + '";\n}\n';
                    }
                    // Store the current font chain (with quote-delimited font names)
                    keymanweb.appliedFont = ff;
                    // Return the style string
                    return s;
                };
                /**
                 * Create copy of the OSK that can be used for embedding in documentation or help
                 * The currently active keyboard will be returned if PInternalName is null
                 *
                 *  @param  {Object}            PKbd            the keyboard object to be displayed
                 *  @param  {string=}           argFormFactor   layout form factor, defaulting to 'desktop'
                 *  @param  {(string|number)=}  argLayerId      name or index of layer to show, defaulting to 'default'
                 *  @param  {number}            height          Target height for the rendered keyboard
                 *                                              (currently required for legacy reasons)
                 *  @return {Object}                            DIV object with filled keyboard layer content
                 */
                VisualKeyboard.buildDocumentationKeyboard = function (PKbd, argFormFactor, argLayerId, height) {
                    if (!PKbd) {
                        return null;
                    }
                    var formFactor = (typeof (argFormFactor) == 'undefined' ? 'desktop' : argFormFactor), layerId = (typeof (argLayerId) == 'undefined' ? 'default' : argLayerId), device = new keyman_17.Device();
                    // Device emulation for target documentation.
                    device.formFactor = formFactor;
                    if (formFactor != 'desktop') {
                        device.OS = 'iOS';
                        device.touchable = true;
                    }
                    else {
                        device.OS = 'windows';
                        device.touchable = false;
                    }
                    var layout = PKbd.layout(formFactor);
                    var kbdObj = new VisualKeyboard(PKbd, device.coreSpec, device.coreSpec, true);
                    // The 'documentation' format uses the base element's child as the actual display base.
                    // Since there's no backing kmw-osk-frame, we do need the static-class kmw-osk-inner-frame
                    // to perform background styling on our behalf.  We'll trust the actual, live keyboard rules
                    // for the other elements, which in turn needs the non-static variant of the CSS rules.
                    kbdObj.layerGroup.element.className = kbdObj.kbdDiv.className + ' ' + device.formFactor
                        + '-static ' + device.OS.toLowerCase();
                    var kbd = kbdObj.kbdDiv.childNodes[0]; // Gets the layer group.
                    // Select the layer to display, and adjust sizes
                    if (layout != null) {
                        kbdObj.layerId = layerId;
                        kbdObj.updateState();
                        // This still feels fairly hacky... but something IS needed to constrain the height.
                        // There are plans to address related concerns through some of the later aspects of
                        // the Web OSK-Core design.
                        kbdObj.setSize(800, height); // Probably need something for width, too, rather than
                        // assuming 100%.
                        kbdObj.refreshLayout(); // Necessary for the row heights to be properly set!
                        // Relocates the font size definition from the main VisualKeyboard wrapper, since we don't return the whole thing.
                        kbd.style.fontSize = kbdObj.kbdDiv.style.fontSize;
                        kbd.style.height = kbdObj.kbdDiv.style.height;
                        kbd.style.maxHeight = kbdObj.kbdDiv.style.maxHeight;
                    }
                    else {
                        kbd.innerHTML = "<p style='color:#c40; font-size:0.5em;margin:10px;'>No " + formFactor + " layout is defined for " + PKbd.name + ".</p>";
                    }
                    // Add a faint border
                    kbd.style.border = '1px solid #ccc';
                    // Once the element is inserted into the DOM, refresh the layout so that proper text scaling may apply.
                    var refreshInterval = window.setInterval(function () {
                        var computedStyle = getComputedStyle(kbd);
                        if (computedStyle.fontSize) {
                            if (kbd.style.fontSize) {
                                // Preserve the new setting (provided by CSS)
                                kbdObj.fontSize = new osk.ParsedLengthStyle(kbd.style.fontSize);
                            }
                            kbdObj.refreshLayout();
                            window.clearInterval(refreshInterval);
                        }
                    }, 10);
                    return kbd;
                };
                VisualKeyboard.prototype.onHide = function () {
                    // Remove highlighting from hide keyboard key, if applied
                    if (this.hkKey) {
                        this.highlightKey(this.hkKey, false);
                    }
                };
                /**
                 * Starts an implementation-specific longpress gesture.  Separately implemented for
                 * in-browser and embedded modes.
                 * @param key The base key of the longpress.
                 * @returns
                 */
                VisualKeyboard.prototype.startLongpress = function (key) {
                    var _this = this;
                    // First-level object/Promise:  will produce a subkey popup when the longpress gesture completes.
                    // 'Returns' a second-level object/Promise:  resolves when a subkey is selected or is cancelled.
                    var pendingLongpress = new osk.browser.PendingLongpress(this, key);
                    pendingLongpress.promise.then(function (subkeyPopup) {
                        // In-browser-specific handling.
                        if (subkeyPopup) {
                            // Append the touch-hold (subkey) array to the OSK
                            var keyman_18 = com.keyman.singleton;
                            keyman_18.osk._Box.appendChild(subkeyPopup.element);
                            keyman_18.osk._Box.appendChild(subkeyPopup.shim);
                            // Must be placed after its `.element` has been inserted into the DOM.
                            subkeyPopup.reposition(_this);
                        }
                    });
                    return pendingLongpress;
                };
                /**
                 * Initializes all supported gestures given a base key and the triggering touch coordinates.
                 * @param key     The gesture's base key
                 * @param touch   The starting touch coordinates for the gesture
                 * @returns
                 */
                VisualKeyboard.prototype.initGestures = function (key, input) {
                    if (key['subKeys']) {
                        var _this_3 = this;
                        var pendingLongpress_1 = this.startLongpress(key);
                        if (pendingLongpress_1 == null) {
                            return;
                        }
                        this.pendingSubkey = pendingLongpress_1;
                        pendingLongpress_1.promise.then(function (subkeyPopup) {
                            if (_this_3.pendingSubkey == pendingLongpress_1) {
                                _this_3.pendingSubkey = null;
                            }
                            if (subkeyPopup) {
                                // Clear key preview if any
                                _this_3.showKeyTip(null, false);
                                _this_3.subkeyGesture = subkeyPopup;
                                subkeyPopup.promise.then(function (keyEvent) {
                                    // Allow active cancellation, even if the source should allow passive.
                                    // It's an easy and cheap null guard.
                                    if (keyEvent) {
                                        osk.PreProcessor.raiseKeyEvent(keyEvent);
                                    }
                                    _this_3.clearPopup();
                                });
                            }
                        });
                    }
                };
                /**
                 * Updates all currently-pending and activated gestures.
                 *
                 * @param currentKey    The key currently underneath the most recent touch coordinate
                 * @param previousKey   The previously-selected key
                 * @param input         The current mouse or touch coordinate for the gesture
                 * @returns true if should fully capture input, false if input should 'fall through'.
                 */
                VisualKeyboard.prototype.updateGestures = function (currentKey, previousKey, input) {
                    var key0 = previousKey;
                    var key1 = currentKey;
                    // Clear previous key highlighting, allow subkey controller to highlight as appropriate.
                    if (this.subkeyGesture) {
                        if (key0) {
                            key0.key.highlight(false);
                        }
                        this.subkeyGesture.updateTouch(input);
                        this.keyPending = null;
                        this.touchPending = null;
                        return true;
                    }
                    this.currentTarget = null;
                    // If popup is visible, need to move over popup, not over main keyboard
                    // Could be turned into a browser-longpress specific implementation within browser.PendingLongpress?
                    if (key1 && key1['subKeys'] != null && this.initTouchCoord) {
                        // Show popup keys immediately if touch moved up towards key array (KMEW-100, Build 353)
                        if ((this.initTouchCoord.y - input.y > 5) && this.pendingSubkey && this.pendingSubkey instanceof osk.browser.PendingLongpress) {
                            this.pendingSubkey.resolve();
                        }
                    }
                    // If there is an active popup menu (which can occur from the previous block),
                    // a subkey popup exists; do not allow base key output.
                    if (this.subkeyGesture) {
                        return true;
                    }
                    return false;
                };
                VisualKeyboard.prototype.optionKey = function (e, keyName, keyDown) {
                    var keyman = com.keyman.singleton;
                    var oskManager = keyman.osk;
                    if (keyDown) {
                        if (keyName.indexOf('K_LOPT') >= 0) {
                            oskManager.showLanguageMenu();
                        }
                        else if (keyName.indexOf('K_ROPT') >= 0) {
                            keyman.uiManager.setActivatingUI(false);
                            oskManager.startHide(true);
                            var active = keyman.domManager.activeElement;
                            if (keyman_17.dom.Utils.instanceof(active, "TouchAliasElement")) {
                                active.hideCaret();
                            }
                            keyman.domManager.lastActiveElement = null;
                        }
                    }
                };
                ;
                /**
                 * Add (or remove) the keytip preview (if KeymanWeb on a phone device)
                 *
                 * @param   {Object}  key   HTML key element
                 * @param   {boolean} on    show or hide
                 */
                VisualKeyboard.prototype.showKeyTip = function (key, on) {
                    var tip = this.keytip;
                    // Do not change the key preview unless key or state has changed
                    if (tip == null || (key == tip.key && on == tip.state)) {
                        return;
                    }
                    var sk = this.subkeyGesture;
                    var popup = (sk && sk.isVisible());
                    // If popup keys are active, do not show the key tip.
                    on = popup ? false : on;
                    tip.show(key, on, this);
                };
                ;
                /**
                 *  Create a key preview element for phone devices
                 */
                VisualKeyboard.prototype.createKeyTip = function () {
                    var keyman = com.keyman.singleton;
                    if (this.device.formFactor == 'phone') {
                        if (this.keytip == null) {
                            // For now, should only be true (in production) when keyman.isEmbedded == true.
                            var constrainPopup = keyman.isEmbedded;
                            this.keytip = new osk.browser.KeyTip(constrainPopup);
                        }
                        // Always append to _Box (since cleared during OSK Load)
                        if (this.keytip && this.keytip.element) {
                            keyman.osk._Box.appendChild(this.keytip.element);
                        }
                    }
                };
                ;
                /**
                 * Wait until font is loaded before applying stylesheet - test each 100 ms
                 * @param   {Object}  kfd   main font descriptor
                 * @param   {Object}  ofd   secondary font descriptor (OSK only)
                 * @return  {boolean}
                 */
                VisualKeyboard.prototype.waitForFonts = function (kfd, ofd) {
                    var keymanweb = com.keyman.singleton;
                    var util = keymanweb.util;
                    var fontDefined = !!(kfd && kfd['files']);
                    kfd = fontDefined ? kfd : undefined;
                    var oskFontDefined = !!(ofd && ofd['files']);
                    ofd = oskFontDefined ? ofd : undefined;
                    // Automatically 'ready' if the descriptor is explicitly `undefined`.
                    // Thus, also covers the case where both are undefined.
                    var kReady = util.checkFontDescriptor(kfd), oReady = util.checkFontDescriptor(ofd);
                    if (kReady && oReady) {
                        return true;
                    }
                    keymanweb.fontCheckTimer = window.setInterval(function () {
                        if (util.checkFontDescriptor(kfd) && util.checkFontDescriptor(ofd)) {
                            window.clearInterval(keymanweb.fontCheckTimer);
                            keymanweb.fontCheckTimer = null;
                            keymanweb.alignInputs();
                        }
                    }, 100);
                    // Align anyway as best as can if font appears to remain uninstalled after 5 seconds
                    window.setTimeout(function () {
                        if (keymanweb.fontCheckTimer) {
                            window.clearInterval(keymanweb.fontCheckTimer);
                            keymanweb.fontCheckTimer = null;
                            keymanweb.alignInputs();
                            // Don't notify - this is a management issue, not anything the user needs to deal with
                            // TODO: Consider having an icon in the OSK with a bubble that indicates missing font
                            //util.alert('Unable to download the font normally used with '+ks['KN']+'.');
                        }
                    }, 5000);
                    return false;
                };
                ;
                VisualKeyboard.prototype.shutdown = function () {
                    var keyman = com.keyman.singleton;
                    // Prevents style-sheet pollution from multiple keyboard swaps.
                    if (this.styleSheet) {
                        keyman.util.removeStyleSheet(this.styleSheet);
                    }
                    if (this.inputEngine) {
                        this.inputEngine.unregisterEventHandlers();
                    }
                };
                // Legacy alias, maintaining a reference for code built against older
                // versions of KMW.
                VisualKeyboard.specialCharacters = osk.OSKKey.specialCharacters;
                return VisualKeyboard;
            }());
            osk.VisualKeyboard = VisualKeyboard;
        })(osk = keyman_17.osk || (keyman_17.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
var com;
(function (com) {
    var keyman;
    (function (keyman_19) {
        var osk;
        (function (osk) {
            /**
             * This class was added to facilitate scroll handling for overflow-x elements, though it could
             * be extended in the future to accept overflow-y if needed.
             *
             * This is necessary because of the OSK's need to use `.preventDefault()` for stability; that
             * same method blocks native handling of overflow scrolling for touch browsers.
             */
            var ScrollState = /** @class */ (function () {
                function ScrollState(coord) {
                    this.totalLength = 0;
                    this.x = coord.x;
                    this.totalLength = 0;
                }
                ScrollState.prototype.updateTo = function (coord) {
                    var x = this.x;
                    this.x = coord.x;
                    var deltas = { deltaX: this.x - x };
                    this.totalLength += Math.abs(deltas.deltaX);
                    return deltas;
                };
                Object.defineProperty(ScrollState.prototype, "hasScrolled", {
                    get: function () {
                        // Allow an accidental fudge-factor for overflow element noise during a touch, but not much.
                        return this.totalLength > ScrollState.HAS_SCROLLED_FUDGE_FACTOR;
                    },
                    enumerable: true,
                    configurable: true
                });
                // The amount of coordinate 'noise' allowed during a scroll-enabled touch allowed
                // before interpreting the currently-ongoing touch command as having scrolled.
                ScrollState.HAS_SCROLLED_FUDGE_FACTOR = 10;
                return ScrollState;
            }());
            var UITouchHandlerBase = /** @class */ (function () {
                function UITouchHandlerBase(baseElement, rowClassMatch, selectedTargetMatch) {
                    this.baseElement = baseElement;
                    this.rowClassMatch = rowClassMatch;
                    this.selectedTargetMatch = selectedTargetMatch;
                }
                /**
                 * Identify the key nearest to (but NOT under) the touch point if at the end of a key row,
                 * but return null more than about 0.6 key width from the nearest key.
                 *
                 *  @param  {Object}  coord   A pre-analyzed input coordinate
                 *  @param  {Object}  t   HTML object at touch point
                 *  @param  {boolean} omitCurrent  Omits any target directly under the touch point.
                 *  @return {Object}      nearest key to touch point
                 *
                 **/
                UITouchHandlerBase.prototype.findTargetFromTouch = function (coord, t, forMove) {
                    var x = coord.x;
                    // Get the UI row beneath touch point (SuggestionBanner div, 'kmw-key-row' if OSK, ...)
                    while (t && t.className !== undefined && t.className.indexOf(this.rowClassMatch) < 0) {
                        t = t.parentNode;
                    }
                    if (!t) {
                        return null;
                    }
                    // Find minimum distance from any key
                    var k, bestMatch = 0, dxMax = 24, dxMin = 100000, x1, x2;
                    for (k = 0; k < t.childNodes.length; k++) {
                        var childNode = t.childNodes[k];
                        if (this.isInvalidTarget(this.findTargetFrom(childNode))) {
                            continue;
                        }
                        x1 = childNode.offsetLeft;
                        x2 = x1 + childNode.offsetWidth;
                        // If it lies completely to the right and is the closest so far
                        var dxRight = x1 - x;
                        if (dxRight >= 0 && dxRight < dxMin) {
                            bestMatch = k;
                            dxMin = dxRight;
                        }
                        // If it lies completely to the left and is the closest so far
                        var dxLeft = x - x2;
                        if (dxLeft >= 0 && dxLeft < dxMin) {
                            bestMatch = k;
                            dxMin = dxLeft;
                        }
                        // If it is neither completely to the left nor completely to the right,
                        // it's under the cursor.  Stop the search!
                        if (dxLeft < 0 && dxRight < 0) {
                            return this.findTargetFrom(childNode);
                        }
                    }
                    if (dxMin < 100000) {
                        t = t.childNodes[bestMatch];
                        x1 = t.offsetLeft;
                        x2 = x1 + t.offsetWidth;
                        // Limit extended touch area to the larger of 0.6 of the potential target's width and 24 px
                        if (t.offsetWidth > 40) {
                            dxMax = 0.6 * t.offsetWidth;
                        }
                        if (((x1 - x) >= 0 && (x1 - x) < dxMax) || ((x - x2) >= 0 && (x - x2) < dxMax)) {
                            return this.findTargetFrom(t);
                        }
                    }
                    return null;
                };
                UITouchHandlerBase.prototype.findBestTarget = function (coord, forMove) {
                    var eventTarget;
                    if (forMove) {
                        var clientX = coord.x + document.body.scrollLeft;
                        var clientY = coord.y + document.body.scrollTop;
                        eventTarget = document.elementFromPoint(clientX, clientY);
                    }
                    else {
                        eventTarget = coord.target;
                    }
                    var target = this.findTargetFrom(eventTarget);
                    // Should refactor this multi-check a bit for more overall reliability.
                    if (!target) {
                        // We didn't find a direct target, so we should look for the closest possible one.
                        // Filters out invalid targets.
                        target = this.findTargetFromTouch(coord, eventTarget, forMove);
                    }
                    return target;
                };
                /**
                 * Reports whether or not a `Target` should be considered invalid.  Needed by the OSK for
                 * hidden keys.
                 * @param target A `Target` element to be validated.
                 */
                UITouchHandlerBase.prototype.isInvalidTarget = function (target) {
                    return false;
                };
                UITouchHandlerBase.prototype.touchStart = function (coord) {
                    // Determine the selected Target, manage state.
                    this.currentTarget = this.findBestTarget(coord);
                    this.touchX = coord.x;
                    this.touchY = coord.y;
                    // If popup stuff, immediately return.
                    this.touchCount = coord.activeInputCount;
                    if (!this.currentTarget) {
                        return;
                    }
                    // Establish scroll tracking.
                    var shouldScroll = (this.currentTarget.clientWidth < this.currentTarget.scrollWidth);
                    this.scrollTouchState = shouldScroll ? new ScrollState(coord) : null;
                    // Alright, Target acquired!  Now to use it:
                    // Highlight the touched key
                    this.highlight(this.currentTarget, true);
                    // If used by the OSK, the special function keys need immediate action
                    // Add a `checkForImmediates()` to facilitate this.
                    if (this.pendingTarget) {
                        this.highlight(this.pendingTarget, false);
                        this.select(this.pendingTarget);
                        this.clearHolds();
                        // Decrement the number of unreleased touch points to prevent
                        // sending the keystroke again when the key is actually released
                        this.touchCount--;
                    }
                    else {
                        // If this key has subkey, start timer to display subkeys after delay, set up release
                        this.hold(this.currentTarget);
                    }
                    this.pendingTarget = this.currentTarget;
                };
                UITouchHandlerBase.prototype.touchEnd = function (coord) {
                    // Prevent incorrect multi-touch behaviour if native or device popup visible
                    var t = this.currentTarget;
                    if (this.isSubmenuActive() || this.hasModalPopup()) {
                        // Ignore release if a multiple touch
                        if (coord.activeInputCount > 0) {
                            return;
                        }
                        // Cancel (but do not execute) pending key if neither a popup key or the base key
                        if (t == null || t.id.indexOf('popup') < 0) {
                            this.highlight(this.pendingTarget, false);
                            this.clearHolds();
                            this.pendingTarget = null;
                        }
                    }
                    // Test if moved off screen (effective release point must be corrected for touch point horizontal speed)
                    // This is not completely effective and needs some tweaking, especially on Android
                    var x = coord.x;
                    var beyondEdge = ((x < 2 && this.touchX > 5) || (x > window.innerWidth - 2 && this.touchX < window.innerWidth - 5));
                    if (this.scrollTouchState) {
                        beyondEdge = beyondEdge || this.scrollTouchState.hasScrolled;
                    }
                    // Save then decrement current touch count
                    var tc = this.touchCount;
                    if (this.touchCount > 0) {
                        this.touchCount--;
                    }
                    // Process and clear highlighting of pending target
                    if (this.pendingTarget) {
                        this.highlight(this.pendingTarget, false);
                        // Output character unless moved off key
                        if (this.pendingTarget.className.indexOf('hidden') < 0 && tc > 0 && !beyondEdge) {
                            this.select(this.pendingTarget);
                        }
                        this.clearHolds();
                        this.pendingTarget = null;
                        // Always clear highlighting of current target on release (multi-touch)
                    }
                    else {
                        t = this.findBestTarget(coord);
                        if (t) {
                            this.highlight(t, false);
                        }
                    }
                };
                /**
                 * OSK touch move event handler
                 *
                 *  @param  {Object}  coord   A pre-analyzed input coordinate
                 *
                 **/
                UITouchHandlerBase.prototype.touchMove = function (coord) {
                    var keyman = com.keyman.singleton;
                    var util = keyman.util;
                    // Do not attempt to support reselection of target key for overlapped keystrokes
                    if (coord.activeInputCount > 1 || this.touchCount == 0) {
                        return;
                    }
                    if (this.currentTarget && this.scrollTouchState != null) {
                        var deltaX = this.scrollTouchState.updateTo(coord).deltaX;
                        this.currentTarget.scrollLeft -= window.devicePixelRatio * deltaX;
                        return;
                    }
                    // Get touch position
                    var y = coord.y;
                    // Move target key and highlighting
                    var key0 = this.pendingTarget, key1 = this.findBestTarget(coord, true); // For the OSK, this ALSO gets subkeys.
                    // If option should not be selectable, how do we re-target?
                    // Do not move over keys if device popup visible
                    if (this.hasModalPopup()) {
                        if (key0) {
                            this.highlight(key0, false);
                        }
                        this.pendingTarget = null;
                        return;
                    }
                    // Use the popup duplicate of the base key if a phone with a visible popup array
                    key1 = this.dealiasSubTarget(key1);
                    // Identify current touch position (to manage off-key release)
                    this.currentTarget = key1;
                    // Clear previous key highlighting
                    if (key0 && key1 && key1 !== key0) {
                        this.highlight(key0, false);
                    }
                    // Code below directly related to subkeys should only be triggered within 'native' mode.
                    // The embedded version instead passes info to the apps to produce their own subkeys in-app.
                    // If popup is visible, need to move over popup, not over main keyboard
                    if (key1 && this.hasSubmenu(key1)) {
                        //this.highlightSubKeys(key1,x,y);
                        // Native-mode: show popup keys immediately if touch moved up towards key array (KMEW-100, Build 353)
                        if (!keyman.isEmbedded && (this.touchY - y > 5) && !this.isSubmenuActive()) {
                            // Instantly show the submenu.
                            this.displaySubmenuFor(key1);
                        }
                        // Once a subkey array is displayed, do not allow changing the base key.
                        // Keep that array visible and accept no other options until the touch ends.
                        if (key1 && key1.id.indexOf('popup') < 0) { // TODO:  reliant on 'popup' in .id
                            return;
                        }
                        // Highlight the base key on devices that do not append it to the subkey array.
                        if (key1 && key1.className.indexOf(this.selectedTargetMatch) < 0) {
                            this.highlight(key1, true);
                        }
                        // Cancel touch if moved up and off keyboard, unless popup keys visible
                    }
                    else {
                        var base = this.baseElement;
                        var top_1 = keyman_19.dom.Utils.getAbsoluteY(base);
                        var height = base.offsetHeight;
                        var yMin = Math.max(5, top_1 - 0.25 * height);
                        var yMax = (top_1 + height) + 0.25 * height;
                        if (key0 && (coord.y < yMin || coord.y > yMax)) {
                            this.highlight(key0, false);
                            this.clearHolds();
                            this.pendingTarget = null;
                        }
                    }
                    // Replace the target key, if any, by the new target key
                    // Do not replace a null target, as that indicates the key has already been released
                    if (key1 && this.pendingTarget) {
                        this.pendingTarget = key1;
                    }
                    if (this.pendingTarget) {
                        if (key1 && (key0 != key1 || key1.className.indexOf(this.selectedTargetMatch) < 0)) {
                            this.highlight(key1, true);
                        }
                    }
                    if (key0 && key1 && (key1 != key0) && (key1.id != '')) {
                        //  Display the touch-hold keys (after a pause)
                        this.hold(key1);
                    }
                };
                return UITouchHandlerBase;
            }());
            osk.UITouchHandlerBase = UITouchHandlerBase;
        })(osk = keyman_19.osk || (keyman_19.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
///<reference path="visualKeyboard.ts" />
///<reference path="uiTouchHandlerBase.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_20) {
        var osk;
        (function (osk) {
            // Base class for a banner above the keyboard in the OSK
            var Banner = /** @class */ (function () {
                function Banner(height) {
                    var keymanweb = com.keyman.singleton;
                    var util = keymanweb.util;
                    var d = util._CreateElement('div');
                    d.id = Banner.BANNER_ID;
                    d.className = Banner.BANNER_CLASS;
                    this.div = d;
                    this.height = height;
                    this.update();
                }
                Object.defineProperty(Banner.prototype, "height", {
                    /**
                     * Function     height
                     * Scope        Public
                     * @returns     {number} height in pixels
                     * Description  Returns the height of the banner in pixels
                     */
                    get: function () {
                        return this._height;
                    },
                    /**
                     * Function     height
                     * Scope        Public
                     * @param       {number} height   the height in pixels
                     * Description  Sets the height of the banner in pixels. If a negative
                     *              height is given, set height to 0 pixels.
                     *              Also updates the banner styling.
                     */
                    set: function (height) {
                        this._height = (height > 0) ? height : 0;
                        this.update();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Function      update
                 * @return       {boolean}   true if the banner styling changed
                 * Description   Update the height and display styling of the banner
                 */
                Banner.prototype.update = function () {
                    var ds = this.div.style;
                    var currentHeightStyle = ds.height;
                    var currentDisplayStyle = ds.display;
                    if (this._height > 0) {
                        ds.height = this._height + 'px';
                        ds.display = 'block';
                    }
                    else {
                        ds.height = '0px';
                        ds.display = 'none';
                    }
                    return (!(currentHeightStyle === ds.height) ||
                        !(currentDisplayStyle === ds.display));
                };
                Banner.prototype.appendStyleSheet = function () {
                    var keymanweb = com.keyman.singleton;
                    var util = keymanweb.util;
                    // TODO: add stylesheets
                };
                /**
                 * Function     getDiv
                 * Scope        Public
                 * @returns     {HTMLElement} Base element of the banner
                 * Description  Returns the HTMLElelemnt of the banner
                 */
                Banner.prototype.getDiv = function () {
                    return this.div;
                };
                /**
                 * Function     activate
                 * Scope        Public
                 * Description  Adds any relevant event listeners needed by this banner type.
                 */
                Banner.prototype.activate = function () {
                    // Default implementation - no listeners.
                };
                /**
                 * Function     activate
                 * Scope        Public
                 * Description  Removes any relevant event listeners previously added by this banner.
                 */
                Banner.prototype.deactivate = function () {
                    // Default implementation - no listeners.
                };
                Banner.DEFAULT_HEIGHT = 37; // pixels; embedded apps can modify
                Banner.BANNER_CLASS = 'kmw-banner-bar';
                Banner.BANNER_ID = 'kmw-banner-bar';
                return Banner;
            }());
            osk.Banner = Banner;
            /**
             * Function       BlankBanner
             * Description    A banner of height 0 that should not be shown
             */
            var BlankBanner = /** @class */ (function (_super) {
                __extends(BlankBanner, _super);
                function BlankBanner() {
                    return _super.call(this, 0) || this;
                }
                return BlankBanner;
            }(Banner));
            osk.BlankBanner = BlankBanner;
            /**
             * Function       ImageBanner
             * @param         {string}        imagePath   Path of image to display in the banner
             * @param         {number}        height      If provided, the height of the banner in pixels
             * Description    Display an image in the banner
             */
            var ImageBanner = /** @class */ (function (_super) {
                __extends(ImageBanner, _super);
                function ImageBanner(imagePath, height) {
                    var _this_1 = this;
                    if (imagePath.length > 0) {
                        _this_1 = _super.call(this) || this;
                        if (height) {
                            _this_1.height = height;
                        }
                    }
                    else {
                        _this_1 = _super.call(this, 0) || this;
                    }
                    if (imagePath.indexOf('base64') >= 0) {
                        console.log("Loading img from base64 data");
                    }
                    else {
                        console.log("Loading img with src '" + imagePath + "'");
                    }
                    _this_1.img = document.createElement('img');
                    _this_1.img.setAttribute('src', imagePath);
                    var ds = _this_1.img.style;
                    ds.width = '100%';
                    ds.height = '100%';
                    _this_1.getDiv().appendChild(_this_1.img);
                    console.log("Image loaded.");
                    return _this_1;
                }
                /**
                 * Function     setImagePath
                 * Scope        Public
                 * @param       {string}     imagePath   Path of image to display in the banner
                 * Description  Update the image in the banner
                 */
                ImageBanner.prototype.setImagePath = function (imagePath) {
                    if (this.img) {
                        this.img.setAttribute('src', imagePath);
                    }
                };
                return ImageBanner;
            }(Banner));
            osk.ImageBanner = ImageBanner;
            var BannerSuggestion = /** @class */ (function () {
                function BannerSuggestion(index) {
                    var keyman = com.keyman.singleton;
                    this.index = index;
                    this.constructRoot();
                    // Provides an empty, base SPAN for text display.  We'll swap these out regularly;
                    // `Suggestion`s will have varying length and may need different styling.
                    var display = this.display = keyman.util._CreateElement('span');
                    this.div.appendChild(display);
                }
                BannerSuggestion.prototype.constructRoot = function () {
                    var keyman = com.keyman.singleton;
                    // Add OSK suggestion labels
                    var div = this.div = keyman.util._CreateElement('div'), ds = div.style;
                    div.className = "kmw-suggest-option";
                    div.id = BannerSuggestion.BASE_ID + this.index;
                    var kbdDetails = keyman.keyboardManager.activeStub;
                    if (kbdDetails) {
                        if (kbdDetails['KLC']) {
                            div.lang = kbdDetails['KLC'];
                        }
                        // Establish base font settings
                        var font = kbdDetails['KFont'];
                        if (font && font.family && font.family != '') {
                            ds.fontFamily = this.fontFamily = font.family;
                        }
                    }
                    // Ensures that a reasonable width % is set.
                    var usableWidth = 100 - SuggestionBanner.MARGIN * (SuggestionBanner.SUGGESTION_LIMIT - 1);
                    var widthpc = usableWidth / SuggestionBanner.SUGGESTION_LIMIT;
                    ds.width = widthpc + '%';
                    this.div['suggestion'] = this;
                };
                Object.defineProperty(BannerSuggestion.prototype, "suggestion", {
                    get: function () {
                        return this._suggestion;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Function update
                 * @param {string}     id           Element ID for the suggestion span
                 * @param {Suggestion} suggestion   Suggestion from the lexical model
                 * Description  Update the ID and text of the BannerSuggestionSpec
                 */
                BannerSuggestion.prototype.update = function (suggestion) {
                    this._suggestion = suggestion;
                    this.updateText();
                };
                BannerSuggestion.prototype.updateText = function () {
                    var display = this.generateSuggestionText();
                    this.div.replaceChild(display, this.display);
                    this.display = display;
                };
                /**
                 * Function apply
                 * @param target (Optional) The OutputTarget to which the `Suggestion` ought be applied.
                 * Description  Applies the predictive `Suggestion` represented by this `BannerSuggestion`.
                 */
                BannerSuggestion.prototype.apply = function (target) {
                    var keyman = com.keyman.singleton;
                    if (this.isEmpty()) {
                        return null;
                    }
                    if (!target) {
                        /* Assume it's the currently-active `OutputTarget`.  We should probably invalidate
                          * everything if/when the active `OutputTarget` changes, though we haven't gotten that
                          * far in implementation yet.
                          */
                        target = keyman_20.dom.Utils.getOutputTarget();
                    }
                    if (this._suggestion.tag == 'revert') {
                        keyman.core.languageProcessor.applyReversion(this._suggestion, target);
                        return null;
                    }
                    else {
                        return keyman.core.languageProcessor.applySuggestion(this.suggestion, target);
                    }
                };
                BannerSuggestion.prototype.isEmpty = function () {
                    return !this._suggestion;
                };
                /**
                 * Function generateSuggestionText
                 * @return {HTMLSpanElement}  Span element of the suggestion
                 * Description   Produces a HTMLSpanElement with the key's actual text.
                 */
                //
                BannerSuggestion.prototype.generateSuggestionText = function () {
                    var keyman = com.keyman.singleton;
                    var util = keyman.util;
                    var suggestion = this._suggestion;
                    var suggestionText;
                    var s = util._CreateElement('span');
                    s.className = 'kmw-suggestion-text';
                    if (suggestion == null) {
                        return s;
                    }
                    if (suggestion.displayAs == null || suggestion.displayAs == '') {
                        suggestionText = '\xa0'; // default:  nbsp.
                    }
                    else {
                        // Default the LTR ordering to match that of the active keyboard.
                        var activeKeyboard = keyman.core.activeKeyboard;
                        var rtl = activeKeyboard && activeKeyboard.isRTL;
                        var orderCode = rtl ? 0x202e /* RTL */ : 0x202d /* LTR */;
                        suggestionText = String.fromCharCode(orderCode) + suggestion.displayAs;
                    }
                    // TODO:  Dynamic suggestion text resizing.  (Refer to OSKKey.getTextWidth in visualKeyboard.ts.)
                    // Finalize the suggestion text
                    s.innerHTML = suggestionText;
                    return s;
                };
                BannerSuggestion.BASE_ID = 'kmw-suggestion-';
                return BannerSuggestion;
            }());
            osk.BannerSuggestion = BannerSuggestion;
            /**
             * Function     SuggestionBanner
             * Scope        Public
             * @param {number} height - If provided, the height of the banner in pixels
             * Description  Display lexical model suggestions in the banner
             */
            var SuggestionBanner = /** @class */ (function (_super) {
                __extends(SuggestionBanner, _super);
                function SuggestionBanner(hostDevice, height) {
                    var _this_1 = _super.call(this, height || Banner.DEFAULT_HEIGHT) || this;
                    _this_1.hostDevice = hostDevice;
                    _this_1.getDiv().className = _this_1.getDiv().className + ' ' + SuggestionBanner.BANNER_CLASS;
                    _this_1.options = new Array();
                    for (var i = 0; i < SuggestionBanner.SUGGESTION_LIMIT; i++) {
                        var d = new BannerSuggestion(i);
                        _this_1.options[i] = d;
                    }
                    /* LTR behavior:  the default (index 0) suggestion should be at the left
                     * RTL behavior:  the default (index 0) suggestion should be at the right
                     *
                     * The cleanest way to make it work - simply invert the order in which
                     * the elements are inserted for RTL.  This allows the banner to be RTL
                     * for visuals/UI while still being internally LTR.
                     */
                    var activeKeyboard = com.keyman.singleton.core.activeKeyboard;
                    var rtl = activeKeyboard && activeKeyboard.isRTL;
                    for (var i = 0; i < SuggestionBanner.SUGGESTION_LIMIT; i++) {
                        var indexToInsert = rtl ? SuggestionBanner.SUGGESTION_LIMIT - i - 1 : i;
                        _this_1.getDiv().appendChild(_this_1.options[indexToInsert].div);
                        if (i != SuggestionBanner.SUGGESTION_LIMIT) {
                            // Adds a 'separator' div element for UI purposes.
                            var separatorDiv = com.keyman.singleton.util._CreateElement('div');
                            separatorDiv.className = 'kmw-banner-separator';
                            var ds = separatorDiv.style;
                            ds.marginLeft = (SuggestionBanner.MARGIN / 2) + '%';
                            ds.marginRight = (SuggestionBanner.MARGIN / 2) + '%';
                            _this_1.getDiv().appendChild(separatorDiv);
                        }
                    }
                    _this_1.manager = new SuggestionManager(_this_1.getDiv(), _this_1.options);
                    _this_1.setupInputHandling();
                    return _this_1;
                }
                SuggestionBanner.prototype.setupInputHandling = function () {
                    var inputEngine;
                    if (this.hostDevice.touchable) { //  /*&& ('ontouchstart' in window)*/ // Except Chrome emulation doesn't set this.
                        // Not to mention, it's rather redundant.
                        inputEngine = osk.TouchEventEngine.forPredictiveBanner(this, this.manager);
                    }
                    else {
                        inputEngine = osk.MouseEventEngine.forPredictiveBanner(this, this.manager);
                    }
                    inputEngine.registerEventHandlers();
                };
                SuggestionBanner.prototype.activate = function () {
                    var keyman = com.keyman.singleton;
                    var manager = this.manager;
                    keyman.core.languageProcessor.addListener('invalidatesuggestions', manager.invalidateSuggestions);
                    keyman.core.languageProcessor.addListener('suggestionsready', manager.updateSuggestions);
                    keyman.core.languageProcessor.addListener('tryaccept', manager.tryAccept);
                    keyman.core.languageProcessor.addListener('tryrevert', manager.tryRevert);
                };
                SuggestionBanner.prototype.postConfigure = function () {
                    var keyman = com.keyman.singleton;
                    // Trigger a null-based initial prediction to kick things off.
                    keyman.core.languageProcessor.predictFromTarget(keyman_20.dom.Utils.getOutputTarget());
                };
                SuggestionBanner.prototype.deactivate = function () {
                    var keyman = com.keyman.singleton;
                    var manager = this.manager;
                    keyman.core.languageProcessor.removeListener('invalidatesuggestions', manager.invalidateSuggestions);
                    keyman.core.languageProcessor.removeListener('suggestionsready', manager.updateSuggestions);
                    keyman.core.languageProcessor.removeListener('tryaccept', manager.tryAccept);
                    keyman.core.languageProcessor.removeListener('tryrevert', manager.tryRevert);
                };
                SuggestionBanner.SUGGESTION_LIMIT = 3;
                SuggestionBanner.MARGIN = 1;
                SuggestionBanner.TOUCHED_CLASS = 'kmw-suggest-touched';
                SuggestionBanner.BANNER_CLASS = 'kmw-suggest-banner';
                return SuggestionBanner;
            }(Banner));
            osk.SuggestionBanner = SuggestionBanner;
            var SuggestionManager = /** @class */ (function (_super) {
                __extends(SuggestionManager, _super);
                function SuggestionManager(div, options) {
                    var _this_1 = 
                    // TODO:  Determine appropriate CSS styling names, etc.
                    _super.call(this, div, Banner.BANNER_CLASS, SuggestionBanner.TOUCHED_CLASS) || this;
                    _this_1.initNewContext = true;
                    _this_1.currentSuggestions = [];
                    _this_1.recentAccept = false;
                    _this_1.swallowPrediction = false;
                    _this_1.doRevert = false;
                    _this_1.recentRevert = false;
                    /**
                     * Receives messages from the keyboard that the 'accept' keystroke has been entered.
                     * Should return 'false' if the current state allows accepting a suggestion and act accordingly.
                     * Otherwise, return true.
                     */
                    _this_1.tryAccept = function (source, returnObj) {
                        var keyman = com.keyman.singleton;
                        if (!this.recentAccept && this.selected) {
                            this.doAccept(this.selected);
                            returnObj.shouldSwallow = true;
                        }
                        else if (this.recentAccept && source == 'space') {
                            this.recentAccept = false;
                            // If the model doesn't insert wordbreaks, don't swallow the space.  If it does, 
                            // we consider that insertion to be the results of the first post-accept space.
                            returnObj.shouldSwallow = !!keyman.core.languageProcessor.wordbreaksAfterSuggestions;
                        }
                        else {
                            returnObj.shouldSwallow = false;
                        }
                    }.bind(_this_1);
                    /**
                     * Receives messages from the keyboard that the 'revert' keystroke has been entered.
                     * Should return 'false' if the current state allows reverting a recently-applied suggestion and act accordingly.
                     * Otherwise, return true.
                     */
                    _this_1.tryRevert = function (returnObj) {
                        // Has the revert keystroke (BKSP) already been sent once since the last accept?
                        if (this.doRevert) {
                            // If so, clear the 'revert' option and start doing normal predictions again.
                            this.doRevert = false;
                            this.recentAccept = false;
                            // Otherwise, did we just accept something before the revert signal was received?
                        }
                        else if (this.recentAccept) {
                            this.showRevert();
                            this.swallowPrediction = true;
                        }
                        // We don't yet actually do key-based reversions.
                        returnObj.shouldSwallow = false;
                        return;
                    }.bind(_this_1);
                    /**
                     * Function invalidateSuggestions
                     * Scope        Public
                     * Description  Clears the suggestions in the suggestion banner
                     */
                    _this_1.invalidateSuggestions = function (source) {
                        // By default, we assume that the context is the same until we notice otherwise.
                        this.initNewContext = false;
                        if (!this.swallowPrediction || source == 'context') {
                            this.recentAccept = false;
                            this.doRevert = false;
                            this.recentRevert = false;
                            if (source == 'context') {
                                this.swallowPrediction = false;
                                this.initNewContext = true;
                            }
                        }
                        this.options.forEach(function (option) {
                            option.update(null);
                        });
                    }.bind(_this_1);
                    /**
                     * Function updateSuggestions
                     * Scope       Public
                     * @param {Suggestion[]}  suggestions   Array of suggestions from the lexical model.
                     * Description    Update the displayed suggestions in the SuggestionBanner
                     */
                    _this_1.updateSuggestions = function (prediction) {
                        var suggestions = prediction.suggestions;
                        this.currentSuggestions = suggestions;
                        // Do we have a keep suggestion?  If so, remove it from the list so that we can control its display position
                        // and prevent it from being hidden after reversion operations.
                        this.keepSuggestion = null;
                        for (var _i = 0, suggestions_1 = suggestions; _i < suggestions_1.length; _i++) {
                            var s = suggestions_1[_i];
                            if (s.tag == 'keep') {
                                this.keepSuggestion = s;
                            }
                        }
                        if (this.keepSuggestion) {
                            this.currentSuggestions.splice(this.currentSuggestions.indexOf(this.keepSuggestion), 1);
                        }
                        // If we've gotten an update request like this, it's almost always user-triggered and means the context has shifted.
                        if (!this.swallowPrediction) {
                            this.recentAccept = false;
                            this.doRevert = false;
                            this.recentRevert = false;
                        }
                        else { // This prediction was triggered by a recent 'accept.'  Now that it's fulfilled, we clear the flag.
                            this.swallowPrediction = false;
                        }
                        // The rest is the same, whether from input or from "self-updating" after a reversion to provide new suggestions.
                        this.doUpdate();
                    }.bind(_this_1);
                    _this_1.options = options;
                    return _this_1;
                }
                //#region Touch handling implementation
                SuggestionManager.prototype.findTargetFrom = function (e) {
                    var keyman = com.keyman.singleton;
                    var util = keyman.util;
                    try {
                        if (e) {
                            if (util.hasClass(e, 'kmw-suggest-option')) {
                                return e;
                            }
                            if (e.parentNode && util.hasClass(e.parentNode, 'kmw-suggest-option')) {
                                return e.parentNode;
                            }
                            // if(e.firstChild && util.hasClass(<HTMLElement> e.firstChild,'kmw-suggest-option')) {
                            //   return e.firstChild as HTMLDivElement;
                            // }
                        }
                    }
                    catch (ex) { }
                    return null;
                };
                SuggestionManager.prototype.highlight = function (t, on) {
                    var classes = t.className;
                    var cs = ' ' + SuggestionBanner.TOUCHED_CLASS;
                    if (t.id.indexOf(BannerSuggestion.BASE_ID) == -1) {
                        console.warn("Cannot find BannerSuggestion object for element to highlight!");
                    }
                    else {
                        // Never highlight an empty suggestion button.
                        var suggestion = this.selected = t['suggestion'];
                        if (suggestion.isEmpty()) {
                            on = false;
                            this.selected = null;
                        }
                    }
                    if (on && classes.indexOf(cs) < 0) {
                        t.className = classes + cs;
                    }
                    else {
                        t.className = classes.replace(cs, '');
                    }
                };
                SuggestionManager.prototype.select = function (t) {
                    this.doAccept(t['suggestion']);
                };
                //#region Long-press support
                SuggestionManager.prototype.hold = function (t) {
                    var suggestionObj = t['suggestion'];
                    // Is this the <keep> suggestion?  It's never in this.currentSuggestions, so check against that.
                    var isCustom = this.currentSuggestions.indexOf(suggestionObj.suggestion) == -1;
                    if (this.platformHold) {
                        // Implemented separately for native + embedded mode branches.
                        // Embedded mode should pass any info needed to show a submenu IMMEDIATELY.
                        this.platformHold(suggestionObj, isCustom); // No implementation yet for native.
                    }
                };
                SuggestionManager.prototype.clearHolds = function () {
                    // Temp, pending implementation of suggestion longpress submenus
                    // - nothing to clear without them -
                    // only really used in native-KMW
                };
                SuggestionManager.prototype.hasModalPopup = function () {
                    // Utilized by the mobile apps; allows them to 'take over' touch handling,
                    // blocking it within KMW when the apps are already managing an ongoing touch-hold.
                    var keyman = com.keyman.singleton;
                    return keyman['osk'].vkbd.subkeyGesture && keyman.isEmbedded;
                };
                SuggestionManager.prototype.dealiasSubTarget = function (target) {
                    return target;
                };
                SuggestionManager.prototype.hasSubmenu = function (t) {
                    // Temp, pending implementation of suggestion longpress submenus
                    // Only really used by native-KMW - see kmwnative's highlightSubKeys func.
                    return false;
                };
                SuggestionManager.prototype.isSubmenuActive = function () {
                    // Temp, pending implementation of suggestion longpress submenus
                    // Utilized only by native-KMW - it parallels hasModalPopup() in purpose.
                    return false;
                };
                SuggestionManager.prototype.displaySubmenuFor = function (target) {
                    // Utilized only by native-KMW to show submenus.
                    throw new Error("Method not implemented.");
                };
                SuggestionManager.prototype.doAccept = function (suggestion) {
                    var _this = this;
                    this.revertAcceptancePromise = suggestion.apply();
                    if (!this.revertAcceptancePromise) {
                        // We get here either if suggestion acceptance fails or if it was a reversion.
                        if (suggestion.suggestion && suggestion.suggestion.tag == 'revert') {
                            // Reversion state management
                            this.recentAccept = false;
                            this.doRevert = false;
                            this.recentRevert = true;
                            this.doUpdate();
                        }
                        return;
                    }
                    this.revertAcceptancePromise.then(function (suggestion) {
                        // Always null-check!
                        if (suggestion) {
                            _this.revertSuggestion = suggestion;
                        }
                    });
                    this.selected = null;
                    this.recentAccept = true;
                    this.doRevert = false;
                    this.recentRevert = false;
                    this.swallowPrediction = true;
                    this.doUpdate();
                };
                SuggestionManager.prototype.showRevert = function () {
                    // Construct a 'revert suggestion' to facilitate a reversion UI component.
                    this.doRevert = true;
                    this.doUpdate();
                };
                SuggestionManager.prototype.activateKeep = function () {
                    return !this.recentAccept && !this.recentRevert && !this.initNewContext;
                };
                SuggestionManager.prototype.doUpdate = function () {
                    var suggestions = [];
                    // Insert 'current text' if/when valid as the leading option.
                    // Since we don't yet do auto-corrections, we only show 'keep' whenever it's
                    // a valid word (according to the model).
                    if (this.activateKeep() && this.keepSuggestion && this.keepSuggestion.matchesModel) {
                        suggestions.push(this.keepSuggestion);
                    }
                    else if (this.doRevert) {
                        suggestions.push(this.revertSuggestion);
                    }
                    suggestions = suggestions.concat(this.currentSuggestions);
                    this.options.forEach(function (option, i) {
                        if (i < suggestions.length) {
                            option.update(suggestions[i]);
                        }
                        else {
                            option.update(null);
                        }
                    });
                };
                return SuggestionManager;
            }(osk.UITouchHandlerBase));
            osk.SuggestionManager = SuggestionManager;
        })(osk = keyman_20.osk || (keyman_20.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="banner.ts" />
/// <reference path="oskViewComponent.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_21) {
        var osk;
        (function (osk) {
            /**
             * The `BannerManager` module is designed to serve as a manager for the
             * different `Banner` types.
             * To facilitate this, it will provide a root element property that serves
             * as a container for any active `Banner`, helping KMW to avoid needless
             * DOM element shuffling.
             *
             * Goals for the `BannerManager`:
             *
             * * It will be exposed as `keyman.osk.banner` and will provide the following API:
             *   * `getOptions`, `setOptions` - refer to the `BannerOptions` class for details.
             *   * This provides a persistent point that the web page designers and our
             *     model apps can utilize and can communicate with.
             *   * These API functions are designed for live use and will allow
             *     _hot-swapping_ the `Banner` instance; they're not initialization-only.
             * * Disabling the `Banner` (even for suggestions) outright with
             *   `enablePredictions == false` will auto-unload any loaded predictive model
             *   from `ModelManager` and setting it to `true` will revert this.
             *   * This should help to avoid wasting computational resources.
             * * It will listen to ModelManager events and automatically swap Banner
             *   instances as appropriate:
             *   * The option `persistentBanner == true` is designed to replicate current
             *     iOS system keyboard behavior.
             *     * When true, an `ImageBanner` will be displayed.
             *     * If false, it will be replaced with a `BlankBanner` of zero height,
             *       corresponding to our current default lack of banner.
             *   * It will not automatically set `persistentBanner == true`;
             *     this must be set by the iOS app, and only under the following conditions:
             *     * `keyman.isEmbedded == true`
             *     * `device.OS == 'ios'`
             *     * Keyman is being used as the system keyboard within an app that
             *       needs to reserve this space (i.e: Keyman for iOS),
             *       rather than as its standalone app.
             */
            var BannerManager = /** @class */ (function () {
                function BannerManager(hostDevice) {
                    this._options = {};
                    this.imagePath = "";
                    // Step 1 - establish the container element.  Must come before this.setOptions.
                    this.constructContainer();
                    this.hostDevice = hostDevice;
                    // Initialize with the default options - 
                    // any 'manually set' options come post-construction.
                    // This will also automatically set the default banner in place.
                    this.setOptions(BannerManager.DEFAULT_OPTIONS);
                }
                /**
                 * Constructs the <div> element used to contain hot-swapped `Banner` instances.
                 */
                BannerManager.prototype.constructContainer = function () {
                    var keymanweb = com.keyman.singleton;
                    var util = keymanweb.util;
                    var d = util._CreateElement('div');
                    d.id = "keymanweb_banner_container";
                    d.className = "kmw-banner-container";
                    return this.bannerContainer = d;
                };
                Object.defineProperty(BannerManager.prototype, "element", {
                    /**
                     * Returns the `Banner`-containing div element used to facilitate hot-swapping.
                     */
                    get: function () {
                        return this.bannerContainer;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * This function corresponds to `keyman.osk.banner.getOptions`.
                 *
                 * Gets the current control settings in use by `BannerManager`.
                 */
                BannerManager.prototype.getOptions = function () {
                    var retObj = {};
                    for (var key in this._options) {
                        retObj[key] = this._options[key];
                    }
                    return retObj;
                };
                /**
                 * This function corresponds to `keyman.osk.banner.setOptions`.
                 *
                 * Sets options used to tweak the automatic `Banner`
                 * control logic used by `BannerManager`.
                 * @param optionSpec An object specifying one or more of the following options:
                 * * `persistentBanner` (boolean) When `true`, ensures that a `Banner`
                 *   is always displayed, even when no predictive model exists
                 *   for the active language.
                 *
                 *   Default: `false`
                 * * `imagePath` (URL string) Specifies the file path to use for an
                 *   `ImageBanner` when `persistentBanner` is `true` and no predictive model exists.
                 *
                 *   Default: `''`.
                 * * `enablePredictions` (boolean) Turns KMW predictions
                 *   on (when `true`) and off (when `false`).
                 *
                 *   Default:  `true`.
                 */
                BannerManager.prototype.setOptions = function (optionSpec) {
                    var keyman = com.keyman.singleton;
                    for (var key in optionSpec) {
                        switch (key) {
                            // Each defined option may require specialized handling.
                            case 'alwaysShow':
                                // Determines the banner type to activate.
                                this.alwaysShow = optionSpec[key];
                                break;
                            case 'mayPredict':
                                // If this toggles our internal flag, it will generate events
                                // that reconfigures the banner (and internal engine state) appropriately.
                                keyman.core.languageProcessor.mayPredict = optionSpec[key];
                                break;
                            case 'mayCorrect':
                                keyman.core.languageProcessor.mayCorrect = optionSpec[key];
                                break;
                            case 'imagePath':
                                // Determines the image file to use for ImageBanners.
                                this.imagePath = optionSpec[key];
                                break;
                            default:
                            // Invalid option specified!
                        }
                        this._options[key] = optionSpec[key];
                        // If no banner instance exists yet, go with a safe, blank initialization.
                        if (!this.activeBanner) {
                            this.selectBanner('inactive');
                        }
                    }
                };
                /**
                 * Applies any stylesheets needed by specific `Banner` instances.
                 */
                BannerManager.prototype.appendStyles = function () {
                    if (this.activeBanner) {
                        this.activeBanner.appendStyleSheet();
                    }
                };
                /**
                 * Sets the active `Banner` to the specified type, regardless of
                 * existing management logic settings.
                 *
                 * @param type `'blank' | 'image' | 'suggestion'` - A plain-text string
                 *        representing the type of `Banner` to set active.
                 * @param height - Optional banner height in pixels.
                 */
                BannerManager.prototype.setBanner = function (type, height) {
                    var banner;
                    switch (type) {
                        case 'blank':
                            banner = new osk.BlankBanner();
                            break;
                        case 'image':
                            banner = new osk.ImageBanner(this.imagePath, osk.Banner.DEFAULT_HEIGHT);
                            break;
                        case 'suggestion':
                            banner = new osk.SuggestionBanner(this.hostDevice, height);
                            break;
                        default:
                            throw new Error("Invalid type specified for the banner!");
                    }
                    this._activeType = type;
                    if (banner) {
                        this._setBanner(banner);
                        banner.activate();
                    }
                };
                /**
                 * Handles `LanguageProcessor`'s `'statechange'` events,
                 * allowing logic to automatically hot-swap `Banner`s as needed.
                 * @param state
                 */
                BannerManager.prototype.selectBanner = function (state) {
                    // Only display a SuggestionBanner when LanguageProcessor states it is active.
                    if (state == 'active') {
                        this.setBanner('suggestion');
                    }
                    else if (state == 'inactive') {
                        if (this.alwaysShow) {
                            this.setBanner('image');
                        }
                        else {
                            this.setBanner('blank');
                        }
                    }
                    else if (state == 'configured') {
                        var suggestionBanner = this.activeBanner;
                        if (suggestionBanner.postConfigure) {
                            // Triggers the initially-displayed suggestions.
                            suggestionBanner.postConfigure();
                        }
                    }
                };
                /**
                 * Internal method used by the public API `setBanner`.  `setBanner`
                 * translates the string parameter into a new instance consumed by this method.
                 * @param banner The `Banner` instance to set as active.
                 */
                BannerManager.prototype._setBanner = function (banner) {
                    if (this.activeBanner) {
                        if (banner == this.activeBanner) {
                            return;
                        }
                        else {
                            var prevBanner = this.activeBanner;
                            prevBanner.deactivate();
                            this.bannerContainer.replaceChild(banner.getDiv(), prevBanner.getDiv());
                        }
                    }
                    this.activeBanner = banner;
                    this.bannerContainer.appendChild(banner.getDiv());
                    // Don't forget to adjust the OSK in case we're now using a blank Banner!
                    // Null guard b/c this function can be trigggered during OSK initialization.
                    var keyman = com.keyman.singleton;
                    if (keyman['osk']) {
                        keyman['osk'].refreshLayout();
                    }
                };
                Object.defineProperty(BannerManager.prototype, "activeType", {
                    get: function () {
                        return this._activeType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BannerManager.prototype, "height", {
                    /**
                     * Gets the height (in pixels) of the active `Banner` instance.
                     */
                    get: function () {
                        if (this.activeBanner) {
                            return this.activeBanner.height;
                        }
                        else {
                            return 0;
                        }
                    },
                    /**
                     * Sets the height (in pixels) of the active 'Banner' instance.
                     */
                    set: function (h) {
                        if (this.activeBanner) {
                            this.activeBanner.height = h;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BannerManager.prototype, "layoutHeight", {
                    get: function () {
                        return osk.ParsedLengthStyle.inPixels(this.height);
                    },
                    enumerable: true,
                    configurable: true
                });
                BannerManager.prototype.refreshLayout = function () { };
                ;
                BannerManager.DEFAULT_OPTIONS = {
                    alwaysShow: false,
                    mayPredict: true,
                    mayCorrect: true,
                    imagePath: ""
                };
                return BannerManager;
            }());
            osk.BannerManager = BannerManager;
        })(osk = keyman_21.osk || (keyman_21.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="keyboardView.interface.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var HelpPageView = /** @class */ (function () {
                function HelpPageView(keyboard) {
                    this.kbd = keyboard;
                    var Ldiv = this.element = document.createElement('div');
                    Ldiv.style.userSelect = "none";
                    Ldiv.className = 'kmw-osk-static';
                    Ldiv.id = HelpPageView.ID;
                    Ldiv.innerHTML = keyboard.helpText;
                }
                HelpPageView.prototype.postInsert = function () {
                    if (!this.element.parentElement || !document.getElementById(HelpPageView.ID)) {
                        throw new Error("The HelpPage root element has not yet been inserted into the DOM.");
                    }
                    if (this.kbd.hasScript) {
                        // .parentElement:  ensure this matches the _Box element from OSKManager / OSKView
                        // Not a hard requirement for any known keyboards, but is asserted by legacy docs.
                        this.kbd.embedScript(this.element.parentElement);
                    }
                };
                HelpPageView.prototype.updateState = function () { };
                HelpPageView.prototype.refreshLayout = function () { };
                Object.defineProperty(HelpPageView.prototype, "layoutHeight", {
                    get: function () {
                        return osk.ParsedLengthStyle.inPercent(100);
                    },
                    enumerable: true,
                    configurable: true
                });
                HelpPageView.ID = 'kmw-osk-help-page';
                return HelpPageView;
            }());
            osk.HelpPageView = HelpPageView;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/// <reference path="keyboardView.interface.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var EmptyView = /** @class */ (function () {
                function EmptyView() {
                    var Ldiv = this.element = document.createElement('div');
                    Ldiv.style.userSelect = 'none';
                    Ldiv.className = 'kmw-osk-none';
                }
                // No operations needed; this is a stand-in for the desktop OSK when no keyboard is active.
                EmptyView.prototype.postInsert = function () { };
                EmptyView.prototype.updateState = function () { };
                EmptyView.prototype.refreshLayout = function () { };
                Object.defineProperty(EmptyView.prototype, "layoutHeight", {
                    get: function () {
                        return osk.ParsedLengthStyle.inPixels(0);
                    },
                    enumerable: true,
                    configurable: true
                });
                return EmptyView;
            }());
            osk.EmptyView = EmptyView;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes the banner
/// <reference path="./bannerManager.ts" />
// Generates the visual keyboard specific to each keyboard.  (class="kmw-osk-inner-frame")
/// <reference path="visualKeyboard.ts" />
// Models keyboards that present a help page, rather than a standard OSK.
/// <reference path="helpPageView.ts" />
/// <reference path="emptyView.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_22) {
        var osk;
        (function (osk) {
            var ActivationMode;
            (function (ActivationMode) {
                ActivationMode["static"] = "static";
                ActivationMode["manual"] = "manual";
                ActivationMode["automatic"] = "automatic";
            })(ActivationMode = osk.ActivationMode || (osk.ActivationMode = {}));
            var OSKView = /** @class */ (function () {
                function OSKView(deviceSpec, hostDevice) {
                    this.needsLayout = true;
                    //
                    this._activationMode = ActivationMode.automatic;
                    this._displayIfActive = true;
                    this.layerChangeHandler = function (source, newValue) {
                        // This handler is also triggered on state-key state changes (K_CAPS) that
                        // may not actually change the layer.
                        if (this.vkbd) {
                            this.vkbd._UpdateVKShiftStyle();
                        }
                        if (source.value != newValue) {
                            // Prevents console errors when a keyboard only displays help.
                            // Can occur when using SHIFT with sil_euro_latin on a desktop form-factor.
                            if (this.vkbd) {
                                this.vkbd.layerId = newValue;
                                // Ensure that the layer's spacebar is properly captioned.
                                this.vkbd.showLanguage();
                            }
                            // Ensure the keyboard view is modeling the correct state.  (Correct layer, etc.)
                            this.keyboardView.updateState();
                            this.refreshLayoutIfNeeded();
                        }
                    }.bind(this);
                    // OSK state fields & events
                    //
                    // These are relatively stable and may be preserved as they are.
                    this._Visible = false;
                    this.device = deviceSpec;
                    if (!hostDevice) {
                        hostDevice = deviceSpec;
                    }
                    this.hostDevice = hostDevice;
                    // OSK initialization - create DIV and set default styles
                    this._Box = document.createElement('div'); // Container for OSK (Help DIV, displayed when user clicks Help icon)
                    this._Box.style.userSelect = 'none';
                    // Initializes the two constant OSKComponentView fields.
                    this.bannerView = new osk.BannerManager(this.hostDevice);
                    this.keyboardView = null;
                    var keymanweb = com.keyman.singleton;
                    var util = keymanweb.util;
                    // Install the default OSK stylesheet
                    util.linkStyleSheet(keymanweb.getStyleSheetPath('kmwosk.css'));
                    this.setBaseMouseEventListeners();
                    if (hostDevice.touchable) {
                        this.setBaseTouchEventListeners();
                    }
                    // Register a listener for model change events so that we can hot-swap the banner as needed.
                    // Handled here b/c banner changes may trigger a need to re-layout the OSK.
                    var _this = this;
                    keymanweb.core.languageProcessor.on('statechange', function (state) {
                        var currentType = _this.bannerView.activeType;
                        _this.bannerView.selectBanner(state);
                        if (currentType != _this.bannerView.activeType) {
                            _this.refreshLayout();
                        }
                        return true;
                    });
                }
                OSKView.prototype.setBaseMouseEventListeners = function () {
                    var keymanweb = com.keyman.singleton;
                    this._boxBaseMouseDown = function (e) {
                        keymanweb.uiManager.setActivatingUI(true);
                        return false;
                    };
                    this._Box.addEventListener('mousedown', this._boxBaseMouseDown, false);
                };
                OSKView.prototype.removeBaseMouseEventListeners = function () {
                    if (this._boxBaseMouseDown) {
                        this._Box.removeEventListener('mousedown', this._boxBaseMouseDown, false);
                        this._boxBaseMouseDown = null;
                    }
                };
                OSKView.prototype.setBaseTouchEventListeners = function () {
                    // And to prevent touch event default behaviour on mobile devices
                    var keymanweb = com.keyman.singleton;
                    var cancelEventFunc = this._boxBaseTouchEventCancel = function (e) {
                        if (e.cancelable) {
                            e.preventDefault();
                        }
                        e.stopPropagation();
                        return false;
                    };
                    this._boxBaseTouchStart = function (e) {
                        keymanweb.uiManager.setActivatingUI(true);
                        return cancelEventFunc(e);
                    };
                    this._Box.addEventListener('touchstart', this._boxBaseTouchStart, false);
                    this._Box.addEventListener('touchmove', this._boxBaseTouchEventCancel, false);
                    this._Box.addEventListener('touchend', this._boxBaseTouchEventCancel, false);
                    this._Box.addEventListener('touchcancel', this._boxBaseTouchEventCancel, false);
                };
                OSKView.prototype.removeBaseTouchEventListeners = function () {
                    if (!this._boxBaseTouchEventCancel) {
                        return;
                    }
                    this._Box.removeEventListener('touchstart', this._boxBaseTouchStart, false);
                    this._Box.removeEventListener('touchmove', this._boxBaseTouchEventCancel, false);
                    this._Box.removeEventListener('touchend', this._boxBaseTouchEventCancel, false);
                    this._Box.removeEventListener('touchcancel', this._boxBaseTouchEventCancel, false);
                    this._boxBaseTouchEventCancel = null;
                    this._boxBaseTouchStart = null;
                };
                Object.defineProperty(OSKView.prototype, "activeTarget", {
                    /**
                     * Gets and sets the IME-like interface (`OutputTarget`) to be affected by events from
                     * the OSK.
                     *
                     * If `activationMode` is `'conditional'`, this property's state controls the visibility
                     * of the OSKView.
                     */
                    get: function () {
                        return this._target;
                    },
                    set: function (targ) {
                        // If already null & set to null again, take no action.
                        if (this._target == null && targ == null) {
                            return;
                        }
                        this._target = targ;
                        this.commonCheckAndDisplay();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "targetDevice", {
                    get: function () {
                        return this.device;
                    },
                    set: function (spec) {
                        if (this.allowsDeviceChange(spec)) {
                            this.device = spec;
                            this.loadActiveKeyboard();
                        }
                        else {
                            console.error("May not change target device for this OSKView type.");
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                OSKView.prototype.allowsDeviceChange = function (newSpec) {
                    return false;
                };
                Object.defineProperty(OSKView.prototype, "activationMode", {
                    /**
                     * Determines the activation state model used to control presentation of the OSK.
                     * - `'conditional'`:  Only displays if `activeTarget` is non-null - if there is an active
                     * target that can receive the OSK's context-manipulation events.
                     * - `'manual'`:  Display is directly controlled by manipulating the value of `displayIfActive`.
                     *   It may be displayed while `activeTarget` is `null`.
                     * - `'static'`:  The OSK should be permanently displayed and may never be hidden.
                     */
                    get: function () {
                        if (!this._activationMode) {
                            this._activationMode = ActivationMode.automatic;
                        }
                        return this._activationMode;
                    },
                    set: function (mode) {
                        this._activationMode = mode;
                        this.commonCheckAndDisplay();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "activationConditionsMet", {
                    /**
                     * Implementation of the activation modeling described in the documentation for
                     * `activationMode`.
                     */
                    get: function () {
                        switch (this.activationMode) {
                            case 'manual':
                                return true;
                            case 'static':
                                return true;
                            case 'automatic':
                                return !!this.activeTarget;
                            default:
                                console.error("Unexpected activation mode set for the OSK.");
                                return false;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "displayIfActive", {
                    /**
                     * A property denoting whether or not the OSK should be presented if it meets its
                     * activation conditions.
                     *
                     * When `activationMode == 'manual'`, `displayIfActive == true` is the lone
                     * activation condition.
                     *
                     * Note: cannot be set to `false` if `activationMode == 'static'`.
                     */
                    get: function () {
                        return this._displayIfActive;
                    },
                    set: function (flag) {
                        var _a;
                        if (this.displayIfActive == flag) {
                            return;
                        }
                        // if is touch device or is CJK keyboard, this.displayIfActive must remain true.
                        if (((_a = this.keyboard) === null || _a === void 0 ? void 0 : _a.isCJK) && !flag) {
                            console.warn("Cannot hide display of OSK for CJK keyboards.");
                            flag = true;
                        }
                        else if (this.hostDevice.touchable && !flag) {
                            console.warn("Cannot hide display of OSK when hosted on touch-based devices.");
                            flag = true;
                        }
                        else if (this.activationMode == 'static') {
                            // Silently fail; it's a documentation keyboard.
                            // This is the primary difference between 'manual' and 'static'.
                            flag = true;
                        }
                        this._displayIfActive = flag;
                        this.commonCheckAndDisplay();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Used by the activation & visibility properties as a common helper; all of their
                 * setters rely on this function to manage presentation (showing / hiding) of the OSK.
                 */
                OSKView.prototype.commonCheckAndDisplay = function () {
                    if (this.activationConditionsMet && this.displayIfActive) {
                        this.present();
                    }
                    else {
                        this.startHide(false);
                    }
                };
                Object.defineProperty(OSKView.prototype, "vkbd", {
                    get: function () {
                        if (this.keyboardView instanceof osk.VisualKeyboard) {
                            return this.keyboardView;
                        }
                        else {
                            return null;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "banner", {
                    get: function () {
                        return this.bannerView;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "width", {
                    /**
                     * The configured width for this VisualKeyboard.  May be `undefined` or `null`
                     * to allow automatic width scaling.
                     */
                    get: function () {
                        return this._width;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "height", {
                    /**
                     * The configured height for this VisualKeyboard.  May be `undefined` or `null`
                     * to allow automatic height scaling.
                     */
                    get: function () {
                        return this._height;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "computedWidth", {
                    /**
                     * The computed width for this VisualKeyboard.  May be null if auto sizing
                     * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.
                     */
                    get: function () {
                        // Computed during layout operations; allows caching instead of continuous recomputation.
                        if (this.needsLayout) {
                            this.refreshLayout();
                        }
                        return this._computedWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "computedHeight", {
                    /**
                     * The computed height for this VisualKeyboard.  May be null if auto sizing
                     * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.
                     */
                    get: function () {
                        // Computed during layout operations; allows caching instead of continuous recomputation.
                        if (this.needsLayout) {
                            this.refreshLayout();
                        }
                        return this._computedHeight;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "baseFontSize", {
                    /**
                     * The top-level style string for the font size used by the predictive banner
                     * and the primary keyboard visualization elements.
                     */
                    get: function () {
                        var _a;
                        return ((_a = this.parsedBaseFontSize) === null || _a === void 0 ? void 0 : _a.styleString) || '';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(OSKView.prototype, "parsedBaseFontSize", {
                    get: function () {
                        if (!this._baseFontSize) {
                            var keymanweb = com.keyman.singleton;
                            this._baseFontSize = this.defaultFontSize(this.device, keymanweb.isEmbedded);
                        }
                        return this._baseFontSize;
                    },
                    enumerable: true,
                    configurable: true
                });
                OSKView.prototype.defaultFontSize = function (device, isEmbedded) {
                    if (device.touchable) {
                        var fontScale = 1;
                        if (device.formFactor == 'phone') {
                            fontScale = 1.6 * (isEmbedded ? 0.65 : 0.6) * 1.2; // Combines original scaling factor with one previously applied to the layer group.
                        }
                        else {
                            // The following is a *temporary* fix for small format tablets, e.g. PendoPad
                            var pixelRatio = 1;
                            if (device.OS == 'android' && 'devicePixelRatio' in window) {
                                pixelRatio = window.devicePixelRatio;
                            }
                            var defaultHeight = this.bannerView.height + this.getDefaultKeyboardHeight();
                            if (device.OS == 'android' && device.formFactor == 'tablet' && defaultHeight < 300 * pixelRatio) {
                                fontScale *= 1.2;
                            }
                            else {
                                fontScale *= 2; //'2.5em';
                            }
                        }
                        // Finalize the font size parameter.
                        return osk.ParsedLengthStyle.special(fontScale, 'em');
                    }
                    else {
                        return this.computedHeight ? osk.ParsedLengthStyle.inPixels(this.computedHeight / 8) : undefined;
                    }
                };
                Object.defineProperty(OSKView.prototype, "activeKeyboard", {
                    get: function () {
                        return this.keyboard;
                    },
                    set: function (keyboard) {
                        var _a;
                        this.keyboard = keyboard;
                        this.loadActiveKeyboard();
                        if ((_a = this.keyboard) === null || _a === void 0 ? void 0 : _a.isCJK) {
                            this.displayIfActive = true;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                OSKView.prototype.computeFrameHeight = function () {
                    var _a, _b;
                    return (((_a = this.headerView) === null || _a === void 0 ? void 0 : _a.layoutHeight.val) || 0) + (((_b = this.footerView) === null || _b === void 0 ? void 0 : _b.layoutHeight.val) || 0);
                };
                OSKView.prototype.setSize = function (width, height, pending) {
                    var mutatedFlag = false;
                    var parsedWidth;
                    var parsedHeight;
                    if (!width && width !== 0) {
                        return;
                    }
                    if (!height && height !== 0) {
                        return;
                    }
                    if (Number.isInteger(width)) {
                        parsedWidth = osk.ParsedLengthStyle.inPixels(width);
                    }
                    else {
                        parsedWidth = new osk.ParsedLengthStyle(width);
                    }
                    if (Number.isInteger(height)) {
                        parsedHeight = osk.ParsedLengthStyle.inPixels(height);
                    }
                    else {
                        parsedHeight = new osk.ParsedLengthStyle(height);
                    }
                    if (width && height) {
                        mutatedFlag = !this._width || !this._height;
                        mutatedFlag = mutatedFlag || parsedWidth.styleString != this._width.styleString;
                        mutatedFlag = mutatedFlag || parsedHeight.styleString != this._height.styleString;
                        this._width = parsedWidth;
                        this._height = parsedHeight;
                    }
                    this.needsLayout = this.needsLayout || mutatedFlag;
                    this.refreshLayoutIfNeeded(pending);
                };
                OSKView.prototype.setNeedsLayout = function () {
                    this.needsLayout = true;
                };
                OSKView.prototype.refreshLayout = function (pending) {
                    var _a, _b;
                    if (!this.keyboardView) {
                        return;
                    }
                    // Step 1:  have the necessary conditions been met?
                    var fixedSize = this.width && this.height && this.width.absolute && this.height.absolute;
                    var computedStyle = getComputedStyle(this._Box);
                    var isInDOM = computedStyle.height != '' && computedStyle.height != 'auto';
                    // Step 2:  determine basic layout geometry
                    if (fixedSize) {
                        this._computedWidth = this.width.val;
                        this._computedHeight = this.height.val;
                    }
                    else if (isInDOM) {
                        var parent_1 = this._Box.offsetParent;
                        this._computedWidth = this.width.val * (this.width.absolute ? 1 : parent_1.offsetWidth);
                        this._computedHeight = this.height.val * (this.height.absolute ? 1 : parent_1.offsetHeight);
                    }
                    else {
                        // Cannot perform layout operations!
                        return;
                    }
                    // Must be set before any references to the .computedWidth and .computedHeight properties!
                    this.needsLayout = false;
                    // Step 3:  perform layout operations.
                    if (!this._baseFontSize && this.parsedBaseFontSize) {
                        // Make sure to initialize the default font size if it hasn't already been set!
                        this.banner.element.style.fontSize = this.baseFontSize;
                        if (this.vkbd) {
                            this.vkbd.fontSize = this.parsedBaseFontSize;
                        }
                    }
                    if (!pending) {
                        (_a = this.headerView) === null || _a === void 0 ? void 0 : _a.refreshLayout();
                        this.bannerView.refreshLayout();
                        (_b = this.footerView) === null || _b === void 0 ? void 0 : _b.refreshLayout();
                    }
                    if (this.vkbd) {
                        var availableHeight = this.computedHeight - this.computeFrameHeight();
                        // +5:  from kmw-banner-bar's 'top' attribute when active
                        if (this.bannerView.height > 0) {
                            availableHeight -= this.bannerView.height + 5;
                        }
                        this.vkbd.setSize(this.computedWidth, availableHeight, pending);
                        var bs = this._Box.style;
                        // OSK size settings can only be reliably applied to standard VisualKeyboard
                        // visualizations, not to help text or empty views.
                        bs.width = bs.maxWidth = this.computedWidth + 'px';
                        bs.height = bs.maxHeight = this.computedHeight + 'px';
                    }
                    else {
                        var bs = this._Box.style;
                        bs.width = 'auto';
                        bs.height = 'auto';
                        bs.maxWidth = bs.maxHeight = '';
                    }
                    var keyman = com.keyman.singleton;
                    keyman.alignInputs();
                };
                OSKView.prototype.refreshLayoutIfNeeded = function (pending) {
                    if (this.needsLayout) {
                        this.refreshLayout(pending);
                    }
                };
                /**
                 * Function     _Load
                 * Scope        Private
                 * Description  OSK initialization when keyboard selected
                 */
                OSKView.prototype._Load = function () {
                    var keymanweb = com.keyman.singleton;
                    this.activeKeyboard = keymanweb.core.activeKeyboard;
                };
                OSKView.prototype.loadActiveKeyboard = function () {
                    this.setBoxStyling();
                    if (this.vkbd) {
                        this.vkbd.shutdown();
                    }
                    this.keyboardView = null;
                    this.needsLayout = true;
                    // Instantly resets the OSK container, erasing / delinking the previously-loaded keyboard.
                    this._Box.innerHTML = '';
                    // Any event-cancelers would go here, after the innerHTML reset.
                    // Add header element to OSK only for desktop browsers
                    if (this.headerView) {
                        this._Box.appendChild(this.headerView.element);
                    }
                    // Add suggestion banner bar to OSK
                    this._Box.appendChild(this.banner.element);
                    var kbdView = this.keyboardView = this._GenerateKeyboardView(this.activeKeyboard);
                    this._Box.appendChild(kbdView.element);
                    kbdView.postInsert();
                    // Add footer element to OSK only for desktop browsers
                    if (this.footerView) {
                        this._Box.appendChild(this.footerView.element);
                    }
                    // END:  construction of the actual internal layout for the overall OSK
                    // Correct the classname for the (inner) OSK frame (Build 360)
                    var kbdID = (this.activeKeyboard ? this.activeKeyboard.id.replace('Keyboard_', '') : '');
                    if (kbdID.indexOf('::') != -1) { // We used to also test if we were in embedded mode, but... whatever.
                        // De-namespaces the ID for use with CSS classes.
                        // Assumes that keyboard IDs may not contain the ':' symbol.
                        kbdID = kbdID.substring(kbdID.indexOf('::') + 2);
                    }
                    var kbdClassSuffix = ' kmw-keyboard-' + kbdID;
                    kbdView.element.className = kbdView.element.className + kbdClassSuffix;
                    this.banner.appendStyles();
                    if (this.vkbd) {
                        // Create the key preview (for phones)
                        this.vkbd.createKeyTip();
                        // Append a stylesheet for this keyboard for keyboard specific styles
                        // or if needed to specify an embedded font
                        this.vkbd.appendStyleSheet();
                    }
                    this.postKeyboardLoad();
                };
                OSKView.prototype._GenerateKeyboardView = function (keyboard) {
                    var device = this.device;
                    if (this.vkbd) {
                        this.vkbd.shutdown();
                    }
                    this._Box.className = "";
                    // Case 1:  since we hide the system keyboard on touch devices, we need
                    //          to display SOMETHING that can accept input.
                    if (keyboard == null && !device.touchable) {
                        // We do not (currently) allow selecting the default system keyboard on
                        // touch form-factors.  Likely b/c mnemonic difficulties.
                        return new osk.EmptyView();
                    }
                    else {
                        // Generate a visual keyboard from the layout (or layout default)
                        // Condition is false if no key definitions exist, formFactor == desktop, AND help text exists.  All three.
                        if (keyboard && keyboard.layout(device.formFactor)) {
                            return this._GenerateVisualKeyboard(keyboard);
                        }
                        else if (!keyboard /* && device.touchable (implied) */) {
                            // Show a basic, "hollow" OSK that at least allows input, since we're
                            // on a touch device and hiding the system keyboard
                            return this._GenerateVisualKeyboard(null);
                        }
                        else {
                            // A keyboard help-page or help-text is still a visualization, even not a standard OSK.
                            return new osk.HelpPageView(keyboard);
                        }
                    }
                };
                /**
                 * Function     _GenerateVisualKeyboard
                 * Scope        Private
                 * @param       {Object}      keyboard    The keyboard to visualize
                 * Description  Generates the visual keyboard element and attaches it to KMW
                 */
                OSKView.prototype._GenerateVisualKeyboard = function (keyboard) {
                    var device = this.device;
                    // Root element sets its own classes, one of which is 'kmw-osk-inner-frame'.
                    var vkbd = new osk.VisualKeyboard(keyboard, device, this.hostDevice);
                    // Ensure the OSK's current layer is kept up to date.
                    var core = com.keyman.singleton.core; // Note:  will eventually be a class field.
                    core.keyboardProcessor.layerStore.handler = this.layerChangeHandler;
                    // Set box class - OS and keyboard added for Build 360
                    this._Box.className = device.formFactor + ' ' + device.OS.toLowerCase() + ' kmw-osk-frame';
                    // Add primary keyboard element to OSK
                    return vkbd;
                };
                /**
                 * The main function for presenting the OSKView.
                 *
                 * This includes:
                 * - refreshing its layout
                 * - displaying it
                 * - positioning it
                 */
                OSKView.prototype.present = function () {
                    // Do not try to display OSK if no active element
                    if (!this.mayShow()) {
                        return;
                    }
                    // Ensure the keyboard view is modeling the correct state.  (Correct layer, etc.)
                    this.keyboardView.updateState();
                    this._Box.style.display = 'block'; // Is 'none' when hidden.
                    // First thing after it's made visible.
                    this.refreshLayoutIfNeeded();
                    if (this.keyboardView instanceof osk.VisualKeyboard) {
                        this.keyboardView.showLanguage();
                    }
                    this._Visible = true;
                    /* In case it's still '0' from a hide() operation.
                     *
                     * (Opacity is only modified when device.touchable = true,
                     * though a couple of extra conditions may apply.)
                     */
                    this._Box.style.opacity = '1';
                    // If OSK still hidden, make visible only after all calculation finished
                    if (this._Box.style.visibility == 'hidden') {
                        var _this_4 = this;
                        window.setTimeout(function () {
                            _this_4._Box.style.visibility = 'visible';
                        }, 0);
                    }
                    this.setDisplayPositioning();
                };
                /**
                 * Method used to start a potentially-asynchronous hide of the OSK.
                 * @param hiddenByUser `true` if this hide operation was directly requested by the user.
                 */
                OSKView.prototype.startHide = function (hiddenByUser) {
                    var _a;
                    if (!this.mayHide(hiddenByUser)) {
                        return;
                    }
                    if (hiddenByUser) {
                        // The one location outside of the `displayIfActive` property that bypasses the setter.
                        // Avoids needless recursion that could be triggered by it, as we're already in the
                        // process of hiding the OSK anyway.
                        this._displayIfActive = ((this.keyboard.isCJK || this.hostDevice.touchable) ? true : false); // I3363 (Build 301)
                    }
                    var promise = null;
                    if (this._Box && this.hostDevice.touchable && !(this.keyboardView instanceof osk.EmptyView)) {
                        /**
                         * Note:  this refactored code appears to reflect a currently-dead code path.  14.0's
                         * equivalent is either extremely niche or is actually inaccessible.
                         */
                        promise = this.useHideAnimation();
                    }
                    else {
                        promise = Promise.resolve(true);
                    }
                    var _this = this;
                    promise.then(function (shouldHide) {
                        if (shouldHide) {
                            _this.finalizeHide();
                        }
                    });
                    // Allow UI to execute code when hiding the OSK
                    var p = {};
                    p['HiddenByUser'] = hiddenByUser;
                    this.doHide(p);
                    // If hidden by the UI, be sure to restore the focus
                    if (hiddenByUser && this.activeTarget instanceof keyman_22.dom.targets.OutputTarget) {
                        (_a = this.activeTarget) === null || _a === void 0 ? void 0 : _a.focus();
                    }
                };
                /**
                 * Performs the _actual_ logic and functionality involved in hiding the OSK.
                 */
                OSKView.prototype.finalizeHide = function () {
                    if (document.body.className.indexOf('osk-always-visible') >= 0) {
                        return;
                    }
                    if (this._Box) {
                        var bs = this._Box.style;
                        bs.display = 'none';
                        bs.transition = '';
                        bs.opacity = '1';
                        this._Visible = false;
                    }
                    if (this.vkbd) {
                        this.vkbd.onHide();
                    }
                };
                /**
                 *
                 * @returns `false` if the OSK is in an invalid state for being presented to the user.
                 */
                OSKView.prototype.mayShow = function () {
                    if (!this.activationConditionsMet) {
                        return false;
                    }
                    // Never display the OSK for desktop browsers unless KMW element is focused, and a keyboard selected
                    if (!this.keyboardView || this.keyboardView instanceof osk.EmptyView || !this.displayIfActive) {
                        return false;
                    }
                    if (!this._Box) {
                        return false;
                    }
                    return true;
                };
                /**
                 *
                 * @param hiddenByUser
                 * @returns `false` if the OSK is in an invalid state for being hidden from the user.
                 */
                OSKView.prototype.mayHide = function (hiddenByUser) {
                    if (this.activationMode != 'automatic' && this.displayIfActive) {
                        return false;
                    }
                    if (!hiddenByUser && this.hostDevice.formFactor == 'desktop') {
                        //Allow desktop OSK to remain visible on blur if body class set
                        if (document.body.className.indexOf('osk-always-visible') >= 0) {
                            return false;
                        }
                    }
                    return true;
                };
                /**
                 * Applies CSS styling and handling needed to perform a fade animation when
                 * hiding the OSK.
                 *
                 * Note:  currently reflects an effectively-dead code path, though this is
                 * likely not intentional.  Other parts of the KMW engine seem to call hideNow()
                 * synchronously after each and every part of the engine that calls this function,
                 * cancelling the Promise.
                 *
                 * @returns A Promise denoting either cancellation of the hide (`false`) or
                 * completion of the hide & its animation (`true`)
                 */
                OSKView.prototype.useHideAnimation = function () {
                    var os = this._Box.style;
                    var _this = this;
                    return new Promise(function (resolve) {
                        var cleanup = function () {
                            // TODO(lowpri): attach event listeners on create and leave them there
                            _this._Box.removeEventListener('transitionend', cleanup, false);
                            _this._Box.removeEventListener('webkitTransitionEnd', cleanup, false);
                            _this._Box.removeEventListener('transitioncancel', cleanup, false);
                            _this._Box.removeEventListener('webkitTransitionCancel', cleanup, false);
                            if (_this._animatedHideTimeout != 0) {
                                window.clearTimeout(_this._animatedHideTimeout);
                            }
                            _this._animatedHideTimeout = 0;
                            if (_this._Visible && _this.activationConditionsMet) {
                                // Leave opacity alone and clear transition if another element activated
                                os.transition = '';
                                os.opacity = '1';
                                resolve(false);
                                return false;
                            }
                            else {
                                resolve(true);
                                return true;
                            }
                        }, startup = function () {
                            _this._Box.removeEventListener('transitionrun', startup, false);
                            _this._Box.removeEventListener('webkitTransitionRun', startup, false);
                            _this._Box.addEventListener('transitionend', cleanup, false);
                            _this._Box.addEventListener('webkitTransitionEnd', cleanup, false);
                            _this._Box.addEventListener('transitioncancel', cleanup, false);
                            _this._Box.addEventListener('webkitTransitionCancel', cleanup, false);
                        };
                        _this._Box.addEventListener('transitionrun', startup, false);
                        _this._Box.addEventListener('webkitTransitionRun', startup, false);
                        os.transition = 'opacity 0.5s linear 0';
                        os.opacity = '0';
                        // Cannot hide the OSK smoothly using a transitioned drop, since for
                        // position:fixed elements transitioning is incompatible with translate3d(),
                        // and also does not work with top, bottom or height styles.
                        // Opacity can be transitioned and is probably the simplest alternative.
                        // We must condition on osk._Visible in case focus has since been moved to another
                        // input (in which case osk._Visible will be non-zero)
                        _this._animatedHideTimeout = window.setTimeout(cleanup, 200); // Wait a bit before starting, to allow for moving to another element
                    });
                };
                /**
                 * Used to synchronously hide the OSK, cancelling any async hide animations that have
                 * not started and immediately completing the hide of any hide ops pending completion
                 * of their animation.
                 */
                OSKView.prototype.hideNow = function () {
                    if (!this.mayHide(false) || !this._Box) {
                        return;
                    }
                    // Two possible uses for _animatedHideResolver:
                    // - _animatedHideTimeout is set:   animation is waiting to start
                    // - _animatedHideTimeout is null:  animation has already started.
                    // Was an animated hide waiting to start?  Just cancel it.
                    if (this._animatedHideTimeout) {
                        window.clearTimeout(this._animatedHideTimeout);
                        this._animatedHideTimeout = 0;
                    }
                    // Was an animated hide already in progress?  If so, just trigger it early.
                    var os = this._Box.style;
                    os.transition = '';
                    os.opacity = '0';
                    this.finalizeHide();
                };
                OSKView.prototype['shutdown'] = function () {
                    // Disable the OSK's event handlers.
                    this.removeBaseMouseEventListeners();
                    this.removeBaseTouchEventListeners();
                    // Remove the OSK's elements from the document, allowing them to be properly cleaned up.
                    // Necessary for clean engine testing.
                    var _box = this._Box;
                    if (_box.parentElement) {
                        _box.parentElement.removeChild(_box);
                    }
                };
                /**
                 * Function     getRect
                 * Scope        Public
                 * @return      {Object.<string,number>}   Array object with position and size of OSK container
                 * Description  Get rectangle containing KMW Virtual Keyboard
                 */
                OSKView.prototype['getRect'] = function () {
                    var p = {};
                    // Always return these based upon _Box; using this.vkbd will fail to account for banner and/or
                    // the desktop OSK border.
                    p['left'] = p.left = keyman_22.dom.Utils.getAbsoluteX(this._Box);
                    p['top'] = p.top = keyman_22.dom.Utils.getAbsoluteY(this._Box);
                    p['width'] = this.computedWidth;
                    p['height'] = this.computedHeight;
                    return p;
                };
                /* ---- Legacy interfacing methods and fields ----
                 *
                 * The endgoal is to eliminate the need for these entirely, but extra work and care
                 * will be necessary to achieve said endgoal for these methods.
                 *
                 * The simplest way forward is to maintain them, then resolve them independently,
                 * one at a time.
                 */
                /**
                 * Display build number
                 *
                 * In the future, this should raise an event that the consuming KeymanWeb
                 * engine may listen for & respond to, rather than having it integrated
                 * as part of the OSK itself.
                 */
                OSKView.prototype.showBuild = function () {
                    var keymanweb = com.keyman.singleton;
                    keymanweb.util.internalAlert('KeymanWeb Version ' + keymanweb['version'] + '.' + keymanweb['build'] + '<br /><br />'
                        + '<span style="font-size:0.8em">Copyright &copy; 2021 SIL International</span>');
                };
                /**
                 * Display list of installed keyboards in pop-up menu
                 *
                 * In the future, this language menu should be defined as a UI module like the standard
                 * desktop UI modules.  The globe key should then trigger an event to _request_ that the
                 * consuming engine display the active UI module's menu.
                 *
                 **/
                OSKView.prototype.showLanguageMenu = function () {
                    if (this.hostDevice.touchable) {
                        var menu = new osk.LanguageMenu(com.keyman.singleton);
                        menu.show();
                    }
                };
                /**
                 * Function     enabled
                 * Scope        Public
                 * @return      {boolean|number}    True if KMW OSK enabled
                 * Description  Test if KMW OSK is enabled
                 */
                OSKView.prototype['isEnabled'] = function () {
                    return this.displayIfActive;
                };
                /**
                 * Function     isVisible
                 * Scope        Public
                 * @return      {boolean|number}    True if KMW OSK visible
                 * Description  Test if KMW OSK is actually visible
                 * Note that this will usually return false after any UI event that results in (temporary) loss of input focus
                 */
                OSKView.prototype['isVisible'] = function () {
                    return this._Visible;
                };
                /**
                 * Function     hide
                 * Scope        Public
                 * Description  Prevent display of OSK window on focus
                 */
                OSKView.prototype['hide'] = function () {
                    this.displayIfActive = false;
                    this.startHide(true);
                };
                /**
                 * Description  Display KMW OSK (at position set in callback to UI)
                 * Function     show
                 * Scope        Public
                 * @param       {(boolean|number)=}      bShow     True to display, False to hide, omitted to toggle
                 */
                OSKView.prototype['show'] = function (bShow) {
                    if (arguments.length > 0) {
                        this.displayIfActive = bShow;
                    }
                    else {
                        if (this.activationConditionsMet) {
                            this.displayIfActive = !this.displayIfActive;
                        }
                    }
                };
                /**
                 * Allow UI to respond to OSK being shown (passing position and properties)
                 *
                 * @param       {Object=}       p     object with coordinates and userdefined flag
                 * @return      {boolean}
                 *
                 */
                OSKView.prototype.doShow = function (p) {
                    return com.keyman.singleton.util.callEvent('osk.show', p);
                };
                /**
                 * Allow UI to update respond to OSK being hidden
                 *
                 * @param       {Object=}       p     object with coordinates and userdefined flag
                 * @return      {boolean}
                 *
                 */
                OSKView.prototype.doHide = function (p) {
                    return com.keyman.singleton.util.callEvent('osk.hide', p);
                };
                /**
                 * Function     addEventListener
                 * Scope        Public
                 * @param       {string}            event     event name
                 * @param       {function(Object)}  func      event handler
                 * @return      {boolean}
                 * Description  Wrapper function to add and identify OSK-specific event handlers
                 */
                OSKView.prototype['addEventListener'] = function (event, func) {
                    return com.keyman.singleton.util.addEventListener('osk.' + event, func);
                };
                return OSKView;
            }());
            osk.OSKView = OSKView;
        })(osk = keyman_22.osk || (keyman_22.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes KMW-added property declaration extensions for HTML elements.
/// <reference path="../kmwexthtml.ts" />
// Includes the touch-mode language picker UI.
/// <reference path="languageMenu.ts" />
/// <reference path="lengthStyle.ts" />
// Defines desktop-centric OSK positioning + sizing behavior
/// <reference path="layouts/targetedFloatLayout.ts" />
/// <reference path="oskView.ts" />
/***
   KeymanWeb 10.0
   Copyright 2017 SIL International
***/
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var AnchoredOSKView = /** @class */ (function (_super) {
                __extends(AnchoredOSKView, _super);
                function AnchoredOSKView(modeledDevice) {
                    var _this = _super.call(this, modeledDevice) || this;
                    // Key code definition aliases for legacy keyboards  (They expect window['keyman']['osk'].___)
                    _this.modifierCodes = keyman.text.Codes.modifierCodes;
                    _this.modifierBitmasks = keyman.text.Codes.modifierBitmasks;
                    _this.stateBitmasks = keyman.text.Codes.stateBitmasks;
                    _this.keyCodes = keyman.text.Codes.keyCodes;
                    /**
                     * Function     restorePosition
                     * Scope        Public
                     * @param       {boolean?}      keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.
                     *                                                   If false or omitted, resets the default x,y as well.
                     * Description  Move OSK back to default position, floating under active input element
                     */
                    _this['restorePosition'] = function (keepDefaultPosition) {
                        return;
                    }.bind(_this);
                    /**
                     * Function     _VKbdMouseOver
                     * Scope        Private
                     * @param       {Object}      e      event
                     * Description  Activate the KMW UI on mouse over
                     */
                    _this._VKbdMouseOver = function (e) {
                        com.keyman.singleton.uiManager.setActivatingUI(true);
                    }.bind(_this);
                    /**
                     * Function     _VKbdMouseOut
                     * Scope        Private
                     * @param       {Object}      e      event
                     * Description  Cancel activation of KMW UI on mouse out
                     */
                    _this._VKbdMouseOut = function (e) {
                        com.keyman.singleton.uiManager.setActivatingUI(false);
                    }.bind(_this);
                    document.body.appendChild(_this._Box);
                    var keymanweb = com.keyman.singleton;
                    if (keymanweb.isEmbedded) {
                        _this.activationMode == osk.ActivationMode.manual;
                    }
                    return _this;
                }
                /**
                 * Function     _Unload
                 * Scope        Private
                 * Description  Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)
                 */
                AnchoredOSKView.prototype._Unload = function () {
                    this.keyboardView = null;
                    this.bannerView = null;
                    this._Box = null;
                };
                AnchoredOSKView.prototype.setBoxStyling = function () {
                    var s = this._Box.style;
                    s.zIndex = '9999';
                    s.display = 'none';
                    s.width = '100%';
                    s.position = 'fixed';
                };
                AnchoredOSKView.prototype.postKeyboardLoad = function () {
                    // Initializes the size of a touch keyboard.
                    if (this.vkbd && this.device.touchable) {
                        var targetOSKHeight = this.vkbd.computedAdjustedOskHeight(this.getDefaultKeyboardHeight());
                        this.setSize(this.getDefaultWidth(), targetOSKHeight + this.banner.height);
                    }
                    this._Visible = false; // I3363 (Build 301)
                    this._Box.onmouseover = this._VKbdMouseOver;
                    this._Box.onmouseout = this._VKbdMouseOut;
                    if (this.displayIfActive) {
                        this.present();
                    }
                };
                /**
                 * Get the wanted height of the OSK for touch devices (does not include banner height)
                 *  @return   {number}    height in pixels
                 **/
                AnchoredOSKView.prototype.getDefaultKeyboardHeight = function () {
                    var keymanweb = com.keyman.singleton;
                    var device = keymanweb.util.device;
                    // KeymanTouch - get OSK height from device
                    if (typeof (keymanweb['getOskHeight']) == 'function') {
                        return keymanweb['getOskHeight']();
                    }
                    var oskHeightLandscapeView = Math.floor(Math.min(screen.availHeight, screen.availWidth) / 2), height = oskHeightLandscapeView;
                    if (device.formFactor == 'phone') {
                        var sx = Math.min(screen.height, screen.width), sy = Math.max(screen.height, screen.width);
                        if (keymanweb.util.portraitView())
                            height = Math.floor(Math.max(screen.availHeight, screen.availWidth) / 3);
                        else
                            height = height * (sy / sx) / 1.6; //adjust for aspect ratio, increase slightly for iPhone 5
                    }
                    // Correct for viewport scaling (iOS - Android 4.2 does not want this, at least on Galaxy Tab 3))
                    if (device.OS == 'iOS') {
                        height = height / keymanweb.util.getViewportScale();
                    }
                    return height;
                };
                /**
                 * Get the wanted width of the OSK for touch devices
                 *
                 *  @return   {number}    height in pixels
                 **/
                AnchoredOSKView.prototype.getDefaultWidth = function () {
                    var keymanweb = com.keyman.singleton;
                    var device = keymanweb.util.device;
                    // KeymanTouch - get OSK height from device
                    if (typeof (keymanweb['getOskWidth']) == 'function') {
                        return keymanweb['getOskWidth']();
                    }
                    var width;
                    if (device.OS == 'iOS') {
                        // iOS does not interchange these values when the orientation changes!
                        //width = util.portraitView() ? screen.width : screen.height;
                        width = window.innerWidth;
                    }
                    else if (device.OS == 'Android') {
                        try {
                            width = document.documentElement.clientWidth;
                        }
                        catch (ex) {
                            width = screen.availWidth;
                        }
                    }
                    else {
                        width = screen.width;
                    }
                    return width;
                };
                /**
                 * Allow the UI or page to set the position and size of the OSK
                 * and (optionally) override user repositioning or sizing
                 *
                 * @param       {Object.<string,number>}   p  Array object with position and size of OSK container
                **/
                AnchoredOSKView.prototype['setRect'] = function (p) {
                    return;
                };
                /**
                 * Get position of OSK window
                 *
                 * @return      {Object.<string,number>}     Array object with OSK window position
                **/
                AnchoredOSKView.prototype.getPos = function () {
                    var Lkbd = this._Box, p = {
                        left: this._Visible ? Lkbd.offsetLeft : this.x,
                        top: this._Visible ? Lkbd.offsetTop : this.y
                    };
                    return p;
                };
                /**
                 * Function     setPos
                 * Scope        Private
                 * @param       {Object.<string,number>}    p     Array object with OSK left, top
                 * Description  Set position of OSK window, but limit to screen, and ignore if  a touch input device
                 */
                AnchoredOSKView.prototype['setPos'] = function (p) {
                    return; // I3363 (Build 301)
                };
                AnchoredOSKView.prototype.setDisplayPositioning = function () {
                    var Ls = this._Box.style;
                    // The following code will always be executed except for externally created OSK such as EuroLatin
                    if (this.vkbd) {
                        Ls.position = 'fixed';
                        Ls.left = Ls.bottom = '0px';
                        Ls.border = 'none';
                        Ls.borderTop = '1px solid gray';
                    }
                };
                /**
                 * Allow UI to respond to OSK being shown (passing position and properties)
                 *
                 * @param       {Object=}       p     object with coordinates and userdefined flag
                 * @return      {boolean}
                 *
                 */
                AnchoredOSKView.prototype.doShow = function (p) {
                    return com.keyman.singleton.util.callEvent('osk.show', p);
                };
                /**
                 * Allow UI to update respond to OSK being hidden
                 *
                 * @param       {Object=}       p     object with coordinates and userdefined flag
                 * @return      {boolean}
                 *
                 */
                AnchoredOSKView.prototype.doHide = function (p) {
                    return com.keyman.singleton.util.callEvent('osk.hide', p);
                };
                return AnchoredOSKView;
            }(osk.OSKView));
            osk.AnchoredOSKView = AnchoredOSKView;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes KMW-added property declaration extensions for HTML elements.
/// <reference path="../kmwexthtml.ts" />
// Includes the touch-mode language picker UI.
/// <reference path="languageMenu.ts" />
/// <reference path="lengthStyle.ts" />
// Defines desktop-centric OSK positioning + sizing behavior
/// <reference path="layouts/targetedFloatLayout.ts" />
/// <reference path="oskView.ts" />
/***
   KeymanWeb 10.0
   Copyright 2017 SIL International
***/
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            var FloatingOSKView = /** @class */ (function (_super) {
                __extends(FloatingOSKView, _super);
                function FloatingOSKView(modeledDevice) {
                    var _this = _super.call(this, modeledDevice) || this;
                    // OSK positioning fields
                    _this.userPositioned = false;
                    _this.specifiedPosition = false;
                    _this.noDrag = false;
                    // Key code definition aliases for legacy keyboards  (They expect window['keyman']['osk'].___)
                    _this.modifierCodes = keyman.text.Codes.modifierCodes;
                    _this.modifierBitmasks = keyman.text.Codes.modifierBitmasks;
                    _this.stateBitmasks = keyman.text.Codes.stateBitmasks;
                    _this.keyCodes = keyman.text.Codes.keyCodes;
                    /**
                     * Function     restorePosition
                     * Scope        Public
                     * @param       {boolean?}      keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.
                     *                                                   If false or omitted, resets the default x,y as well.
                     * Description  Move OSK back to default position, floating under active input element
                     */
                    _this['restorePosition'] = function (keepDefaultPosition) {
                        var _a;
                        var isVisible = this._Visible;
                        if (isVisible && this.activeTarget instanceof keyman.dom.targets.OutputTarget) {
                            (_a = this.activeTarget) === null || _a === void 0 ? void 0 : _a.focus(); // I2036 - OSK does not unpin to correct location
                        }
                        this.loadCookie();
                        this.userPositioned = false;
                        if (!keepDefaultPosition) {
                            delete this.dfltX;
                            delete this.dfltY;
                        }
                        this.saveCookie();
                        if (isVisible) {
                            this.present();
                        }
                        this.doResizeMove(); //allow the UI to respond to OSK movements
                        this.desktopLayout.titleBar.showPin(false);
                    }.bind(_this);
                    /**
                     * Function     _VKbdMouseOver
                     * Scope        Private
                     * @param       {Object}      e      event
                     * Description  Activate the KMW UI on mouse over
                     */
                    _this._VKbdMouseOver = function (e) {
                        com.keyman.singleton.uiManager.setActivatingUI(true);
                    }.bind(_this);
                    /**
                     * Function     _VKbdMouseOut
                     * Scope        Private
                     * @param       {Object}      e      event
                     * Description  Cancel activation of KMW UI on mouse out
                     */
                    _this._VKbdMouseOut = function (e) {
                        com.keyman.singleton.uiManager.setActivatingUI(false);
                    }.bind(_this);
                    document.body.appendChild(_this._Box);
                    _this.loadCookie();
                    // Add header element to OSK only for desktop browsers
                    var layout = _this.desktopLayout = new osk.layouts.TargetedFloatLayout();
                    _this.headerView = layout.titleBar;
                    layout.titleBar.attachHandlers(_this);
                    return _this;
                }
                /**
                 * Function     _Unload
                 * Scope        Private
                 * Description  Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)
                 */
                FloatingOSKView.prototype._Unload = function () {
                    this.keyboardView = null;
                    this.bannerView = null;
                    this._Box = null;
                };
                FloatingOSKView.prototype.setBoxStyling = function () {
                    var s = this._Box.style;
                    s.zIndex = '9999';
                    s.display = 'none';
                    s.width = 'auto';
                    s.position = 'absolute';
                };
                FloatingOSKView.prototype.postKeyboardLoad = function () {
                    this._Visible = false; // I3363 (Build 301)
                    this._Box.onmouseover = this._VKbdMouseOver;
                    this._Box.onmouseout = this._VKbdMouseOut;
                    // Add header element to OSK only for desktop browsers
                    var layout = this.desktopLayout;
                    layout.attachToView(this);
                    this.desktopLayout.titleBar.setTitleFromKeyboard(this.activeKeyboard);
                    if (this.vkbd) {
                        this.footerView = layout.resizeBar;
                        this._Box.appendChild(this.footerView.element);
                    }
                    else {
                        if (this.footerView) {
                            this._Box.removeChild(this.footerView.element);
                        }
                        this.footerView = null;
                    }
                    this.loadCookie();
                    this.setNeedsLayout();
                    if (this.displayIfActive) {
                        this.present();
                    }
                };
                /**
                 * Function     enabled
                 * Scope        Public
                 * @return      {boolean|number}    True if KMW OSK enabled
                 * Description  Test if KMW OSK is enabled
                 */
                FloatingOSKView.prototype['isEnabled'] = function () {
                    return this.displayIfActive;
                };
                /**
                 * Function     isVisible
                 * Scope        Public
                 * @return      {boolean|number}    True if KMW OSK visible
                 * Description  Test if KMW OSK is actually visible
                 * Note that this will usually return false after any UI event that results in (temporary) loss of input focus
                 */
                FloatingOSKView.prototype['isVisible'] = function () {
                    return this._Visible;
                };
                /**
                 * Save size, position, font size and visibility of OSK
                 */
                FloatingOSKView.prototype.saveCookie = function () {
                    var util = com.keyman.singleton.util;
                    var c = util.loadCookie('KeymanWeb_OnScreenKeyboard');
                    var p = this.getPos();
                    c['visible'] = this.displayIfActive ? 1 : 0;
                    c['userSet'] = this.userPositioned ? 1 : 0;
                    c['left'] = p.left;
                    c['top'] = p.top;
                    c['_version'] = keyman.utils.Version.CURRENT.toString();
                    if (this.vkbd) {
                        c['width'] = this.width.val;
                        c['height'] = this.height.val;
                    }
                    util.saveCookie('KeymanWeb_OnScreenKeyboard', c);
                };
                /**
                 * Restore size, position, font size and visibility of desktop OSK
                 *
                 *  @return {boolean}
                 */
                FloatingOSKView.prototype.loadCookie = function () {
                    var util = com.keyman.singleton.util;
                    var c = util.loadCookie('KeymanWeb_OnScreenKeyboard');
                    this.displayIfActive = util.toNumber(c['visible'], 1) == 1;
                    this.userPositioned = util.toNumber(c['userSet'], 0) == 1;
                    this.x = util.toNumber(c['left'], -1);
                    this.y = util.toNumber(c['top'], -1);
                    var cookieVersionString = c['_version'];
                    // Restore OSK size - font size now fixed in relation to OSK height, unless overridden (in em) by keyboard
                    var dfltWidth = 0.3 * screen.width;
                    var dfltHeight = 0.15 * screen.height;
                    //if(util.toNumber(c['width'],0) == 0) dfltWidth=0.5*screen.width;
                    var newWidth = parseInt(c['width'], 10);
                    var newHeight = parseInt(c['height'], 10);
                    var isNewCookie = isNaN(newHeight);
                    newWidth = isNaN(newWidth) ? dfltWidth : newWidth;
                    newHeight = isNaN(newHeight) ? dfltHeight : newHeight;
                    // Limit the OSK dimensions to reasonable values
                    if (newWidth < 0.2 * screen.width) {
                        newWidth = 0.2 * screen.width;
                    }
                    if (newHeight < 0.1 * screen.height) {
                        newHeight = 0.1 * screen.height;
                    }
                    if (newWidth > 0.9 * screen.width) {
                        newWidth = 0.9 * screen.width;
                    }
                    if (newHeight > 0.5 * screen.height) {
                        newHeight = 0.5 * screen.height;
                    }
                    // if(!cookieVersionString) - this component was not tracked until 15.0.
                    // Before that point, the OSK's title bar and resize bar heights were not included
                    // in the OSK's cookie-persisted height.
                    if (isNewCookie || !cookieVersionString) {
                        // Adds some space to account for the OSK's header and footer, should they exist.
                        if (this.headerView && this.headerView.layoutHeight.absolute) {
                            newHeight += this.headerView.layoutHeight.val;
                        }
                        if (this.footerView && this.footerView.layoutHeight.absolute) {
                            newHeight += this.footerView.layoutHeight.val;
                        }
                    }
                    this.setSize(newWidth, newHeight);
                    // and OSK position if user located
                    if (this.x == -1 || this.y == -1 || (!this._Box)) {
                        this.userPositioned = false;
                    }
                    if (this.x < window.pageXOffset - 0.8 * newWidth) {
                        this.x = window.pageXOffset - 0.8 * newWidth;
                    }
                    if (this.y < 0) {
                        this.x = -1;
                        this.y = -1;
                        this.userPositioned = false;
                    }
                    if (this.userPositioned && this._Box) {
                        this.setPos({ 'left': this.x, 'top': this.y });
                    }
                };
                /**
                 * Get the wanted height of the OSK for touch devices (does not include banner height)
                 *  @return   {number}    height in pixels
                 **/
                FloatingOSKView.prototype.getDefaultKeyboardHeight = function () {
                    var keymanweb = com.keyman.singleton;
                    var device = keymanweb.util.device;
                    // KeymanTouch - get OSK height from device
                    if (typeof (keymanweb['getOskHeight']) == 'function') {
                        return keymanweb['getOskHeight']();
                    }
                    var oskHeightLandscapeView = Math.floor(Math.min(screen.availHeight, screen.availWidth) / 2), height = oskHeightLandscapeView;
                    if (device.formFactor == 'phone') {
                        var sx = Math.min(screen.height, screen.width), sy = Math.max(screen.height, screen.width);
                        if (keymanweb.util.portraitView())
                            height = Math.floor(Math.max(screen.availHeight, screen.availWidth) / 3);
                        else
                            height = height * (sy / sx) / 1.6; //adjust for aspect ratio, increase slightly for iPhone 5
                    }
                    // Correct for viewport scaling (iOS - Android 4.2 does not want this, at least on Galaxy Tab 3))
                    if (device.OS == 'iOS') {
                        height = height / keymanweb.util.getViewportScale();
                    }
                    return height;
                };
                /**
                 * Get the wanted width of the OSK for touch devices
                 *
                 *  @return   {number}    height in pixels
                 **/
                FloatingOSKView.prototype.getDefaultWidth = function () {
                    var keymanweb = com.keyman.singleton;
                    var device = keymanweb.util.device;
                    // KeymanTouch - get OSK height from device
                    if (typeof (keymanweb['getOskWidth']) == 'function') {
                        return keymanweb['getOskWidth']();
                    }
                    var width;
                    if (device.OS == 'iOS') {
                        // iOS does not interchange these values when the orientation changes!
                        //width = util.portraitView() ? screen.width : screen.height;
                        width = window.innerWidth;
                    }
                    else if (device.OS == 'Android') {
                        try {
                            width = document.documentElement.clientWidth;
                        }
                        catch (ex) {
                            width = screen.availWidth;
                        }
                    }
                    else {
                        width = screen.width;
                    }
                    return width;
                };
                /**
                 * Allow UI to update OSK position and properties
                 *
                 * @param       {Object=}     p       object with coordinates and userdefined flag
                 *
                 */
                FloatingOSKView.prototype.doResizeMove = function (p) {
                    return com.keyman.singleton.util.callEvent('osk.resizemove', p);
                };
                /**
                 * Allow the UI or page to set the position and size of the OSK
                 * and (optionally) override user repositioning or sizing
                 *
                 * @param       {Object.<string,number>}   p  Array object with position and size of OSK container
                **/
                FloatingOSKView.prototype['setRect'] = function (p) {
                    var util = com.keyman.singleton.util;
                    if (this._Box == null || util.device.formFactor != 'desktop') {
                        return;
                    }
                    var b = this._Box, bs = b.style;
                    if ('left' in p) {
                        this.x = p['left'] - keyman.dom.Utils.getAbsoluteX(b) + b.offsetLeft;
                        bs.left = this.x + 'px';
                        this.dfltX = bs.left;
                    }
                    if ('top' in p) {
                        this.y = p['top'] - keyman.dom.Utils.getAbsoluteY(b) + b.offsetTop;
                        bs.top = this.y + 'px';
                        this.dfltY = bs.top;
                    }
                    //Do not allow user resizing for non-standard keyboards (e.g. EuroLatin)
                    if (this.vkbd != null) {
                        var d = this.vkbd.kbdDiv, ds = d.style;
                        // Set width, but limit to reasonable value
                        if ('width' in p) {
                            var w = (p['width'] - (b.offsetWidth - d.offsetWidth));
                            if (w < 0.2 * screen.width) {
                                w = 0.2 * screen.width;
                            }
                            if (w > 0.9 * screen.width) {
                                w = 0.9 * screen.width;
                            }
                            ds.width = w + 'px';
                            // Use of the `computed` variant is here temporary.
                            // Shouldn't use `setSize` for this in the long-term.
                            this.setSize(w, this.computedHeight, true);
                        }
                        // Set height, but limit to reasonable value
                        // This sets the default font size for the OSK in px, but that
                        // can be modified at the key text level by setting
                        // the font size in em in the kmw-key-text class
                        if ('height' in p) {
                            var h = (p['height'] - (b.offsetHeight - d.offsetHeight));
                            if (h < 0.1 * screen.height) {
                                h = 0.1 * screen.height;
                            }
                            if (h > 0.5 * screen.height) {
                                h = 0.5 * screen.height;
                            }
                            ds.height = h + 'px';
                            ds.fontSize = (h / 8) + 'px';
                            // Use of the `computed` variant is here temporary.
                            // Shouldn't use `setSize` for this in the long-term.
                            this.setSize(this.computedWidth, h, true);
                        }
                        // Fix or release user resizing
                        if ('nosize' in p) {
                            this.desktopLayout.resizingEnabled = !p['nosize'];
                        }
                    }
                    // Fix or release user dragging
                    if ('nomove' in p) {
                        this.noDrag = p['nomove'];
                        this.desktopLayout.movementEnabled = !this.noDrag;
                    }
                    // Save the user-defined OSK size
                    this.saveCookie();
                };
                /**
                 * Get position of OSK window
                 *
                 * @return      {Object.<string,number>}     Array object with OSK window position
                **/
                FloatingOSKView.prototype.getPos = function () {
                    var Lkbd = this._Box, p = {
                        left: this._Visible ? Lkbd.offsetLeft : this.x,
                        top: this._Visible ? Lkbd.offsetTop : this.y
                    };
                    return p;
                };
                /**
                 * Function     setPos
                 * Scope        Private
                 * @param       {Object.<string,number>}    p     Array object with OSK left, top
                 * Description  Set position of OSK window, but limit to screen, and ignore if  a touch input device
                 */
                FloatingOSKView.prototype['setPos'] = function (p) {
                    if (typeof (this._Box) == 'undefined') {
                        return; // I3363 (Build 301)
                    }
                    if (this.userPositioned) {
                        var Px = p['left'], Py = p['top'];
                        if (typeof (Px) != 'undefined') {
                            if (Px < -0.8 * this._Box.offsetWidth) {
                                Px = -0.8 * this._Box.offsetWidth;
                            }
                            if (this.userPositioned) {
                                this._Box.style.left = Px + 'px';
                                this.x = Px;
                            }
                        }
                        // May not be needed - vertical positioning is handled differently and defaults to input field if off screen
                        if (typeof (Py) != 'undefined') {
                            if (Py < 0) {
                                Py = 0;
                            }
                            if (this.userPositioned) {
                                this._Box.style.top = Py + 'px';
                                this.y = Py;
                            }
                        }
                    }
                    if (this.desktopLayout) {
                        this.desktopLayout.titleBar.showPin(this.userPositioned);
                    }
                };
                FloatingOSKView.prototype.setDisplayPositioning = function () {
                    var _a;
                    var Ls = this._Box.style;
                    Ls.position = 'absolute';
                    Ls.display = 'block'; //Ls.visibility='visible';
                    Ls.left = '0px';
                    if (this.specifiedPosition || this.userPositioned) {
                        Ls.left = this.x + 'px';
                        Ls.top = this.y + 'px';
                    }
                    else {
                        var el = null;
                        if (this.activeTarget instanceof keyman.dom.targets.OutputTarget) {
                            el = (_a = this.activeTarget) === null || _a === void 0 ? void 0 : _a.getElement();
                        }
                        if (this.dfltX) {
                            Ls.left = this.dfltX;
                        }
                        else if (typeof el != 'undefined' && el != null) {
                            Ls.left = keyman.dom.Utils.getAbsoluteX(el) + 'px';
                        }
                        if (this.dfltY) {
                            Ls.top = this.dfltY;
                        }
                        else if (typeof el != 'undefined' && el != null) {
                            Ls.top = (keyman.dom.Utils.getAbsoluteY(el) + el.offsetHeight) + 'px';
                        }
                    }
                    // Unset the flag, keeping 'specified position' specific to single
                    // presentAtPosition calls.
                    this.specifiedPosition = false;
                };
                /**
                 * Display KMW OSK at specified position (returns nothing)
                 *
                 * @param       {number=}     Px      x-coordinate for OSK rectangle
                 * @param       {number=}     Py      y-coordinate for OSK rectangle
                 */
                FloatingOSKView.prototype.presentAtPosition = function (Px, Py) {
                    if (!this.mayShow()) {
                        return;
                    }
                    this.specifiedPosition = Px >= 0 || Py >= 0; //probably never happens, legacy support only
                    if (this.specifiedPosition) {
                        this.x = Px;
                        this.y = Py;
                    }
                    // Combines the two paths with set positioning.
                    this.specifiedPosition = this.specifiedPosition || this.userPositioned;
                    this.present();
                };
                FloatingOSKView.prototype.present = function () {
                    if (!this.mayShow()) {
                        return;
                    }
                    this.desktopLayout.titleBar.showPin(this.userPositioned);
                    _super.prototype.present.call(this);
                    // Allow desktop UI to execute code when showing the OSK
                    var Lpos = {};
                    Lpos['x'] = this._Box.offsetLeft;
                    Lpos['y'] = this._Box.offsetTop;
                    Lpos['userLocated'] = this.userPositioned;
                    this.doShow(Lpos);
                };
                FloatingOSKView.prototype.startHide = function (hiddenByUser) {
                    _super.prototype.startHide.call(this, hiddenByUser);
                    if (hiddenByUser) {
                        this.saveCookie(); // Save current OSK state, size and position (desktop only)
                    }
                };
                /**
                 * Function     userPositioned
                 * Scope        Public
                 * @return      {(boolean|number)}          true if user located
                 * Description  Test if OSK window has been repositioned by user
                 */
                FloatingOSKView.prototype['userLocated'] = function () {
                    return this.userPositioned;
                };
                return FloatingOSKView;
            }(osk.OSKView));
            osk.FloatingOSKView = FloatingOSKView;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes KMW-added property declaration extensions for HTML elements.
/// <reference path="../kmwexthtml.ts" />
// Includes the touch-mode language picker UI.
/// <reference path="languageMenu.ts" />
/// <reference path="lengthStyle.ts" />
// Defines desktop-centric OSK positioning + sizing behavior
/// <reference path="layouts/targetedFloatLayout.ts" />
/// <reference path="oskView.ts" />
/*
 * Keyman is copyright (c) SIL International.  MIT License.
 */
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var osk;
        (function (osk) {
            /**
             * Defines a version of the OSK that produces an element designed for site-controlled
             * insertion into the DOM.  Rather than "floating" over the page, this version is inlined
             * as part of the host page's layout.
             */
            var InlinedOSKView = /** @class */ (function (_super) {
                __extends(InlinedOSKView, _super);
                function InlinedOSKView(modeledDevice, hostDevice) {
                    var _this = _super.call(this, modeledDevice, hostDevice) || this;
                    // Key code definition aliases for legacy keyboards  (They expect window['keyman']['osk'].___)
                    _this.modifierCodes = keyman.text.Codes.modifierCodes;
                    _this.modifierBitmasks = keyman.text.Codes.modifierBitmasks;
                    _this.stateBitmasks = keyman.text.Codes.stateBitmasks;
                    _this.keyCodes = keyman.text.Codes.keyCodes;
                    /**
                     * Moves the OSK back to default position, floating under active input element
                     *
                     * Is a long-published API intended solely for use with the FloatingOSKView use pattern.
                     * @param  keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.
                     *                              If false or omitted, resets the default x,y as well.
                     */
                    _this['restorePosition'] = function (keepDefaultPosition) {
                        return;
                    }.bind(_this);
                    /**
                     * Activates the KMW UI on mouse over, allowing DOMManager to preserve the
                     * active element's (conceptual) focus during OSK interactions.
                     */
                    _this._VKbdMouseOver = function (e) {
                        com.keyman.singleton.uiManager.setActivatingUI(true);
                    }.bind(_this);
                    /**
                     * Cancels activation of the KMW UI on mouse out, which is used to disable
                     * DOMManager's focus-preservation mode.
                     *
                     * @see _VKbdMouseOver
                     */
                    _this._VKbdMouseOut = function (e) {
                        com.keyman.singleton.uiManager.setActivatingUI(false);
                    }.bind(_this);
                    _this.activationMode = osk.ActivationMode.manual;
                    return _this;
                }
                Object.defineProperty(InlinedOSKView.prototype, "element", {
                    get: function () {
                        return this._Box;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)
                 *
                 * This should probably be merged or incorporated into the `shutdown` method at some point.
                 */
                InlinedOSKView.prototype._Unload = function () {
                    this.keyboardView = null;
                    this.bannerView = null;
                    this._Box = null;
                };
                InlinedOSKView.prototype.setBoxStyling = function () {
                    var s = this._Box.style;
                    s.display = 'none';
                    // Positioned with no relative offset from its default position.
                    // This allows _Box to still serve as an offsetParent for keytip & subkey menu positioning.
                    s.position = 'relative';
                };
                InlinedOSKView.prototype.postKeyboardLoad = function () {
                    this._Visible = false; // I3363 (Build 301)
                    this._Box.onmouseover = this._VKbdMouseOver;
                    this._Box.onmouseout = this._VKbdMouseOut;
                    if (this.displayIfActive) {
                        this.present();
                    }
                };
                /**
                 * Get the default height for the OSK
                 * @return  height in pixels
                 **/
                InlinedOSKView.prototype.getDefaultKeyboardHeight = function () {
                    if (this.keyboardView instanceof osk.VisualKeyboard) {
                        return this.keyboardView.height;
                    }
                    else {
                        // Should probably refine, but it's a decent stopgap.
                        return this.computedHeight;
                    }
                };
                /**
                 * Get the default width for the OSK
                 * @return width in pixels
                 **/
                InlinedOSKView.prototype.getDefaultWidth = function () {
                    return this.computedWidth;
                };
                /**
                 * Allow the UI or page to set the position and size of the OSK
                 * and (optionally) override user repositioning or sizing
                 *
                 * Designed solely for use with the FloatingOSKView use pattern, but is a
                 * long-standing API endpoint that needs preservation.
                 *
                 * @param  p  Array object with position and size of OSK container
                **/
                InlinedOSKView.prototype['setRect'] = function (p) {
                    return;
                };
                /**
                 * Get position of OSK window
                 *
                 * @return Array object with OSK window position
                **/
                InlinedOSKView.prototype.getPos = function () {
                    var Lkbd = this._Box, p = {
                        left: this._Visible ? Lkbd.offsetLeft : undefined,
                        top: this._Visible ? Lkbd.offsetTop : undefined
                    };
                    return p;
                };
                /**
                 * Set position of OSK window, but limited to the screen.
                 *
                 * Designed solely for use with the FloatingOSKView use pattern, but is a
                 * long-standing API endpoint that needs preservation.
                 * @param  p Array object with OSK left, top
                 */
                InlinedOSKView.prototype['setPos'] = function (p) {
                    return; // I3363 (Build 301)
                };
                InlinedOSKView.prototype.setDisplayPositioning = function () {
                    // no-op; an inlined OSK cannot control its own positioning.
                };
                /**
                 * Allow UI to respond to OSK being shown (passing position and properties)
                 *
                 * @param  p  object with coordinates and userdefined flag
                 * @return
                 *
                 */
                InlinedOSKView.prototype.doShow = function (p) {
                    return com.keyman.singleton.util.callEvent('osk.show', p);
                };
                /**
                 * Allows UI modules to update state when the OSK is being hidden
                 *
                 * @param  p  object with coordinates and userdefined flag
                 * @return
                 */
                InlinedOSKView.prototype.doHide = function (p) {
                    return com.keyman.singleton.util.callEvent('osk.hide', p);
                };
                InlinedOSKView.prototype.allowsDeviceChange = function (newSpec) {
                    return true;
                };
                return InlinedOSKView;
            }(osk.OSKView));
            osk.InlinedOSKView = InlinedOSKView;
        })(osk = keyman.osk || (keyman.osk = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Defines the KeyboardManager and its related types.
///<reference path="../../keyboards/kmwkeyboards.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_23) {
        var text;
        (function (text) {
            var prediction;
            (function (prediction) {
                var ModelManager = /** @class */ (function () {
                    function ModelManager() {
                        // Tracks registered models by ID.
                        this.registeredModels = {};
                        // Allows for easy model lookup by language code; useful when switching keyboards.
                        this.languageModelMap = {};
                    }
                    ModelManager.prototype.init = function () {
                        var keyman = com.keyman.singleton;
                        // Registers this module for keyboard (language) and model change events.
                        keyman['addEventListener']('keyboardchange', this.onKeyboardChange.bind(this));
                    };
                    ModelManager.prototype.onKeyboardChange = function (kbdInfo) {
                        var _a;
                        var keyman = com.keyman.singleton;
                        var core = keyman.core;
                        if (typeof kbdInfo == 'string') { // This case refers to the active language code.
                            kbdInfo = (_a = {},
                                _a['internalName'] = keyman.keyboardManager.getActiveKeyboardName(),
                                _a['languageCode'] = kbdInfo,
                                _a['indirect'] = true,
                                _a);
                        }
                        var lgCode = kbdInfo['languageCode'];
                        var model = this.languageModelMap[lgCode];
                        var loadPromise;
                        if (core.activeModel) {
                            core.languageProcessor.unloadModel();
                        }
                        if (model) {
                            loadPromise = core.languageProcessor.loadModel(model);
                        }
                    };
                    // Accessible publicly as keyman.modelManager.register(model: ModelSpec)
                    ModelManager.prototype.register = function (model) {
                        var keyman = com.keyman.singleton;
                        var activeLanguage = keyman.keyboardManager.getActiveLanguage();
                        if (JSON.stringify(model) == JSON.stringify(this.registeredModels[model.id])) {
                            // We are already registered, let's not go through and re-register
                            // because we'll already have the correct model active
                            return;
                        }
                        this.registeredModels[model.id] = model;
                        // Register the model for each targeted language code variant.
                        var mm = this;
                        model.languages.forEach(function (code) {
                            mm.languageModelMap[code] = model;
                            // The model's for our active language!  Activate it!
                            if (code == activeLanguage) {
                                // Manually trigger our model-update event function.
                                mm.onKeyboardChange(code);
                            }
                        });
                    };
                    ModelManager.prototype.deregister = function (modelId) {
                        var keyman = com.keyman.singleton;
                        var core = keyman.core;
                        var model;
                        // Remove the model from the id-lookup associative array.
                        if (this.registeredModels[modelId]) {
                            model = this.registeredModels[modelId];
                            delete this.registeredModels[modelId];
                        }
                        else {
                            return;
                        }
                        // Is it the active model?
                        if (core.activeModel && core.activeModel.id == modelId) {
                            core.languageProcessor.unloadModel();
                        }
                        // Ensure the model is deregistered for each targeted language code variant.
                        var mm = this;
                        model.languages.forEach(function (code) {
                            if (mm.languageModelMap[code].id == modelId) {
                                delete mm.languageModelMap[code];
                            }
                        });
                    };
                    ModelManager.prototype.isRegistered = function (model) {
                        return !!this.registeredModels[model.id];
                    };
                    return ModelManager;
                }());
                prediction.ModelManager = ModelManager;
            })(prediction = text.prediction || (text.prediction = {}));
        })(text = keyman_23.text || (keyman_23.text = {}));
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Includes KMW-added property declaration extensions for HTML elements.
/// <reference path="kmwexthtml.ts" />
// Includes a promise polyfill (needed for IE)
/// <reference path="../node_modules/es6-shim/es6-shim.min.js" />
// Defines the web-page interface object.
/// <reference path="singleton.ts" />
// Defines the core text processor.
/// <reference path="../node_modules/@keymanapp/input-processor/src/text/inputProcessor.ts" />
// Extends KeyboardInterface with DOM-oriented offerings.
/// <reference path="text/domKbdInterface.ts" />
// Defines the web-page interface object.
/// <reference path="dom/domManager.ts" />
// Includes KMW-added property declaration extensions for HTML elements.
/// <reference path="kmwutils.ts" />
// Defines keyboard management classes.
/// <reference path="keyboards/kmwkeyboards.ts" />
// Defines KMW's hotkey management object.
/// <reference path="kmwhotkeys.ts" />
// Defines the ui management code that tracks UI activation and such.
/// <reference path="kmwuimanager.ts" />
// Defines OSK management code.
/// <reference path="osk/anchoredOskView.ts" />
/// <reference path="osk/floatingOskView.ts" />
/// <reference path="osk/inlinedOskView.ts" />
// Defines the model manager.
/// <reference path="text/prediction/modelManager.ts" />
/***
   KeymanWeb 14.0
   Copyright 2017-2021 SIL International
***/
var com;
(function (com) {
    var keyman;
    (function (keyman) {
        var SpacebarText;
        (function (SpacebarText) {
            SpacebarText["KEYBOARD"] = "keyboard";
            SpacebarText["LANGUAGE"] = "language";
            SpacebarText["LANGUAGE_KEYBOARD"] = "languageKeyboard";
            SpacebarText["BLANK"] = "blank";
        })(SpacebarText = keyman.SpacebarText || (keyman.SpacebarText = {}));
        ;
        var KeymanBase = /** @class */ (function () {
            // -------------
            function KeymanBase() {
                this._IE = 0; // browser version identification
                this._MasterDocument = null; // Document with controller (to allow iframes to distinguish local/master control)
                this._HotKeys = []; // Array of document-level hotkey objects
                this.warned = false; // Warning flag (to prevent multiple warnings)
                this.baseFont = 'sans-serif'; // Default font for mapped input elements
                this.appliedFont = ''; // Chain of fonts to be applied to mapped input elements
                this.fontCheckTimer = null; // Timer for testing loading of embedded fonts
                this.srcPath = ''; // Path to folder containing executing keymanweb script
                this.rootPath = ''; // Path to server root
                this.protocol = ''; // Protocol used for the KMW script.
                this.mustReloadKeyboard = false; // Force keyboard refreshing even if already loaded
                this.globalKeyboard = null; // Indicates the currently-active keyboard for controls without independent keyboard settings.
                this.globalLanguageCode = null; // Indicates the language code corresponding to `globalKeyboard`.
                this.isEmbedded = false; // Indicates if the KeymanWeb instance is embedded within a mobile app.
                // Blocks full page initialization when set to `true`.
                this.refocusTimer = 0; // Tracks a timeout event that aids of OSK modifier/state key tracking when the document loses focus.
                this.isHeadless = false; // Indicates that KMW lacks any access to the DOM.  Nothing yet implemented for '= true'.
                this['build'] = 300; // TS needs this to be defined within the class.
                // Defines default option values
                this.options = {
                    root: '',
                    resources: '',
                    keyboards: '',
                    fonts: '',
                    attachType: '',
                    ui: null,
                    setActiveOnRegister: 'true',
                    spacebarText: SpacebarText.LANGUAGE_KEYBOARD,
                    // Determines whether or not KeymanWeb should display its own alert messages
                    useAlerts: true
                };
                this.refreshElementContent = null;
                // Allow internal minification of the public modules.
                this.util = this['util'] = new keyman.Util(this);
                this.ui = this['ui'] = {};
                this.keyboardManager = new keyman.keyboards.KeyboardManager(this);
                this.domManager = new keyman.dom.DOMManager(this);
                this.hotkeyManager = new keyman.HotkeyManager(this);
                this.uiManager = new keyman.UIManager(this);
                // I732 START - Support for European underlying keyboards #1
                var baseLayout;
                if (typeof (window['KeymanWeb_BaseLayout']) !== 'undefined') {
                    baseLayout = window['KeymanWeb_BaseLayout'];
                }
                else {
                    baseLayout = 'us';
                }
                this._BrowserIsSafari = (navigator.userAgent.indexOf('AppleWebKit') >= 0); // I732 END - Support for European underlying keyboards #1
                this.core = new keyman.text.InputProcessor({
                    baseLayout: baseLayout,
                    variableStoreSerializer: new keyman.dom.VariableStoreCookieSerializer()
                });
                // Used by the embedded apps.
                this['interface'] = this.core.keyboardInterface;
                this.modelManager = new keyman.text.prediction.ModelManager();
                this.osk = this['osk'] = null;
                // Load properties from their static variants.
                this['build'] = com.keyman.environment.BUILD;
                this.srcPath = KeymanBase._srcPath;
                this.rootPath = KeymanBase._rootPath;
                this.protocol = KeymanBase._protocol;
                this['version'] = com.keyman.environment.VERSION;
                this['helpURL'] = 'http://help.keyman.com/go';
                this.setInitialized(0);
                // Signals that a KMW load has occurred in order to prevent double-loading.
                this['loaded'] = true;
            }
            // Stub functions (defined later in code only if required)
            KeymanBase.prototype.setDefaultDeviceOptions = function (opt) { };
            KeymanBase.prototype.getStyleSheetPath = function (s) { return s; };
            KeymanBase.prototype.getKeyboardPath = function (f, p) { return f; };
            KeymanBase.prototype.KC_ = function (n, ln, Pelem) { return ''; };
            KeymanBase.prototype.handleRotationEvents = function () { };
            // Will serve as an API function for a workaround, in case of future touch-alignment issues.
            KeymanBase.prototype['alignInputs'] = function (eleList) { };
            KeymanBase.prototype.hideInputs = function () { };
            ;
            KeymanBase.prototype.namespaceID = function (Pstub) { };
            ;
            KeymanBase.prototype.preserveID = function (Pk) { };
            ;
            KeymanBase.prototype.setInitialized = function (val) {
                this.initialized = this['initialized'] = val;
            };
            KeymanBase.prototype.delayedInit = function () {
                // Track the selected Event-handling object.
                this.touchAliasing = this.util.device.touchable ? this.domManager.touchHandlers : this.domManager.nonTouchHandlers;
            };
            /**
             * Triggers a KeymanWeb engine shutdown to facilitate a full system reset.
             * This function is designed for use with KMW unit-testing, which reloads KMW
             * multiple times to test the different initialization paths.
             */
            KeymanBase.prototype['shutdown'] = function () {
                // Disable page focus/blur events, which can sometimes trigger and cause parallel KMW instances in testing.
                this.util.detachDOMEvent(window, 'focus', this['pageFocusHandler'], false);
                this.util.detachDOMEvent(window, 'blur', this['pageFocusHandler'], false);
                this.domManager.shutdown();
                this.osk.shutdown();
                this.util.shutdown();
                this.keyboardManager.shutdown();
                this.core.languageProcessor.shutdown();
                if (this.ui && this.ui.shutdown) {
                    this.ui.shutdown();
                }
                keyman.dom.DOMEventHandlers.states = new keyman.dom.CommonDOMStates();
            };
            /**
             * Returns a generalized metadata object about the state of KMW for use with error reporting.
             */
            KeymanBase.prototype['getDebugInfo'] = function () {
                var metadata = {
                    attachType: this.options.attachType,
                    device: this.util.device,
                    initialized: this.initialized,
                    isEmbedded: this.isEmbedded,
                    ui: this.ui ? this.ui.name : null
                };
                if (this.util.device.touchable) {
                    metadata.ui = 'touch';
                }
                return metadata;
            };
            /**
             * Expose font testing to allow checking that SpecialOSK or custom font has
             * been correctly loaded by browser
             *
             *  @param  {string}  fName   font-family name
             *  @return {boolean}         true if available
             **/
            KeymanBase.prototype['isFontAvailable'] = function (fName) {
                return this.util.checkFont({ 'family': fName });
            };
            /**
             * Function     addEventListener
             * Scope        Public
             * @param       {string}            event     event to handle
             * @param       {function(Event)}   func      event handler function
             * @return      {boolean}                     value returned by util.addEventListener
             * Description  Wrapper function to add and identify KeymanWeb-specific event handlers
             */
            KeymanBase.prototype['addEventListener'] = function (event, func) {
                return this.util.addEventListener('kmw.' + event, func);
            };
            /**
           * Function     _GetEventObject
           * Scope        Private
           * @param       {Event=}     e     Event object if passed by browser
           * @return      {Event|null}       Event object
           * Description Gets the event object from the window when using Internet Explorer
           *             and handles getting the event correctly in frames
           */
            KeymanBase.prototype._GetEventObject = function (e) {
                if (!e) {
                    e = window.event;
                    if (!e) {
                        var elem = this.domManager.lastActiveElement;
                        if (elem) {
                            var doc = elem.ownerDocument;
                            var win;
                            if (doc) {
                                win = doc.defaultView;
                            }
                            if (!win) {
                                return null;
                            }
                            e = win.event;
                        }
                    }
                }
                return e;
            };
            /**
             * Function     _push
             * Scope        Private
             * @param       {Array}     Parray    Array
             * @param       {*}         Pval      Value to be pushed or appended to array
             * @return      {Array}               Returns extended array
             * Description  Push (if possible) or append a value to an array
             */
            KeymanBase.prototype._push = function (Parray, Pval) {
                if (Parray.push) {
                    Parray.push(Pval);
                }
                else {
                    Parray = Parray.concat(Pval);
                }
                return Parray;
            };
            // Base object API definitions
            /**
             * Function     attachToControl
             * Scope        Public
             * @param       {Element}    Pelem       Element to which KMW will be attached
             * Description  Attaches KMW to control (or IFrame)
             */
            KeymanBase.prototype['attachToControl'] = function (Pelem) {
                this.domManager.attachToControl(Pelem);
            };
            /**
             * Function     detachFromControl
             * Scope        Public
             * @param       {Element}    Pelem       Element from which KMW will detach
             * Description  Detaches KMW from a control (or IFrame)
             */
            KeymanBase.prototype['detachFromControl'] = function (Pelem) {
                this.domManager.detachFromControl(Pelem);
            };
            /**
             * Exposed function to load keyboards by name. One or more arguments may be used
             *
             * @param {any[]} args keyboard name string or keyboard metadata JSON object
             * @returns {Promise<(KeyboardStub|ErrorStub)[]>} Promise of added keyboard/error stubs
             *
             */
            KeymanBase.prototype['addKeyboards'] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (!args || !args[0] || args[0].length == 0) {
                    // Get the cloud keyboard catalog
                    return this.keyboardManager.keymanCloudRequest('', false).catch(function (error) {
                        console.error(error);
                        return Promise.reject([{ error: error }]);
                    });
                }
                else {
                    var x_1 = [];
                    if (Array.isArray(args[0])) {
                        args[0].forEach(function (a) {
                            return x_1.push(a);
                        });
                    }
                    else if (Array.isArray(args)) {
                        args.forEach(function (a) {
                            return x_1.push(a);
                        });
                    }
                    else {
                        x_1.push(args);
                    }
                    return this.keyboardManager.addKeyboardArray(x_1);
                }
            };
            /**
             *  Add default keyboards for given language(s)
             *
             *  @param  {string|string[]}   arg    Language name (multiple arguments allowed)
             *  @returns {Promise<(KeyboardStub|ErrorStub)[]>} Promise of added keyboard/error stubs
             **/
            KeymanBase.prototype['addKeyboardsForLanguage'] = function (arg) {
                if (typeof arg === 'string') {
                    return this.keyboardManager.addLanguageKeyboards(arg.split(',').map(function (item) { return item.trim(); }));
                }
                else {
                    return this.keyboardManager.addLanguageKeyboards(arg);
                }
            };
            /**
             * Call back from cloud for adding keyboard metadata
             *
             * @param {Object}    x   metadata object
             **/
            KeymanBase.prototype['register'] = function (x) {
                this.keyboardManager.register(x);
            };
            /**
             * Build 362: removeKeyboards() remove keyboard from list of available keyboards
             *
             * @param {string}  x      keyboard name string
             * @param {boolean} force  When true, also drops the cached keyboard object
             *
             */
            KeymanBase.prototype['removeKeyboards'] = function (x, force) {
                return this.keyboardManager.removeKeyboards(x);
            };
            /**
             * Allow to change active keyboard by (internal) keyboard name
             *
             * @param       {string}    PInternalName   Internal name
             * @param       {string}    PLgCode         Language code
             */
            KeymanBase.prototype['setActiveKeyboard'] = function (PInternalName, PLgCode) {
                return this.keyboardManager.setActiveKeyboard(PInternalName, PLgCode);
            };
            /**
             * Function     getActiveKeyboard
             * Scope        Public
             * @return      {string}      Name of active keyboard
             * Description  Return internal name of currently active keyboard
             */
            KeymanBase.prototype['getActiveKeyboard'] = function () {
                return this.keyboardManager.getActiveKeyboardName();
            };
            /**
             * Function    getActiveLanguage
             * Scope       Public
             * @param      {boolean=}        true to retrieve full language name, false/undefined to retrieve code.
             * @return     {string}         language code
             * Description Return language code for currently selected language
             */
            KeymanBase.prototype['getActiveLanguage'] = function (fullName) {
                return this.keyboardManager.getActiveLanguage(fullName);
            };
            KeymanBase.prototype['isAttached'] = function (x) {
                return this.domManager.isAttached(x);
            };
            /**
             * Function    isCJK
             * Scope       Public
             * @param      {Object=}  k0
             * @return     {boolean}
             * Description Tests if active keyboard (or specified keyboard script object, as optional argument)
             *             uses a pick list (Chinese, Japanese, Korean, etc.)
             *             (This function accepts either keyboard structure.)
             */
            KeymanBase.prototype['isCJK'] = function (k0) {
                var kbd;
                if (k0) {
                    kbd = new keyman.keyboards.Keyboard(k0);
                }
                else {
                    kbd = this.core.activeKeyboard;
                }
                return kbd && kbd.isCJK;
            };
            /**
             * Function     isChiral
             * Scope        Public
             * @param       {string|Object=}   k0
             * @return      {boolean}
             * Description  Tests if the active keyboard (or optional argument) uses chiral modifiers.
             */
            KeymanBase.prototype['isChiral'] = function (k0) {
                var kbd;
                if (k0) {
                    kbd = new keyman.keyboards.Keyboard(k0);
                }
                else {
                    kbd = this.core.activeKeyboard;
                }
                return kbd.isChiral;
            };
            /**
             * Get keyboard meta data for the selected keyboard and language
             *
             * @param       {string}    PInternalName     Internal name of keyboard
             * @param       {string=}   PlgCode           language code
             * @return      {Object}                      Details of named keyboard
             *
             **/
            KeymanBase.prototype['getKeyboard'] = function (PInternalName, PlgCode) {
                var Ln, Lrn;
                var kbdList = this.keyboardManager.getDetailedKeyboards();
                for (Ln = 0; Ln < kbdList.length; Ln++) {
                    Lrn = kbdList[Ln];
                    if (Lrn['InternalName'] == PInternalName || Lrn['InternalName'] == "Keyboard_" + PInternalName) {
                        if (arguments.length < 2) {
                            return Lrn;
                        }
                        if (Lrn['LanguageCode'] == PlgCode) {
                            return Lrn;
                        }
                    }
                }
                return null;
            };
            /**
             * Get array of available keyboard stubs
             *
             * @return   {Array}     Array of available keyboards
             *
             */
            KeymanBase.prototype['getKeyboards'] = function () {
                return this.keyboardManager.getDetailedKeyboards();
            };
            /**
             * Gets the cookie for the name and language code of the most recently active keyboard
             *
             *  Defaults to US English, but this needs to be user-set in later revision (TODO)
             *
             * @return      {string}          InternalName:LanguageCode
             */
            KeymanBase.prototype['getSavedKeyboard'] = function () {
                return this.keyboardManager.getSavedKeyboard();
            };
            /**
             * Function     Initialization
             * Scope        Public
             * @param       {Object}  arg     object array of user-defined properties
             * Description  KMW window initialization
             */
            KeymanBase.prototype['init'] = function (arg) {
                return this.domManager.init(arg);
            };
            /**
             * Function     resetContext
             * Scope        Public
             * @param       {Object} e      The element whose context should be cleared.  If null, the currently-active element will be chosen.
             * Description  Reverts the OSK to the default layer, clears any processing caches and modifier states,
             *              and clears deadkeys and prediction-processing states on the active element (if it exists)
             */
            KeymanBase.prototype['resetContext'] = function (e) {
                var elem = e;
                if (!elem) {
                    elem = this.domManager.activeElement;
                }
                var outputTarget = keyman.dom.Utils.getOutputTarget(elem);
                if (outputTarget) {
                    outputTarget.resetContext();
                }
                this.core.resetContext(outputTarget);
            };
            ;
            /**
             * Function     setNumericLayer
             * Scope        Public
             * Description  Set OSK to numeric layer if it exists
             */
            KeymanBase.prototype['setNumericLayer'] = function () {
                this.core.keyboardProcessor.setNumericLayer(this.util.device.coreSpec);
            };
            ;
            /**
             * Function     disableControl
             * Scope        Public
             * @param       {Element}      Pelem       Element to be disabled
             * Description  Disables a KMW control element
             */
            KeymanBase.prototype['disableControl'] = function (Pelem) {
                this.domManager.disableControl(Pelem);
            };
            /**
             * Function     enableControl
             * Scope        Public
             * @param       {Element}      Pelem       Element to be disabled
             * Description  Disables a KMW control element
             */
            KeymanBase.prototype['enableControl'] = function (Pelem) {
                this.domManager.enableControl(Pelem);
            };
            /**
             * Function     setKeyboardForControl
             * Scope        Public
             * @param       {Element}    Pelem    Control element
             * @param       {string|null=}    Pkbd     Keyboard (Clears the set keyboard if set to null.)
             * @param       {string|null=}     Plc      Language Code
             * Description  Set default keyboard for the control
             */
            KeymanBase.prototype['setKeyboardForControl'] = function (Pelem, Pkbd, Plc) {
                this.domManager.setKeyboardForControl(Pelem, Pkbd, Plc);
            };
            /**
             * Function     getKeyboardForControl
             * Scope        Public
             * @param       {Element}    Pelem    Control element
             * @return      {string|null}         The independently-managed keyboard for the control.
             * Description  Returns the keyboard ID of the current independently-managed keyboard for this control.
             *              If it is currently following the global keyboard setting, returns null instead.
             */
            KeymanBase.prototype['getKeyboardForControl'] = function (Pelem) {
                this.domManager.getKeyboardForControl(Pelem);
            };
            /**
             * Function     getLanguageForControl
             * Scope        Public
             * @param       {Element}    Pelem    Control element
             * @return      {string|null}         The independently-managed keyboard for the control.
             * Description  Returns the language code used with the current independently-managed keyboard for this control.
             *              If it is currently following the global keyboard setting, returns null instead.
             */
            KeymanBase.prototype['getLanguageForControl'] = function (Pelem) {
                this.domManager.getLanguageForControl(Pelem);
            };
            /**
             * Set focus to last active target element (browser-dependent)
             */
            KeymanBase.prototype['focusLastActiveElement'] = function () {
                this.domManager.focusLastActiveElement();
            };
            /**
             * Get the last active target element *before* KMW activated (I1297)
             *
             * @return      {Object}
             */
            KeymanBase.prototype['getLastActiveElement'] = function () {
                return this.domManager.lastActiveElement;
            };
            /**
             *  Set the active input element directly optionally setting focus
             *
             *  @param  {Object|string} e         element id or element
             *  @param  {boolean=}      setFocus  optionally set focus  (KMEW-123)
             **/
            KeymanBase.prototype['setActiveElement'] = function (e, setFocus) {
                return this.domManager.setActiveElement(e, setFocus);
            };
            /**
             * Move focus to user-specified element
             *
             *  @param  {string|Object}   e   element or element id
             *
             **/
            KeymanBase.prototype['moveToElement'] = function (e) {
                this.domManager.moveToElement(e);
            };
            /**
             * Function     addHotkey
             * Scope        Public
             * @param       {number}            keyCode
             * @param       {number}            shiftState
             * @param       {function(Object)}  handler
             * Description  Add hot key handler to array of document-level hotkeys triggered by key up event
             */
            KeymanBase.prototype['addHotKey'] = function (keyCode, shiftState, handler) {
                this.hotkeyManager.addHotKey(keyCode, shiftState, handler);
            };
            /**
             * Function     removeHotkey
             * Scope        Public
             * @param       {number}        keyCode
             * @param       {number}        shiftState
             * Description  Remove a hot key handler from array of document-level hotkeys triggered by key up event
             */
            KeymanBase.prototype['removeHotKey'] = function (keyCode, shiftState) {
                this.hotkeyManager.removeHotkey(keyCode, shiftState);
            };
            /**
             * Function     getUIState
             * Scope        Public
             * @return      {Object.<string,(boolean|number)>}
             * Description  Return object with activation state of UI:
             *                activationPending (bool):   KMW being activated
             *                activated         (bool):   KMW active
             */
            KeymanBase.prototype['getUIState'] = function () {
                return this.uiManager.getUIState();
            };
            /**
             * Set or clear the IsActivatingKeymanWebUI flag (exposed function)
             *
             * @param       {(boolean|number)}  state  Activate (true,false)
             */
            KeymanBase.prototype['activatingUI'] = function (state) {
                this.uiManager.setActivatingUI(state);
            };
            /**
             * Create copy of the OSK that can be used for embedding in documentation or help
             * The currently active keyboard will be returned if PInternalName is null
             *
             *  @param  {string}          PInternalName   internal name of keyboard, with or without Keyboard_ prefix
             *  @param  {number}          Pstatic         static keyboard flag  (unselectable elements)
             *  @param  {string=}         argFormFactor   layout form factor, defaulting to 'desktop'
             *  @param  {(string|number)=}  argLayerId    name or index of layer to show, defaulting to 'default'
             *  @return {Object}                          DIV object with filled keyboard layer content
             */
            KeymanBase.prototype['BuildVisualKeyboard'] = function (PInternalName, Pstatic, argFormFactor, argLayerId) {
                var PKbd = null;
                if (PInternalName != null) {
                    var p = PInternalName.toLowerCase().replace('keyboard_', '');
                    var keyboardsList = this.keyboardManager.keyboards;
                    for (var Ln = 0; Ln < keyboardsList.length; Ln++) {
                        if (p == keyboardsList[Ln]['KI'].toLowerCase().replace('keyboard_', '')) {
                            // Requires the Keyboard wrapping object now.
                            PKbd = new com.keyman.keyboards.Keyboard(keyboardsList[Ln]);
                            break;
                        }
                    }
                }
                PKbd = PKbd || this.core.activeKeyboard;
                return com.keyman.osk.VisualKeyboard.buildDocumentationKeyboard(PKbd, argFormFactor, argLayerId, this.osk.computedHeight);
            };
            return KeymanBase;
        }());
        keyman.KeymanBase = KeymanBase;
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
/**
 * Determine path and protocol of executing script, setting them as
 * construction defaults.
 *
 * This can only be done during load when the active script will be the
 * last script loaded.  Otherwise the script must be identified by name.
*/
var scripts = document.getElementsByTagName('script');
var ss = scripts[scripts.length - 1].src;
var sPath = ss.substr(0, ss.lastIndexOf('/') + 1);
var KeymanBase = com.keyman.KeymanBase;
KeymanBase._srcPath = sPath;
KeymanBase._rootPath = sPath.replace(/(https?:\/\/)([^\/]*)(.*)/, '$1$2/');
KeymanBase._protocol = sPath.replace(/(.{3,5}:)(.*)/, '$1');
/**
 * Base code: Declare major component namespaces, instances, and utility functions
 */
// If a copy of the script is already loaded, detect this and prevent re-initialization / data reset.
if (!window['keyman'] || !window['keyman']['loaded']) {
    (function () {
        /* The base object call may need to be moved into a separate, later file eventually.
         * It will be necessary to override methods with kmwnative.ts and kmwembedded.ts before the
         * affected objects are initialized.
         *
         * We only recreate the 'keyman' object if it's not been loaded.
         * As this is the base object, not creating it prevents a KMW system reset.
         */
        window['keyman'] = com.keyman['singleton'] = com.keyman.singleton = new KeymanBase();
        // TODO:  Eliminate the need for this.  Will require more refactoring & redesign to drop.
        window['keyman'].core.languageProcessor.init();
    })();
}
// Includes KMW-added property declaration extensions for HTML elements.
/// <reference path="kmwexthtml.ts" />
// Includes type definitions for basic KMW types.
/// <reference path="kmwtypedefs.ts" />
/***
   KeymanWeb 11.0
   Copyright 2019 SIL International
***/
// If KMW is already initialized, the KMW script has been loaded more than once. We wish to prevent resetting the 
// KMW system, so we use the fact that 'initialized' is only 1 / true after all scripts are loaded for the initial
// load of KMW.
if (!window['keyman']['initialized']) {
    // Continued KeymanWeb initialization.
    (function () {
        // Declare KeymanWeb, OnScreen Keyboard and Util object variables
        var keymanweb = window['keyman'], util = keymanweb['util'];
        /**
         * Function     debug
         * Scope        Private
         * @param       {(string|Object)}     s   string (or object) to print
         * Description  Simple debug display (upper right of screen)
         *              Extended to support multiple arguments May 2015
         */
        keymanweb['debug'] = keymanweb.debug = function (s) {
            var p;
            if (keymanweb.debugElement == null) {
                var d = document.createElement('DIV'), ds = d.style;
                ds.position = 'absolute';
                ds.width = '30%';
                ds.maxHeight = '50%';
                ds.top = '0';
                ds.right = '0';
                ds.minHeight = '50px';
                ds.border = '1px solid blue';
                ds.whiteSpace = 'pre-line';
                ds.overflowY = 'scroll';
                p = document.createElement('P');
                p.id = 'debug_output';
                p.style.margin = '2px';
                d.appendChild(p);
                document.body.appendChild(d);
                keymanweb.debugElement = p;
            }
            if ((p = document.getElementById('debug_output')) == null)
                return;
            if (arguments.length == 0)
                if (typeof p.textContent != 'undefined')
                    p.textContent = '';
                else
                    p.innerHTML = '';
            else {
                var ts = new Date().toTimeString().substr(3, 5), t = ts + ' ', t1, k, m, sx;
                for (k = 0; k < arguments.length; k++) {
                    if (k > 0)
                        t = t + '; ';
                    sx = arguments[k];
                    if (typeof sx == 'object') {
                        if (sx == null) {
                            t = t + 'null';
                        }
                        else {
                            t1 = '';
                            for (m in sx) {
                                if (t1.length > 0)
                                    t1 = t1 + ', ';
                                t1 = t1 + m + ':';
                                switch (typeof sx[m]) {
                                    case 'string':
                                    case 'number':
                                    case 'boolean':
                                        t1 = t1 + sx[m];
                                        break;
                                    default:
                                        t1 = t1 + typeof sx[m];
                                        break;
                                }
                                if (t1.length > 1024) {
                                    t1 = t1.substr(0, 1000) + '...';
                                    break;
                                }
                            }
                            if (t1.length > 0)
                                t = t + '{' + t1 + '}';
                        }
                    }
                    else {
                        t = t + sx;
                    }
                }
                // Truncate if necessary to avoid memory problems
                if (t.length > 1500)
                    t = t.substr(0, 1500) + ' (more)';
                if (typeof p.textContent != 'undefined')
                    p.textContent = t + '\n' + p.textContent;
                else
                    p.innerHTML = t + '<br />' + p.innerHTML;
            }
        };
        /*
         * The following code existed here as part of the original pre-conversion JavaScript source, performing some inline initialization.
         * Ideally, this will be refactored once proper object-orientation of the codebase within TypeScript is complete.
         */
        keymanweb.debugElement = null;
        var dbg = keymanweb.debug;
        keymanweb.delayedInit();
        //TODO: find all references to next three routines and disambiguate!!
        // Complete page initialization only after the page is fully loaded, including any embedded fonts
        // This avoids the need to use a timer to test for the fonts
        util.attachDOMEvent(window, 'load', keymanweb.domManager._WindowLoad, false);
        util.attachDOMEvent(window, 'unload', keymanweb.domManager._WindowUnload, false); // added fourth argument (default value)       
        // *** I3319 Supplementary Plane modifications - end new code
        util.attachDOMEvent(document, 'keyup', keymanweb.hotkeyManager._Process, false);
        /**
         * Reset OSK shift states when entering or exiting the active element
         **/
        function resetVKShift() {
            var keyman = com.keyman.singleton;
            if (!keyman.uiManager.isActivating && keyman.osk.vkbd) {
                keyman.core.keyboardProcessor._UpdateVKShift(null, 15, 0); //this should be enabled !!!!! TODO
            }
        }
        // We need to track this handler, as it causes... interesting... interactions during testing in certain browsers.
        keymanweb['pageFocusHandler'] = resetVKShift;
        util.attachDOMEvent(window, 'focus', keymanweb['pageFocusHandler'], false); // I775
        util.attachDOMEvent(window, 'blur', keymanweb['pageFocusHandler'], false); // I775
        // Initialize supplementary plane string extensions
        String.kmwEnableSupplementaryPlane(true);
    })();
}
// References the base KMW object.
/// <reference path="kmwbase.ts" />
var com;
(function (com) {
    var keyman;
    (function (keyman_24) {
        var RotationState = /** @class */ (function () {
            function RotationState() {
                this.innerWidth = window.innerWidth;
                this.innerHeight = window.innerHeight;
            }
            RotationState.prototype.equals = function (other) {
                return this.innerWidth == other.innerWidth && this.innerHeight == other.innerHeight;
            };
            return RotationState;
        }());
        // Please reference /testing/rotation-events/index.html and update it as necessary when maintaining this class.
        var RotationManager = /** @class */ (function () {
            // --------------------
            function RotationManager(keyman) {
                // Tracks the number of idle 'update' iterations since the last permutation.
                this.idlePermutationCounter = RotationManager.IDLE_PERMUTATION_CAP;
                this.keyman = keyman;
            }
            RotationManager.prototype.resolve = function () {
                this.keyman.alignInputs();
                var osk = this.keyman.osk;
                // TODO:  Reattach later in the refactoring process!
                //osk.hideLanguageList();
                // Force a re-layout for the active keyboard's currently-utilized layout.
                if (this.keyman.core.activeKeyboard) {
                    this.keyman.core.activeKeyboard.refreshLayouts();
                }
                osk._Load();
                if (this.oskVisible) {
                    osk.refreshLayout();
                }
                this.isActive = false;
                // If we've been using an update interval loop, we should clear the state information.
                if (this.updateTimer) {
                    window.clearInterval(this.updateTimer);
                    this.rotState = null;
                }
            };
            // Used by both Android and iOS.
            RotationManager.prototype.initNewRotation = function () {
                this.oskVisible = this.keyman.osk.isVisible();
                this.keyman.osk.hideNow();
                this.isActive = true;
            };
            /**
             * Establishes rotation-oriented event handling for native-mode KeymanWeb.  At this time, tablet PCs are not directly supported.
             */
            RotationManager.prototype.init = function () {
                // If we're in embedded mode, we really should NOT run this method.
                if (this.keyman.isEmbedded) {
                    return;
                }
                // Note:  we use wrapper functions instead of `.bind(this)` in this method to facilitate stubbing for our rotation test page.
                var os = this.keyman.util.device.OS;
                var util = this.keyman.util;
                var rotationManager = this;
                if (os == 'iOS') {
                    /* iOS is rather inconsistent about these events, with changes to important window state information -
                     * especially to `window.innerWidth` - possible after the events trigger!  They don't always trigger
                     * the same amount or in a consistently predictable manner.
                     *
                     * The overall idea is to wait out all those changes so that we don't produce a bad keyboard layout.
                     */
                    util.attachDOMEvent(window, 'orientationchange', function () {
                        rotationManager.iOSEventHandler();
                        return false;
                    });
                    util.attachDOMEvent(window, 'resize', function () {
                        rotationManager.iOSEventHandler();
                        return false;
                    });
                }
                else if (os == 'Android') {
                    // Android's far more consistent with its event generation than iOS.
                    if ('onmozorientationchange' in screen) {
                        util.attachDOMEvent(screen, 'mozorientationchange', function () {
                            rotationManager.initNewRotation();
                            return false;
                        });
                    }
                    else {
                        util.attachDOMEvent(window, 'orientationchange', function () {
                            rotationManager.initNewRotation();
                            return false;
                        });
                    }
                    util.attachDOMEvent(window, 'resize', function () {
                        rotationManager.resolve();
                        return false;
                    });
                }
            };
            RotationManager.prototype.iOSEventHandler = function () {
                if (!this.isActive) {
                    this.initNewRotation();
                    this.rotState = new RotationState();
                    this.updateTimer = window.setInterval(this.iOSEventUpdate.bind(this), RotationManager.UPDATE_INTERVAL);
                }
                // If one of the rotation-oriented events just triggered, we should ALWAYS reset the counter.
                this.idlePermutationCounter = 0;
            };
            RotationManager.prototype.iOSEventUpdate = function () {
                var newState = new RotationState();
                if (this.rotState.equals(newState)) {
                    if (++this.idlePermutationCounter == RotationManager.IDLE_PERMUTATION_CAP) {
                        this.resolve();
                    }
                }
                else {
                    this.rotState = newState;
                    this.idlePermutationCounter = 0;
                }
            };
            // iOS-oriented members 
            // --------------------
            // We'll assume permutations are complete after this many 'update' iterations.
            RotationManager.IDLE_PERMUTATION_CAP = 15;
            RotationManager.UPDATE_INTERVAL = 20; // 20 ms, that is.
            return RotationManager;
        }());
        keyman_24.RotationManager = RotationManager;
    })(keyman = com.keyman || (com.keyman = {}));
})(com || (com = {}));
// Contains event management for mobile device rotation events.
/// <reference path="kmwrotation.ts" />
/***
   KeymanWeb 11.0
   Copyright 2019 SIL International
***/
// If KMW is already initialized, the KMW script has been loaded more than once. We wish to prevent resetting the 
// KMW system, so we use the fact that 'initialized' is only 1 / true after all scripts are loaded for the initial
// load of KMW.
if (!window['keyman']['initialized']) {
    /*****************************************/
    /*                                       */
    /*   On-Screen (Visual) Keyboard Code    */
    /*                                       */
    /*****************************************/
    (function () {
        // Declare KeymanWeb object
        var keymanweb = window['keyman'], osk = keymanweb['osk'], util = keymanweb['util'], device = util.device;
        var dbg = keymanweb.debug;
        var dom = com.keyman.dom;
        // Force full initialization
        keymanweb.isEmbedded = false;
        /**
         * Set default device options
         * @param {OptionType}  opt device options object
         */
        keymanweb.setDefaultDeviceOptions = function (opt) {
            // Element attachment type
            if (!opt['attachType']) {
                opt['attachType'] = (device.touchable ? 'manual' : 'auto');
            }
        };
        /**
           * Customized wait display
           *
           * @param   {string|boolean}   s       displayed text (or false)
           */
        util.wait = function (s) {
            // Keyboards loaded with page are initialized before the page is ready,
            // so cannot use the wait indicator (and don't need it, anyway)
            // Do not display if a blocking cloud server error has occurred (to prevent multiple errors)
            var bg = this.waiting;
            if (typeof (bg) == 'undefined' || bg == null || keymanweb.warned) {
                return;
            }
            var nn = bg.firstChild.childNodes;
            if (s) {
                bg.pending = true;
                window.setTimeout(function () {
                    if (bg.pending && keymanweb.options.useAlerts) {
                        window.scrollTo(0, 0);
                        nn[0].style.display = 'none';
                        nn[1].className = 'kmw-wait-text';
                        nn[1].innerHTML = s;
                        nn[2].style.display = 'block';
                        bg.style.display = 'block';
                    }
                }, 1000);
            }
            else {
                if (bg.pending) {
                    nn[1].innerHTML = '';
                    bg.pending = false;
                    bg.style.display = 'none';
                }
            }
        };
        // Get default style sheet path
        keymanweb.getStyleSheetPath = function (ssName) {
            var ssPath = util['getOption']('resources') + 'osk/' + ssName;
            return ssPath;
        };
        /**
         * Get keyboard path (relative or absolute)
         * KeymanWeb 2 revised keyboard location specification:
         *  (a) absolute URL (includes ':') - load from specified URL
         *  (b) relative URL (starts with /, ./, ../) - load with respect to current page
         *  (c) filename only (anything else) - prepend keyboards option to URL
         *      (e.g. default keyboards option will be set by Cloud)
         *
         * @param {string}  Lfilename  keyboard file name with optional prefix
         */
        keymanweb.getKeyboardPath = function (Lfilename) {
            var rx = RegExp('^(([\\.]/)|([\\.][\\.]/)|(/))|(:)');
            return (rx.test(Lfilename) ? '' : keymanweb.options['keyboards']) + Lfilename;
        };
        /**
         * Align input fields (should not be needed with KMEI, KMEA), making them visible if previously hidden.
         *
         *  @param  {object}   eleList    A list of specific elements to align.  If nil, selects all elements.
         *
         **/
        keymanweb.alignInputs = function (eleList) {
            if (device.touchable) {
                var domManager = keymanweb.domManager;
                var processList = [];
                if (eleList) {
                    // Did the user specify the actual element or the touch-alias?
                    eleList.forEach(function (element) {
                        if (element.base) {
                            // It's a touch-alias element, which is what we wish to perform alignment on.
                            processList.push(element);
                        }
                        else {
                            // This retrieves an element's touch-alias, should it exist.
                            var touchAlias = element['kmw_ip'];
                            if (touchAlias) {
                                processList.push(element['kmw_ip']);
                            }
                        }
                    });
                }
                else {
                    processList = domManager.inputList;
                }
                // Supported by IE 9 and all modern browsers.
                processList.forEach(function (element) {
                    if (dom.Utils.instanceof(element, "TouchAliasElement")) {
                        element.updateInput();
                    }
                    element.style.visibility = 'visible';
                    if (element.base.textContent.length > 0) {
                        element.base.style.visibility = 'hidden';
                    }
                });
            }
        };
        /**
         * Programatically hides all input fields with underlying elements.  Restore with .alignInputs.
         *
         *  @param  {boolean}   align    align and make visible, else hide
         *
         **/
        keymanweb.hideInputs = function () {
            var domManager = keymanweb.domManager;
            if (device.touchable) {
                for (var i = 0; i < domManager.inputList.length; i++) {
                    domManager.inputList[i].style.visibility = 'hidden';
                    domManager.inputList[i].base.style.visibility = 'visible';
                }
            }
        };
        /**
         * Test if caret position is determined from the active element, or
         * from the synthesized overlay element (touch devices)
         *
         * @return  {boolean}
         **/
        keymanweb.isPositionSynthesized = function () {
            return device.touchable;
        };
        /**
         * Use rotation events to adjust OSK and input element positions and scaling as necessary
         */
        keymanweb.handleRotationEvents = function () {
            var rotationManager = new com.keyman.RotationManager(keymanweb);
            rotationManager.init();
        };
        /**
         * Possible way to detect the start of a rotation and hide the OSK before it is adjusted in size
         *
         *  @param  {Object}    e   accelerometer rotation event
         *
        keymanweb.testRotation = function(e)
        {
          var r=e.rotationRate;
          if(typeof(r) != 'undefined')
          {
            dbg(r.alpha+' '+r.beta+' '+r.gamma);
          }
        }
        */
    })();
}
/***
   KeymanWeb 11.0
   Copyright 2019 SIL International
***/
/********************************************************/
/*                                                      */
/* Automatically initialize keymanweb with defaults     */
/* after the page is fully loaded                       */
/*                                                      */
/********************************************************/
(function () {
    // Declare KeymanWeb object
    var keymanweb = window['keyman'];
    // We don't want to instantly init() in case this code is used via bookmarklet.
    var readyStateCheckInterval = window.setInterval(function () {
        if (document.readyState === "complete") {
            window.clearInterval(readyStateCheckInterval);
            keymanweb.init(null);
        }
    }, 10);
})();
/// <reference path="kmwbase.ts" />
/// <reference path="kmwutils.ts" />
/**
 * This file generates aliases linking renamed functions to some of our published developer API for KMW.
 * This won't enable Closure to do "advanced minification", but it's useful for ensuring we don't break
 * things people depended on in legacy versions.
 */
// Util.ts
(function () {
    var prototype = com.keyman.Util.prototype;
    var publishAPI = function (legacyName, name) {
        prototype[legacyName] = prototype[name];
    };
    // These four were renamed, but we need to maintain their legacy names.
    publishAPI("_GetAbsoluteX", 'getAbsoluteX');
    publishAPI("_GetAbsoluteY", "getAbsoluteY");
    publishAPI("_GetAbsolute", "getAbsolute");
    publishAPI("toNzString", "nzString");
}());
(function () {
    // DOM-aware KeymanWeb overwrites some of the API functions, so we
    // re-publish the API so that the overwritten functions are accessible
    // via their short-form equivalents found in actual keyboard code.
    com.keyman.text.KeyboardInterface.__publishShorthandAPI();
}());
//# sourceMappingURL=keymanweb.js.map